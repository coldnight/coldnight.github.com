<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taking Smart Notes With Org-mode</title>
    <link>https://www.linuxzen.com/notes/</link>
    <description>Recent content on Taking Smart Notes With Org-mode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Aug 2021 08:27:00 +0800</lastBuildDate><atom:link href="https://www.linuxzen.com/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库</title>
      <link>https://www.linuxzen.com/notes/notes/20210805082720-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Thu, 05 Aug 2021 08:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805082720-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>数据库作为一个长期发展的技术，但是在中国相对处于一个起步阶段，相关人才比较少。近年能够看得到的技术：
 TiDB 分布式关系型数据库 TDengine 面向 IoT 的 OLAP 数据库  相关创业公司：
 神策 https://zhuanlan.zhihu.com/p/396433354  </description>
    </item>
    
    <item>
      <title>批处理系统</title>
      <link>https://www.linuxzen.com/notes/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 05 Aug 2021 07:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LeetCode: 37. Sudoku Solver</title>
      <link>https://www.linuxzen.com/notes/notes/20210805073600-leetcode_37_sudoku_solver/</link>
      <pubDate>Thu, 05 Aug 2021 07:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805073600-leetcode_37_sudoku_solver/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LeetCode: 36. Valid Sudoku</title>
      <link>https://www.linuxzen.com/notes/notes/20210805070351-leetcode_36_valid_sudoku/</link>
      <pubDate>Thu, 05 Aug 2021 07:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805070351-leetcode_36_valid_sudoku/</guid>
      <description>https://leetcode.com/problems/valid-sudoku/
&amp;lt;- high -- low -&amp;gt; +------------------- wow(row(i):0,col(j):0) 0 -&amp;gt; [ 0010, 0010 ] | 1 -&amp;gt; [ 0000, 0000 ] | 2 -&amp;gt; [ 0000, 0000 ] | | +--------------- wow(row(i):0,col(j):1) 0 -&amp;gt; [ 0010 | 1 = 0011, 0010 ] | | 1 -&amp;gt; [ 0000, 0000 | 1 = 0001 ] | | 2 -&amp;gt; [ 0000, 0000 ] | | | | +----------- wow(row(i):0,col(j):2) 0 -&amp;gt; [ 0011 | 3 = 0100, 0010 ] | | | 1 -&amp;gt; [ 0000, 0001 ] | | | 2 -&amp;gt; [ 0000, 0000 | 3 = 0100 ] +---+---+---+ | 2 | 1 | 3 | +---+---+---+ ----| 3 | 2 | 1 | | +---+---+---+ | | 1 | 3 | 2 | | +---+---+---+ |- wow(row(i):1,col(j):0) 0 -&amp;gt; [0010 | 3 = 0110, 0010] +---------------------+ 1 -&amp;gt; [0000, 0001 | 3 = 0101] 2 -&amp;gt; [0000, 0100] class Solution { public: bool isValidSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { vector&amp;lt;int&amp;gt; wow(9,0); int mux1; int mux2; int mux3; int box_index; for(int i=0;i&amp;lt;9;i++){ for(int j=0;j&amp;lt;9;j++){ if(board[i][j] == &amp;#39;.</description>
    </item>
    
    <item>
      <title>分布式共识</title>
      <link>https://www.linuxzen.com/notes/notes/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/</link>
      <pubDate>Wed, 04 Aug 2021 11:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/</guid>
      <description> Distributed consensus (blockchain) simulation and visualization 共识算法  </description>
    </item>
    
    <item>
      <title>区块链</title>
      <link>https://www.linuxzen.com/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
      <pubDate>Wed, 04 Aug 2021 11:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/</guid>
      <description>分布式共识 </description>
    </item>
    
    <item>
      <title>LeetCode: 40. Combination Sum II</title>
      <link>https://www.linuxzen.com/notes/notes/20210804071039-leetcode_40_combination_sum_ii/</link>
      <pubDate>Wed, 04 Aug 2021 07:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804071039-leetcode_40_combination_sum_ii/</guid>
      <description>https://leetcode.com/problems/combination-sum-ii/
LeetCode: 39. Combination Sum 的进阶。元素不在唯一且每一个元素只能出现一次。对结果进行排序然后通过 set 对结果进行去重：
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum2(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { sort(candidates.begin(), candidates.end()); backtracking(candidates, 0, 0, target); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; r; for (auto t : res) { r.push_back(t); } return r; } private: set&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; track; map&amp;lt;int, bool&amp;gt; visited; void backtracking(vector&amp;lt;int&amp;gt;&amp;amp; condidates, int start, int n, int target) { if (n == target) { res.insert(track); return; } if (n &amp;gt; target) { return; } int c = 0; int sz = condidates.</description>
    </item>
    
    <item>
      <title>LeetCode: 39. Combination Sum</title>
      <link>https://www.linuxzen.com/notes/notes/20210804064757-leetcode_39_combination_sum/</link>
      <pubDate>Wed, 04 Aug 2021 06:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804064757-leetcode_39_combination_sum/</guid>
      <description>https://leetcode.com/problems/combination-sum/
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { backtracking(candidates, 0, target); return res; } private: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; track; void backtracking(vector&amp;lt;int&amp;gt; &amp;amp; candidates, int n, int target) { if (n == target) { res.push_back(track); return; } // this is new  if (n &amp;gt; target) { return; } for (auto c : candidates) { track.push_back(c); backtracking(candidates, n + c, target); track.pop_back(); } } }; 问题：会有不同顺序但是元素相同的数组，如何快速高效的进行过滤？
- [[2,2,3],[2,3,2],[3,2,2],[7]] + [[2,2,3],[7]] 一个比较 tricky 的技巧，就是判断最终结果是不是升序的，不是就放弃，居然可以通过：</description>
    </item>
    
    <item>
      <title>LeetCode: 52. N-Queens II</title>
      <link>https://www.linuxzen.com/notes/notes/20210803074630-leetcode_52_n_queens_ii/</link>
      <pubDate>Tue, 03 Aug 2021 07:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210803074630-leetcode_52_n_queens_ii/</guid>
      <description>https://leetcode.com/problems/n-queens-ii/
参见：LeetCode: 51. N-Queens</description>
    </item>
    
    <item>
      <title>回溯算法</title>
      <link>https://www.linuxzen.com/notes/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 03 Aug 2021 06:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <description>相关 LeetCode：
 LeetCode: 46. Permutations LeetCode: 47. Permutations II LeetCode: 51. N-Queens LeetCode: 52. N-Queens II  </description>
    </item>
    
    <item>
      <title>工业云</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193422-%E5%B7%A5%E4%B8%9A%E4%BA%91/</link>
      <pubDate>Mon, 02 Aug 2021 19:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193422-%E5%B7%A5%E4%B8%9A%E4%BA%91/</guid>
      <description>创业公司有：积梦智能。</description>
    </item>
    
    <item>
      <title>云原生</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193059-%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193059-%E4%BA%91%E5%8E%9F%E7%94%9F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>云计算</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193038-%E4%BA%91%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193038-%E4%BA%91%E8%AE%A1%E7%AE%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>技术概念</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/</guid>
      <description>目前互联网领域里比较热门的概念和方向：
 云计算 边缘计算 云原生 工业云 区块链 数据库  </description>
    </item>
    
    <item>
      <title>概念</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193008-%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193008-%E6%A6%82%E5%BF%B5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>边缘计算</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193049-%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193049-%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LeetCode: 51. N-Queens</title>
      <link>https://www.linuxzen.com/notes/notes/20210802073234-leetcode_51_n_queues/</link>
      <pubDate>Mon, 02 Aug 2021 07:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802073234-leetcode_51_n_queues/</guid>
      <description>https://leetcode.com/problems/n-queens/
一旦一个 Queue 被放置，那么横轴、纵轴、对角线。我们按行进行便利，所以我们需要跟踪以下位置是否已经放置 Queue：
 纵轴（Column）：cols 主对角线（Positive Diagonal）：posDiag 次对角线（Negative Diagonal）：negDiag  纵轴很好记录，但是对角线比较困难，我们先来看一下对角线的特征，假设横轴为 r 纵轴为 c ，
r - c 在正对角线是一致的：
 斜对角线 r + c 是一致的:
 class Solution { public: vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; solveNQueens(int n) { for (int r = 0; r &amp;lt; n; r++) { string col = string(n, &amp;#39;.&amp;#39;); track.push_back(col); } backtracking(0, n); return res; } private: set&amp;lt;int&amp;gt; cols; // c  set&amp;lt;int&amp;gt; posDiag; // r - c  set&amp;lt;int&amp;gt; negDiag; // r + c  vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; res; vector&amp;lt;string&amp;gt; track; void backtracking(int r, int n) { if (r == n) { res.</description>
    </item>
    
    <item>
      <title>Multi-Paxios</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075851-multi_paxios/</link>
      <pubDate>Sat, 31 Jul 2021 07:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075851-multi_paxios/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Zab</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075206-zab/</link>
      <pubDate>Sat, 31 Jul 2021 07:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075206-zab/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Paxos</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075140-paxos/</link>
      <pubDate>Sat, 31 Jul 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075140-paxos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raft</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075154-raft/</link>
      <pubDate>Sat, 31 Jul 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075154-raft/</guid>
      <description> 可视化演示  </description>
    </item>
    
    <item>
      <title>VSR</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075128-vsr/</link>
      <pubDate>Sat, 31 Jul 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075128-vsr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>To Complete</title>
      <link>https://www.linuxzen.com/notes/notes/20210728071540-to_complete/</link>
      <pubDate>Wed, 28 Jul 2021 07:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210728071540-to_complete/</guid>
      <description> 链式复制 VSR Paxos Zab Multi-Paxios  </description>
    </item>
    
    <item>
      <title>链式复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210728071508-%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Wed, 28 Jul 2021 07:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210728071508-%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>比较-设置</title>
      <link>https://www.linuxzen.com/notes/notes/20210728070407-%E6%AF%94%E8%BE%83_%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Wed, 28 Jul 2021 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210728070407-%E6%AF%94%E8%BE%83_%E8%AE%BE%E7%BD%AE/</guid>
      <description>利用底层指令集实现比较设置等原子操作。
See also：https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2</description>
    </item>
    
    <item>
      <title>全序</title>
      <link>https://www.linuxzen.com/notes/notes/20210727073548-%E5%85%A8%E5%BA%8F/</link>
      <pubDate>Tue, 27 Jul 2021 07:35:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210727073548-%E5%85%A8%E5%BA%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>macOS 签名 GDB</title>
      <link>https://www.linuxzen.com/notes/notes/20210726181021-macos_%E7%AD%BE%E5%90%8D_gdb/</link>
      <pubDate>Mon, 26 Jul 2021 18:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210726181021-macos_%E7%AD%BE%E5%90%8D_gdb/</guid>
      <description>macOS 下通过 GDB 调试程序会出现：
Unable to find Mach task port for process-id 1375: (os/kern) failure (0x5). (please check gdb is codesigned - see taskgated(8))   需要通过 Keychain Access Application 创建证书： code-sign-cert
  需要对 gdb 进行签名，首先创建 gdb-entitlement.xml ：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;com.apple.security.cs.debugger&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;/dict&amp;gt;   运行签名
codesign --entitlements gdb-entitlement.xml -fs code-sign-cert $(which gdb)   See also: PermissionsDarwin。</description>
    </item>
    
    <item>
      <title>Understanding Rust futures by going way too deep</title>
      <link>https://www.linuxzen.com/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/</link>
      <pubDate>Mon, 26 Jul 2021 10:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/</guid>
      <description>原文链接：Understanding Rust futures by going way too deep。
译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。
深入理解 Rust future 用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。
起步  Choo choo here comes the easy part 🚂💨
 我们创建一个新的项目：
$ cargo new waytoodeep Created binary (application) `waytoodeep` package 我们需要安装 cargo-edit 如果之前没有安装过的话，接下来就可以直接 cargo add ：
$ cargo install cargo-edit Updating crates.io index Downloaded cargo-edit v0.7.0 Downloaded 1 crate (57.6 KB) in 0.47s Ignored package `cargo-edit v0.7.0` is already installed, use --force to override  因为 cargo-edit 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像 cargo new, cargo build, cargo test, cargo run 等子命令都内置在 cargo 中， 但是 cargo add 没有。</description>
    </item>
    
    <item>
      <title>偏序</title>
      <link>https://www.linuxzen.com/notes/notes/20210726080332-%E5%81%8F%E5%BA%8F/</link>
      <pubDate>Mon, 26 Jul 2021 08:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210726080332-%E5%81%8F%E5%BA%8F/</guid>
      <description>偏序集合（英语：Partiallyordered set，简写poset）是数学中，特别是序理论中，指配备了部分排序关系的集合。 这
See also: 偏序关系</description>
    </item>
    
    <item>
      <title>CAP 理论</title>
      <link>https://www.linuxzen.com/notes/notes/20210726072940-cap_%E7%90%86%E8%AE%BA/</link>
      <pubDate>Mon, 26 Jul 2021 07:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210726072940-cap_%E7%90%86%E8%AE%BA/</guid>
      <description>CAP 最初作为一个经验法则提出（20 世纪 70 年代），并没有准确的定义，目的也只是帮助大家深入探讨数据库设计的权衡之道。它由 Eric Brewer 于 2000 年正式命名。
解释一 CAP 定理：不要求线性化的应用更能容忍网络故障。
只要不可靠才诶黄哦，都会发生违背线性化的风险。我们可以做如下权衡：
 如果应用要求线性化，一旦发生网络分区，则必须等待网络修复，或者直接返回错误。结果为服务不可用（保证一致性或者线性化）。 如果应用不要求线性化，且每个可副本独立处理请求。此时服务可用，但结果行为不符合线性化（保证高可用）。  解释二 一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。系统只能支持两个特性。
 这里的分区指网络分区（即网络故障）。
 不过，这种理解存在误导性，网络分区是一种故障，不管喜欢还是不喜欢，它都可能发生，所以无法选择或逃避分区问题。
网络正常的时候，系统可以同时保证一致性（线性化）和可用性。而一旦发生了网络故障，必须要么选择线性（一致性），要么可用性。 也就是“网络分区的情况下”是选择一致还是可用。</description>
    </item>
    
    <item>
      <title>一致性与共识</title>
      <link>https://www.linuxzen.com/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/</link>
      <pubDate>Sun, 25 Jul 2021 07:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/</guid>
      <description>一致性保证 分布式一致性主要针对延迟和故障等问题来协调副本之间的状态。
 线性化：最强一致性模型 顺序保证：保证时间顺序，特别是因果关系和全局顺序 最终一致性：一种非常弱的保证，参见最终一致性效应  可线性化 分布式语义下对寄存器（单个对象）顺序的读写。应区别与可串行化。
 可串行化针对不同事务的隔离，用来确保事务执行的结果与串形执行的结果相同 可线性化是读写寄存器（单个对象）的最新值的保证。  线性化依赖的条件 加锁与主节点选举 每个启动节点都试图获得锁，其中只有一个可以成功成为主节点。通过加锁来保证主节点选举「线性化」。
约束与唯一性保证 同一个用户名、电子邮件或系统中文件名需要唯一性的保证，也应该进行「线性化」。
跨通道的时间依赖 系统中存在其他通信渠道也需要「线性化」。
实现线性化系统  主从复制（部分支持可线性化） 共识算法（可线性化） 多主复制（不可线性化） 无主复制（可能不可线性化）  线性化与Quorum 一致性 Dynamo 风格的复制模型，读写遵从严格的 quorum 是无法支持可线性化的。
线性化的代价 多主复制和主从复制，网络中断都会导致同步暂停，从而无法保证客户端要求的线性化读写。
CAP 理论 可线性化与网络延迟 很少有系统真正满足线性化，现代多个 CPU 对同一个内存地址的读写都不能满足（参见硬件内存模型），如果需要强一致则需要内存屏障（栅栏）指令。
之所以放弃线性化的原因就是性能，而不是为了容错。由于网络延迟的不确定性，无论是否发生网络故障，线性化对性能的影响都是巨大的。
顺序保证 顺序与因果关系 顺序有助于保持因果关系。
 因果顺序并非全序：因果关系是小范围集合的偏序，可线性化是一个全序操作。 可线性化强于因果一致性 捕获因果依赖关系：检测并发写  序列号排序 非因果序列发生器 适用于系统不存在唯一主节点。
 每个节点都独立产生自己的一组序列号：一个奇数一个偶数，或者切入节点唯一标识符。 用足够高的分辨率的墙上时间戳附加到每个操作上。 预先分配区间范围，并及时扩容。  Lamport 时间戳 可以产生因果关系一致的序列号。Lamport 时间戳是一个值对 （计数器，节点 ID） ：
 节点 ID：每个节点都有一个唯一标志符。 计数器：每个节点都有一个计数器记录各自处理的请求总数。  优点：</description>
    </item>
    
    <item>
      <title>拜占庭故障</title>
      <link>https://www.linuxzen.com/notes/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/</link>
      <pubDate>Thu, 22 Jul 2021 08:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/</guid>
      <description>节点撒谎伪造 Fencing 令牌，或者部分节点故障、不遵从协议、干扰网络或者恶意攻击，则为「拜占庭故障」。 如果系统仍可以继续运行，那么我们称之为「拜占庭式容错系统」。</description>
    </item>
    
    <item>
      <title>Fencing 令牌</title>
      <link>https://www.linuxzen.com/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/</link>
      <pubDate>Thu, 22 Jul 2021 07:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/</guid>
      <description>Fencing（围栏）锁，每次锁服务授予锁时，同时返回 fencing 令牌，每次客户端发送写请求，都必须包含所持有的 fencing 令牌。
fencing 令牌单调递增，如果低版本的写入后到达，发现已经有高版本的 fencing 令牌写入，则拒绝此次写入。</description>
    </item>
    
    <item>
      <title>单调时钟与墙上时钟</title>
      <link>https://www.linuxzen.com/notes/notes/20210722073012-%E5%8D%95%E8%B0%83%E6%97%B6%E9%92%9F%E4%B8%8E%E5%A2%99%E4%B8%8A%E6%97%B6%E9%92%9F/</link>
      <pubDate>Thu, 22 Jul 2021 07:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210722073012-%E5%8D%95%E8%B0%83%E6%97%B6%E9%92%9F%E4%B8%8E%E5%A2%99%E4%B8%8A%E6%97%B6%E9%92%9F/</guid>
      <description>墙上时钟 根据某个日历返回当前的日期与时间。
 Linux 上的 clock_gettime(CLOCK_REALTIME) Java 中的 System.currentTimeMills()  会返回 1970-01-01（UTC）的时间戳（秒和毫秒）。
墙上时钟会和 NTP 服务器同步产生跳跃导致一些奇怪的问题。
单调时钟 更适合测量持续时间段（时间间隔），如超时或服务的响应时间。保证总是向前（不会出现墙上时钟的回拨现象）。
 Linux 上的 clock_gettime(CLOCK_MONOTONIC) Java 中的 System.nanoTime()  单调时钟多个节点的对比没有任何意义，多路 CPU 可能有单独的计时器，且不与其他 CPU 进行同步。由操作系统进行补偿它们之间的偏差。
NTP 检测到本地石英比时间服务器更快或者更慢，NTP 会调整本地石英的震动频率（摆动），最大幅度为 0.05%。 NTP 并不会直接调整单调时钟向前或回拨 。</description>
    </item>
    
    <item>
      <title>LeetCode: 47. Permutations II</title>
      <link>https://www.linuxzen.com/notes/notes/20210721073657-leetcode_47_permutations_ii/</link>
      <pubDate>Wed, 21 Jul 2021 07:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210721073657-leetcode_47_permutations_ii/</guid>
      <description>视频解析：https://www.youtube.com/watch?v=s7AvT7cGdSo
在 LeetCode: 46. Permutations 的基础上增加重复的元素。感觉不能依赖于 track + map 的去重逻辑回溯。
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; } }; 数据特征：
Value: 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, Index: 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { set&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ret; int n, i; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; perms; if (nums.</description>
    </item>
    
    <item>
      <title>分布式系统挑战</title>
      <link>https://www.linuxzen.com/notes/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/</link>
      <pubDate>Wed, 21 Jul 2021 06:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/</guid>
      <description>故障与部分失效 单节点一般是要么工作要么失效，但是分布式系统多节点面临部分失效，大大提高了分布式系统的复杂性。
单节点软件特性：
 硬件正常工作时，相同的操作通常总会产生相同的结果，即确定性。 如果发生了某种内部错误，我们宁愿使计算机全部崩溃，而不是返回一个错误的结果。  云计算和超算  超算：垂直扩展的极端，设置检查点，一点节点故障则全部失效从上一个检查点重新开始（离线批处理），类似单机上内核崩溃。 云计算：水平扩展的极端 传统企业位于两个极端的中间  分布式可靠必然面临部分失效，需要依赖软件系统来提供容错机制。我们需要在不可靠的组件上构建可靠的系统。
不可靠网络  分布式无共享系统：成本低廉。 互联网以及大多数 IDC 内部网络都是异步网络：不保证发送一定到达（排队），等待响应时可能出现任何错误。  现实中的网络故障非常普遍 故障检测：HA、主从切换、保活机制（ICMP，SYN） 超时与无限期的延迟 网络拥塞与排队  网络负载过高会出现拥塞。 数据在发送的过程中分别会在发送端和接收端进行排队：等待发送和等待处理。 TCP 的拥塞控制机制。 虚拟化 CPU 核切换虚拟机  同步与异步网络  同步网络：固定电话网络，一路电话分配固定的电路、有带宽保证，规定延迟内保证完成数据包发送，不会丢弃数据包，成本高，利用率低 异步网络：数据中心网络，共享带宽，无法保证延迟和数据包发送，成本低廉，利用率高  不可靠时钟 单调时钟与墙上时钟 时间同步与准确性  计算机中的石英钟不够精确 NTP 服务器不稳定（网络、防火墙或服务本身） 虚拟机中时钟是虚拟化的。 终端设备不可控：休眠、故意设置  依赖同步的时钟 时钟陷阱：
 一天可能不总是 86400 秒 回拨 多个节点上的时间完全不相同  需要精确同步的时钟：
 自己监控所有节点上的时钟偏差 某个节点时钟漂移超出上限则将其宣告失效  时间戳与时间顺序  最后写入者获胜  时钟的置信区间 通过直接安装 GPS 接收器或原子（铯）时钟，它的误差范围通常可以查询制造商手册。</description>
    </item>
    
    <item>
      <title>LeetCode: 46. Permutations</title>
      <link>https://www.linuxzen.com/notes/notes/20210719073125-leetcode_46_permutations/</link>
      <pubDate>Mon, 19 Jul 2021 07:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210719073125-leetcode_46_permutations/</guid>
      <description>Keywords backtrack 回溯算法
图解 举例： [1, 2, 3] ，顺着叶子节点和删除的节点就可以还原成全排列。
 从上面图可以看出来，叶子节点加上回溯路径上被移除的节点就是结果的一项，从左到右依次是：
 [3,R:2,R:1] -&amp;gt; [3,2,1] [2,R:3,R:1] -&amp;gt; [2,3,1] &amp;hellip;  class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; track; backtrack(res, track, nums); return res; } void backtrack(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp; res, vector&amp;lt;int&amp;gt; &amp;amp; track, vector&amp;lt;int&amp;gt;&amp;amp; nums) { if (track.size() == nums.size()) { res.push_back(track); return; } for (int i = 0; i &amp;lt; nums.size(); i++) { if (visited.find(nums[i]) != visited.end() &amp;amp;&amp;amp; visited[nums[i]]) { continue; } track.</description>
    </item>
    
    <item>
      <title>JavaScript 内存模型 (2017)</title>
      <link>https://www.linuxzen.com/notes/notes/20210716120333-javascript_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2017/</link>
      <pubDate>Fri, 16 Jul 2021 12:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716120333-javascript_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2017/</guid>
      <description>litmus test
Litmus Test: ES2017 racy reads on ARMv8 Can this program (using atomics) see r1 = 0, r2 = 1? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y x = 2 (non-atomic) r2 = x C++: yes (data race, can do anything at all). Java: the program cannot be written. ARMv8 using ldar/stlr: yes. ES2017: no! (contradicting ARMv8) </description>
    </item>
    
    <item>
      <title>C、Rust 和 Swift 的内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210716120258-c_rust_%E5%92%8C_swift_%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 16 Jul 2021 12:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716120258-c_rust_%E5%92%8C_swift_%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>都采用C++11 内存模型。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 弱同步原子（acquire/release atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/</link>
      <pubDate>Fri, 16 Jul 2021 11:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/</guid>
      <description>C++ 还添加了较弱的原子，可以使用 atomic_store_explicit 和 atomic_load_explicit 以及附加的n内存排序参数来访问这些原子。使用 memory_order_seq_cst 使显式调用等效于C++ 同步原子（atomic）较短的调用。
较弱的原子称为 acquire/release 原子，一个 release 如果被后来的 acquire 观察到，那么就创建了一个 happen-before 的关系(从 release 到 acquire)。这个术语意在唤起 mutex:release 就像 unlock mutex ， acquire 就像锁定同一个 mutex 。=release= 之前执行的写入必须对后续 acquire 之后执行的读取可见，就像解锁 mutex 之前执行的写入必须对后解锁 mutex 之后执行的读取可见一样。
atomic&amp;lt;int&amp;gt; done; // Thread 1 // Thread 2 atomic_store(&amp;amp;done, 1, memory_order_release); while(atomic_load(&amp;amp;done, memory_order_acquire) == 0) { /* loop */ } acquire/release 原子只对单个内存位置的操作进行顺序一致的交替执行，所以属于内存一致性（coherence）而非顺序一致性。
来看下面 litmus test：
Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0?</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 非同步原子（Relaxed atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716114242-c_%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_relaxed_atomic/</link>
      <pubDate>Fri, 16 Jul 2021 11:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716114242-c_%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_relaxed_atomic/</guid>
      <description>C++ 并没有仅仅停留在内存一致性（coherence）的C++ 弱同步原子（acquire/release atomic）。它还引入了非同步原子，称为 relaxed 原子（memory_order_relaxed）。这些原子根本没有同步效果——它们没有创建先发生的边——并且它们根本没有排序保证。事实上，宽松原子读/写和普通读/写没有区别，除了宽松原子上的竞争不被认为是竞争， 不能着火 。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 同步原子（atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716113858-c_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_atomic/</link>
      <pubDate>Fri, 16 Jul 2021 11:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716113858-c_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_atomic/</guid>
      <description>C++ 采用了顺序一致的原子变量，很像Java 同步原子（volatile）(与 C++ volatile 没有关系）。
atomic&amp;lt;int&amp;gt; done; // Thread 1 // Thread 2 atomic_store(&amp;amp;done, 1); while(atomic_load(&amp;amp;done) == 0) { /* loop */ } C++ 弱同步原子（acquire/release atomic） </description>
    </item>
    
    <item>
      <title>DRF-SC 还是着火（Catch Fire）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716113642-drf_sc_%E8%BF%98%E6%98%AF%E7%9D%80%E7%81%AB_catch_fire/</link>
      <pubDate>Fri, 16 Jul 2021 11:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716113642-drf_sc_%E8%BF%98%E6%98%AF%E7%9D%80%E7%81%AB_catch_fire/</guid>
      <description>与 Java 不同，C++ 没有给有竞争的程序任何保证。任何有竞争的程序都属于“未定义的行为”。允许在程序执行的最初几微秒内进行竞争访问，从而在几小时或几天后导致任意的错误行为。这通常被称为“DRF-SC或着火”：如果程序没有数据竞争，它以顺序一致的方式运行，如果有数据竞争，它可以做任何事情，包括着火。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 16 Jul 2021 11:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>受新的 Java 内存模型（2004）许多同样的人开始为 C++ 定义一个类似的内存模型，最终在 C++11 中采用。 两个重要方便的差异：
 C++ 对具有数据竞争的程序不做任何保证 C++ 提供了三种原子性：强同步（顺序一致性），弱同步（内存一致性（coherence））和无同步（“relaxed”，用于隐藏竞争）。  第一点尝试消除对 Java 模型的复杂性需求，“relaxed” 的原子性重新引入 Java 关于定义什么是竞争程序的所有复杂性。结果是C++模型比Java更复杂，但对程序员的帮助更小。
DRF-SC 还是着火（Catch Fire） C++ 同步原子（atomic） C++ 弱同步原子（acquire/release atomic） C++ 非同步原子（Relaxed atomic） </description>
    </item>
    
    <item>
      <title>Java 同步原子（volatile）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/</link>
      <pubDate>Fri, 16 Jul 2021 11:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/</guid>
      <description>线程的创建前置于（happens bofere）线程的第一个动作。 互斥体 m 的解锁前置于（happens before）任何 后续（subsequent） 对互斥体 m 的锁定。 volatile 变量 v 的写入前置于（happens bofere）任何 后续（subsequent） 对变量 v 的读取。  “后续（subsequent）” 意味着什么？Java 定义了所有锁定、解锁和 volatile 变量访问的行为，给出了整个程序中所有这些操作的总顺序，就像它们发生在某个顺序一致的交错中一样。“后续（subsequent）”指在总顺序中较晚执行。也就是说：锁定、解锁和 volatile 变量的访问的“总顺序”定义了“后续”的含义，“后续”定义了由特定执行创建的“前置于（happens before）”关系，最终“前置于（happens before）”关系定义了该特定执行是否存在数据竞争。如果没有数据竞争，那么执行就会以顺序一致的方式进行。
事实上， volatile 访问必须表现得像在某种总排序一样，意味这在下面 litmus test 中，不能出现 r1=0 和 r2=0 的结果:
Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no.</description>
    </item>
    
    <item>
      <title>Java 决定竞争读写的具体规则</title>
      <link>https://www.linuxzen.com/notes/notes/20210716112456-java_%E5%86%B3%E5%AE%9A%E7%AB%9E%E4%BA%89%E8%AF%BB%E5%86%99%E7%9A%84%E5%85%B7%E4%BD%93%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 16 Jul 2021 11:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716112456-java_%E5%86%B3%E5%AE%9A%E7%AB%9E%E4%BA%89%E8%AF%BB%E5%86%99%E7%9A%84%E5%85%B7%E4%BD%93%E8%A7%84%E5%88%99/</guid>
      <description>对于小于等于 word 大小的变量，对变量（或字段） x 的读取必须看到对 x 的某一次写入所存储的值。 如果读取 r 观察到对 x 的写入 w ，那么 r 不发生在 w 之前。
也就是说 r 可以观察发生在 r 之前的所有写入，并且可以观察与 r 竞争的写入。</description>
    </item>
    
    <item>
      <title>内存顺序一致性（sequential consistency）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/</link>
      <pubDate>Fri, 16 Jul 2021 11:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/</guid>
      <description>See also: 顺序一致性。</description>
    </item>
    
    <item>
      <title>内存一致性（coherence）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/</link>
      <pubDate>Fri, 16 Jul 2021 11:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/</guid>
      <description>FROM 硬件内存模型：
 threads in the system must agree about a total order for the writes to a single memory location. That is, threads must agree which writes overwrite other writes. This property is called called coherence.
 内存一致性的系统都所有线程都必须接受对一个内存地址所有写入的总顺序。换句话说，所有线程必须同意哪些写入可以覆盖另外的一些写入。</description>
    </item>
    
    <item>
      <title>Memory coherence</title>
      <link>https://www.linuxzen.com/notes/notes/20210716110227-memory_coherence/</link>
      <pubDate>Fri, 16 Jul 2021 11:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716110227-memory_coherence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memory coherence vs consistency</title>
      <link>https://www.linuxzen.com/notes/notes/20210716110147-memory_coherence_vs_consistency/</link>
      <pubDate>Fri, 16 Jul 2021 11:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716110147-memory_coherence_vs_consistency/</guid>
      <description>Coherence deals with maintaining a global order in which writes to a single location or single variable are seen by all processors. Consistency deals with the ordering of operations to multiple locations with respect to all processors.
  Memory coherence: a memory system is coherent if any read of a data item returns the most recently written value of that data item (what values can be returned by a read).</description>
    </item>
    
    <item>
      <title>悲观与乐观并发控制</title>
      <link>https://www.linuxzen.com/notes/notes/20210716080024-%E6%82%B2%E8%A7%82%E4%B8%8E%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 16 Jul 2021 08:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716080024-%E6%82%B2%E8%A7%82%E4%B8%8E%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>悲观并发控制 两阶段加锁是一个典型的悲观并发控制。设计原则：如果某些操作可能出错，则直接放弃等待直到安全。
乐观并发控制 如果可能发生潜在冲突，事务会继续执行而不是终止，寄希望与相安无事；而当事务提交时，数据库会检查是否发生了冲突，如果是的话，中止事务并接下来重试。
对比 如果冲突很多则性能不佳，如果性能良好，且事务之间的竞争不大，乐观并发控制会比悲观方式性能高很多。</description>
    </item>
    
    <item>
      <title>可串形化的快照隔离</title>
      <link>https://www.linuxzen.com/notes/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/</link>
      <pubDate>Fri, 16 Jul 2021 07:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/</guid>
      <description>可串形化的快照隔离（Serializable Snapshot Isolation，SSI）近两年被研究，尚需在实践中证明其性能，但是它很有可能成为未来数据的标配。
悲观与乐观并发控制 </description>
    </item>
    
    <item>
      <title>两阶段加锁</title>
      <link>https://www.linuxzen.com/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/</link>
      <pubDate>Fri, 16 Jul 2021 07:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/</guid>
      <description>两阶段枷锁（two-phase locking，2PL）是近 30 年来数据库唯一一种被广泛使用的串形化算法。 多个事务可以同时读取同一个对象，但只要出现任何写操作（修改或删除），则必须加锁以独占访问。
两阶段包括：
 事务执行之前要获得锁（第一阶段） 事务结束之后要释放锁（第二阶段）  实现 2PL 用于 MySQL（InnoDB）和 SQL Server 中的“可串形化隔离”，以及 DB2 的“可重复读”。
每个对象通过一个「读写锁」隔离读写操作。
 共享锁进行读取。 独占锁进行修改。 读取先获取共享锁，如果要修改则升级为独占锁。 事务获得锁之后一直持有到事务结束。  性能 慢和死锁
谓词锁 通过对区间条件加谓词锁。
索引区间锁 </description>
    </item>
    
    <item>
      <title>串行化</title>
      <link>https://www.linuxzen.com/notes/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/</link>
      <pubDate>Fri, 16 Jul 2021 07:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/</guid>
      <description>实际串行执行 解决并发问题最直接的方法：在一个线程上按照顺序方式每次执行一个事务。
为什么可行：
 内存越来越便宜，可以将事务需要的数据都放在内存中。 OLTP 事务通常执行很快，只产生少量的读写操作。通常较长时间的分析操作通常是只读。  事务为了充分利用单线程所做的调整：
 采用存储过程封装事务，Redis 采用 Lua 分区  约束  事务必须简短而高效。 事务所需数据都在内存。 写入吞吐量必须低，否则需要采用分区，最好没有跨分区事务。 要支持跨分区事务必须确保跨分区事务占比很小。  两阶段加锁 可串形化的快照隔离 </description>
    </item>
    
    <item>
      <title>写倾斜</title>
      <link>https://www.linuxzen.com/notes/notes/20210716072157-%E5%86%99%E5%80%BE%E6%96%9C/</link>
      <pubDate>Fri, 16 Jul 2021 07:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716072157-%E5%86%99%E5%80%BE%E6%96%9C/</guid>
      <description>即不是脏写也不会更新丢失，事务之间的写冲突并不直接，写倾斜可以视为更广义的数据丢失。
考虑急诊医生请假系统，核心逻辑是必须要有一个医生值班。两个医生同时请假，事务同时同时开始，那么两个医生都能查询到有两个医生值班，最后请假成功，导致无医生值班。</description>
    </item>
    
    <item>
      <title>写倾斜与幻读</title>
      <link>https://www.linuxzen.com/notes/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/</link>
      <pubDate>Fri, 16 Jul 2021 07:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/</guid>
      <description>写事务并发除了需要防止更新丢失还有一些更为微妙的写冲突。
写倾斜与幻读 定义写倾斜。</description>
    </item>
    
    <item>
      <title>防止更新丢失</title>
      <link>https://www.linuxzen.com/notes/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Fri, 16 Jul 2021 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/</guid>
      <description>读事务遇到并发写会出现脏读（读-提交和可重复读可以解决），写事务并发会带来一些冲突，最值得关注的就是更新丢失问题。 应用程序从数据库读取某些值，然后应用逻辑做出修改，然后写回新值。
原子写操作 UPDATE counters SET value=value+1 WHERE key = &amp;#39;foo&amp;#39;; 原子操作通常采用方式：
 对读取对象加独占加锁，这种技术有时被称为「游标稳定性」。 强制所有原子操作都在单线程上执行。  显式枷锁 BEGIN TRANSACTION; SELECT * FROM figures WHERE name = &amp;#39;robot&amp;#39; AND game_id = 222 FOR UPDATE; -- 指示数据库对返回的所有结果行要加锁。 缺点：侵入应用逻辑、容易引发死锁（竞争冲突）。
自动检测更新丢失 数据库（Oracle 的串形化和 SQL Server 的快照级别隔离）可以自动检测何时发生了更新丢失，然后终止违规的那个事务。
原子比较和设置 UPDATE wiki_pages SET content = &amp;#39;new_content&amp;#39; WHERE id = 1234 AND conetnt = &amp;#39;old_content&amp;#39;; 冲突解决与复制  最后写入者获胜  </description>
    </item>
    
    <item>
      <title>更新 Go 内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210715110202-%E6%9B%B4%E6%96%B0_go_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 15 Jul 2021 11:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210715110202-%E6%9B%B4%E6%96%B0_go_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description> 更新Go内存模型 https://research.swtch.com/gomm  </description>
    </item>
    
    <item>
      <title>LeetCode: 25. Reverse Nodes in k-Group</title>
      <link>https://www.linuxzen.com/notes/notes/20210715064442-leetcode_25_reverse_nodes_in_k_group/</link>
      <pubDate>Thu, 15 Jul 2021 06:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210715064442-leetcode_25_reverse_nodes_in_k_group/</guid>
      <description>https://leetcode.com/problems/reverse-nodes-in-k-group/
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { deque&amp;lt;ListNode*&amp;gt; dq; ListNode* cur = head; ListNode* top = nullptr; ListNode* tail = nullptr; bool first_k = true; while (cur !</description>
    </item>
    
    <item>
      <title>事务隔离级别</title>
      <link>https://www.linuxzen.com/notes/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Wed, 14 Jul 2021 07:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>读-未提交  读数据时，会读到未成功提交的数据（未防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”）  读-提交  读数据时，只会读到已成功提交的数据（防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”）  防止脏写 通常通过推迟第二个写请求（行锁），直到前面的事务完成提交（或者终止）。
防止脏读 通过行锁同样可以避免脏读，但是实际中不可行（性能太差），一般采用类似 MVCC 的方式：对于待更新的对象，数据库都会维护其旧值和当前持锁事务将要设置的新值两个版本。 事务提交之前，其他所有读操作读旧值；仅当写事务提交之后，才会切换到读取新值。
可重复读（快照级别隔离） 在同一个事务中，反复读取总能获得一致性的结果，而不会读取到其他事务提交修改的新值。总体性想法是：每个事务都从数据库的一致性快照中读取，事务一开始所看到的是最近提交的数据，即使数据随后可能被另外一个事务更改，但保证每个事务都只看到特定时间点的旧数据。
实现快照级别隔离 MVCC
串行化 </description>
    </item>
    
    <item>
      <title>ACID</title>
      <link>https://www.linuxzen.com/notes/notes/20210714074135-acid/</link>
      <pubDate>Wed, 14 Jul 2021 07:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714074135-acid/</guid>
      <description>原子性（Atomicity） 一致性（Consistency） 一致性并不是数据所保证的，而是程序借助数据库的原子性和隔离性（AD）来达到一致性。一致性的 C 放到 ACID 中只是为了可以更加顺畅的宣传（读）。
隔离性（Isolation） 事务隔离级别
持久性（Durability） </description>
    </item>
    
    <item>
      <title>事务</title>
      <link>https://www.linuxzen.com/notes/notes/20210714073909-%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Wed, 14 Jul 2021 07:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714073909-%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务简化程序层错误处理，将多个读写捆绑成一个操作逻辑操作单元，成功则全部成功，失败则可以进行安全重试。
深入理解事务 ACID 单对象与多对象事务操作 事务操作涉及多对象和但对象。
 多对象，如更新邮件未读数和未读邮件个数 单对象，如更新一个大的字段（20KB 的 JSON）  弱隔离级别 事务隔离级别中的「读-未提交」、「读-提交」和「快照级别隔离可重复读」。
防止更新丢失 写倾斜与幻读 串行化 </description>
    </item>
    
    <item>
      <title>LeetCode: 92. Reverse Linked List II</title>
      <link>https://www.linuxzen.com/notes/notes/20210714065549-leetcode_92_reverse_linked_list_ii/</link>
      <pubDate>Wed, 14 Jul 2021 06:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714065549-leetcode_92_reverse_linked_list_ii/</guid>
      <description>https://leetcode.com/problems/reverse-linked-list-ii/
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseBetween(ListNode* head, int left, int right) { stack&amp;lt;int&amp;gt; st; ListNode* cur = head; ListNode* prev_start = nullptr; if (left == 1) { prev_start = new ListNode(0, head); // dummy prev_start point to head  } int i = 1; while(cur !</description>
    </item>
    
    <item>
      <title>Emacs Projectile 优化</title>
      <link>https://www.linuxzen.com/notes/notes/20210714065205-emacs_projectile_%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Jul 2021 06:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714065205-emacs_projectile_%E4%BC%98%E5%8C%96/</guid>
      <description>最近换到 ivy 之后 projectile 切换项目加载 Buffer 或查找文件变得巨慢，查抄一番发现问题可以通过缓存解决：
 ivy-rich Projectile Caching  </description>
    </item>
    
    <item>
      <title>Java 内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 13 Jul 2021 20:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>原始 Java 内存模型（1996） 新的 Java 内存模型（2004） </description>
    </item>
    
    <item>
      <title>新的 Java 内存模型（2004）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713201332-%E6%96%B0%E7%9A%84_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2004/</link>
      <pubDate>Tue, 13 Jul 2021 20:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713201332-%E6%96%B0%E7%9A%84_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2004/</guid>
      <description>新模型遵循 DRF-SC 方法：保证弱有序和无数据竞争（DRF）的 Java 程序以顺序一致的方式执行。
 JSR-133，在 2004 年发布的 Java 5.0 中被采用。规范：The Java Memory Model, 2005。
 Java 中程序员需要同步操作建立 happens-before 关系，确保一个线程不会在另一个线程读取或写入时并发的写入非原子变量。主要的同步操作有：
同步原子（volatile）和其它操作 参见：Java 同步原子（volatile）。
有数据竞争的程序语义 弱有序和无数据竞争（DRF）只保证「无数据」竞争的程序的顺序一致性行为。新的 Java 模型（和原版本一致）出于以下原因定义了「有数据」竞争程序的顺序一致性行为：
 支持Java的一般安全（security）和安全保障（safety guarantee）。 让程序员更容易发现错误。 使攻击者更难利用问题，因为由于数据竞争的原因可能造成的损失更有限。 让程序员更清楚他们的程序是做什么的  新的模型不再依赖内存一致性（coherence），取而代之的复用 happens-before（已经用于决定程序是否存在竞争）来决定竞争读写的结果。
具体规则参见：Java 决定竞争读写的具体规则。使用 happens-before 并结合Java 同步原子（volatile）就可以建立新的 happen before 关系，是对原始Java内存模型的重大改进。它为程序员提供了更多有用的保证，并使大量重要的编译器优化得到了明确的允。
happens-before 不排除语无伦次（incoherence） 以前发生的事不排除无用性（acausality） </description>
    </item>
    
    <item>
      <title>Java 编译器公共子表达式消除（common subexpression elimination）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713201045-java_%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%AC%E5%85%B1%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%88%E9%99%A4_common_subexpression_elimination/</link>
      <pubDate>Tue, 13 Jul 2021 20:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713201045-java_%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%AC%E5%85%B1%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%88%E9%99%A4_common_subexpression_elimination/</guid>
      <description>// p and q may or may not point at the same object. int i = p.x; // ... maybe another thread writes p.x at this point ... int j = q.x; int k = p.x; 在这个程序中，公共子表达式消除（common subexpression elimination）会注意到 p.x 被计算了两次，并将最后一行优化为 k = i 。</description>
    </item>
    
    <item>
      <title>原始 Java 内存模型（1996）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713200556-%E5%8E%9F%E5%A7%8B_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_1996/</link>
      <pubDate>Tue, 13 Jul 2021 20:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713200556-%E5%8E%9F%E5%A7%8B_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_1996/</guid>
      <description>Java 是第一个试图写下多线程程序保证的主流语言。它包括：
 互斥体（mutex），并定义了它们隐含的内存排序要求。 “volatile” 原子变量: volatile 变量的所有读和写都需要直接在主内存中按程序顺序执行，使得对 volatile 变量的操作以顺序一致的方式进行。 制定了（或者至少试图制定）具有数据竞争的程序的行为。  缺陷  Atomic 需要同步：volatile 原子变量是不同步的，所以它们无助于消除程序其余部分的竞争。不能用于构建新的同步原语。 一致性与编译器优化不兼容：Java 编译器公共子表达式消除（common subexpression elimination）会导致其他线程写入新值无法对消除后表达式生效。  </description>
    </item>
    
    <item>
      <title>DRF-SC 系统同步指令</title>
      <link>https://www.linuxzen.com/notes/notes/20210713195115-drf_sc_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 13 Jul 2021 19:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713195115-drf_sc_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4/</guid>
      <description>保证了弱有序和无数据竞争（DRF）的系统会提供称为同步的特定指令，提供一种协调不同处理器（相当于硬件线程）的属性。</description>
    </item>
    
    <item>
      <title>同步原子（synchronizing atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713194409-%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_synchronizing_atomic/</link>
      <pubDate>Tue, 13 Jul 2021 19:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713194409-%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_synchronizing_atomic/</guid>
      <description>原子变量（atomic variable）或原子操作（tomic operation）更好的解释。</description>
    </item>
    
    <item>
      <title>原子变量（atomic variable）或原子操作（tomic operation）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/</link>
      <pubDate>Tue, 13 Jul 2021 19:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/</guid>
      <description>现代语言以原子变量（atomic variable）或原子操作（atomic operation）的形式提供特殊能力，允许程序同步其线程(参见硬件内存一致性模型)。
代码示例
// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); 如果使用原子变量实现 done 会产生很多效果：
 Thread 1 的编译代码必须确保对 x 的写入完成，并且对 done 的写入可见之前对 x 的写入对其他线程可见。 Thread 2 的编译代码必须在循环的每次迭代中（重新）读取 done 。 Thread 2 的编译代码必须在读取 done 之后才读取 x 。 编译后的代码必须做任何必要的事情来禁用可能会重新引入这些问题的硬件优化。 使 done 原子化的最终结果是程序按照我们想要的方式运行，成功地将 x 的值从 Thread 1 传递到 Thread 2 。  上面代码如果不使用原子变量会出现 Thread 1 和 Thread 2 读取 x 的同时写 x ，从而导致数据竞争（data race)。 done 使用原子变量实现后，用于同步对 x 的访问： Thread 1 现在不可能在 Thread 2 读取 x 的同时写 =x=，从而避免数据竞争。 这是硬件内存模型弱有序和无数据竞争（DRF）在编程语言环境的应用。</description>
    </item>
    
    <item>
      <title>弱有序和无数据竞争（DRF）</title>
      <link>https://www.linuxzen.com/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/</link>
      <pubDate>Mon, 12 Jul 2021 16:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/</guid>
      <description>弱有序是 Sarita Adve 和 Mark Hill 在他们 1990 年的论文 Weak Ordering - A New Definition (1990) 提出。
定义如下
 Let a synchronization model be a set of constraints on memory accesses that specify how and when synchronization needs to be done.
同步模型是对内存访问的一组约束，这些约束指定了何时以及如何进行同步。
 硬件相对于同步模型是弱有序的，当且仅当它在顺序上与遵守同步模型的所有软件一致时。
Adve和Hill提出了一种同步模型，他们称之为无数据竞争(data-race-free，DRF)。该模型假设硬件具有独立于普通内存读写的内存同步操作。普通的内存读写可以在同步操作之间重新排序，但不能在跨它们移动。(也就是说，同步操作也可用来做重新排序的内存屏障。)如果对于所有理想化的顺序一致的执行，从不同线程对同一位置的任何两个普通存储器访问要么都是读取，要么通过同步操作强制一个在另一个之前发生而分开执行，则程序被称为无数据竞争的。</description>
    </item>
    
    <item>
      <title>ARM/POWER Relaxed Memory Model</title>
      <link>https://www.linuxzen.com/notes/notes/20210712162917-arm_power_relaxed_memory_model/</link>
      <pubDate>Mon, 12 Jul 2021 16:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712162917-arm_power_relaxed_memory_model/</guid>
      <description>ARM和POWER系统的概念模型是，每个处理器从其自己的完整内存副本中读取和向其写入，每个写入独立地传播到其他处理器，随着写入的传播，允许重新排序。
 在这个宽松的(relaxed)模型中，我们迄今为止所看到的每一个litmus test的答案都是“yes，这真的可能发生。”
Litmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. On ARM/POWER: yes! Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no.</description>
    </item>
    
    <item>
      <title>内存屏障</title>
      <link>https://www.linuxzen.com/notes/notes/20210712162102-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/</link>
      <pubDate>Mon, 12 Jul 2021 16:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712162102-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/</guid>
      <description>内存屏障（或栅栏）是非顺序一致性的硬件提供的一种显式指令，用于控制排序提供更强的内存排序，修复同步算法。
添加内存屏障，确保每个线程在开始读取之前都会刷新其先前对内存的写入：
// Thread 1 // Thread 2 x = 1 y = 1 barrier barrier r1 = y r2 = x x86 总存储有序（x86-TSO) 加上内存屏障之后 r1=0, r2=0 就会变得不可能。</description>
    </item>
    
    <item>
      <title>x86 总存储有序（x86-TSO)</title>
      <link>https://www.linuxzen.com/notes/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/</link>
      <pubDate>Mon, 12 Jul 2021 15:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/</guid>
      <description>x86 总存储有序(x86 Total Store Order, x86-TSO)：所有处理器仍然连接到一个共享内存，但是每个处理器都将对该内存的写入(write)放入到本地写入队列中。处理器继续执行新指令，同时写操作(write)会更新到这个共享内存。一个处理器上的内存读取在查询主内存之前会查询本地写队列，但它看不到其他处理器上的写队列。其效果就是当前处理器比其他处理器会先看到自己的写操作。
重要的是： 所有处理器都保证写入（存储 store）到共享内存的（总）顺序，所以给这个模型起了个名字：总存储有序（Total Store Order，TSO）。
写队列是一个标准的先进先出队列：内存写操作总是以与处理器执行相同顺序的应用于共享内存。
基于以上下面 litmus test 的答案依然是 no ，这种情况与顺序一致性模型结果一致：
Litmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. 但其他测试则并不一致区分与顺序一致性的常用例子:
Litmus Test: Write Queue (also called Store Buffer) Can this program see r1 = 0, r2 = 0?</description>
    </item>
    
    <item>
      <title>litmus test</title>
      <link>https://www.linuxzen.com/notes/notes/20210712153952-litmus_test/</link>
      <pubDate>Mon, 12 Jul 2021 15:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712153952-litmus_test/</guid>
      <description>下面这种关于样本结果的问题被称为 litmus test 。它只有两个答案：可能还是不可能？为我们提供了一种区分内存一致性模型的清晰方法：如果一个模型支持特定的执行，而另一个不支持，那么这两个模型显然不同。
litmus test 假设所有变量都初始为 0 ， rN 表示非共享变量，而是一个线程本地寄存器。
Litmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x 然而不幸的是，一个特定的模型对一个特定的 litmus test 给出的答案往往令人惊讶。</description>
    </item>
    
    <item>
      <title>顺序一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 12 Jul 2021 15:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>Leslie Lamport 1979 年的论文 How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs 定义：
 The customary approach to designing and proving the correctness of multiprocess algorithms for such a computer assumes that the following condition is satisfied: the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program.</description>
    </item>
    
    <item>
      <title>内存一致性模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 15:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/</guid>
      <description>当执行给定程序时，硬件和编译器之间的契约，对编译后后的代码对存储在内存中的数据更改的可见性和一致性。 这种契约称为「内存一致性模型（Memeory Consistency Model）」或仅仅是「内存模型（Memory Model）」。
最初目标是定义程序员编写汇编代码时硬件提供的保证，后来用来定义高级编程语言（如 C++ 或 Java）对该语言编写代码的程序员提供的保证。
例如下面变量都初始为 0 的情况下，线程 1 和 2 都运行在自己专用的处理器上，都运行到完成，这个程序能打印 0 吗？
// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); Memory coherence vs consistency 内存一致性（coherence） 内存顺序一致性（sequential consistency） 硬件  顺序一致性 x86 总存储有序（x86-TSO) ARM/POWER Relaxed Memory Model 弱有序和无数据竞争（DRF）  编程语言内存模型 </description>
    </item>
    
    <item>
      <title>编程语言内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 14:35:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description> Programming Language Memory Models 编程语言内存模型  编程语言内存模型回答了并行程序可以依靠什么行为以便它们的线程之间可以共享内存的问题。
首先需要理解原子变量（atomic variable）或原子操作（tomic operation），编程语言模型作为程序员和编译器之间的约定规定了它们之间所需要的额外细节。
硬件、Litmus Tests、Happens Before 和 DRF-SC 程序使用DRF-SC 系统同步指令在多个处理器运行的代码之间创建一种“happens before”的关系。
 Thread 1 和 Thread 2 执行 S(a) 同步指令。在这个特定执行中，两条 S(a) 指令建立了从 Thread 1 到 Thread 2 的 happens-before 关系，因此 Thread 1 中的 = W(x)= 发生在 Thread 2 中的 R(x) 之前。
Java 内存模型 C++11 内存模型 C、Rust 和 Swift 的内存模型 JavaScript 内存模型 (2017) </description>
    </item>
    
    <item>
      <title>硬件内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 14:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>Hardware Memory Models 硬件内存模型  内存模型 内存一致性模型</description>
    </item>
    
    <item>
      <title>Emacs 优化启动速度</title>
      <link>https://www.linuxzen.com/notes/notes/20210712114303-emacs_%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Mon, 12 Jul 2021 11:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712114303-emacs_%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</guid>
      <description>优化 GC 参考：LSP Mode Performance
;; Optmization ;; Sources: ;; ;; - https://www.reddit.com/r/emacs/comments/ofhket/further_boost_start_up_time_with_a_simple_tweak/ ;; - https://emacs-lsp.github.io/lsp-mode/page/performance/ ;; (setq gc-cons-threshold 32000000) ;; 32mb (setq read-process-output-max (* 1024 1024)) ;; 1mb 将启动速度优化到 3 秒左右。
Dumping Emacs  Emacs WIKI: Dumping Emacs Painless Transition to Portable Dumper  </description>
    </item>
    
    <item>
      <title>动态再平衡策略</title>
      <link>https://www.linuxzen.com/notes/notes/20210712072221-%E5%8A%A8%E6%80%81%E5%86%8D%E5%B9%B3%E8%A1%A1%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 12 Jul 2021 07:22:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712072221-%E5%8A%A8%E6%80%81%E5%86%8D%E5%B9%B3%E8%A1%A1%E7%AD%96%E7%95%A5/</guid>
      <description>为什么不用取模？ 节点数发生变化时，会导致很多关键字需要做节点数据迁移，会大大增加再平衡的成本。
固定数量的分区 创建远超实际节点数的分区数量，然后再为每个节点分配多个分区。
新加入节点 从现有的节点上匀走几个分区，直到分区再次达到平衡。
删除节点 采取和上面相反的过程。
优点  分区总数量不变，也不会改变关键字的分区映射关系。 唯一需要调整的分区与节点的映射关系。 分区和节点的映射关系调整可以逐步完成。  缺点  分区数量需要数据库创建时确定，并不能更改  动态分区 分区数据增长超过一个可配参数的阈值（HBase 10GB），它就拆分为两个分区，相反则合并相邻的分区。过程类似B-trees 的分裂操作。
每个分区总是分配一个节点，一个节点可以承载多个分区。
分区分裂 将其中的一半转移到其他节点以平衡负载。
优点  分区数量可以自动适配数据总量。 空数据库可以配置初始分区解决少量数据集就一个分区避免系统热点（HBase 和 MongoDB）  按节点比例分区 使分区数与集群节点数成正比关系（Cassandra 和 Ketama），就是每个节点具有固定数量的分区。 当节点数不变时，每个分区的大小与数据集大小保持正比增长关系。
新加入节点 随机选择固定数量的现有分区进行分裂，然后拿走这些分区的一半数据量。
优点  较大的数据可以使每个分区的大小保持稳定。  缺点  存在不公平分裂。  </description>
    </item>
    
    <item>
      <title>基于词条的二级索引分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210712071502-%E5%9F%BA%E4%BA%8E%E8%AF%8D%E6%9D%A1%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA/</link>
      <pubDate>Mon, 12 Jul 2021 07:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712071502-%E5%9F%BA%E4%BA%8E%E8%AF%8D%E6%9D%A1%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA/</guid>
      <description>对所有数据构建全局索引，为了避免瓶颈，对索引本身进行分区，比如：
 将 a～r 开始的关键字放在分区 0 将 s～z 开始的关键字放在分区 1  优点  可以支持高效的区间查询 读取更为高效  缺点  写入速度慢，会引入明显的写入放大 写入逻辑复杂 难以保证索引时刻最新，需要跨多个相关分区的分布式事务支持  实践 对全局二级索引的更新往往都是异步的。</description>
    </item>
    
    <item>
      <title>基于文档分区的二级索引</title>
      <link>https://www.linuxzen.com/notes/notes/20210712071105-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E5%88%86%E5%8C%BA%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 12 Jul 2021 07:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712071105-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E5%88%86%E5%8C%BA%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/</guid>
      <description>每个分区各自维护自身的二级索引，读取时需要对所有分区节点进行查询然后对结果进行合并。
这种方法虽然二级索引查询代价高，但依然广泛用于实践：MongoDB、Riak、Cassandra、ElasticSearch、SolrCloud 和 VoltDB。</description>
    </item>
    
    <item>
      <title>基于关键字哈希值分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 11 Jul 2021 17:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/</guid>
      <description>可以基于关键值哈希函数的方式分区，解决基于关键字区间分区数据倾斜与热点的问题。一个好的哈希函数可以处理数据倾斜并使其均匀分布，并且不需要在加密方面很强。
优点 这种方法可以很好的将关键字均匀分配到多个分区中。
缺点 丧失良好的区间查询性能。即使关键字相邻，也会分布在不同的分区上。</description>
    </item>
    
    <item>
      <title>基于关键字区间分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 11 Jul 2021 15:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/</guid>
      <description>为每个分区分配一段连续的关键字或者关键字区间范围。</description>
    </item>
    
    <item>
      <title>系统热点</title>
      <link>https://www.linuxzen.com/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/</link>
      <pubDate>Sun, 11 Jul 2021 15:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/</guid>
      <description>负载倾斜会导致所有负载都集中在一个分区节点上，这种负载严重不成比例的分区即称为系统热点。
应用层解决 即使通过基于关键字哈希值分区和基于关键字区间分区等策略解决了大部分热点问题，但是极端情况下依然会出现热点，比如社交媒体的热点时间都会导致热点，只能通过应用层解决，一个简单的技术：
 关键字开头或结尾添加一个随机数，两位随机数就可以将关键字的写操作分布到 100 个不同的分区上； 读取就必须从所有的 1000 个关键字中读取数据然后进行合并； 通过额外的元数据标记哪些关键字进行了特殊处理。  由于对读取造成的额外开销，所以通常只有对少量的热点关键词附加随机数才有意义。</description>
    </item>
    
    <item>
      <title>负载倾斜</title>
      <link>https://www.linuxzen.com/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/</link>
      <pubDate>Sun, 11 Jul 2021 15:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/</guid>
      <description>分区不均匀时出现某些分区节点比其他分区承担更多的数据量和查询负载。倾斜会导致分区效率严重下降。</description>
    </item>
    
    <item>
      <title>数据分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 11 Jul 2021 15:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/</guid>
      <description>每一条数据都属于特定的分区，每个分区都是一个小型数据库。
目的 提高扩展性，分散大的数据集和查询负载。
目标 将数据和查询负载均匀的分步在所有节点上。如果分布不均匀会出现负载倾斜和系统热点。
数据分区与数据复制 结合数据复制每个分区在多个节点都有副本，进行冗余提高可用性。
键-值数据的分区 避免系统热点最简单的方法是将记录随机分配给所有节点上，缺点是：没办法知道数据保存在哪个节点上，所以读取时需要查询所有节点。
基于关键字区间分区 基于关键字哈希值分区 负载倾斜与系统热点 分区与二级索引 二级索引不能唯一标识一条记录，比如查询颜色为红色的汽车。二级索引带来的主要挑战是它们不能规整的映射到分区中。
有两种方法来支持对二级索引进行分区：
 基于文档分区的二级索引 基于词条的二级索引分区  分区再平衡  动态再平衡策略 自动与手动再平衡操作  请求路由 策略  客户端可以连接任意节点，并由节点做转发不在当前节点的分区请求。 由路由层来充当分区感知的负载均衡器。 客户端直接感知分区和节点分配关系，客户端直连目标节点。  做出路由决策的组件  Zookeeper gossip 协议  </description>
    </item>
    
    <item>
      <title>syn</title>
      <link>https://www.linuxzen.com/notes/notes/20210616144616-syn/</link>
      <pubDate>Wed, 16 Jun 2021 14:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210616144616-syn/</guid>
      <description> syn::Span 代码位置  </description>
    </item>
    
    <item>
      <title>quote</title>
      <link>https://www.linuxzen.com/notes/notes/20210616144334-quote/</link>
      <pubDate>Wed, 16 Jun 2021 14:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210616144334-quote/</guid>
      <description>循环展开 let fields = vec![ syn::Ident::new(&amp;#34;foo&amp;#34;, syn::Span::call_site()), syn::Ident::new(&amp;#34;bar&amp;#34;, syn::Span::call_site()), ]; let token = quote!{ #(#fields),* }; // -&amp;gt; foo,bar </description>
    </item>
    
    <item>
      <title>Rust 属性宏解析</title>
      <link>https://www.linuxzen.com/notes/notes/20210616141500-rust_%E5%B1%9E%E6%80%A7%E5%AE%8F%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 16 Jun 2021 14:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210616141500-rust_%E5%B1%9E%E6%80%A7%E5%AE%8F%E8%A7%A3%E6%9E%90/</guid>
      <description>准备 解析宏通过两个 crate 进行：
 quote = &amp;ldquo;1.0&amp;rdquo; syn = &amp;ldquo;1.0&amp;rdquo;  Derive 属性宏 探讨 Rust 宏系统中带属性（Attributes）的 Derive 宏的几种变体，以及如何进行解析。
属性宏的变体   函数调用
#[derive(Custom)] struct Demo { #[attr(arg)] a: i8, }   关键字参数调用
#[derive(Custom)] struct Demo { #[args(name = &amp;#34;val&amp;#34;)] b: i8, }   直接赋值
#[derive(Custom)] struct Demo { #[meta = &amp;#34;val&amp;#34;] c: i8, }   函数调用 关键字参数调用 可以从 Struct 解析出各个字段，通过解析各个字段的 attrs 属性，并对 attrs 进行遍历，使用 attr.parse_args()? 即可解析出对应的关键字参数，咱们以前面的代码为例:</description>
    </item>
    
    <item>
      <title>Happens-before 关系和并发</title>
      <link>https://www.linuxzen.com/notes/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Tue, 15 Jun 2021 21:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/</guid>
      <description>确定前后关系  服务器为每个主键维护一个版本号，每当主键新值写入时递增版本号，并将新版本号与写入值一起保存。 当客户端读取主键时，服务器将返回所有（未被覆盖的）当前值以及最新的版本号。且要求写入之前，客户端必须先发送读请求。 客户端写主键，写请求必须包含之前读到的版本号，读到的值和新值合并后的集合。写请求的响应可以像读操作一样，会返回所有当前值，这样可以一步步链接起多个写入的值。 当服务器收到带有特定版本号的写入时，覆盖该版本号或者更低版本的所有值，但必须保存更高版本号所有值。  当写请求包含了前一次读取的版本号时，意味着修改时基于以前的状态。否则它将与所有的其他写入同时进行，不会覆盖任何已有值，其传入的值将包含在后续读请求的返回值列表中。
合并同时写入的值 上面算法不会导致数据丢失，但是客户端需要做一些额外的工作：如果多个操作并发发生，则客户端必须通过合并并发写入的值来继承旧值。同时删除需要特殊的墓碑标记，防止被合并回去。
版本矢量 每个副本和每个主键均定义一个版本号，每个副本在处理时增加自己的版本号，并跟踪从其他副本看到的版本号。通过这些信息来指示要覆盖那些值，该保留那些并发值。
所有的版本号集合称为版本矢量。</description>
    </item>
    
    <item>
      <title>检测并发写</title>
      <link>https://www.linuxzen.com/notes/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/</link>
      <pubDate>Tue, 15 Jun 2021 21:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/</guid>
      <description>LWW：最后写入者获胜 Happens-before 关系和并发 </description>
    </item>
    
    <item>
      <title>sloppy quorum</title>
      <link>https://www.linuxzen.com/notes/notes/20210615212500-sloppy_quorum/</link>
      <pubDate>Tue, 15 Jun 2021 21:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615212500-sloppy_quorum/</guid>
      <description>当节点不能满足 \(w + r &amp;gt; n\) 时将写请求暂时写入一些可访问的临时节点中，一旦网络问题得到交接，临时节点需要把接收的写入全部发送到原始主节点上。这就是所谓的数据回传（或者暗示移交）。</description>
    </item>
    
    <item>
      <title>Quorum 一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Tue, 15 Jun 2021 21:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>确定读写成功 确定读写节点在多少节点成功才可以认为写入成功：需要保证读取时至少一个包含新值。
n 个副本的情况下，写入需要 \(w\) 个节点确认，读取必须至少查询 \(r\) 个节点，则只要 \(w + r &amp;gt; n\) ，读取的节点中一定会包含最新值。
 \(w\) 仲裁写（法定票数写） \(r\) 仲裁读（法定票说读）  一般 \(n\) 设置为奇数： \(w=r=(n+1)/2\) （向上取整）。
可容忍的失效节点数 仲裁条件 \(w+r&amp;gt;n\) 定义了系统可容忍的失效节点数。
 \(w&amp;lt;n\) ，如果一个节点不可用，仍然可以处理写入。 \(r&amp;lt;n\) ，如果一个节点不可用，仍然可以处理读取。 \(n=3\),\(w=2\),\(r=2\)，则可以容忍一个节点不可用 \(n=5\),\(w=3\),\(r=3\), 则可以容忍两个节点不可用  局限性  如果采用了 sloppy quorum，写操作的 w 节点和读取的 r 节点可能完全不同，因此无法保证写请求一定存在重叠的节点。 并发无法明确顺序，需要进行合并并发写入。如最后写入者获胜。 同时读写，写操作在一部分节点上完成，则读取新值还是旧值存在不确定性。 部分节点写入成功，但是最终写入失败无法回滚。 新值的节点失效，但恢复数据来自某个旧值，则总的新值节点数低于 w 边界情况  </description>
    </item>
    
    <item>
      <title>无主节点复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210615210219-%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Tue, 15 Jun 2021 21:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615210219-%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6/</guid>
      <description>没有主节点，允许任何节点接受来自客户端的写请求。
实现方式  客户端直接将其写请求发送到多节点 一个协调者代表客户端进行写入，与主节点的数据库不同，协调者并不负责写入顺序的维护。  节点失效时写入数据库 客户端将写请求并行发送给三个节点，两个可用节点接受写请求，而不可用副本则无法处理该请求。
现在失效的节点重新上线，客户端可能会读取到旧的值。
为了解决这个问题客户端并行的向多个节点发送读请求，并通过版本号来确定哪个值更新。
读修复与反熵  读修复；客户端并行读取多个节点，检测到过期的返回值，然后用新的返回值写入到返回旧值的副本。 反熵过程：后台不断查找副本之间的差异，将任何缺少的数据从一个节点复制到另一个节点。不保证特定顺序的复制写入，并且会引入明显的复制滞后问题。  Quorum 一致性 检测并发写 </description>
    </item>
    
    <item>
      <title>全部-至-全部型拓扑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615084309-%E5%85%A8%E9%83%A8_%E8%87%B3_%E5%85%A8%E9%83%A8%E5%9E%8B%E6%8B%93%E6%89%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615084309-%E5%85%A8%E9%83%A8_%E8%87%B3_%E5%85%A8%E9%83%A8%E5%9E%8B%E6%8B%93%E6%89%91/</guid>
      <description>最常见的拓扑结构，提供更好的容错。每个节点从其他所有节点同步写入。</description>
    </item>
    
    <item>
      <title>星型拓扑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615084143-%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615084143-%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91/</guid>
      <description>通过指定一个根节点，根结点将所有的写操作转发给其他所有节点。</description>
    </item>
    
    <item>
      <title>环形拓扑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615084010-%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615084010-%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91/</guid>
      <description>每个节点接收来自前序节点的写入，并将这些写入（加上字节的写入）转发后后序节点。同时通过唯一 ID 防止无限循环。</description>
    </item>
    
    <item>
      <title>自定义冲突解决逻辑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615083806-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E9%80%BB%E8%BE%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615083806-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E9%80%BB%E8%BE%91/</guid>
      <description>写入时执行 读取时执行 </description>
    </item>
    
    <item>
      <title>最后写入者获胜</title>
      <link>https://www.linuxzen.com/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/</link>
      <pubDate>Tue, 15 Jun 2021 08:35:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/</guid>
      <description>每个副本总是保存最新值，允许覆盖并丢弃旧值。假定每个写请求都最终同步到所有副本，只要我们有一个明确的方法来确定哪个写入时最新的，则副本可以最终收敛到相同的值。
通过每个请求附加一个时间戳，选择最新即最大的时间戳，丢弃较早的写入。则为最后写入着获胜（last write wins，LWW）。
缺点 会造成数据丢失。
适用场景  缓存系统。  确保安全无副作用 唯一方法是只写入一次然后写入值视为不可变，这样旧避免对同一个主键的并发（覆盖）写。</description>
    </item>
    
    <item>
      <title>收敛于一致的状态</title>
      <link>https://www.linuxzen.com/notes/notes/20210615083221-%E6%94%B6%E6%95%9B%E4%BA%8E%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81/</link>
      <pubDate>Tue, 15 Jun 2021 08:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615083221-%E6%94%B6%E6%95%9B%E4%BA%8E%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81/</guid>
      <description>多个主节点看到的执行顺序不一致，病了同时按照各自看到的写入顺序执行，那么数据库最终将处于不一致状态。
数据库必须以一种趋同的方式来解决冲突。
可能的解决方式  给每个写入分配唯一的 ID，如基于时间戳的最后写入者获胜。 为每个主节点分配一个唯一 ID，序列号高的优先于序列号低的主节点，可能导致数据丢失 以某种方式合并值，如按照字母顺序拼接在一起 利用预定义号的格式记录，然后依靠应用层逻辑，事后解决冲突（可能会提示用户）  </description>
    </item>
    
    <item>
      <title>避免冲突</title>
      <link>https://www.linuxzen.com/notes/notes/20210615082908-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81/</link>
      <pubDate>Tue, 15 Jun 2021 08:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615082908-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81/</guid>
      <description>应用层保证对特定记录的写请求总是通过同一个主节点，来避免发生些冲突。
如用户更新自己的配置总是路由到特定的数据中心。
缺点 特定数据中心发生故障不得不改变事先指定的主节点。</description>
    </item>
    
    <item>
      <title>前缀一致读</title>
      <link>https://www.linuxzen.com/notes/notes/20210614211632-%E5%89%8D%E7%BC%80%E4%B8%80%E8%87%B4%E8%AF%BB/</link>
      <pubDate>Mon, 14 Jun 2021 21:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614211632-%E5%89%8D%E7%BC%80%E4%B8%80%E8%87%B4%E8%AF%BB/</guid>
      <description>对于一系列按照某个顺序发生的写请求，同时读取这些内容时也会按照当时写入的顺序。
场景 分区数据库中出现的一个特殊问题。
正常对话：
 P: C小姐，你能看到多远的文莱？
C：大约 10s，P 先生。
 但是由于复制滞后，最终能被观察到的可能是：
 C：大约 10s，P 先生。
P: C小姐，你能看到多远的文莱？
 解决方案 低效率：具有因果关系的写入都交给一个分区来完成。 新方法：跟踪事件因果关系。</description>
    </item>
    
    <item>
      <title>单调读一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210918-%E5%8D%95%E8%B0%83%E8%AF%BB%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 14 Jun 2021 21:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210918-%E5%8D%95%E8%B0%83%E8%AF%BB%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>是一种比强一致性弱但是比最终一致性效应强的保证，单调读保证：
如果某个用户依次进行多次读取，则绝不会看到回滚的现象，即在读取到较新的值之后又发生读旧值的情况。
场景 用户刷新网络，读请求被随机路由到某个从节点，先后从两个不同的从节点读取到了不同的内容，比如看到一个新添加的评论一次出现，一次消失。
解决方案 按照用户 ID 进行哈希方法取代随机路由。</description>
    </item>
    
    <item>
      <title>强一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210953-%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 14 Jun 2021 21:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210953-%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>读写一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210755-%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 14 Jun 2021 21:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210755-%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>也称为「写后读一致性」，解决用户主节点写入后立马从从节点读取不到到情况。只能解决单用户的一致性，但是解决不了多用户的一致性。
场景 用户新提交了评论，但是自己看不到，需要等一会才能看到。
解决方案 记录更新时间戳，在指定时间内从主节点读取。</description>
    </item>
    
    <item>
      <title>最终一致性效应</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/</link>
      <pubDate>Mon, 14 Jun 2021 21:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/</guid>
      <description>主从异步复制的情况下会导致数据库中出现明显不一致，此时从不同的从节点读取就会得到不一样的结果。这种不一致只是一个暂时状态，如果停止写入数据，经过一段时间之后，从节点最终会赶上并与主节点保持一致。
这种效应被称为最终一致性。</description>
    </item>
    
    <item>
      <title>复制滞后问题</title>
      <link>https://www.linuxzen.com/notes/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 14 Jun 2021 20:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description>异步同步的情况下出出现最终一致性效应复制滞后会导致：用户提交了修改到主节点，但是从从节点没有读取到最新的变更，比如看不到自己提交的评论等。
读写一致性：读自己的写 一旦用户的数据最近发生改变则路由用户请求从主节点进行读取，规避复制滞后的问题。
缺点：只保证单一用户写后读的的一致性，但是不保证多个用户的一致性。比如发了一条评论，自己能刷新到但是同在身边的朋友可能就刷新不到。
单调读一致性 前缀一致读 解决方案  应用层可以提供比数据库更强有力的保证。 事务是数据库提供的更强保证的一种方式。  </description>
    </item>
    
    <item>
      <title>复制日志实现</title>
      <link>https://www.linuxzen.com/notes/notes/20210614205249-%E5%A4%8D%E5%88%B6%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 14 Jun 2021 20:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614205249-%E5%A4%8D%E5%88%B6%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/</guid>
      <description>基于语句复制 优点：简单 缺点：语句副作用，或者随时间改变返回值的函数的使用会导致复制的数据产生改变。
基于预写日志（WAL）传输 优点：解决基于语句复制的问题。 缺点：日志描述过于底层：哪些磁盘块的哪些字节发生了改变，和引擎实现高度耦合，不利于模式演进。
基于行的逻辑日志复制 用一系列记录来描述数据表行级别的写请求：
 对于插入行，日志包含所有相关列的新值。 对于删除行，标记主键删除。 对于行货更新，记录主键和对应列的新值。  MySQL binlog 基于此模式。
优点：更利于模式演进，支持向后兼容，同时解耦特性引擎便于外部解析。
基于触发器的复制 触发器支持注册自己的应用层代码并在数据发生改变时被调用。
优点：将复制控制交给应用层，支持更高的灵活性。 缺点：开销更大，更容易出错。</description>
    </item>
    
    <item>
      <title>主从复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210614203213-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 14 Jun 2021 20:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614203213-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</guid>
      <description>主从模式下主节点进行写入，可以从从节点进行读取。
同步复制 主节点写入，并等待从节点写入后再返回写入成功。
半同步复制 主节点写入，选举一个从节点进行同步复制，其他从节点进行异步复制，一旦同步复制的从节点出现性能下降或故障则选用一个新的从节点进行同步复制。
异步复制 主节点写入，不等待从节点写入直接返回写入成功。</description>
    </item>
    
    <item>
      <title>数据复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210614203122-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 14 Jun 2021 20:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614203122-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/</guid>
      <description>主节点与从节点 复制 单个节点可以完整存放所有数据副本，节点间进行主从复制。
配置新从节点 可以通过快照来加速新从节点复制：
 对主节点的数据副本产生一个一致性快照，避免长时间锁定数据库。 拷贝快照到从节点 请求快照后面的更改日志 应用数据变更  节点失效 从节点失效：追赶式恢复 主节点失效：节点切换 自动切换
 确认失效 选举新的主节点 使主节点生效  挑战
 从节点复制不完整 各个数据层数据不一致，如 MySQL 和 Redis 之间 多个主节点选举：脑裂 如何有效检测主节点失效  复制日志实现 复制滞后问题 多主节点复制 使用场景 多数据中心 优点：
 性能 容忍数据中心失效 容忍网络问题  缺点：写冲突
离线客户端操作 协作编辑 处理写冲突 同步与异步冲突检测  同步：等待写请求完成对所有主节点的同步再通知用户写入成功。 异步：等待单一主节点写入成功后通知用户卸乳成功，稍后多主节点数据同步的时候才能检测到冲突  避免冲突 收敛于一致的状态 自定义冲突解决逻辑  写入时解决 读取时解决  拓扑结构  环形拓扑 星型拓扑 全部-至-全部型拓扑  无主节点复制 </description>
    </item>
    
    <item>
      <title>认同的话</title>
      <link>https://www.linuxzen.com/notes/notes/20210612092853-%E8%AE%A4%E5%90%8C%E7%9A%84%E8%AF%9D/</link>
      <pubDate>Sat, 12 Jun 2021 09:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210612092853-%E8%AE%A4%E5%90%8C%E7%9A%84%E8%AF%9D/</guid>
      <description> 当一个不可能出错的事物出错了，通常也就意味着不可修复 &amp;ndash; Douglas Adams，《基本无害》（1992）  </description>
    </item>
    
    <item>
      <title>Actor</title>
      <link>https://www.linuxzen.com/notes/notes/20210612091808-actor/</link>
      <pubDate>Sat, 12 Jun 2021 09:18:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210612091808-actor/</guid>
      <description>Actor 模型是用于单个进程中的并发模型。逻辑被封装在 Actor 中。每个 Actor 通常代表一个客户端或实体，可以具备本地状态（不共享），通过发送和接收异步消息与其他 Actor 通信。不保证消息传送：某些错误情况下，消息将丢失。每个 Actor 只处理一条消息，因此可以由框架独立调度。
Actor 框架集成了任务调度和消息流的框架。</description>
    </item>
    
    <item>
      <title>Avro</title>
      <link>https://www.linuxzen.com/notes/notes/20210610222725-avro/</link>
      <pubDate>Thu, 10 Jun 2021 22:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610222725-avro/</guid>
      <description>两种模式语言：IDL 用于人工编辑，另一种更易于机器读取。
Avro 编码数据中只有对应字段的长度和具体的数据，不包含字段的类型信息。
写模式与读模式  写模式：使用所知道的模式的任何版本来编码数据（可以编译到代码中） 读模式：解码时期望数据符合某个模式，可能是构建过程中基于模式生成  Avro 的关键思想是写模式和读不必完全一样，只需要保持兼容，由读取端解决差异：通过对比查看写模式和读模式并将数据从写模式转换为读模式。
 读取数据的代码中遇到出现在写模式但是不在读模式的字段，则忽略。 如果读数据的带代码需要某个字段，但是写模式不包含该字段的名称，则使用在读模式中声明的默认值填充。  模式演化  向前兼容：新版本的模式作为 writer，旧版本的模式作为 reader。 向后兼容：新版本的模式作为 reader，旧版本的模式作为 writer。  同时为了保持兼容性，只能添加莫删除具有默认值的字段。</description>
    </item>
    
    <item>
      <title>Thrift 与 Protocol Buffers</title>
      <link>https://www.linuxzen.com/notes/notes/20210610222754-thrift_%E4%B8%8E_protocol_buffers/</link>
      <pubDate>Thu, 10 Jun 2021 22:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610222754-thrift_%E4%B8%8E_protocol_buffers/</guid>
      <description>每个字段一个标记号码，字段名可以随意调整因为编码信息中只有标记号码，没有字段名称，但是标记号码不能随意调整，基于此可以实现：
 向前兼容 旧代码忽略不能识别的标记号码，并根据类型的注释来通知解析器跳过特定的字节数。 向后兼容 标记号码不变的情况下新的代码总是能够解析旧代码序列化的数据，但是新添加的字段不能标记为 required，不然会触发运行时错误。  同时为了保证前后兼容，删除字段也不能删除设置为 required 的字段，同时再次新添字段标记号码不能被再次使用。
改变类型同时也会导致前后兼容问题。</description>
    </item>
    
    <item>
      <title>数据编码与演化</title>
      <link>https://www.linuxzen.com/notes/notes/20210610215330-%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E6%BC%94%E5%8C%96/</link>
      <pubDate>Thu, 10 Jun 2021 21:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610215330-%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E6%BC%94%E5%8C%96/</guid>
      <description>模式演化要保证：
 向后兼容 较新的代码可以读取旧代码编写的数据 向前兼容 较旧的代码可以读取较新代码编写的数据  数据编码格式 语言特定格式  Python pickle Java java.io.Serializable Ruby Marshal  JSON、XML与二进制变体 二进制变体
 Message Pack：二进制的 JSON  Thrift 与 Protocol Buffers Avro 数据流模式 基于数据库的数据流 不同是写写入不同的值 归档存储 基于服务的数据流：REST 和 RPC RPC 的问题 给人一种本地调用的错觉，却需要面临网络的不确定性：延迟和超时。
基于消息传递的数据流 消息中间件：RabbitMQ、Kafka 分布式Actor 框架：Akka、Erlang OTP </description>
    </item>
    
    <item>
      <title>OLAP</title>
      <link>https://www.linuxzen.com/notes/notes/20210610214521-olap/</link>
      <pubDate>Thu, 10 Jun 2021 21:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610214521-olap/</guid>
      <description>在线分析处理（Online Analytic Processing，OLAP）。</description>
    </item>
    
    <item>
      <title>OLTP</title>
      <link>https://www.linuxzen.com/notes/notes/20210610214348-oltp/</link>
      <pubDate>Thu, 10 Jun 2021 21:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610214348-oltp/</guid>
      <description>在线事务处理（Online Transaction Processing，OLTP）。</description>
    </item>
    
    <item>
      <title>B-trees</title>
      <link>https://www.linuxzen.com/notes/notes/20210606143901-b_trees/</link>
      <pubDate>Sun, 06 Jun 2021 14:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606143901-b_trees/</guid>
      <description>B-tree 是最广泛使用的索引结构。和排序字符串表：SSTables一样，B-tree 保留按键排序的 key-value 对， 这样可以实现高效的 key-value 查找和区间查询。
结构 B-tree 将数据库分解成固定大小的页或块，传统上 4KB，这种设计更接近底层硬件，磁盘也是以固定大小的块排列的。
 分页因子 B-tree 中一个页所包含的子页引用数量称为分支因子。
添加新键  找到其范围新键的页 如果页没有足够的可用空间来容纳新键，则将其分裂为两个半满的页，并更新父页以包含新的键范围。    算法确保树保持平衡：具有 n 个键的 B-tree 总是具有 \(O(log n)\) 的深度。大多数据库适合 3~4 层的 B-tree。 分支因子为 500 的 4KB 页的四级树可以存储高达 256TB。
可靠性：WAL B-tree 底层的基本写操作是使用新的数据覆盖磁盘上的旧页。
如果发生页分裂则需要覆盖多个不同的页，同时更新父页，这个操作比较危险，如果此时发生崩溃则会破坏索引。 常见的 B-tree 使用额外的数据结构：预写日志（write-ahead log, WAL），也称为重做日志：
 追加的写 WAL； 每个 B-tree 必须先更新 WAL 然后再修改树本身的页。  通过使用「锁存器」保护进行并发控制，保护 B-tree 页被多个线程访问而看到树不一样的状态。
优化  通过复制方案替代 WAL 进行崩溃恢复，修改的页被写入不同的位置，树中父页的新版本被创建，并指向新的位置。 保存键的缩略信息，可以压入更多的键，保持更高的分支因子，减少层数。 对树进行布局，相邻叶子页按顺序保存在磁盘。 添加额外的指针到树中，如左右兄弟页。 变体，如分形树：借鉴日志结构减少磁盘寻道。  </description>
    </item>
    
    <item>
      <title>哈希索引</title>
      <link>https://www.linuxzen.com/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sun, 06 Jun 2021 10:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</guid>
      <description>索引 先来看一个世界上由 Bash 实现的最简单的数据库实现：
#!/bin/bash db_set() { echo &amp;#34;$1,$2&amp;#34; &amp;gt;&amp;gt; database } db_get() { grep &amp;#34;^$1,&amp;#34; database | sed -e &amp;#34;s/^$1,//&amp;#34; | tail -n 1 } 这种数据库通过追加文件尾部的方式高效写入，许多数据库内部都是用日志，日志是一个仅支持追加更新的数据文件。但是 db_get 的性能会随着数据量的变大而下降，为了解决这个问题就需要引入新的数据结构： 索引 。
索引是基于原始数据而派生而来的额外数据结构：适当的索引可以加速读取查询，但是回减慢写速度。
key-value 索引通常使用 hash map 来实现，最简单的索引策略：保存内存中的 hash map，把每个键一一映射到数据文件中特定的字节偏移量。
优化磁盘占用  将日志分解成一定大小的段，当文件达到一定大小时就关闭它，并将后续写入到新的段文件中。 然后可以在这些段上执行压缩：丢弃重复的键，并且只保留每个键最近的更新。 同时将变小后的多个段在后台合并在一起（段在写入后不再会进行修改所以不会出现竞争）。 合并完成后将读取请求切换到新的合并段上，然后可以安全的删除旧的段文件。  实现中面临的问题  文件格式：二进制。 删除记录：通过特殊的墓碑标记。 崩溃恢复：Bitcask 通过将 hash map 快照存储到磁盘。 部分写入：文件校验丢弃损坏的部分。 并发控制：只有一个写线程。  追加的好处  顺序写性能高。 并发控制和崩溃恢复简单。 段合并避免文件碎片化。  局限性  大量的键存储在内存可能导致内存耗尽，同时需要处理哈希冲突 区间查询效率不高。  </description>
    </item>
    
    <item>
      <title>排序字符串表：SSTables</title>
      <link>https://www.linuxzen.com/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/</link>
      <pubDate>Sun, 06 Jun 2021 10:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/</guid>
      <description>SSTables 通过按照键的顺序存储在日志段文件中来解决哈希索引面临的一些问题。它要求每个键在每个合并的段文件中只能出现一次（通过压缩确保）。
对比哈希索引的日志段 优点   合并段更加高效，即使文件大于可用内存。类似于归并排序算法中使用的方法。并发读取多个输入段文件，比较每个文件的第一个键，把最小的键拷贝到输出文件，并重复。
解决多个段文件重复：保留最新的值，因为每个段包含在某段时间内写入数据库的所有值，意味着肯定有一个值比其他所有值更新。
  基于键有序的特性可以采用稀疏索引避免内存中包含所有键的索引。
  将一定范围内的所有键存储到一个块中，便于需要请求范围内多个 key-value，降低磁盘 I/O。
  构建和维护 保证顺序 内存中痛哦红黑树或者 AVL 树支持任意顺序插入并以排序后的顺序读取它们。
 写入时，将其添加到内存中的平衡树数据结构中，成为内存表。 内存表大于某个阈值（MB级别），将其作为 SSTable 文件写入磁盘。写入同时，写入可以继续添加到一个新的内存表实例中。 处理请求顺序：首先从内存表中查找键 -&amp;gt; 最新的磁盘段文件 -&amp;gt; 次新磁盘段文件，以此类推。 后台进程周期性执行段合并与压缩，合并多个段文件并丢弃被覆盖或着删除的值。  崩溃处理 为了避免数据库崩溃最近的写入（在内存表中尚未写入磁盘）将会丢失的问题：
 在磁盘上保留单独的日志，每个写入都会立即追加到该日志。并且无需排序。 内存表写入 SSTable 时，丢弃相应的日志。  使用此技术的数据库  LevelDB RocksDB  类似的
 Cassandra HBase  </description>
    </item>
    
    <item>
      <title>LSM-Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20210606100317-lsm_tree/</link>
      <pubDate>Sun, 06 Jun 2021 10:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606100317-lsm_tree/</guid>
      <description> 日志结构合并树（Log-Structured Merge-Tree）：基于合并和压缩排序文件原理的存储引擎通常都被称为 LSM 存储引擎。
 压缩排序文件基于排序字符串表：SSTables。
LSM-Tree 基本思想：保存在后台并合并的排序字符串表：SSTables。即使数据集远远大于可用内存，仍然能够正常工作。 基于有序的特性，可以有效的执行区间查询，并且由于磁盘是顺序写入，所以 LSM-Tree 可以支持非常高的写入吞吐量。
性能优化  通过布隆过滤器优化 LSM-Tree 查找不存在的键性能低下的问题。 通过大小分级和分层压缩优化 SSTables 压缩和合并时的具体顺序和时机。  大小分级：较新和较小的 SSTables 被连续合并到较旧和较大的 SSTables。 分层压缩：键的范围分裂成多个更小的 SSTables，就数据被移动到单独的“层级”，这样压缩可以逐步进行并节省磁盘空间。    </description>
    </item>
    
    <item>
      <title>数据存储与检索</title>
      <link>https://www.linuxzen.com/notes/notes/20210606095514-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/</link>
      <pubDate>Sun, 06 Jun 2021 09:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606095514-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/</guid>
      <description>存储引擎 哈希索引 日志结构存储引擎：LSM-Tree 面向页的存储引擎：B-trees 对比 LSM-Tree 和 B-trees    项目 LSM-Tree B-trees 备注     性能 写入更快，吞吐更高 读取更快 具体场景上需要进行基准测试   存储 可变大小的段，通常 nMB 固定大小的页，传统 4KB    写入 追加，写入更多不利于 SSD 新的数据覆盖磁盘上旧的页    并发控制 后台合并进行原子替换 锁存器     其他索引结构   在索引中存储值
  多列索引
  全文索引和模糊索引
  在内存中保存所有内容
优点：可以支持更复杂的数据结构，而无需考虑数据存储结构。
  事务处理与分析处理 事务处理：OLTP 分析处理：OLAP 对比    属性 OLTP OLAP     主要读属性 基于键，每次查询返回少量记录 对于大量记录进行汇总   主要写属性 随机访问，低延迟写入用户的输入 批量导入（ETL）或事件流   典型使用场景 终端用户，通过网络应用程序 内部分析师，为决策提供支持   数据表征 最新的数据状态（当前时间点） 随着事件而变化的所有事件历史   数据规模 GB 到 TB TB 到 PB    数据仓库 星型与雪花型分析模式 星型模型也称为维度建模。</description>
    </item>
    
    <item>
      <title>数据模型与查询语言</title>
      <link>https://www.linuxzen.com/notes/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Sun, 06 Jun 2021 09:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</guid>
      <description>关系模型 突出数据之间的关联。
文档模型 数据来自于包含文档，文档间关联很少。
图状数据模型 针对所有数据都可能互相关联。</description>
    </item>
    
    <item>
      <title>可靠、可扩展与可维护的应用系统</title>
      <link>https://www.linuxzen.com/notes/notes/20210604221658-%E5%8F%AF%E9%9D%A0_%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 04 Jun 2021 22:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210604221658-%E5%8F%AF%E9%9D%A0_%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</guid>
      <description>可靠性 故障与失效  故障（faults）或者错误：组件偏离其正常规格，可以提供容错（fault-tolerant）机制 失效（failure）意味系统作为一个整体停止  硬件故障 软件错误 人为失误 避免优化方式：
 以最小出错方式设计系统。抽象、提供管理界面，使“做正确的事很轻松”，防止限制过多。 分离最容易出错的地方，提供沙箱用以放心尝试。 充分测试。 提供快速恢复机制尽量减少故障影响：快速回滚，提供校验数据的工具。 设置详细而清晰的监控系统 培训和流程  可扩展性 描述负载  QPS 数据库写入比例 同时在线活动用户数 缓存命中率等。  描述性能  吞吐量（throughput）/每秒处理数据量 延迟（latency）/响应时间（response time）：延迟是处理时间，响应时间是客户端看到的。  最好通过百分位数来监控指标：p50/p80/p90/p95/p99/p999，p50 指标表示一半请求在这个指标之下，一半在这个指标之上。
应对负载增加  无状态很方便扩容 但有状态的分布式面临一定的挑战  可维护性 可运维性：运维更轻松 监控、文档、自动化、良好的默认配置、可手动控制系统状态让系统自我修复（比如熔断机制）。
简单性：简化复杂度 抽象！
可演化性：易于改变  TDD 重构  </description>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20210604221412-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 04 Jun 2021 22:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210604221412-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>数据系统基础 可靠、可扩展与可维护的应用系统 数据模型与查询语言 数据存储与检索 数据编码与演化 分布式数据系统 目的：扩展性、容错和高可用、延迟考虑（多机房）
扩展：
 垂直扩展：提升单机性能 水平扩展：无共享结构，由软件实现核心逻辑  复制与分区：
 复制：多节点冗余 分区：数据库拆分 分片：分区分配给不同的节点  数据复制 数据分区 事务 分布式系统挑战 一致性与共识 派生数据  记录系统：真实数据系统，拥有数据的权威版本。 派生数据系统：从另一个数据系统获取，丢失可以根据数据源重建，如缓存等。  批处理系统 </description>
    </item>
    
    <item>
      <title>项目代号</title>
      <link>https://www.linuxzen.com/notes/notes/20210525113247-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E5%8F%B7/</link>
      <pubDate>Tue, 25 May 2021 11:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210525113247-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E5%8F%B7/</guid>
      <description>几何结构  mobius Klein Trefoil knot Penrose triangle  植物  bonsai  科幻  tardis dalek 消灭  神话 </description>
    </item>
    
    <item>
      <title>macOS 问题解决三板斧</title>
      <link>https://www.linuxzen.com/notes/notes/20210322145956-macos_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B8%89%E6%9D%BF%E6%96%A7/</link>
      <pubDate>Mon, 22 Mar 2021 14:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210322145956-macos_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B8%89%E6%9D%BF%E6%96%A7/</guid>
      <description>通常你沟通苹果的官方支持一般都会给你三板斧：
 重启：按住电源键 10 秒中，然后等几秒钟后再开机 重置 SMC：关机然后按住：Ctrl + Option + 右侧Shift + 电源键 7 秒钟关机，等待几秒钟后开机。  </description>
    </item>
    
    <item>
      <title>macOS TimeMachine 日志</title>
      <link>https://www.linuxzen.com/notes/notes/20210322145854-macos_timemachine_%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 22 Mar 2021 14:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210322145854-macos_timemachine_%E6%97%A5%E5%BF%97/</guid>
      <description>查看 TimeMachine 日志：
printf &amp;#39;\e[3J&amp;#39; &amp;amp;&amp;amp; log show --predicate &amp;#39;subsystem == &amp;#34;com.apple.TimeMachine&amp;#34;&amp;#39; --debug --last 6m </description>
    </item>
    
    <item>
      <title>English IPA</title>
      <link>https://www.linuxzen.com/notes/notes/20210317141647-english_ipa/</link>
      <pubDate>Wed, 17 Mar 2021 14:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210317141647-english_ipa/</guid>
      <description>一些通用的规则：
 音标后面的 ː 提示拖长音。  元音 大而圆    音标 中文 发音技巧 常见单词 拼读规则     /​æ​/ 爱 张大嘴发中文的「爱」,发音短促有力。 bag map dad sad a   /​e​/ 爱 音同 /​æ​/ 但是嘴形要小一些。 get let pen yes e   /​ɔː​/ 哦 嘴巴轮圆了发音，并拖长音 floor door store sport oor,ore,or   /​ɔ​/ 哦 /​ɔː​/ 的短音 lot dog hot shop o    扁扁扁    音标 中文 发音技巧 常见单词 拼读规则     /iː​/ 一 相比一嘴要扁一些，稍稍更用力一些 see meet he she ee, e   /​i​/ 一 /iː​/ 短音 happy daddy honey 词尾的 y 或 ey   /​I​/ 一 用 /​e​/ 的嘴形发 /​i​/ this give it city i   /əː​/ 呃 相比中文嘴要扁一些，稍稍更用力一些 work girl dirt sir or, ir   /​ə​/ 呃 /əː​/ 的短音 again a father weather 单独的 a 及词尾的 er    需要额外注意的：</description>
    </item>
    
    <item>
      <title>Learning English</title>
      <link>https://www.linuxzen.com/notes/notes/20210317141621-learning_english/</link>
      <pubDate>Wed, 17 Mar 2021 14:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210317141621-learning_english/</guid>
      <description> English IPA  </description>
    </item>
    
    <item>
      <title>二叉树的遍历</title>
      <link>https://www.linuxzen.com/notes/notes/20210220203210-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 20 Feb 2021 20:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220203210-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <description>分为三种：前序、后序和中序，其中最容易用栈改写的是后序。
前序(Preorder)：Root -&amp;gt; Left -&amp;gt; Right class Solution { public: void processPreorderTraversal(TreeNode* root, vector&amp;lt;int&amp;gt; &amp;amp; collector) { if (root == nullptr) { return; } processPreorderTraversal(root-&amp;gt;left, collector); collector.push_back(root-&amp;gt;val); processPreorderTraversal(root-&amp;gt;right, collector); } vector&amp;lt;int&amp;gt; inorderTraversal(TreeNode* root) { vector&amp;lt;int&amp;gt; ret; if (root == nullptr) { return ret; } processPreorderTraversal(root, ret); return ret; } }; 中序(Inorder): Left -&amp;gt; Root -&amp;gt; Right class Solution { public: void processInorderTraversal(TreeNode* root, vector&amp;lt;int&amp;gt; &amp;amp; collector) { if (root == nullptr) { return; } processInorderTraversal(root-&amp;gt;left, collector); collector.</description>
    </item>
    
    <item>
      <title>OX-HUGO 批量导出 Markdown</title>
      <link>https://www.linuxzen.com/notes/notes/20210220175534-ox_hugo_%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA_markdown/</link>
      <pubDate>Sat, 20 Feb 2021 17:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220175534-ox_hugo_%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA_markdown/</guid>
      <description>方案一：通过 Emacs 批处理模式 emacs file.org --batch -f org-hugo-export-wim-to-md --kill --batch 默认不启用配置文件，可以使用 -l
emacs file.org --batch -l ~/.emacs.d/init.el -f org-hugo-export-wim-to-md --kill 方案二：通过 LISP 遍历 (mapc (lambda (x) (with-current-buffer (find-file-noselect x) (org-hugo-export-wim-to-md t))) (directory-files &amp;#34;/Users/wh/codes/notes/roam-research-notes-hugo/journal&amp;#34; nil &amp;#34;^[0-9]+$&amp;#34; t)) </description>
    </item>
    
    <item>
      <title>中间件</title>
      <link>https://www.linuxzen.com/notes/notes/20210220165816-%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Sat, 20 Feb 2021 16:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220165816-%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>中间件可以对系统进行解耦，比如上层系统对下层系统进行网络请求，考虑下面结构
- U - / | \ /--- | ---\ / | \ A B C 如果下层系统增加节点的话就需要重启 U。
引入 HAProxy 或者 Nginx 之类的中间件可以对两层系统进行解耦：
U | +------+ | HA | +------+ / | \ /--- | ---\ / | \ A B C 这样上层和下层系统都依赖中间件，但是系统之间不再强耦合，下层系统可以依赖中间件随意的进行所扩容而不用被上层系统感知。 这时候中间件只要保证中间件稳定即可，可以在中间件上进行热重启。</description>
    </item>
    
    <item>
      <title>技术随想</title>
      <link>https://www.linuxzen.com/notes/notes/20210220165806-%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/</link>
      <pubDate>Sat, 20 Feb 2021 16:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220165806-%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/</guid>
      <description> 中间件 项目代号 技术概念  </description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; thread-local storage</title>
      <link>https://www.linuxzen.com/notes/notes/20210219200958-c_c_thread_local_storage/</link>
      <pubDate>Fri, 19 Feb 2021 20:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210219200958-c_c_thread_local_storage/</guid>
      <description> All about thread-local storage  </description>
    </item>
    
    <item>
      <title>macOS max open files</title>
      <link>https://www.linuxzen.com/notes/notes/20210125174343-macos_max_open_files/</link>
      <pubDate>Mon, 25 Jan 2021 17:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210125174343-macos_max_open_files/</guid>
      <description>fix &amp;ldquo;Too many open files in system&amp;rdquo; error</description>
    </item>
    
    <item>
      <title>GDB 打出所有线程的 Backtrace</title>
      <link>https://www.linuxzen.com/notes/notes/20210118114707-gdb_%E6%89%93%E5%87%BA%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E7%9A%84_backtrace/</link>
      <pubDate>Mon, 18 Jan 2021 11:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210118114707-gdb_%E6%89%93%E5%87%BA%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E7%9A%84_backtrace/</guid>
      <description>thread apply all bt </description>
    </item>
    
    <item>
      <title>GDB</title>
      <link>https://www.linuxzen.com/notes/notes/20210118114626-gdb/</link>
      <pubDate>Mon, 18 Jan 2021 11:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210118114626-gdb/</guid>
      <description> GDB 打出所有线程的 Backtrace macOS 签名 GDB  </description>
    </item>
    
    <item>
      <title>C&#43;&#43; LSP</title>
      <link>https://www.linuxzen.com/notes/notes/20210114175011-lsp/</link>
      <pubDate>Thu, 14 Jan 2021 17:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210114175011-lsp/</guid>
      <description>通过如下命令生成 clangd 识别的编译配置文件
mkdir build cd build cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .. mv compile_commands.json ../ 然后重启 M-x lsp-restart-workspace RET 即可。</description>
    </item>
    
    <item>
      <title>Python behind the scenes #2: how the CPython compiler works</title>
      <link>https://www.linuxzen.com/notes/notes/20201015182827-python_behind_the_scenes_2_how_the_cpython_compiler_works/</link>
      <pubDate>Thu, 15 Oct 2020 18:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20201015182827-python_behind_the_scenes_2_how_the_cpython_compiler_works/</guid>
      <description>Python 幕后 #2: CPython 编译器如何工作 今天的主题（Today&amp;rsquo;s subject） 在本系列的第一篇文章中我们研究了 Python 虚拟机。我们学了解到它通过执行一系列叫做字节码（bytecode）的指令。 我们也看到 Python 字节码没有完全描述代码片段的行为。这也是为什么存在一个代码对象（code object）的概念。 执行诸如函数或模块的代码块也就是执行对应的代码对象。代码对象包含了代码块的字节码，包含代码中使用的常量和变量名， 还有代码块的一些属性。
通常，一个 Python 程序员不用编写字节码，并且也不用创建代码对象，而是编写正常的 Python 代码。所有 CPython 必须 能够将源代码转换成代码对象。CPython 编译器就负责这部分工作。我们将通过这部分内容探索它是如何工作的。
Note: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。 我将会尝试关注一些重要的改变并添加更新备注。
什么是 CPython 编译器（What CPython compiler is） 我们已经了解了 CPython 编译器的职责，但是在我们进入到它是如何实现的之前，让我们首先来搞清楚为什么我们称之为编译器？
在通常情况加，编译器是一个将一个程序语言翻译到另一个与之等价的程序语言的程序。编译器有许多种类，但是通常情况下我们 讨论的都是静态编译：将一个高级语言的程序翻译成机器码。CPython 编译器也是这样吗？要回答这个问题，我们先看一下静态编 译器的传统三阶段设计（three-stage design）。
 编译器前端（frontend）将源代码转换成一种中间语言（IR,intermediate representation）。然后优化器（optimzer）拿到中间语言 对其进行优化并把优化过的中间语言传递给编译器后端生成机器码。如果我们选择一种源语言和目标机器无关的中间语言，我们就 得到了三阶段设计的关键益处：对于一个编译器来说，支持一种新的源语言仅仅需要新增一个对应的编译器前端，支持一种新的目标机器 仅仅需要新增一个对应的编译器后端。
LLVM 工具集（toolchain）就是这个模型的一个很好的成功的例子。有很多编译器前端如 C、Rust、Swift 等其他很多编程语言基于 LLVM 提供给编译器更加复杂的部分。LLVM 的创建者 Chris Latter 提供了一个很好的 LLVM 架构概览。
CPython 尽管不需要支持多个源语言和目标机器，尔仅仅需要支持 Python 代码和 CPython 虚拟机。不过，CPython 同样实现了三阶段设计。 如果想知道为什么，我们需要更加详细的解释编译器的三阶段的每个阶段。</description>
    </item>
    
    <item>
      <title>straight.el 命令</title>
      <link>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Tue, 06 Oct 2020 20:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0/</guid>
      <description>M-x straight-thaw-versions RET 恢复到锁定的版本 M-x straight-pull-all RET 更新所有包 M-x straight-freeze-versions RET 锁定当前版本  Duplicated with straight.el 更新所有已安装的包</description>
    </item>
    
    <item>
      <title>straight.el 更新所有已安装的包</title>
      <link>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/</link>
      <pubDate>Tue, 06 Oct 2020 20:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/</guid>
      <description> straight-thaw-versions straight-pull-all straight-freeze-versions  </description>
    </item>
    
    <item>
      <title>Emacs Buffer 名字去重</title>
      <link>https://www.linuxzen.com/notes/notes/20200927170116-emacs_buffer_%E5%90%8D%E5%AD%97%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Sun, 27 Sep 2020 17:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200927170116-emacs_buffer_%E5%90%8D%E5%AD%97%E5%8E%BB%E9%87%8D/</guid>
      <description> https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Uniquify.html  </description>
    </item>
    
    <item>
      <title>范数（norm）</title>
      <link>https://www.linuxzen.com/notes/notes/20200912102351-%E8%8C%83%E6%95%B0/</link>
      <pubDate>Sat, 12 Sep 2020 10:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912102351-%E8%8C%83%E6%95%B0/</guid>
      <description>具有“长度”概念的函数。在线性代数、泛函分析等相关数学领域，是一个函数，其为向量空间内所有向量赋予非零的正长度或大小。</description>
    </item>
    
    <item>
      <title>MAE（平均绝对误差）</title>
      <link>https://www.linuxzen.com/notes/notes/20200912101549-mae_%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE/</link>
      <pubDate>Sat, 12 Sep 2020 10:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912101549-mae_%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE/</guid>
      <description>\[MAE(X,h) = \frac{1}{m}\sum_{i=1}^{m}\left\lvert h(x^{(i)} - y ^{i})\right\rvert\]</description>
    </item>
    
    <item>
      <title>RMSE（均方根误差）</title>
      <link>https://www.linuxzen.com/notes/notes/20200912094544-rmse_%E5%9D%87%E6%96%B9%E6%A0%B9%E8%AF%AF%E5%B7%AE/</link>
      <pubDate>Sat, 12 Sep 2020 09:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912094544-rmse_%E5%9D%87%E6%96%B9%E6%A0%B9%E8%AF%AF%E5%B7%AE/</guid>
      <description>测量预测过程中的预测错误的标准差。
公式
\[RMSE(X,h)=\sqrt{\frac{1}{m}\sum_{i=1}^{m}(h(x^{(i)}) - y^{(i)})^2}\]
 m 是你在测量 RMSE 时，所使用的数据集中实例的数量 \(x^{(i)}\) 是数据集中第 \(i\) 个实例的所有特征值的向量（标签特征除外），\(y{(i)}\) 是标签（也就是我们期待该实例的输出值） X 是数据集中所有实例所有特征值的矩阵（标记特征除外）。每个实例一行，也就是说第 \(i\) 行等于 \(x^{(i)}\) 的转置矩阵1，记作 \((x^{(i)})^T\) h 是系统的预测函数，也称为一个假设。当给定系统一个实例的特征向量 \(x^{(i)}\) ，他会输出一个预测值 \(\hat{y}=h(x^{(i)})\) RMSE(X,h) 是使用假设 h 在示例上测量的成本函数。    转置运算符会将列向量转换成行向量。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>机器学习涉及数学概念</title>
      <link>https://www.linuxzen.com/notes/notes/20200912093811-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B6%89%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sat, 12 Sep 2020 09:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912093811-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B6%89%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</guid>
      <description>公式  RMSE（均方根误差） MAE（平均绝对误差）  概念  标准差（Std Dev） 范数  方差 皮尔逊相关系数（标准相关系数） 线性相关性 </description>
    </item>
    
    <item>
      <title>Python behind the scenes #1: how the CPython VM works</title>
      <link>https://www.linuxzen.com/notes/notes/20200908103647-python_behind_the_scenes_1_how_the_cpython_vm_works/</link>
      <pubDate>Tue, 08 Sep 2020 10:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200908103647-python_behind_the_scenes_1_how_the_cpython_vm_works/</guid>
      <description>原文链接：Python behind the scenes #1: how the CPython VM works。
Python 幕后 #1: CPython 虚拟机如何工作 介绍（Introduction） 你是否曾经好奇过当你运行 Python 代码时 python 做了些什么？
$ python script.py 这篇文章将开启一个系列来尝试解答这个问题。我们将深入 Python 最流行的实现 CPython 的内部。 通过深入 CPython 的内部我们将更深一层的去理解这门编程语言本身。这也是我们这个系列的最主要的目标。 如果你熟悉 Python 并且可以阅读 C 代码，但是对 CPython 源码本身没有太多的经验， 那么你可能非常适合本系列，并且对本系列感兴趣。
什么是 CPython 并且为什么有人想学习它（What CPython is and why anyone would want to study it） 我们首先来说明一些众所周知的事情。CPython 是用 C 编写的 Python 解析器。他是 Python 语言的众多实现 的一种，其他还有诸如 PyPy、Jython、IronPython 等。CPython 的独特之处在于它是 Python 的起源、维护时间最长也是最受欢迎的。
CPython 实现了 Python，但是 Python 是什么？最简单的一个答案可能是：Python 是一门编程语言。 当正确问相同的问题，那么答案将会更加明确：什么定义了 Python？Python 不像 C 语言有正式的规范， 但是与之相近的是 Python 语言参考（Python Language Reference），它以如下内容开始：</description>
    </item>
    
    <item>
      <title>机器学习测试与验证</title>
      <link>https://www.linuxzen.com/notes/notes/20200907081217-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Mon, 07 Sep 2020 08:12:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200907081217-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81/</guid>
      <description>将数据分成两部分：训练集和测试集，通常使用 80% 的数据进行训练，20% 的数据用来测试。
验证集 单独分出来一个保留集合作为验证集，防止调整模型和超参数拟合测试集的最佳模型。
交叉验证 为避免验证集浪费太多数据，交叉验证将训练集分成若干个互补子集，然后每个模型都通过这些子集的不同组合来 训练，之后用剩余的子集进行验证。</description>
    </item>
    
    <item>
      <title>机器学习的主要挑战</title>
      <link>https://www.linuxzen.com/notes/notes/20200907080323-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8C%91%E6%88%98/</link>
      <pubDate>Mon, 07 Sep 2020 08:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200907080323-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8C%91%E6%88%98/</guid>
      <description>训练数据的数量不足 训练数据不具代表性 质量差的数据 无关特征 特征工程 一个成功的机器学习项目，关键部分是提取一组好的用了训练的特征集，这个过程叫做特征工程。
 特征选择 特征提取 通过手机数据创造新的特征  训练数据过度拟合 在模型的训练数据上表现良好，但是泛化时却不尽人如意。
解决方法
 简化模型 收集更多的训练数据 减少训练数据中的噪声（修复数据错误和消除异常值）  正则化 通过约束模型使其更简单，并降低过度拟合风险。
超参数 通过调整超参数来调整应用正则化的程度。调整超参数是构建机器学习系统的非常重要的组成部分。
训练数据拟合不足 解决方法：
 选择一个带有更多参数、更强大的模型 给学习算法提供更好的特征集 减少模型中的约束（如减少正则化超参数）  </description>
    </item>
    
    <item>
      <title>机器学习系统的种类</title>
      <link>https://www.linuxzen.com/notes/notes/20200907074200-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A7%8D%E7%B1%BB/</link>
      <pubDate>Mon, 07 Sep 2020 07:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200907074200-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A7%8D%E7%B1%BB/</guid>
      <description>监督式/无监督式学习 监督式学习 定义 训练数据经过标注包含素所需解决方案（标签或标记）
相关算法  K-邻近算法 线性回归 逻辑回归：广泛用于分类，输出“属于某个给定类别的概率”的值 支持向量机 决策树和随机森林 神经网络  适应场景  分类任务 预测变量  无监督式学习 定义 训练数据未经标注
相关算法  聚类算法  K-平均算法 分层聚类分析 最大期望算法   可视化和降维  主成分分析 核主成分分析 局部线性嵌入 t-分布随机临近嵌入   关联规则学习  Apriori Eclat    适应场景  通过聚类算法检测相似（层次聚类算法精度更高，可以再次细分） 可视化算法 降维：不丢失太多信息的前提下简化数据，方法之一是合并特征，过程叫做特征提取 异常检测：判断新的输入是正常还是异常，数据初筛、防作弊等 关联规则学习：发现属性之间有趣的联系  半监督式学习 大量未标记数据和少量标记数据进行学习。
强化学习 观察环境、作出选择、执行操作、并获得回报（负值则为惩罚）。
批量学习和在线学习 在数据流中进行增量学习。
批量学习 在线学习 在线学习也称为增量学习，同时支持恢复到上一状态，便于检测到性能下降及时中断和回滚。
核外学习 超大数据集超出一台计算机的主存储器，每次加载部分数据并不断重复直至完成训练。
学习率 学习率高系统迅速适应新数据，同时快速忘记老数据，学习率低则反之。
基于实例和基于模型的学习 基于实例的学习 系统完全记住学习示例，然后通过某种相似度度量方式将其泛化到新的实例。
基于模型的学习 模型选择 观察数据得出模型的过程。</description>
    </item>
    
    <item>
      <title>《机器学习实战》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200905075701-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 05 Sep 2020 07:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200905075701-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>概览  机器学习系统的种类 机器学习的主要挑战 机器学习测试与验证  模型是观察的简化。
相关数学概念  机器学习涉及数学概念  </description>
    </item>
    
    <item>
      <title>Machine Learning</title>
      <link>https://www.linuxzen.com/notes/notes/20200903180214-machine_learning/</link>
      <pubDate>Thu, 03 Sep 2020 18:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200903180214-machine_learning/</guid>
      <description> scikit-learn 提供一些常见的机器学习算法  逻辑回归(Logistic Regression aka LR) 线性分类器   XGBoost 提供随机森林解决逻辑回归特征不明显的问题  </description>
    </item>
    
    <item>
      <title>Rust Obscure Words for non-native English speakers</title>
      <link>https://www.linuxzen.com/notes/notes/20200829081145-rust_obscure_words_for_non_native_english_speakers/</link>
      <pubDate>Sat, 29 Aug 2020 08:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200829081145-rust_obscure_words_for_non_native_english_speakers/</guid>
      <description> unwinding  </description>
    </item>
    
    <item>
      <title>Rust Asynchronous Programming</title>
      <link>https://www.linuxzen.com/notes/notes/20200828160809-rust_asynchronous_programming/</link>
      <pubDate>Fri, 28 Aug 2020 16:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200828160809-rust_asynchronous_programming/</guid>
      <description>Future  async fn 将一个代码块转换为一个 Future 对象， Future 对象维护一个状态机 Future 对象必须运行在一个 Executor 上  Executor   futures::executor::block_on 阻塞当前线程直到 future 完成
// `block_on` blocks the current thread until the provided future has run to // completion. Other executors provide more complex behavior, like scheduling // multiple futures onto the same thread. use futures::executor::block_on; async fn hello_world() { println!(&amp;#34;hello, world!&amp;#34;); } fn main() { let future = hello_world(); // Nothing is printed  block_on(future); // `future` is run and &amp;#34;hello, world!</description>
    </item>
    
    <item>
      <title>Go Swagger 实现代码即文档</title>
      <link>https://www.linuxzen.com/notes/notes/20200828104706-go_swagger/</link>
      <pubDate>Fri, 28 Aug 2020 10:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200828104706-go_swagger/</guid>
      <description>目标 当跟随这篇文章完成后将产出如下内容：
 代码 http://gitlab.17zuoye.net/vgo/go-swagger-example 文档 http://swagger.17zuoye.net/?url=http%3A%2F%2F10.200.242.61%3A9090%2Fswagger.json  准备  Go1.14 及以上版本 安装 go-swagger ：参见 官方文档。 接下来使用 gin 框架作为示例，如果之前没接触过可以先了解下该框架  创建一个项目 $ mkdir go-swagger-example $ cd go-swagger-example/ $ go mod init gitlab.17zuoye.net/vgo/go-swagger-example 开始使用 首先在你的 `main.go` 定义 go generate 像下面这样：
//go:generate swagger generate spec -o ./swagger.yml package main func main() { println(&amp;#34;Hello world!&amp;#34;); } 此时如果运行 go generate 在项目目录下就会生成一个 swagger.yml 文件：
paths: {} swagger: &amp;#34;2.0&amp;#34; 使用单独的包托管 swagger 相关定义 在之前实践的过程中发现，如果在多个包中定义了相同名称的结构体会到只一个结构体覆盖另外一个结构体的定义。 所以为了解决这个问题，我把所有 swagger 相关的定义都放在同一个包下来避免相同名字的结构体。</description>
    </item>
    
    <item>
      <title>MySQL forget password</title>
      <link>https://www.linuxzen.com/notes/notes/20200827195950-mysql_forget_password/</link>
      <pubDate>Thu, 27 Aug 2020 19:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827195950-mysql_forget_password/</guid>
      <description>启动 mysqld 时加上 --skip-grant-tables 参数可以无密码进入 MySQL。</description>
    </item>
    
    <item>
      <title>MVCC</title>
      <link>https://www.linuxzen.com/notes/notes/20200827195823-mvcc/</link>
      <pubDate>Thu, 27 Aug 2020 19:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827195823-mvcc/</guid>
      <description>https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/  来自《高性能 MySQL》：
InnoDB 在每一行都隐式的多存储两个字段：
 事务更新版本 事务删除版本  当事务开始时记录这两个版本，在读取的时候根据 Undo Log 和 Redo Log 来实现隔离级别的控制。序列化隔离级别下只能通过行锁来保证。
在可重复读隔离级别下：
 首先判断事务更新版本是否大于事务开始前的版本 如果大于则根据 Undo Log 进行回退实现可重复读，这样在同一事务下不管读多少遍读取到的内容都是一样的。  可重复读隔离即便下无法避免幻读：即一开始没有读取到，随着其他插入事务的提交在同一事务里执行查询又能读取到的情况。</description>
    </item>
    
    <item>
      <title>MySQL grant subnet</title>
      <link>https://www.linuxzen.com/notes/notes/20200827195621-mysql_grant_subnet/</link>
      <pubDate>Thu, 27 Aug 2020 19:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827195621-mysql_grant_subnet/</guid>
      <description>https://stackoverflow.com/a/38389851/2873718
MySQL 授权用户子网段需要使用:
172.16.0.0/255.240.0.0 而不能使用
172.16.0.0/12 </description>
    </item>
    
    <item>
      <title>Network</title>
      <link>https://www.linuxzen.com/notes/notes/20200827180638-network/</link>
      <pubDate>Thu, 27 Aug 2020 18:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827180638-network/</guid>
      <description> xinetd MySQL grant subnet  </description>
    </item>
    
    <item>
      <title>逻辑右移</title>
      <link>https://www.linuxzen.com/notes/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/</link>
      <pubDate>Sun, 02 Aug 2020 16:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/</guid>
      <description>位移产生的空白填上 0，会导致有符号的负数变成正数。</description>
    </item>
    
    <item>
      <title>算数右移</title>
      <link>https://www.linuxzen.com/notes/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/</link>
      <pubDate>Sun, 02 Aug 2020 16:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/</guid>
      <description>位移的产生的空白填上符号位。</description>
    </item>
    
    <item>
      <title>汇编</title>
      <link>https://www.linuxzen.com/notes/notes/20200802155053-%E6%B1%87%E7%BC%96/</link>
      <pubDate>Sun, 02 Aug 2020 15:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802155053-%E6%B1%87%E7%BC%96/</guid>
      <description>程序编码 $ gcc -Og -S mstore.c # outputs mstore.s $ gcc -Og -c mstore.c # outptus mstore.o $ objdump -d mstore.o 所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。
数据格式    C 声明 Intel 数据类型 汇编代码后缀 大小（字节）     char 字节 b 1   short 字 w 2   int 双字 l 4   long 四字 q 8   char* 四字 q 8   float 单精度 l 4   double 双精度 q 8    访问信息 寄存器 一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 通用目的寄存器 。</description>
    </item>
    
    <item>
      <title>IEEE 浮点数</title>
      <link>https://www.linuxzen.com/notes/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/</link>
      <pubDate>Sun, 02 Aug 2020 15:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/</guid>
      <description>浮点数小数表示形式 .0111 = \(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\)
IEEE 浮点数表示形式 \[ V=(-1)^s X M X 2^E \]
 s = 0 表示负数， s = 1 表示正数 M 是二进制表示的小数 E 是阶码  浮点数二进制组成  一个单独符号位 s 表吗符合 k 位阶码字段 exp 编码阶码 E n 位小数字段 frac 编码尾数 M  两种常见的格式  float  s = 1 k = 8 n = 23   double  s = 1 k = 11 n = 52    三种计算方式 前置的一些值</description>
    </item>
    
    <item>
      <title>Computer Systems</title>
      <link>https://www.linuxzen.com/notes/notes/20200802151319-computer_systems/</link>
      <pubDate>Sun, 02 Aug 2020 15:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802151319-computer_systems/</guid>
      <description>《深入理解计算机系统》读书笔记。  IEEE 浮点数 汇编  内存模型  硬件内存模型 编程语言内存模型  </description>
    </item>
    
    <item>
      <title>Web</title>
      <link>https://www.linuxzen.com/notes/notes/20200710101214-web/</link>
      <pubDate>Fri, 10 Jul 2020 10:12:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200710101214-web/</guid>
      <description> Choosing a Rust web framework, 2020 edition  </description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://www.linuxzen.com/notes/notes/20200707214623-ssh/</link>
      <pubDate>Tue, 07 Jul 2020 21:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200707214623-ssh/</guid>
      <description>SSH Port Forwarding  -L 将远端机器的端口映射到本地 -R 将本地端口映射到远端  </description>
    </item>
    
    <item>
      <title>Fearless Concurrency with Rust</title>
      <link>https://www.linuxzen.com/notes/notes/20200703104039-fearless_concurrency_with_rust/</link>
      <pubDate>Fri, 03 Jul 2020 10:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200703104039-fearless_concurrency_with_rust/</guid>
      <description>原文链接：https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html</description>
    </item>
    
    <item>
      <title>Rust Means Never Having to Close a Socket</title>
      <link>https://www.linuxzen.com/notes/notes/20200629181735-rust_means_never_having_to_close_a_socket/</link>
      <pubDate>Mon, 29 Jun 2020 18:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629181735-rust_means_never_having_to_close_a_socket/</guid>
      <description>原文链接：Rust Means Never Having to Close a Socket
Rust 最酷的特性之一就是它可以自动地帮助你管理资源，同时在仍能保持安全（没有段错误）和高性能。
这是因为 Rust 是一门与众不同地编程语言，要理解我说的可能有点困难，让我来更近一步说明：
 Rust 就像带垃圾回收的编程语言，你无需手动释放内存 Rust 不同于其他带垃圾回收的编程语言，你无需1手动关闭或者释放像文件、套接字和锁这样的资源 Rust 达到以上这些特性不附带任何运行时开销（垃圾回收或者引用计数），并且不牺牲安全性。  如果你曾经造成过一个套接字或者文件泄漏，或者使用过一些抽象方法造成了这些资源的泄漏，那么你就会知道这有多重要。
你可能已经期望通过“使用后释放”来避免内存问题，而与此同时你并没有考虑到没有明确地关闭套接字可能出现类似的错误。我在这里告诉你，还有更好地办法。
如果你使用的是带垃圾回收的编程语言，则应密切关注本文提到的资源管理方面的内容。如果你使用的是像 C/C++ 这样底层编程语言，你可能会对安全方面更加感兴趣。
 Rust 的许多特性都是从其他语言借鉴而来。Rust 之所以变得有趣是因为它把所有的这些特性放在了一起，并且在编程语言层面实现了更严格地保证。 实际上，这种编程语言层面的保证让这些特性更加实用。
 所有权系统（The Ownership System） 让这种保证工作的方式是通过 Rust 的「所有权（ownership）」系统。不管任何时候你创建一个新的对象，都被创建它的「作用域（scope）」所拥有。
让我们通过一个例子来进一步说明：我们定义一个函数，函数拷贝输入文件到临时文件去处理它，然后拷贝输入文件到输出文件。
fn process(from: &amp;amp;Path, to: &amp;amp;Path) -&amp;gt; IoResult&amp;lt;()&amp;gt; { // creates a new tempdir with the specified suffix  let tempdir = try!(TempDir::new(&amp;#34;skylight&amp;#34;)); // open the input file  let mut from_file = try!</description>
    </item>
    
    <item>
      <title>Rust 并发</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180709-rust_%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 29 Jun 2020 18:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180709-rust_%E5%B9%B6%E5%8F%91/</guid>
      <description>并发 std::marker::Send 允许跨线程转移所有权 Send 标记特性用于标识实现该特性的类型的所有权可以在线程中间转移，几乎所有 Rust 类型都实现了 Send ，但是也有一些例外如：
 Rc&amp;lt;T&amp;gt; ，如果克隆后在多个线程中转移所有权可能会多个线程同时增加计数器，可以使用 Arc&amp;lt;T&amp;gt; 替代  如果一个新的类型组合的类型都实现了 Send 那么该类型也自动实现了 Send ，几乎所有原始类型都实现了 Send .
std::marker::Sync 允许多个线程同时访问 Sync 标记特性用于标识实现该特性的类型可以在多个线程中引用，任何类型 T 是 Sync 并且 T 的引用 &amp;amp;T 是 Send 则意味着引用可以安全的发送给其他线程。
同 Send 类似，几乎所有原始类型都实现了 Sync ，组合了所有类型都是 Sync 的类型自动实现 Sync 。
以下只能指针没有实现 Sync
 Rc&amp;lt;T&amp;gt; 同样没有实现 Sync RcCell&amp;lt;T&amp;gt; 和 Cell&amp;lt;T&amp;gt;  自己实现 Sync 和 Send 是不安全的 </description>
    </item>
    
    <item>
      <title>Rust 宏</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180623-rust_%E5%AE%8F/</link>
      <pubDate>Mon, 29 Jun 2020 18:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180623-rust_%E5%AE%8F/</guid>
      <description>三种宏  自定义 #[derive] 属性行为（attribute-like）宏，Rust 属性宏解析 函数行为（function-like）宏  宏 实现元编程，代码生成代码，必须带入当前命名空间内才能使用（不能使用 mod::sub::macro! 这种方式调用）。
#[macro_export] macro_rules! vec { ( $($x:expr), *) =&amp;gt; { // $() 用于捕捉值，$x:expr 匹配 Rust 表达式并绑定到 $x，逗号（,）表明一个逗号可能出现在表达式后面，* 表明表达式匹配一次或多次  { let mut temp_vec = Vec::new(); ${ temp_vec.push($x); }* temp_vec } }; } 调用宏用于从属性生成代码 有点像编译期的装饰器：
use proc_macro; #[some_attribute] pub fn some_name(input: TokenStream) -&amp;gt; TokenStream { // --snip-- } </description>
    </item>
    
    <item>
      <title>智能指针</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180545-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 29 Jun 2020 18:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180545-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>智能指针   表现的像一个指针，拥有数据并允许在对数据进行维护。
  通常通过 struct 实现并实现两个特性 Deref 和 Drop
 Deref 允许智能指针实例行为像一个引用，让代码可以同时处理引用和智能指针 Drop 允许自定义智能指针超出作用域的行为。    标准库常见的智能指针
 Box&amp;lt;T&amp;gt; 用于在堆分配值 Rc&amp;lt;T&amp;gt; 引用计数类型，允许多个拥有者 Ref&amp;lt;T&amp;gt; 和 RefMut&amp;lt;T&amp;gt; 和通过 RefCell&amp;lt;T&amp;gt; 访问，运行时取代编译期强制检查借用规则    Box 场景：
  编译期未知大小的类型（递归类型（自己包含自己类型的类型，如链表）编译期无法确定大小）
// 递归类型 enum List { Cons(i32, Box&amp;lt;List&amp;gt;), Nil, } fn main() { let b = Box::new(5); println!(&amp;#34;b = {}&amp;#34;, b); let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil)))))); }   避免大量数据转移所有权时发生拷贝</description>
    </item>
    
    <item>
      <title>迭代器</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180506-%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Mon, 29 Jun 2020 18:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180506-%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>迭代器 所有的迭代器都实现了 Iterator 特性：
pub trait Iterator { type Item; // 关联类型  fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; // 返回 None 结束循环 } </description>
    </item>
    
    <item>
      <title>生命周期</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180413-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Mon, 29 Jun 2020 18:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180413-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>生命周期  Rust 中的每一个引用都有其生命周期：引用有效的作用域。 大部分情况下生命周期都是隐式和自举的，在无法完成的情况下就需要我们通过生命周期泛型参数帮助编译器进行注解。 生命周期的主要目标是避免悬空指针。 生命周期泛型参数定义各个引用之间（参数和参数、参数和返回值）的关系，并不改变（延长）变量原本的生命周期  &amp;amp;i32 // a reference &amp;amp;&amp;#39;a i32 // a reference with an explicit lifetime &amp;amp;&amp;#39;a mut i32 // a mutable reference with an explicit lifetime 参考以下代码
fn longest&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str { if x.len() &amp;gt; y.len() { x } else { y } } 以上代码
 标注生命周期 &#39;a 函数有两个引用参数，都使用生命周期 &#39;a 表示两个参数的生命周期必须一致（存活的周期一样长） 函数返回一个引用，并且存活的时间和生命周期 &#39;a 一致 以上指定不改变任何传入的引用的生命周期，我们只是要求借用检查器（borrow checker）检查这些约束。 也就是说借用检查器要检查传入的两个引用的生命周期必须一致，返回的引用的存活周期不能超过传入的引用的存活周期  思考 当函数返回一个引用时，返回值的生命周期注解要和参数的其中之一相匹配，否则那么引用就是指向里函数内创建的值（不能返回）。 也就是说返回引用时，引用的声明周期必须和参数（其一）相关。如果想要返回函数内创建的值最好返回一个有所有权的值类型。</description>
    </item>
    
    <item>
      <title>闭包</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180436-%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 29 Jun 2020 18:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180436-%E9%97%AD%E5%8C%85/</guid>
      <description>let add_one = | num | { num + 1 }; 由于闭包和当前上下文相关联，所以 Rust 可以进行类型推导，类型注解也就不是必要的，但是依然可以自己添加：
let add_one = | num: i32 | { num + 1 }; fn add_one_v1 (x: u32) -&amp;gt; u32 { x + 1 } let add_one_v2 = |x: u32| -&amp;gt; u32 { x + 1 }; let add_one_v3 = |x| { x + 1 }; let add_one_v4 = |x| x + 1 ; 使用 Fn 存储闭包类型
struct Cacher&amp;lt;T&amp;gt; where T: Fn(u32) -&amp;gt; u32 { calculation: T, value: Option&amp;lt;u32&amp;gt;, } impl Cacher&amp;lt;T&amp;gt; where T: Fn(u32) -&amp;gt; u32 { fn new(calculation: T) -&amp;gt; Cacher&amp;lt;T&amp;gt; { Cacher { calculation, value: None, } } fn value(&amp;amp;mut self, arg: u32) -&amp;gt; u32 { if let Some(value) = self.</description>
    </item>
    
    <item>
      <title>Traits</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180345-traits/</link>
      <pubDate>Mon, 29 Jun 2020 18:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180345-traits/</guid>
      <description>Traits  定义行为在多个类型中共享。 可以定义默认行为在实现者中间共享。 可以用于定义参数的行为，同样可以定义返回值行为，当用 trait 限定返回值类型时，不能同时（if/else）返回多种实现了该 trait 的类型。  pub trait Summary { fn summarize(&amp;amp;self) -&amp;gt; String; } pub struct Article{ pub title: String, } impl Summary for Article { fn summarize(&amp;amp;self) -&amp;gt; String { format!(&amp;#34;{}&amp;#34;, self.title) } } pub fn notify(item: impl Summary) { println!(&amp;#34;{}&amp;#34;, item.summarize()); } // trait bound 语法糖版本 pub fn notify&amp;lt;T: Summary&amp;gt;(item: T) { println!(&amp;#34;{}&amp;#34;, item.summarize()); } 定义参数行为  通过 impl ： fn notify(item: impl TraitName) ，用于简单明了的场景，比如一个参数 通过 trait bound ： fn notify&amp;lt;T: TraitName&amp;gt; (item: T) ，用于更复杂的场景，比如多个参数用于减少代码   可以通过 + 连接： fn notify(T: TraitName + Display) (item: T)</description>
    </item>
    
    <item>
      <title>错误处理</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180301-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 29 Jun 2020 18:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180301-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } ? 操作符 对比
use std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; { let f = File::open(&amp;#34;hello.txt&amp;#34;); let mut f = match f { Ok(file) =&amp;gt; file, Err(e) =&amp;gt; return Err(e), }; let mut s = String::new(); match f.read_to_string(&amp;amp;mut s) { Ok(_) =&amp;gt; Ok(s), Err(e) =&amp;gt; Err(e), } } 和
use std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; { let mut f = File::open(&amp;#34;hello.</description>
    </item>
    
    <item>
      <title>if let</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180202-if_let/</link>
      <pubDate>Mon, 29 Jun 2020 18:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180202-if_let/</guid>
      <description>let some_u8_value = Some(0u8); // Without `if let` match some_u8_value { Some(3) =&amp;gt; println!(&amp;#34;three&amp;#34;); - =&amp;gt; (), } // With `if let` if let Some(3) = some_u8_value { println!(&amp;#34;three&amp;#34;); } </description>
    </item>
    
    <item>
      <title>模块化</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180233-%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Mon, 29 Jun 2020 18:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180233-%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>包、crate 和模块   Cargo.toml 表示一个包
 包含 0 个或 1 个库 crate（ src/lib.rs ） 包含 0 个或多个可执行 crate （ src/main.rs src/bin/*.rs ） 可以同时包含以上两种    模块化系统
  模块，一种组织代码和控制路径隐私的方法
 所有的项（函数，方法，结构体，枚举，模块和常量）默认私有 不允许使用私有的子模块的代码 可以使用父模块和同级模块的代码    路径，一种命名项的方法
  use , 一个将路径带到当前作用域的关键字
  pub ，一个将项公开的关键字
  as ，一个将带到当前作用域项重命名的关键字
  super , 一个相当于文件系统里 .. 作用的关键字
  * ，通配符用于使用制定路径下的所有项
  pub use 用于重新暴露可以访问的模块
  模块可以放在一个文件，也可以按照一定规则拆分到不同文件下</description>
    </item>
    
    <item>
      <title>模式匹配</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180131-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 29 Jun 2020 18:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180131-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>#[derive(Debug)] enum UsState { Alabama, Alaska, } enum Coin { Penny, Nickel, Dime, Quarter(UsState), } fn value_cents(coin: Coin) -&amp;gt; u8 { match coin { Coin::Peny =&amp;gt; { println!(&amp;#34;Lucy penny!&amp;#34;); 1 }, Coin::Nickel =&amp;gt; 5, Coin::Dime =&amp;gt; 10, Coin::Quarter(state) =&amp;gt; { println!(&amp;#34;State quarter from {:?}!&amp;#34;, state); 25 }, } } // Option fn plus_one(x: Option&amp;lt;i32&amp;gt;) -&amp;gt; Option&amp;lt;i32&amp;gt; { match x { None =&amp;gt; None, Some(i) =&amp;gt; Some(i + 1), } } let five = Some(5); let six = plus_one(five); let none = plus_one(None); 编译器会检查 match 覆盖所有情况， _ 可以用于所有未覆盖的情况。</description>
    </item>
    
    <item>
      <title>枚举</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180041-%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Mon, 29 Jun 2020 18:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180041-%E6%9E%9A%E4%B8%BE/</guid>
      <description>多种类型的集合体，一个类型的变量可以存储多种类型的值，枚举的每一项都是该枚举类型的变体：
enum IpAddrKind { V4, V6, } fn main() { route(IpAddrKind::V4); route(IpAddrkind::V6); } fn route(kind: IpAddrKind) { // ... }   枚举的每一个变体都可以直接包含数据，并且每一个变体可以包含不同的数据类型和不同的数量，甚至可以直接放结构体（也可以是匿名的）。
struct Ipv4Addr { // --snip-- } enum IpAddr { V4(Ipv4Addr), V6(String), } let home = IpAddr::V4(127, 0, 0, 1); let loopback = IpAddr::V6(String::from(&amp;#34;::1&amp;#34;)); struct Message { Quit, Move{ x: i32, y: i32 }, // anonymous struct  Write(String), ChangeColor(i32, i32, i32), // three i32 values }   枚举也可以通过 impl 实现方法</description>
    </item>
    
    <item>
      <title>结构体</title>
      <link>https://www.linuxzen.com/notes/notes/20200629175956-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 29 Jun 2020 17:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629175956-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>结构体 元组结构体（tuple struct） 用于命名元组并和其他元组进行区分：
struct Color(i32, i32, i32); struct Point(i32, i32, i32); let black = Color(0, 0, 0); let origin = Point(0, 0, 0); 由于定义了元组结构体所有 black 和 origin 是两个不同的类型。
没有字段的结构体：类单元（Unit-Like）结构体 没有任何字段的结构体和单元类型 () 类似，用于实现一些特性（trait）但是没有任何数据。
方法语法   self 占有所有权
  &amp;amp;self 不可变借用
  &amp;amp;mut self 可变借用
  自动引用和解引用
在 Rust 中进行方法调用，如 object.something ，Rust 会自动添加 &amp;amp; &amp;amp;mut 或者 * , 用以自动匹配方法签名。以下是等价的：
  p1.distance(&amp;amp;p2); (&amp;amp;p1).distance(&amp;amp;p2); 方法如果不声明 self 行参则是一个关联方法（静态方法），通过 :: 调用</description>
    </item>
    
    <item>
      <title>引用和借用</title>
      <link>https://www.linuxzen.com/notes/notes/20200629174943-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/</link>
      <pubDate>Mon, 29 Jun 2020 17:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629174943-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/</guid>
      <description>类型前置 &amp;amp; 表示引用，引用允许变量指向一个值但是不发生所有权转移。 引用不占有所有权，所以变量超出作用域之后不会触发 drop 调用。 引用作为函数形参被成为借用（borrowing）  可变引用   针对特定作用域下的特定数据只能创建一个可变引用。如果要创建多个可变引用可以通过大括号创建新的作用域
let mut s = String::from(&amp;#34;hello&amp;#34;); { let s1 = mut &amp;amp;s; } let s2 = mut &amp;amp;s;   当已经存在不可变引用时，则无法再创建可变引用，下面代码无法编译通过
let mut s = String::from(&amp;#34;hello&amp;#34;); let s1 = &amp;amp;s; // OK let s2 = &amp;amp;s; // OK let s3 = mut &amp;amp;s; // BIG PROBLEM   悬空引用 以下代码是不允许的，无法编译通过
fn main() { let s = dangling_string(); } fn dangling_string() -&amp;gt; &amp;amp;String { let s = String::from(&amp;#34;hello&amp;#34;); &amp;amp;s } 上面代码 s 在函数内部分配，那么在函数执行完成后 s 将被释放，所以返回 s 的引用会造成悬空引用。</description>
    </item>
    
    <item>
      <title>所有权</title>
      <link>https://www.linuxzen.com/notes/notes/20200629174911-%E6%89%80%E6%9C%89%E6%9D%83/</link>
      <pubDate>Mon, 29 Jun 2020 17:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629174911-%E6%89%80%E6%9C%89%E6%9D%83/</guid>
      <description>规则  每个值都有一个变量叫做所有者（owner） 同一时间只能有一个所有者 当所有者超出作用域则值被销毁  变量作用域  作用域是一个变量有效的范围 当变量超出作用域范围自动调用对象的 drop 方法进行内存归还操作  变量相互作用：所有权转移（Move） 对于所有在栈上分配的值（固定大小），在进行赋值操作时都对值进行拷贝：
let x = 5; ley y = x; // copy 5 to y 但是对于在堆上分配的，变量保存的是指向内存的指针，所以在赋值时拷贝的也是指向该内存的指针：
let s1 = String::from(&amp;#34;hello&amp;#34;); let s2 = s1; 为了保证内存安全，防止 s1 和 s2 超出作用域范围调用两次 drop 造成重复的内存回收，Rust 会让 s1 不再有效，来避免对 s1 进行回收。继续使用 s1 会导致编译错误。这种情况叫做所有权转移（move）。
变量相互作用：克隆（Clone） 克隆用于深度拷贝变量：
let s1 = String::from(&amp;#34;hello&amp;#34;); let s2 = s1.clone(); println!(s1); 变量项目作用：拷贝（Copy） 如果数据类型的大小在编译期能够确定都将存储在栈上，这种情况下能够进行快速的拷贝。
 Copy 特性（trait）注解用于将值存贮在栈栈上 Copy 特性注解不能和 Drop 特性注解混用 Copy 特性注解使用规则如下  所有的数字类型 所有的布尔型 所有的浮点型 字符类型 所有元素都实现了 Copy 特性注解的元祖    所有权和函数 函数传递实参的规则和变量类似，传递变量到一个函数将为发生所有权转移或者拷贝。</description>
    </item>
    
    <item>
      <title>语句和表达式</title>
      <link>https://www.linuxzen.com/notes/notes/20200629174820-%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 29 Jun 2020 17:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629174820-%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Rust 区分语句和表达式， Rust 是基于表达式的语言：
  语句：执行动作并且不返回值
 使用 let 声明变量是语句，所以 let 语句不返回值，也就不能像 Python 那样将 let 语句赋值给其他变量 函数声明也是语句    表达式：计算并返回值，不以分号（;）结尾
  5 + 6 是一个表达式，计算并返回值 11
  表达式可以作为语句的一部分
  函数调用是表达式
  宏调用是表达式
  用 {} 创建的块也是表达式
let x = { let y = 6; y + 5 }   if loop while for 是表达式
    在表达式后面增加分号（;）可以将一个表达式转为语句。</description>
    </item>
    
    <item>
      <title>Member initialize</title>
      <link>https://www.linuxzen.com/notes/notes/20200628183417-member_initialize/</link>
      <pubDate>Sun, 28 Jun 2020 18:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628183417-member_initialize/</guid>
      <description>如果类成员属性是值类型或者引用类型则需要改对象有无参数构造方法，否则类无法实例化， 这是因为这类成员属性在构造函数调用之前就需要进行初始化。
下面代码无法通过编译
class Foo { public: Foo(int n) : n {n} { }; ~Foo() { }; private: int n; }; class Bar { public: Bar(int n) { this-&amp;gt;foo = Foo(n); }; ~Bar(); private: Foo &amp;amp; foo; }; </description>
    </item>
    
    <item>
      <title>Iterator class</title>
      <link>https://www.linuxzen.com/notes/notes/20200628183227-iterator_class/</link>
      <pubDate>Sun, 28 Jun 2020 18:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628183227-iterator_class/</guid>
      <description>容器类实现 begin 和 end 方法返回 Iterator class 的实例， Iterator class 通过实现友元类可以直接访问容器类的私有属性， Iterator class 通过重载 ++/==/* 等操作符实现对容器类的访问并通过自己的私有属性记录当前位置。
Iterator class 重载的操作符：
 ++ 移动容器元素位置 == 判断两个容器位置是否相等（容器是否一个，位置是否一个） * 解引用返回当前位置指向的容器的值  </description>
    </item>
    
    <item>
      <title>SSE/AVX/AVX2/AVX512</title>
      <link>https://www.linuxzen.com/notes/notes/20200628182211-avx512/</link>
      <pubDate>Sun, 28 Jun 2020 18:22:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628182211-avx512/</guid>
      <description>部分 intel CPU 支持向量指令集同时进行多路整数和浮点数计算，以此来进行对相关算法进行优化，这里整理相关链接：
 编译器支持相关封装避免编写汇编代码，官方指南：Intrinsics Guide 基于 sse_mathfun 的 avx_mathfun 封装相关宏和函数 mp3 库 lame 中的 SSE 加速实现 libmp3lame/vector/xmm_quantize_sub.c  AVX512 VNNI  https://en.wikichip.org/wiki/x86/avx512%5Fvnni  </description>
    </item>
    
    <item>
      <title>优化</title>
      <link>https://www.linuxzen.com/notes/notes/20200628182150-%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 28 Jun 2020 18:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628182150-%E4%BC%98%E5%8C%96/</guid>
      <description> AVX512  </description>
    </item>
    
    <item>
      <title>Surgical Reading: How to Read 12 Books at Once</title>
      <link>https://www.linuxzen.com/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/</link>
      <pubDate>Sun, 28 Jun 2020 13:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/</guid>
      <description>原文链接：https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books
手术阅读法：如何同时阅读 12 本书  译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。
 当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。
但是我这样阅读并不是为了炫耀 &amp;ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。
这是一个我开发一个叫做 手术阅读法（surgical reading） 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。 这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。
这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。 阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。
其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。 这使我对当前感兴趣的的任何主题都有更细微的了解。
最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。
当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。
我是谁（Who I Am） 我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。 我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人， 包括我于 2018 年出售的一家名为 Hickory 的公司。
我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。 这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。
手术阅读法就是设计用来帮助我这么做的。
所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。
让我们开始吧！
把书当作其自身的地图（Use the Book Itself as a Map） 以下是一份我如何阅读一本书的步骤分解：
 了解一本书 通过封面评判这本书 索引（index）包含了一切 把目录（TOC）当作骨架 通过前言（preface）进行预览  此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。
下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。
了解一本书（Approaching a Book ） 当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。 也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。</description>
    </item>
    
    <item>
      <title>Surgical Reading: How to Read 12 Books at Once</title>
      <link>https://www.linuxzen.com/notes/notes/20200628134657-surgical_reading_how_to_read_12_books_at_once/</link>
      <pubDate>Sun, 28 Jun 2020 13:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628134657-surgical_reading_how_to_read_12_books_at_once/</guid>
      <description>原文链接：https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books
手术阅读法：如何同时阅读 12 本书  译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。
 当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。
但是我这样阅读并不是为了炫耀 &amp;ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。
这是一个我开发一个叫做 手术阅读法（surgical reading） 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。 这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。
这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。 阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。
其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。 这使我对当前感兴趣的的任何主题都有更细微的了解。
最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。
当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。
我是谁（Who I Am） 我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。 我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人， 包括我于 2018 年出售的一家名为 Hickory 的公司。
我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。 这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。
手术阅读法就是设计用来帮助我这么做的。
所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。
让我们开始吧！
把书当作其自身的地图（Use the Book Itself as a Map） 以下是一份我如何阅读一本书的步骤分解：
 了解一本书 通过封面评判这本书 索引（index）包含了一切 把目录（TOC）当作骨架 通过前言（preface）进行预览  此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。
下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。
了解一本书（Approaching a Book ） 当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。 也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://www.linuxzen.com/notes/notes/20200628133616-python/</link>
      <pubDate>Sun, 28 Jun 2020 13:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628133616-python/</guid>
      <description>IPython EIN import numpy, math, matplotlib.pyplot as plt %matplotlib inline x = numpy.linspace(0, 2 * math.pi) plt.plot(x, numpy.sin(x)) </description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://www.linuxzen.com/notes/notes/20200628123035-cmake/</link>
      <pubDate>Sun, 28 Jun 2020 12:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628123035-cmake/</guid>
      <description>  安装的头文件必须包含在目标的源代码中，否则构建如 iOS 的 Framework 时无法正确包含头文件
ADD_LIBRARY(test test.h)  CMake 生成 C++ LSP 配置文件
  </description>
    </item>
    
    <item>
      <title>Build System</title>
      <link>https://www.linuxzen.com/notes/notes/20200628122958-build_system/</link>
      <pubDate>Sun, 28 Jun 2020 12:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628122958-build_system/</guid>
      <description> CMake  </description>
    </item>
    
    <item>
      <title>Tmux 256 colors</title>
      <link>https://www.linuxzen.com/notes/notes/20200603103943_tmux_256_colors/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200603103943_tmux_256_colors/</guid>
      <description>生成 terminfo
$ cat &amp;lt;&amp;lt;EOF &amp;gt; terminfo-24bits.src # Use semicolon separators. xterm-24bits|xterm with 24-bit direct color mode, use=xterm-256color, Tc, setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&amp;amp;%d;%p1%{255}%&amp;amp;%dm, setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&amp;amp;%d;%p1%{255}%&amp;amp;%dm,]] EOF $ tic -x -o ~/.terminfo terminfo-24bits.src 通过 xterm-24bits 启动 Emacs
$ env TERM=xterm-24bits emacs Emacs 通过 list-color-display 查看效果。</description>
    </item>
    
    <item>
      <title>Weekly Journal</title>
      <link>https://www.linuxzen.com/notes/posts/20200511/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/posts/20200511/</guid>
      <description>星期一, 2020/05/11 14:23 排查旧版引擎问题 14:44 梳理平台项目 17:54 修复打点库崩溃导致数据平台进程崩溃 18:22 回滚一台中文引擎 星期二, 2020/05/12 16:51 编写初版团队 OKR 17:15 同雪景沟通图像相关 OKR 和话术平台 18:48 适配聊天记录分片上传修复请求包体过大导致聊天记录上传失败 星期三, 2020/05/13 CANCELLED12:02 实现 Argus 图表事件展示 CANCELLED14:46 给晓辉的数据返回 user_type 10:52 联系彬伟部署 stage 环境 Docker 容器 13:51 完成聊天分析代码修复和镜像构建 17:52 完成语音分析代码修复和镜像构建 17:53 测试语音分析 18:37 修复聊天分析任务获取和聊天频率分析运行错误 星期四, 2020/05/14 10:09 半开放镜像机从 AVX2 指令集迁移到 AVX512 10:16 更新版开放阿里云镜像机 15:15 同步数据增加 lessonId 17:04 用 Go 实现从 Hive 中同步聊天记录 18:19 制作半开放镜像并开一台机器测试 18:50 聊天记录获取在 Hive 开发机上部署测试和正式环境 19:53 OKR 沟通 星期五, 2020/05/15 10:29 沟通彬伟关于动态扩容 IP 地址不够用的问题 15:46 上线中学段落相关机器 星期六, 2020/05/16 21:26 写周报 </description>
    </item>
    
    <item>
      <title>Rust Trait Object</title>
      <link>https://www.linuxzen.com/notes/notes/20200329204833_rust_trait_object/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200329204833_rust_trait_object/</guid>
      <description>动态大小类型（DST）和 Sized 特性 str （非 &amp;amp;str ）就是一个 DST，我们不能在运行时得知 str 的大小。 &amp;amp;str 是一个指针类型，大小是已知的。
DST：拥有额外的元数据存储动态大小的信息。
每一个特性都是一个是个 DST，使用 Trait Object 必须是像 &amp;amp;dyn Trait 和 Box&amp;lt;dyn Trait&amp;gt; （或 Rc&amp;lt;dyn Trait&amp;gt; ）的指针类型。
dyn 关键字 dyn 关键字用于将 Trait Object 指针和普通的结构体指针区分开来。
Sized vs ?Sized Rust 有一个特定的特性叫做 Sized 去判断一个类型的大小是否是编译期可知的，并且自动在编译期为所有已知大小的类型实现， 同时 Rust 隐式的为泛型函数的类型参数加上 Sized 的限制（bound），下面这样的泛型函数：
fn generic&amp;lt;T&amp;gt;(t: T) { // --snip-- } 实际上相当于像下面这样硬编码：
fn generic&amp;lt;T: Sized&amp;gt;(t: T) { // --snip-- } 也可以通过下面特定的语法取消这个限制：
fn geneic&amp;lt;T: ?Sized&amp;gt;(t: &amp;amp;T) { // --snip-- } </description>
    </item>
    
    <item>
      <title>Rust Borrow and Lifetimes</title>
      <link>https://www.linuxzen.com/notes/articles/20200325182450_rust_borrow_and_lifetimes/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200325182450_rust_borrow_and_lifetimes/</guid>
      <description>原文链接：Rust Borrow and Lifetimes。
Rust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 1.42）。 我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow） 和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设 你基本了解 Rust，如果还没推荐你先阅读指南和指针指南。
资源所有权和借用 Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源 （栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。 你可以通过 &amp;amp; 或者 &amp;amp;mut 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保 所有的所有者（owners）和借用者（borrowers）行为正确。
拷贝和转移（Copy and move） 在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 StackOverflow 答案非常值得一读。 基本上，在赋值和函数调用上：
 如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。 其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。  简而言之，POD（Plan Old Data） =&amp;gt; 拷贝，Non-POD（线性类型（linear types））=&amp;gt; 转移。
以下是一些额外的注释供你参考：
 Rust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 memcpy 浅拷贝），而不是语义上的拷贝或克隆。 如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 NoCopy 标记，或者实现 Drop 特性（trait）。  转移之后，所有权就转移到了下一个所有者那。
资源回收 Rust 会在任何资源的所有权消失后立刻释放该资源，就这些，当：
 所有者超出作用域，或 正在持有的所有者改变绑定（原始绑定变成 void）。  所有者和借用者的权限（privileges）和限制 这一节基于 Rust Guide 在权限（privileges）一部分提到拷贝和转移。</description>
    </item>
    
    <item>
      <title>Rust Wrapper Types</title>
      <link>https://www.linuxzen.com/notes/notes/20200325165657_rust_wrapper_types/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200325165657_rust_wrapper_types/</guid>
      <description>Wrapper Types in Rust: Choosing Your Guarantees Rust Memory Container Cheat-sheet  相关基础  Rust Borrow and Lifetimes Rust Means Never Having to Close a Socket  </description>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>https://www.linuxzen.com/notes/notes/20200323101418_solid/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200323101418_solid/</guid>
      <description>SRP: Single Responsibility Principle   浅显的解释是软件模块只提供单一功能
  更进一步任何一个软件模块都应该有且只有一个被修改的原因
  再更进一步这个原则是关于人（Actor）的
任何一个软件模块都应该只对一个用户或系统利益相关者负责。
  最终就是任何一个软件模块都应该只对某一类行为负责
  OCP：Open/Closed Principle 设计良好的软件应该易于扩展，同时抗拒修改。也就是说一个软件模块应该允许在不修改源码的情况下扩展它的行为。
可以通过组合 SRP（代码分组）和调整依赖关系实现（DIP）。如果 A 组件不想被 B 组件上发生的修改所影响，那么就应该让 B 组件依赖于 A 组件。
LSP：Liskov Substitution Principle 里氏替换原则：多态。
每个类型是 S 的对象 o1 都存在一个类型为 T 的对象 o2，能使操作 T 类型的程序 P 在用 o2 替换 o1 时行为保持不变，我们就可以将 S 称为 T 的子类型。
public class LiskovSub { public static main(String[] args) { T o1 = new S(); T o2 = new T(); P(o1); // ok  P(o2); // ok  } public static P(T o) { o.</description>
    </item>
    
    <item>
      <title>《架构整洁之道》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200323104907_%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200323104907_%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</guid>
      <description>第一遍粗读   三个编程范式：结构化编程、面向对象编程、函数式编程
每个编程范式都是增加限制：
 结构化编程限制了 goto 面向对象编程限制了函数指针 函数式编程限制可变变量（变量不可修改）    设计原则：SOLID
  </description>
    </item>
    
    <item>
      <title>技术</title>
      <link>https://www.linuxzen.com/notes/notes/20200323104645_%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200323104645_%E6%8A%80%E6%9C%AF/</guid>
      <description> Programming Language 算法 Emacs Unix AI 翻墙 大数据 分布式 系统架构 优化 Computer Systems Network 技术随想 技术概念  </description>
    </item>
    
    <item>
      <title>系统架构</title>
      <link>https://www.linuxzen.com/notes/notes/20200322143810_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200322143810_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid>
      <description>设计原则 SOLID
好的架构 我认为好的架构  能够无心智障碍的编写运行单元测试  从一起作业看好的架构  应该能够让任何开发人员方便的随时上线和回滚 面对上线对基础设施没有心理压力 完备的监控  </description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171108_c/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171108_c/</guid>
      <description>C++  Iterator class Member initialize C++ LSP GDB C/C++ thread-local storage  多态 只能通过抽象类的指针或引用调用动态解析子类函数，虚函数表示需要动态解析，纯虚函数必须被子类覆盖，否则无法实例化。
相关优化  SSE/AVX/AVX2/AVX512  </description>
    </item>
    
    <item>
      <title>Flink</title>
      <link>https://www.linuxzen.com/notes/notes/20200320100601_flink/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320100601_flink/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172022_kafka/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172022_kafka/</guid>
      <description>概念组成   Producer 消息产生者，往指定 Topic 的指定 Partition 发送消息
  Consumer Group 消费指定 Topic 的消息
 Consumer 消费指定 Topic 下某一分区的消息    Topic 区分不同消息主题
 Partition 保证同一分区的有序性    Connector
  消息可被不同的 Consumer Group 重复消费（广播或订阅）。同一 Consumer Group 下的不同 Consumer 分别消费不同的 Partition，Consumer 数量不能超过 Partition 数量。
数据被持久化并分片成功后发送 ACK 保证里数据不被丢失。
设计 持久化 基于文件系统  基于队列是顺序的和磁盘的顺序访问要比内存的随机访问要快（参见 The Pathologies of Big Data）， Kafka 采用在磁盘文件系统上尾部写头部读的方式。 Kafka 没有采用 BTree 存储数据因为 BTree 的操作是 O(log N) ，而且对磁盘的 seek 操作要慢，且同时只能进行一次限制了并行，所以实际操作比 O(log N) 要慢 基于磁盘的顺序访问进行在尾部写和头部读，可以实现读写都是 O(1) 的时间复杂度，并且读写互不干扰 基于以上实现，Kafka 可以不必在消息一经消费就删除，而是可以保留消息一段相对较长的时间（比如一周）  高效 并且采用统一的日志格式，可以方便的使用 sendfile 避免字节拷贝以在各个组件之间高效的交换日志文件</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172132_leetcode/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172132_leetcode/</guid>
      <description>LeetCode: Trapping Tain Water LeetCode: 153.Find Minimum in Rotated Sorted Array LeetCode: 154.Find Minimum in Rotated Sorted Array II LeetCode: 316.Remove Duplicate Letters LeetCode: 3.Longest Substring Without Repeating Characters LeetCode: 4.Median of Two Sorted Arrays LeetCode: 5.Longest Palindromic Substring LeetCode: 6.ZigZag Conversion LeetCode: 92. Reverse Linked List II LeetCode: 25. Reverse Nodes in k-Group LeetCode: 46. Permutations LeetCode: 47. Permutations II LeetCode: 51. N-Queens LeetCode: 52. N-Queens II LeetCode: 39.</description>
    </item>
    
    <item>
      <title>LeetCode: Trapping Tain Water</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172219_leetcode_trapping_tain_water/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172219_leetcode_trapping_tain_water/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linux Virtual Memory Management</title>
      <link>https://www.linuxzen.com/notes/notes/20200320174700_linux_virtual_memory_management/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320174700_linux_virtual_memory_management/</guid>
      <description>Chapter 2 Describing Physical Memory：描述物理内存   独立于平台架构的方式描述内存 — 更好的支持多平台
  本章包含描述存储器、内存页的结构体（structures）和一些影响 VM 行为的标识位（flags）
  VM 中普遍（prevlent）认为第一重要（principal）的概念是 NUMA。
  大型机器中内存访问速度取决于 CPU 到内存的距离。比如一组（bank）内存分配给每一个处理器或者一组内存非常适合靠近的 DMA 设备卡。
  这里的每组（bank）内存被称为节点（node）并且这个概念在 Linux 中通过 struct pglist_data（typedef pg_data_t) 表示，即使在 UMA 架构下也是如此。每一个节点是一个由 NULL 结尾的链表，通过 pg_data_t-&amp;gt;next_node 指向下一个节点。
  每一个节点都被分割成多个块（block）称为分区（zone）用于表示内存中的范围。分区使用 struct zone_struct(typedef zone_t) 结构体描述，每一个分区都是以下三种类型的一种
 ZONE_DMA 开始 16MB 内存，供 ISA 设备使用 ZONE_NORMAL 16MB - 896MB，由内核直接映射到线性地址空间的上部区域（将在第四章讨论） ZONE_HIGHMEM 896MB - END，剩余不由内核直接映射的系统可用内存， 大部分内核操作都只能使用这种类型的分区，所以这里也是这里也是最关键的性能区域（most performance critical zone）    每一个物理页帧（physical page frame）都使用结构体 struct page 表示，所有的结构体都保存在全局数组 mem_map 中，mem_map 通常存储在 ZONE_NORMAL 的开始处；</description>
    </item>
    
    <item>
      <title>Programming Language</title>
      <link>https://www.linuxzen.com/notes/notes/20200320170914_programming_language/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320170914_programming_language/</guid>
      <description> Rust Go C/C++ Python Build System  </description>
    </item>
    
    <item>
      <title>《百箭穿杨》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200320180837_%E7%99%BE%E7%AE%AD%E7%A9%BF%E6%9D%A8/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320180837_%E7%99%BE%E7%AE%AD%E7%A9%BF%E6%9D%A8/</guid>
      <description>需要熟悉股市相关概念进行扫盲。
粗读要点  树立安全边际，跟随格雷厄姆 寻找好的困难股，降低触底难度，加大触底区间，预测底部区间，分 5 档抄底，最好在 1-3 档就能完成抄底 每次只买总资产的 1% 盈利后可以将本金提出，只留底仓等待顶峰信号后抛出赚取高额利润的前提下保障本金 总是留 25%-40% 的现金 做长线 分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底 看行业处于哪个周期：萌发、成长啥的 不做重仓  复读要点完善 安全边际 跟随格雷厄姆
 偏离：更保守或更激进 大赚小赔不如小赚不赔：不亏钱  困境好企   做有把握的事，不啃硬骨头，广撒网，多捞鱼，选取一批困境好企来实现从小盘大稳定增长股
  行业中的好企业标准
  行业很关键
  需求无限，供给有限
  关注行业周期
大周期：新生-&amp;gt;成长-&amp;gt;成熟-&amp;gt;衰落-&amp;gt;消亡 小周期：大周期各个过程中的景气与萧条（一两年、三五年甚至一二十年）
消亡之前会有死灰复燃，大周期中成长阶段会有萧条，注意区分。
  门槛高，竞争少
只有少数寡头，估值会高
  唯一或第一
成熟行业比较简单，成长行业比较困难。
通过企业原则、经营原则、财务原则和市场原则衡量。- P28 生活经验活常识也很重要。
    落难好企
 行业顺境，某些原因导致的猜疑导致股价下跌 行业遭遇整体困境：偶然事件，反转时间比好把握 个股困境，主打产品破灭：有无法度过的风险    财务数据衡量困境好企能否度过难关 - P32</description>
    </item>
    
    <item>
      <title>分布式</title>
      <link>https://www.linuxzen.com/notes/notes/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/</guid>
      <description>流行的算法  Raft  算法可视化 raft-rs   Paios  理解这两点，也就理解了paxos协议的精髓    相关论文  Time, Clocks, and the Ordering of Events in a Distributed System Raft  </description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>0x00 硬币找零 假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。
公式 \(f(n)=min\{f(n-1),f(n-3),f(n-5)\} + 1\)
假设找零 15：
  若优先使用 5 元硬币 \(cost = f(10) + 1 = 2 + 1 = 3\)
  使用 5 元： \(f(10)=f(5) + 1\)
 \(f(5)=1\)    使用 3 元： \(f(10)=f(7) + 1\)
 \(f(7)=f(4) + 1 = 2 + 1 = 3\)  \(f(4)= 1 + 1\)        若优先使用 3 元硬币 \(cost = f(12) + 1 = 4 + 1 = 5\)</description>
    </item>
    
    <item>
      <title>大数据</title>
      <link>https://www.linuxzen.com/notes/notes/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/</guid>
      <description> Flink Kafka MySQL  </description>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>Wikipedia: 归并排序</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171501_%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171501_%E7%AE%97%E6%B3%95/</guid>
      <description> LeetCode 动态规划 归并排序 二叉树的遍历 回溯算法  </description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt</title>
      <link>https://www.linuxzen.com/notes/notes/20200319221212_let_s_encrypt/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319221212_let_s_encrypt/</guid>
      <description>这里以新增 vd.linuxzen.com 为例。
新增 DNS 解析  通过 DNSPOD 新增 DNS 解析 A 记录  调整 Nginx 新增 HTTP 站点 Nginx 参考配置
server { listen 80; server_name vd.linuxzen.com; include /etc/nginx/snippets/letsencrypt-acme-challenge.conf; } 新增签发证书 $ acme.sh --force --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d vd.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/ 安装证书
$ acme.sh --install-cert -d linuxzen.com --cert-file /etc/nginx/certs/linuxzen.com/cert.pem --key-file /etc/nginx/certs/linuxzen.com/privkey.pem --fullchain-file /etc/nginx/certs/linuxzen.</description>
    </item>
    
    <item>
      <title>V2Ray</title>
      <link>https://www.linuxzen.com/notes/notes/20200319215535_v2ray/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319215535_v2ray/</guid>
      <description>翻墙 架构 Client -&amp;gt; DIDIYun(HAProxy) -&amp;gt; HK
滴滴云 HAPorxy 配置 117.51.146.119
frontend v_linuxzen_com bind *:6697 option tcplog mode tcp default_backend v_linuxzen_com_nodes backend v_linuxzen_com_nodes mode tcp balance roundrobin option ssl-hello-chk server webserver1 45.115.36.35:443 check 客户端改动 需要调整 hosts
$ echo &amp;#39;117.51.146.119 v.linuxzen.com&amp;#39; | sudo tee -a /etc/hosts HK V2Ray Docker 启动 $ docker run -d -p 127.0.0.1:25001:25001 --name v2ray --restart always -v /etc/v2ray:/etc/v2ray v2ray/official HK Let&amp;rsquo;s Encrypt 证书 $ acme.sh --issue -d linuxzen.</description>
    </item>
    
    <item>
      <title>xinetd</title>
      <link>https://www.linuxzen.com/notes/notes/20200319223026_xinetd/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319223026_xinetd/</guid>
      <description>xinetd 代理 SMTP 和 IMAP 通过 xinetd 代理 SMTP 和 IMAP 实现 gmail 翻墙。
  配置服务端
service imap { type = UNLISTED port = 993 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = imap.gmail.com 993 per_source = UNLIMITED cps = 100 2 } service smtp-465 { type = UNLISTED port = 465 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.</description>
    </item>
    
    <item>
      <title>翻墙</title>
      <link>https://www.linuxzen.com/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/</guid>
      <description> V2Ray Let&amp;rsquo;s Encrypt xinetd  </description>
    </item>
    
    <item>
      <title>股市相关概念</title>
      <link>https://www.linuxzen.com/notes/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>股分类   个股：投资资金来自个人的股票（还有国家股、法人股）
  蓝筹股：明星股
  小盘
市值比较低的股票
 小盘价值股：格低于价值的股票，被低估的股票，长期看来值得投资的股票。 小盘成长股：成长潜力很大，公司发展处于较快阶段，但不确定性也比较高，业绩波动可能会很大。    稳定增长股：小盘具有一定品牌效应后的快销品，达到一定统治地位，最好在行业的繁荣周期顶峰卖出
  周期股
  相关指标   市盈率（P/E 或 PER）= 每股市值 / 每股盈余
每股市价处于每股盈余（EPS），评估股价是昂贵还是便宜。市盈率越低代表投资者能够以相对较低的价格购入股票。
Wikipedia: https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87
  市净率（PBR，P/B） = 总市值 / 净资产
评估高风险企业，企业资产大量为实物资产的企业时收到重视。
  市销率（PSR，P/S） = 总市值 / 营收
公司市值除以上一财年（或季度）的营业收入，或等价地，以公司股价除以每股营利收入，越小（小于 1）通常被认为投资价值越高。可以付出比单位营收更少的钱购买股票。 Wikipedia: https://zh.wikipedia.org/zh-hans/%E5%B8%82%E9%94%80%E7%8E%87
  相关链接
 简单直观的解释一下市盈率和市净率的意思  </description>
    </item>
    
    <item>
      <title>基金定投</title>
      <link>https://www.linuxzen.com/notes/notes/20200311093314_%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200311093314_%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/</guid>
      <description>适合人群：穷人、笨人、忙人、好人
  为什么
 通胀太高，股票战胜通胀的重要工具 绝大多数人不具备择时能力 避免高点买入    核心逻辑：放弃择时，持续小额买入，降低成本
  缺点：在市场上涨、高位震荡过程中，虽然盈利大幅提高，但持仓成本也在快速提高。一旦市场转向熊市，整体会迅速亏本。
 单边上涨：定投盈利少于一次性投资 先震荡后上涨：定投盈利少于一次性投资 先上涨后下跌：定投亏损多于一次性投资 单边下跌：定投亏损少于一次性投资 震荡：定投与一次性投资持平 先下跌再震荡：定投亏损少于一次性投资 除了坚持，还在于止盈策略，牛市中成本不断提高，需要及时止盈，防止下跌时候的亏损    错误理念
 定投不是万能，需要防止“倒微笑曲线周期” 巴菲特说指数基金难以超越仅限于美股，A 股与之相反 定投组合包含债券基金：定投适合波动较大的权益类资产（股票、商品），债卷等固定收益类产品本身波动小，一次性买入和定投基本没区别 月定投不够还要周定投：基本没差别 定投是懒人投资，坚持即可：还需要主动管理，如定投的标的不再适合定投，该换要换。 一次性投资止损不止赢，定投止赢不止损。 定投只买开放式基金：还可以宽基指数基金、主题指数基金、行业指数基金、风格指数基金、策略指数基金、QDII 指数基金、商品指数基金。此外，还有折价的封闭式基金、定增基金，适当的配置会非常好玩。    策略
 定投买入，止盈不止损： 需要在可能出现的“倒微笑曲线周期”及时止盈。 制订量化估值标准   技术分析
通过MA、MACD、RSI等各种技术指标，判断目前市场从长期看，是相对低位还是高位
 趋势上涨原则：MA(30)&amp;gt;MA(60)&amp;gt;MA(120)； 趋势下跌原则：MA(30)&amp;lt;MA(60)&amp;lt;MA(120)。  均线偏离法：根据指数价格对均线偏离的程度决定投资额度的多少。
 P&amp;gt;MA(120)：正偏离，减少投资额度； P&amp;lt;MA(120)：负偏离，增加投资额度。    基本面分析
根据指数相关基本面指标，判断股市处于高估或者低估。如市盈率、市净率、整体ROI等地。在股市高估时，降低投资额度，在股市低估时，增加投资额度。
  定期不定额策略
在上述策略的基础上，如目前市场明显在历史地点，原来每个月投1000的，这时不妨投2000。如市场明显高估，每个月投1000的可以投500。如果涨的都害怕了，可以不投甚至卖出一部分。
  产品池管理</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>https://www.linuxzen.com/notes/notes/20200310093014_deep_learning/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200310093014_deep_learning/</guid>
      <description> What is the Difference Between CNN and RNN? 译：深度学习算法：完整指南  </description>
    </item>
    
    <item>
      <title>AI</title>
      <link>https://www.linuxzen.com/notes/notes/20200309112015_ai/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200309112015_ai/</guid>
      <description> Machine Learning Deep Learning 《机器学习实战》读书笔记  </description>
    </item>
    
    <item>
      <title>Translate</title>
      <link>https://www.linuxzen.com/notes/articles/20200309112105_translate/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200309112105_translate/</guid>
      <description> Deep Learning Algorithms Rust Borrow and Lifetimes Rust Means Never Having to Close a Socket Surgical Reading: How to Read 12 Books at Once Python behind the scenes #1: how the CPython VM works Python behind the scenes #2: how the CPython compiler works Understanding Rust futures by going way too deep  </description>
    </item>
    
    <item>
      <title>译：深度学习算法：完整指南</title>
      <link>https://www.linuxzen.com/notes/articles/20200309112133_deep_learning_algorithms/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200309112133_deep_learning_algorithms/</guid>
      <description>原文链接：Deep Learning Algorithms : The Complete Guide。
深度学习正在影响整个世界。
深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。
在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。
这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。
其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。
我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。
但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。
所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。
Contents   但是什么是深度学习?
  神经网络
  前馈神经网络（FNN）
  卷积神经网络（CNN）
  循环神经网络（RNN）
  递归神经网络（Recurisive Neural Network）
  自编码器（AutoEncoders）
  深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)
  生成对抗网络（GAN）
  Transformers
  图神经网络（GNN）
  自然语言处理中的深度学习
 词嵌入 (Word embedding) 序列建模（Sequence Modeling）    计算机视觉中的机器学习</description>
    </item>
    
    <item>
      <title>CPI</title>
      <link>https://www.linuxzen.com/notes/notes/20200224133304_cpi/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224133304_cpi/</guid>
      <description>反映与居民生活有关的产品及劳务价格统计出来的物价变动指标，衡量通货膨胀的主要指标之一：
 超过 3% 为通货膨胀 超过 5% 就是比较严重的通货膨胀  Links  消费者物价指数  </description>
    </item>
    
    <item>
      <title>ELisp</title>
      <link>https://www.linuxzen.com/notes/notes/20200225192204_elisp/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200225192204_elisp/</guid>
      <description>&#39;foo vs #&#39;foo https://emacs.stackexchange.com/a/10943
 #&#39; on symbols will cause the byte-compiler to emit a warning if the function is not defined.
 </description>
    </item>
    
    <item>
      <title>Emacs</title>
      <link>https://www.linuxzen.com/notes/notes/20200218120634/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218120634/</guid>
      <description> ELisp Org Mode Helm Tmux 256 colors Emacs Buffer 名字去重 straight.el 命令 Emacs 优化启动速度 LSP  C++ LSP   Emacs Projectile 优化  </description>
    </item>
    
    <item>
      <title>Financial Management</title>
      <link>https://www.linuxzen.com/notes/notes/20200224132507/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224132507/</guid>
      <description> 基金 基金定投 股市相关概念 相关书籍  《巴比伦富翁新解》读书笔记 《百箭穿杨》读书笔记    To Read  《布雷迪报告》  </description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://www.linuxzen.com/notes/notes/20200218115725/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218115725/</guid>
      <description> Go Channel Go Swagger  柯里化 func max(a, b int) int { if a &amp;gt; b { return a } return b } func currying(a int) func(int) int { return func(b int) int { return max(a, b) } } </description>
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>https://www.linuxzen.com/notes/notes/20200218115740_go_channel/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218115740_go_channel/</guid>
      <description>Channel Directions func demo(readOnlyStream &amp;lt;-chan bool, writeOnlyStream chan&amp;lt;- bool) { } </description>
    </item>
    
    <item>
      <title>Helm</title>
      <link>https://www.linuxzen.com/notes/notes/20200218122103_helm/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218122103_helm/</guid>
      <description>如何从历史跳到其他命令列表 Key binds C-o
See also: https://emacs.stackexchange.com/questions/18173/how-to-jump-from-emacs-command-history-to-emacs-commands-in-helm</description>
    </item>
    
    <item>
      <title>Makefile</title>
      <link>https://www.linuxzen.com/notes/notes/20200218174830_makefile/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218174830_makefile/</guid>
      <description>Links  A Makefile for Emacs Packages  </description>
    </item>
    
    <item>
      <title>Org Mode</title>
      <link>https://www.linuxzen.com/notes/notes/20200218120643_org_mode/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218120643_org_mode/</guid>
      <description> OX-HUGO 批量导出 Markdown  快捷键  C-c C-o 打开当前光标下的链接  Snippets [[http://www.gnu.org/software/emacs/][GNU Emacs]] </description>
    </item>
    
    <item>
      <title>Rust</title>
      <link>https://www.linuxzen.com/notes/notes/20200307191429_rust/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307191429_rust/</guid>
      <description>学习  基础 《The Rust Programming Language》 相关主题  借用和生命周期 Rust Wrapper Types .iter vs .into_iter See SO   练习  基础练习：https://github.com/rust-lang/rustlings 进阶练习：https://github.com/pingcap/talent-plan Rust Trait Object   Rust Asynchronous Programming Rust Obscure Words for non-native English speakers  生态  Web  相关博文  如何理解 Sync 和 Send? Fearless Concurrency with Rust Why Rust strings seem hard  To Read  Rust宏小册 中文版 A half-hour to learn Rust  </description>
    </item>
    
    <item>
      <title>Taking Smart Notes With Org-mode</title>
      <link>https://www.linuxzen.com/notes/articles/notes/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/notes/</guid>
      <description>See also:
 https://praxis.fortelabs.co/how-to-take-smart-notes/ https://www.nateliason.com/blog/roam  Topics  Financial Management 读书笔记 技术 Translate Learning English 认同的话 To Complete  Links Sprint 1:2019-02-03 ~ 2019-02-19   LD_PRELOAD: The Hero We Need and Deserve
通过 LD_PRELOAD 覆盖一些函数，比如 faketime
  Going Solo, Successfully
  变身成为独立开发者。
  Graceful Shutdown
  Why limiting work-in-progress works
  Practical Go: Real world advice for writing maintainable Go programs
译文：https://github.com/llitfkitfk/go-best-practice
  百万 Go TCP 连接的思考: epoll方式减少资源占用</description>
    </item>
    
    <item>
      <title>Taking Smart Notes With Org-mode</title>
      <link>https://www.linuxzen.com/notes/notes/notes/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/notes/</guid>
      <description>See also:
 https://praxis.fortelabs.co/how-to-take-smart-notes/ https://www.nateliason.com/blog/roam  </description>
    </item>
    
    <item>
      <title>Unix</title>
      <link>https://www.linuxzen.com/notes/notes/20200218174814/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218174814/</guid>
      <description> Makefile Linux Virtual Memory Management SSH macOS max open files macOS TimeMachine 日志 macOS 问题解决三板斧  </description>
    </item>
    
    <item>
      <title>《巴比伦富翁新解》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200307114151_%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%AF%8C%E7%BF%81%E6%96%B0%E8%A7%A3/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307114151_%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%AF%8C%E7%BF%81%E6%96%B0%E8%A7%A3/</guid>
      <description>积累财富首先要改变思维，学习复利的力量。
粗读要点  实践 10/50 懒人储蓄投资自己，工资 10% 奖金 50% 存储单独的账户用户投资自己 开辟单独基金用于存放房租、孩子学费和自我投资 不懂不投，宁愿错过，不犯过错 画出自己的财富水池 为自己购买保险规避风险（大病和死亡），完成家庭保险配置 理清房贷还款计划，怎么将还款金额降低到收入到 1/3 （9000）以下，可以考虑先提前还房贷减轻房贷利息压力  </description>
    </item>
    
    <item>
      <title>基准差</title>
      <link>https://www.linuxzen.com/notes/notes/20200307154558_%E5%9F%BA%E5%87%86%E5%B7%AE/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307154558_%E5%9F%BA%E5%87%86%E5%B7%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>基金</title>
      <link>https://www.linuxzen.com/notes/notes/20200224132645_/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224132645_/</guid>
      <description>将资金交给投资经理人进行投资盈利跑赢 CPI 或赚取更多利润。
分类 交易方式划分：
 开放式基金（活期） 封闭式基金（死期）  投资对象划分:
 货币基金：余额宝 股票型、债卷型：依靠基金经理管理基金的能力 指数型：被动型基金，依靠大盘指数，美股属于长牛短熊型能跑赢主动型，A 股属于短牛长熊跑赢主动型比较困难。  股票 VS 基金  股票：想一夜暴富（也可能一夜暴亏） 基金：财富增值，门槛低，风险低  如何选基 市场研判  股市走熊：债卷基金 牛市初中：股票基金和指数基金  自身情况  稳健型 激进型  技巧 基金评级 国外渠道
 晨星  国内渠道
 银河证劵 海通证劵 济安金信 招商证劵  历史业绩  将基金收益与股票大盘走势进行比较； 将基金收益与其他同类基金的收益进行比较； 将基金的当期收益与历史收益进行比较。  一些指标  夏普比率 &amp;gt; 0 基金报酬大于风险，&amp;lt; 0 风险大过报酬 标准差越小，投资风险越低  天天基金网等三方平台上都能看，晨星网上更全。天天基金网的特色数据一栏可以看，晨星网的基金工具里包括阿尔法系数等指标都有标识。
Links  〈如何买基金？基金入门，学会这几招就够了〉  </description>
    </item>
    
    <item>
      <title>基金</title>
      <link>https://www.linuxzen.com/notes/notes/20200307182917_%E5%9F%BA%E9%87%91/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307182917_%E5%9F%BA%E9%87%91/</guid>
      <description>将资金交给投资经理人进行投资盈利跑赢 CPI 或赚取更多利润。
分类 交易方式划分：
 开放式基金（活期） 封闭式基金（死期）  投资对象划分:
 货币基金：余额宝 股票型、债卷型：依靠基金经理管理基金的能力 指数型：被动型基金，依靠大盘指数，美股属于长牛短熊型能跑赢主动型，A 股属于短牛长熊跑赢主动型比较困难。  股票 VS 基金  股票：想一夜暴富（也可能一夜暴亏） 基金：财富增值，门槛低，风险低  如何选基 市场研判  股市走熊：债卷基金 牛市初中：股票基金和指数基金  自身情况  稳健型 激进型  技巧 基金评级 国外渠道
 晨星  国内渠道
 银河证劵 海通证劵 济安金信 招商证劵  历史业绩  将基金收益与股票大盘走势进行比较； 将基金收益与其他同类基金的收益进行比较； 将基金的当期收益与历史收益进行比较。  一些指标  夏普比率 &amp;gt; 0 基金报酬大于风险，&amp;lt; 0 风险大过报酬 标准差越小，投资风险越低 基准差  天天基金网等三方平台上都能看，晨星网上更全。天天基金网的特色数据一栏可以看，晨星网的基金工具里包括阿尔法系数等指标都有标识。
Links  〈如何买基金？基金入门，学会这几招就够了〉  </description>
    </item>
    
    <item>
      <title>复利</title>
      <link>https://www.linuxzen.com/notes/notes/20200307114233_%E5%A4%8D%E5%88%A9/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307114233_%E5%A4%8D%E5%88%A9/</guid>
      <description>Wikipedia: https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%88%A9</description>
    </item>
    
    <item>
      <title>夏普比率</title>
      <link>https://www.linuxzen.com/notes/notes/20200224140348_/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224140348_/</guid>
      <description>它是用来衡量金融资产绩效基金表现的一个指标，核心思想就是选择收益率相近的基金承担的风险越小越好，选择风险水平相同的基金则收益率越高越好。总之，夏普比率越大，说明这只基金的绩效越好。
   0 基金报酬大于风险
  &amp;lt; 0 基金风险大过报酬  </description>
    </item>
    
    <item>
      <title>标准差（Standard Deviation）</title>
      <link>https://www.linuxzen.com/notes/notes/20200224141925_/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224141925_/</guid>
      <description>又称标准偏差、均方差，数学符号 sigma。概率统计中最常使用作为测量一组数值的离散程度。
定义：为方差开算数平方根，反应组内个体间的离散程度。
用在基金上反映了基金总回报率的波动幅度大小，数值越大，表明波动程度越厉害，稳定度越小，投资风险就越高。
 越小，投资风险越低 越大，投资风险越高  </description>
    </item>
    
    <item>
      <title>读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description> 《The Rust Programming Language》 《巴比伦富翁新解》 《领域驱动设计》 《百箭穿杨》 《架构整洁之道》 《深入理解计算机系统》 《机器学习实战》读书笔记 《数据密集型应用系统设计》读书笔记  </description>
    </item>
    
    <item>
      <title>CPI</title>
      <link>https://www.linuxzen.com/notes/notes/20200224133214/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224133214/</guid>
      <description>:Tags: Financial Management
 消费者物价指数  </description>
    </item>
    
    <item>
      <title>《领域驱动设计》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171301_%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171301_%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>建模   模型用来描绘人们所关注的实现或想法的某个方面，比如地图就是模型。
  模型是一种简化，是对实现的解释：把与解决问题密切相关的方面抽象出来，而忽略无关的细节。
软件问题建模的区域就是软件的领域
 物质世界的领域：机票预订程序涉及的飞机乘客。 无形的领域：会计程序的金融领域。  领域涉及知识信息超载的问题，模型这种知识对知识进行了选择性的简化和有意的结构化。
  领域模型将领域专家头脑中的支持严格的组织且有选择的抽象，并不是尽可能建立一个符合“现实”的模型。
  UBIQUITOUS LANGUAGE 在同领域专家、开发人员和项目管理沟通的过程中建立并使用 UBIQUITOUS LANGUAGE，，并在模型实现时依然使用 UBIQUITOUS LANGUAGE 来让设计与沟通相一致（中文语境下稍显困难），UBIQUITOUS LANGUAGE 让知识消化后直接驱动变更模型。
LAYERED ARCHITECTURE 分层架构是实现 DDD 的基础，分层架构将不同的层次的实现分开，自上倒下应分为：
 用户界面层 应用层 领域层 基础设施层  核心在于要将领域层单独出来，对业务进行建模封装业务规则。调用规则也只能自上而下的调用，不能反向调用。
模型表示 关联  规定一个遍历方向：存在双向联结时（地址 -&amp;gt; 人 或 人 -&amp;gt; 地址）尽量只用一种，并避免互相关联 添加一个限定符，以便有效减少多重关联 消除不必要的关联  表示方式   ENTITY
用于跟踪对象的状态，有唯一标识符，在系统中是可变的，两个对象是否一个通过唯一标识来判断，不是靠它们的属性定义。
  VALUE OBJECT
区别与 ENTITY ，没有唯一标识，仅记录状态，一般设计为不可变用于共享 VALUE OBJECT，两个对象是否一个通过对象属性的值来判断。
  SERVICE</description>
    </item>
    
    <item>
      <title>LeetCode: 316.Remove Duplicate Letters</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172625_leetcode_316_remove_duplicate_letters/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172625_leetcode_316_remove_duplicate_letters/</guid>
      <description>移除小写字母中重复的字母，让所有字母都只出现一次，并且结果是所有结果中按照字典序排序最小的那个。
Example 1
 Input: &amp;ldquo;bcabc&amp;rdquo; Output: &amp;ldquo;abc&amp;rdquo;  Example 2
 Input: &amp;ldquo;cbacdcbc&amp;rdquo; Output: &amp;ldquo;acdb&amp;rdquo;   解法之一:
 通过一个数组对每一个出现的字母进行计数 遍历每一个字母放入栈，并将该字母的计数减 1 查看栈底的字母有没有比当前字母大且该字母的计数不为 0 的（有比当前更小的字典序），从栈底弹出该字母  func removeDuplicateLetters(s string) string { var countOfEachLetter [26]int var visited [26]bool stack := make([]byte, 0) stackBottom := 0 bytesArr := []byte(s) for _, c := range bytesArr { countOfEachLetter[getIndex(c)]++ } for _, c := range bytesArr { index := getIndex(c) countOfEachLetter[index]-- if visited[index] { continue } // countOfEachLetter[getIndex(stack[stackBottom])] &amp;gt; 0 后面还有该字符  for len(stack[stackBottom:]) &amp;gt; 0 &amp;amp;&amp;amp; stack[stackBottom] &amp;gt; c &amp;amp;&amp;amp; countOfEachLetter[getIndex(stack[stackBottom])] &amp;gt; 0 { // 标记为未访问用于后面的字符加入结果  visited[getIndex(stack[stackBottom])] = false // 移动栈底  stackBottom++ } // 加入到结果栈  stack = append(stack, c) visited[index] = true } return string(stack[stackBottom:]) } func getIndex(b byte) int { return int(b - &amp;#39;a&amp;#39;) } 通过上面解法遇到如下错误：</description>
    </item>
    
    <item>
      <title>LeetCode: 153.Find Minimum in Rotated Sorted Array</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172433_leetcode_153_find_minimum_in_rotated_sorted_array/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172433_leetcode_153_find_minimum_in_rotated_sorted_array/</guid>
      <description>解法 1 找到中间节点依次往左右扩散：
 向左边扩散，如果左边的大于当前元素，那么当前元素即为最小值 向右边扩散，如果右边的小于当前元素，那么右边元素即为最小值  如果以上不成立则第一个元素为最小元素（未旋转），以下是代码
func findMin(nums []int) int { length := len(nums) if length == 1 { return nums[0] } // 从中间开始确定方向  mid := length / 2 - 1 left, right := mid, mid for left - 1 &amp;gt;= 0 || right + 1 &amp;lt; length { if left - 1 &amp;gt;= 0 { if nums[left - 1] &amp;gt; nums[left] { return nums[left]; } left-- } if right + 1 &amp;lt; length { if nums[right] &amp;gt; nums[right + 1] { return nums[right + 1] } right++ } } return nums[0] } 优化 参考答案后可通过二分查找做如下优化，首先判断是否被旋转：</description>
    </item>
    
    <item>
      <title>LeetCode: 154.Find Minimum in Rotated Sorted Array II</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172319_154_find_minimum_in_rotated_sorted_array_ii/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172319_154_find_minimum_in_rotated_sorted_array_ii/</guid>
      <description>思路 这个是 LeetCode: 153.Find Minimum in Rotated Sorted Array 扩展，增加了以下几种边界情况：
 &amp;lsquo;[2, 2, 2, 2, 1]&amp;rsquo; &amp;lsquo;[3, 1, 3]&amp;rsquo; &amp;lsquo;[1, 1, 1]&amp;rsquo; &amp;lsquo;[10, 1, 10, 10, 10]&amp;rsquo;  但核心依然是判断最小值是在左边还是右边。假设如下数组：
  &amp;lsquo;[3, 3, 3, 1, 3]&amp;rsquo;
  left[0]=3, right[4]=3, mid[2]=3, 这时候不确定最小值在哪边但是 right&amp;ndash; 是安全的，所以执行 right&amp;ndash;
  left[0]=3, right[3]=1, mid[2]=3, 这时候 mid &amp;lt; right 说明最小值在 mid 的右边，所以调整 left = mid + 1
  左右两边索引一致终止循环
  实现 func findMin(nums []int) int { length := len(nums) left, right := 0, length - 1 for left &amp;lt; right { mid := (left + right) / 2 if nums[mid] &amp;gt; nums[right] { left = mid + 1 } else if nums[mid] &amp;lt; nums[right] { right = mid } else { right-- } } return nums[right] } </description>
    </item>
    
    <item>
      <title>LeetCode: 3.Longest Substring Without Repeating Characters</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172810_leetcode_3_longest_substring_without_repeating_characters/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172810_leetcode_3_longest_substring_without_repeating_characters/</guid>
      <description>准备 动态规划
实践 字符串 &amp;ldquo;abcabcbb&amp;rdquo;
根据索引有如下关系
   a b c a b c b b     0 1 2 3 4 5 6 7     \(f(0,1)=f(0,0) + 1\) \(f(0,2)=f(0,1) + 2\)  在所有字符都不重复的情况下有如下公式
\(f(s,e)=f(s,e-1) + e\)
若遇到重复的情况则，3 索引于当前字串 的 0 重复则表明当前字串已经到头，需要记录并偏移 s，s=1：
 \(f(1,3)=f(1,2)+3\)  假设：
 s - 开始字符索引 e - 结束字符索引  若遇到当前字符于前面 r 字符重复则： \[ f(r,e)=f(s,e - 1) + e; s=r \]</description>
    </item>
    
    <item>
      <title>LeetCode: 4.Median of Two Sorted Arrays</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172945_leetcode_4_median_of_two_sorted_arrays/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172945_leetcode_4_median_of_two_sorted_arrays/</guid>
      <description>思路 归并排序
代码 func findMedianSortedArrays(nums1 []int, nums2 []int) float64 { nums := mergeSort(nums1, nums2) length := len(nums) if length % 2 != 0 { return float64(nums[(length - 1) / 2]) } i := length / 2 return (float64(nums[i]) + float64(nums[i - 1])) / 2 } func mergeSort(nums1 []int, nums2 []int) []int { l1 := len(nums1) l2 := len(nums2) result := make([]int, 0, l1 + l2) i, j := 0, 0 for i &amp;lt; l1 &amp;amp;&amp;amp; j &amp;lt; l2 { if nums1[i] &amp;lt; nums2[j] { result = append(result, nums1[i]) i++ } else { result = append(result, nums2[j]) j++ } } result = append(result, nums1[i:].</description>
    </item>
    
    <item>
      <title>LeetCode: 5.Longest Palindromic Substring</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173438_leetcode_5_longest_palindromic_substring/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173438_leetcode_5_longest_palindromic_substring/</guid>
      <description>https://leetcode.com/problems/longest-palindromic-substring/description/
 思路 直接暴力往两边搜索
func longestPalindrome(s string) string { buf := []byte(s) length := len(buf) if length == 0 { return s } start, end := 0, 0 for ci, _ := range buf { i, j := ci, ci // 无法处理 &amp;#34;aaaa&amp;#34; 和 &amp;#34;noon&amp;#34; 这种情况  for i &amp;gt; 0 &amp;amp;&amp;amp; j &amp;lt; length - 1 &amp;amp;&amp;amp; buf[i - 1] == buf[j + 1] { i-- j++ } // 考虑 &amp;#34;bba&amp;#34; 这种情况  if i == j &amp;amp;&amp;amp; ci &amp;gt; 0 &amp;amp;&amp;amp; buf[ci] == buf[ci - 1] { i, j = ci-1, ci } // 考虑 &amp;#34;abb&amp;#34; 这种情况  if i == j &amp;amp;&amp;amp; ci &amp;lt; length - 1 &amp;amp;&amp;amp; buf[ci] == buf[ci + 1] { i, j = ci, ci + 1 } if i !</description>
    </item>
    
    <item>
      <title>LeetCode: 6.ZigZag Conversion</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173548_leetcode_6_zigzag_conversion/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173548_leetcode_6_zigzag_conversion/</guid>
      <description>https://leetcode.com/problems/zigzag-conversion/description/
 先根据行数计算列数：
\(column=length / (row + 2) + bool(length \mod (row + 2))\)
每一行必然有点的位置为：
\(i \mod (row - 1)\) 为 0</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173956_mysql/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173956_mysql/</guid>
      <description> MySQL grant subnet MVCC MySQL forget password  </description>
    </item>
    
    <item>
      <title>《The Rust Programming Language》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200325165411_the_rust_programming_language/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200325165411_the_rust_programming_language/</guid>
      <description> 语句和表达式 所有权 引用和借用 结构体 枚举 模式匹配 if let 模块化 错误处理 Traits 生命周期 闭包 迭代器 智能指针 Rust 宏 Rust 并发  函数指针 fn 区分闭包的 Fn 特性，函数指针都实现来三个闭包的特性。
fn do(f: fn(i32) -&amp;gt; i32, arg: i32) -&amp;gt; i32 { f(arg) + f(arg) } </description>
    </item>
    
  </channel>
</rss>
