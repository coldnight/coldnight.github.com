<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taking Smart Notes With Org-mode</title>
    <link>https://www.linuxzen.com/notes/</link>
    <description>Recent content on Taking Smart Notes With Org-mode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 15 Mar 2022 15:21:00 +0800</lastBuildDate><atom:link href="https://www.linuxzen.com/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode101: 769. Max Chunks To Make Sorted</title>
      <link>https://www.linuxzen.com/notes/notes/20220315152142-leetcode101_769_max_chunks_to_make_sorted/</link>
      <pubDate>Tue, 15 Mar 2022 15:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220315152142-leetcode101_769_max_chunks_to_make_sorted/</guid>
      <description>tags: Tricky,LeetCode101  original: 0, 2, 1, 4, 3, 5, 7, 6 max: 0, 2, 2, 4, 4, 5, 7, 7 sorted: 0, 1, 2, 3, 4, 5, 6, 7 index: 0, 1, 2, 3, 4, 5, 6, 7
As shown above, the position of break point is same to the position of max value of chunks. So here:
 We track chunks&amp;rsquo;s max value. Break at the position of max value lives in sorted array, which means the index in this case.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220315152159-tricky/&#34;&gt;Tricky&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;original: 0, 2, 1, 4, 3, 5, 7, 6
max:      0, 2, 2, 4, 4, 5, 7, 7
sorted:   0, 1, 2, 3, 4, 5, 6, 7
index:    0, 1, 2, 3, 4, 5, 6, 7&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;As shown above, the position of break point is same to the position of &lt;code&gt;max&lt;/code&gt; value of chunks.
So here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We track chunks&amp;rsquo;s &lt;code&gt;max&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;Break at the position of &lt;code&gt;max&lt;/code&gt; value lives in sorted array, which means the index in this case.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxChunksToSorted(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; arr) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(arr[i], m);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i) {
				count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Tricky</title>
      <link>https://www.linuxzen.com/notes/notes/20220315152159-tricky/</link>
      <pubDate>Tue, 15 Mar 2022 15:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220315152159-tricky/</guid>
      <description> tags: Algorithm  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 739. Daily Temperatures</title>
      <link>https://www.linuxzen.com/notes/notes/20220315112303-leetcode101_739_daily_temperatures/</link>
      <pubDate>Tue, 15 Mar 2022 11:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220315112303-leetcode101_739_daily_temperatures/</guid>
      <description>tags: Monotonic Stack,LeetCode101,LeetCode101: 496. Next Greater Element I  Mono-descreasing stack class Solution { public: vector&amp;lt;int&amp;gt; dailyTemperatures(vector&amp;lt;int&amp;gt;&amp;amp; temperatures) { vector&amp;lt;int&amp;gt; res(temperatures.size(), 0); stack&amp;lt;int&amp;gt; st; for (int i = 0; i &amp;lt; temperatures.size(); i++) { while (!st.empty() &amp;amp;&amp;amp; temperatures[st.top()] &amp;lt; temperatures[i]) { res[st.top()] = i - st.top(); st.pop(); } st.push(i); } return res; } }; [73,74,75,71,69,72,76,73]</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220314085847-leetcode101_496_next_greater_element_i/&#34;&gt;LeetCode101: 496. Next Greater Element I&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mono-descreasing-stack&#34;&gt;Mono-descreasing stack&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dailyTemperatures(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; temperatures) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res(temperatures.size(), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; temperatures.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; temperatures[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; temperatures[i]) {
				res[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st.top();
				st.pop();
			}
			st.push(i);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;[73,74,75,71,69,72,76,73]&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 654. Maximum Binary Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20220315105116-leetcode101_654_maximum_binary_tree/</link>
      <pubDate>Tue, 15 Mar 2022 10:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220315105116-leetcode101_654_maximum_binary_tree/</guid>
      <description>tags: Monotonic Stack,LeetCode101,Binary Search Tree  Mono-descreasing stack Key:
 The largest number is the root, that we can observe in by iteration. We must clear the stack to fill the right side of BST after loop. The last popped element is the left of current node. From top to bottom, the top element is the right side of the element that under the top.  class Solution { public: TreeNode* constructMaximumBinaryTree(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;TreeNode*&amp;gt; res(nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312215158-binary_search_tree/&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mono-descreasing-stack&#34;&gt;Mono-descreasing stack&lt;/h2&gt;
&lt;p&gt;Key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The largest number is the root, that we can observe in by iteration.&lt;/li&gt;
&lt;li&gt;We must clear the stack to fill the right side of BST after loop.&lt;/li&gt;
&lt;li&gt;The last popped element is the left of current node.
From top to bottom, the top element is the right side of the element that under the top.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; constructMaximumBinaryTree(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; res(nums.size(), &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;);
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st; &lt;span style=&#34;color:#75715e&#34;&gt;// mono-descreasing stack, remove smaller elements before pushing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			res[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeNode(nums[i]);

			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
				st.pop();
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]) {
					res[st.top()]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[j];
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					res[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[j];
				}
			}

			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val) {
				root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[i];
			}
			st.push(i);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (st.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
			st.pop();
			res[st.top()]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[j];
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode101: 581. Shortest Unsorted Continuous Subarray</title>
      <link>https://www.linuxzen.com/notes/notes/20220315071351-leetcode101_581_shortest_unsorted_continuous_subarray/</link>
      <pubDate>Tue, 15 Mar 2022 07:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220315071351-leetcode101_581_shortest_unsorted_continuous_subarray/</guid>
      <description>tags: Monotonic Stack,LeetCode101  Mono-increasing stack Key:
 Some case should move backward as the new value we meeted is larger than it. When we meet 2 in the stack, and here we need move backward. Some case we need move forward, as the following values are the mono-increaing stack: [1, 2, 5, 3, 4]  class Solution { public: int findUnsortedSubarray(vector&amp;lt;int&amp;gt;&amp;amp; nums) { stack&amp;lt;int&amp;gt; st; // mono-increasing 	int left = -1, right = -2; for (int i = 0; i &amp;lt; nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mono-increasing-stack&#34;&gt;Mono-increasing stack&lt;/h2&gt;
&lt;p&gt;Key:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some case should move backward as the new value we meeted is larger than it.
When we meet &lt;code&gt;2&lt;/code&gt; in the stack, and here we need move backward.&lt;/li&gt;
&lt;li&gt;Some case we need move forward, as the following values are the mono-increaing stack: &lt;code&gt;[1, 2, 5, 3, 4]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; findUnsortedSubarray(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st; &lt;span style=&#34;color:#75715e&#34;&gt;// mono-increasing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums[i]) {
				&lt;span style=&#34;color:#75715e&#34;&gt;// move backward
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; st.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left) {
					left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); &lt;span style=&#34;color:#75715e&#34;&gt;// left should be the previous index
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				}

				&lt;span style=&#34;color:#75715e&#34;&gt;// move forward
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[st.top()]; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; right) {
						right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
					}
				}
				st.pop();
			}
			st.push(i);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;failed-test-cases&#34;&gt;Failed test cases&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode101: 503. Next Greater Element II</title>
      <link>https://www.linuxzen.com/notes/notes/20220315063008-leetcode101_503_next_greater_element_ii/</link>
      <pubDate>Tue, 15 Mar 2022 06:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220315063008-leetcode101_503_next_greater_element_ii/</guid>
      <description>tags: Monotonic Stack,LeetCode101 related: LeetCode101: 496. Next Greater Element I  Mono-descreasing stack / normal order loop twice  Loop twice to solve circular interger array Mono-descreasing stack to store index, avoid HashMap in Next Greater Element I, as there is a cicular array.  class Solution { public: vector&amp;lt;int&amp;gt; nextGreaterElements(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;int&amp;gt; res(nums.size(), -1); stack&amp;lt;int&amp;gt; st; for (int j = 0, i = 0; j &amp;lt; nums.size() * 2; ++j) { i = j &amp;gt;= nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;related: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220314085847-leetcode101_496_next_greater_element_i/&#34;&gt;LeetCode101: 496. Next Greater Element I&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mono-descreasing-stack-normal-order-loop-twice&#34;&gt;Mono-descreasing stack / normal order loop twice&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Loop twice to solve &lt;em&gt;circular interger array&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Mono-descreasing stack to store index, avoid HashMap in &lt;strong&gt;Next Greater Element I&lt;/strong&gt;, as there is a &lt;strong&gt;cicular array&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nextGreaterElements(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res(nums.size(), &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) {
			i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; j;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]) {
				res[st.top()] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i];
				st.pop();
			}
			st.push(i);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode101: 496. Next Greater Element I</title>
      <link>https://www.linuxzen.com/notes/notes/20220314085847-leetcode101_496_next_greater_element_i/</link>
      <pubDate>Mon, 14 Mar 2022 08:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220314085847-leetcode101_496_next_greater_element_i/</guid>
      <description>tags: Monotonic Stack,Hash Table,LeetCode101  Mono-descreasing and reverse order travel class Solution { public: vector&amp;lt;int&amp;gt; nextGreaterElement(vector&amp;lt;int&amp;gt;&amp;amp; nums1, vector&amp;lt;int&amp;gt;&amp;amp; nums2) { // Mono-descreasing and reverse order travel. 	// The next greater of the popped value is the top of the stack, if it has any. 	// 	// For example: [1,3,4,2] 	// the stack goes: 	// [2] 	// [4] -&amp;gt; 2 	// [4, 3, 1] 	stack&amp;lt;int&amp;gt; st; vector&amp;lt;int&amp;gt; res; unordered_map&amp;lt;int, int&amp;gt; m; for (int i = nums2.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311221617-hash_table/&#34;&gt;Hash Table&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mono-descreasing-and-reverse-order-travel&#34;&gt;Mono-descreasing and reverse order travel&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nextGreaterElement(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums1, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums2) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Mono-descreasing and reverse order travel.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// The next greater of the popped value is the top of the stack, if it has any.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//  For example: [1,3,4,2]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// the stack goes:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// [2]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// [4] -&amp;gt; 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// [4, 3, 1]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;

		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res;
		unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; m;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums2.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; st.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums2[i]) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
				st.pop();
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty()) {
					m[c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
				}
			}
			st.push(nums2[i]);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (st.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
			st.pop();
			m[c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums1.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m.find(nums1[i]) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; m.end()) {
				res.push_back(m[nums1[i]]);
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				res.push_back(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
};


&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;[1,3,5,2,4]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;[6,5,4,3,2,1,7]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;The stack goes:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;[7, 1]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;[7, 2] -&amp;gt; 1 and 1 is next greater is the top of the stack
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode101: 402. Remove K Digits</title>
      <link>https://www.linuxzen.com/notes/notes/20220314074324-leetcode101_402_remove_k_digits/</link>
      <pubDate>Mon, 14 Mar 2022 07:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220314074324-leetcode101_402_remove_k_digits/</guid>
      <description>tags: Monotonic Stack,LeetCode101  Mono-increasing stack and reverse order travel (Not Work) Notes:
 We attempt to remove the most large numbers in the left, first, we use the right n numbers to meet the requirements, which is num.length - k and then, using a monotonic increasing stack to keep the result as samller as we can.  (A monotonic increasing stack will remove larger elements before pushing.)
Also note that: the result&amp;rsquo;s length is not actually equal num.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mono-increasing-stack-and-reverse-order-travel--not-work&#34;&gt;Mono-increasing stack and reverse order travel (Not Work)&lt;/h2&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We attempt to remove the most large numbers in the left,&lt;/li&gt;
&lt;li&gt;first, we use the right &lt;em&gt;n&lt;/em&gt; numbers to meet the requirements, which is &lt;code&gt;num.length&lt;/code&gt; - &lt;code&gt;k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and then, using a monotonic increasing stack to keep the result as samller as we can.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(A monotonic increasing stack will remove larger elements before pushing.)&lt;/p&gt;
&lt;p&gt;Also note that: the result&amp;rsquo;s length is not actually equal &lt;code&gt;num.length - k&lt;/code&gt;, it&amp;rsquo;s less than or equal &lt;code&gt;num.length - k&lt;/code&gt;, like num = &amp;ldquo;10200&amp;rdquo;, k = 1. Which means the result in stack could be longer than the required or leading &amp;lsquo;0&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;We failed at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The result is an empty string, that the &amp;ldquo;0&amp;rdquo; should be returned. num = &amp;ldquo;10&amp;rdquo;, k = 2&lt;/li&gt;
&lt;li&gt;num = &amp;ldquo;112&amp;rdquo;, k = 1&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string removeKdigits(string num, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (num.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// A monotonic increasing stack will remove larger elements before pushing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mst;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k;
		string r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (mst.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mst.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; num[i]) {
				mst.pop();
			}
			mst.push(num[i]);
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// Pop surplus and the leading &amp;#39;0&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (mst.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mst.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mst.top() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) {
			mst.pop();
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mst.empty()) {
			r.push_back(mst.top());
			mst.pop();
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; r : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mono-increasing-stack-and-normal-order-travel&#34;&gt;Mono-increasing stack and normal order travel&lt;/h2&gt;
&lt;p&gt;We are not focus on keep &lt;code&gt;n - k&lt;/code&gt; numbers from right to left, but focus on remove &lt;code&gt;k&lt;/code&gt; numbers from left to right.&lt;/p&gt;
&lt;p&gt;A more detail explanation to see: &lt;a href=&#34;https://leetcode.com/problems/remove-k-digits/discuss/1779458/C%2B%2B-oror-Easy-To-Understand-oror-Stack-oror-Short-and-Simple&#34;&gt;https://leetcode.com/problems/remove-k-digits/discuss/1779458/C%2B%2B-oror-Easy-To-Understand-oror-Stack-oror-Short-and-Simple&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string removeKdigits(string num, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (num.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// A monotonic increasing stack will remove bigger elements before pushing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mst;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k;
		string r;

		mst.push(num[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mst.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mst.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; num[i]) {
				mst.pop();
				k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// the leading zero
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mst.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mst.top() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) {
				mst.pop();
			}

			mst.push(num[i]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mst.empty()) {
			k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
			mst.pop();
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mst.empty()) {
			r.push_back(mst.top());
			mst.pop();
		}
		reverse(r.begin(), r.end());
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; r : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode101: 456. 132 Pattern</title>
      <link>https://www.linuxzen.com/notes/notes/20220313153222-456_132_pattern/</link>
      <pubDate>Sun, 13 Mar 2022 15:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220313153222-456_132_pattern/</guid>
      <description>tags: Monotonic Stack,LeetCode101,Tricky  We travel the numbers in the reverse order:
 Use a mono-increasing stack to find the largest number(3 in the 132 pattern), the value popped from stack is the second large number(2 in the 132 pattern), if any value less than the second large number, returns true.  // Note: // // - subsequence is not contiguous, is i &amp;lt; j &amp;lt; k, not i + 1 = j, j + 1 = k // class Solution { public: bool find132pattern(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int K = INT_MIN; stack&amp;lt;int&amp;gt; mst; // mono-increasing stack 	for (int i = nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220313145125-monotonic_stack/&#34;&gt;Monotonic Stack&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220315152159-tricky/&#34;&gt;Tricky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We travel the numbers in the reverse order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a mono-&lt;strong&gt;increasing&lt;/strong&gt; stack to find the largest number(&lt;strong&gt;3&lt;/strong&gt; in the &lt;strong&gt;132&lt;/strong&gt; pattern),&lt;/li&gt;
&lt;li&gt;the value popped from stack is the second large number(&lt;strong&gt;2&lt;/strong&gt; in the &lt;strong&gt;132&lt;/strong&gt; pattern),&lt;/li&gt;
&lt;li&gt;if any value less than the second large number, returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Note:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// - subsequence is not contiguous, is i &amp;lt; j &amp;lt; k, not i + 1 = j, j + 1 = k
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; find132pattern(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INT_MIN;
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mst;   &lt;span style=&#34;color:#75715e&#34;&gt;// mono-increasing stack
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; K) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mst.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mst.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]) {
				K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mst.top();
				mst.pop();
			}

			mst.push(nums[i]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
	}
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Monotonic Stack</title>
      <link>https://www.linuxzen.com/notes/notes/20220313145125-monotonic_stack/</link>
      <pubDate>Sun, 13 Mar 2022 14:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220313145125-monotonic_stack/</guid>
      <description>tags: Data Structures,Stack source: “Monotonic Stack.” Accessed March 13, 2022. https://liuzhenglaichn.gitbook.io/algorithm/monotonic-stack.  A monotonic stack is a stack whose elements are monotonically increasing or descreasing.
It&amp;rsquo;s not only about the order in the stack, it&amp;rsquo;s also about remove larger/smaller elements before pushing.
Monotonically descreasing we need to pop smaller elements from the stack before pushing a new element:
vector&amp;lt;int&amp;gt; nums; // fill nums stack&amp;lt;int&amp;gt; st; for (auto i = nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073821-stack/&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_YUUTVRT9&#34;&gt;“Monotonic Stack.” Accessed March 13, 2022. https://liuzhenglaichn.gitbook.io/algorithm/monotonic-stack.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A monotonic stack is a stack whose elements are monotonically increasing or descreasing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s not only about the order in the stack, it&amp;rsquo;s also about remove larger/smaller elements before pushing.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;monotonically-descreasing&#34;&gt;Monotonically descreasing&lt;/h2&gt;
&lt;p&gt;we need to pop &lt;strong&gt;smaller&lt;/strong&gt; elements from the stack before pushing a new element:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums;
&lt;span style=&#34;color:#75715e&#34;&gt;// fill nums
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; st.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums[i]) {
		st.pop();
	}
	st.push(nums[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To push &lt;code&gt;3&lt;/code&gt; to &lt;code&gt;[5, 4, 2, 1]&lt;/code&gt;, we need pop &lt;code&gt;2, 1&lt;/code&gt; out first.&lt;/li&gt;
&lt;li&gt;Then the stack become &lt;code&gt;[5, 4, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;monotonically-increasing&#34;&gt;Monotonically increasing&lt;/h2&gt;
&lt;p&gt;vice versa.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums;
&lt;span style=&#34;color:#75715e&#34;&gt;// fill nums
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; st.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]) {
		st.pop();
	}
	st.push(nums[i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;increasing-vs-decreasing&#34;&gt;Increasing vs Decreasing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mono-increasing attempt to keep the result as &lt;strong&gt;greater&lt;/strong&gt; as possible.&lt;/li&gt;
&lt;li&gt;Vice versa.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>AVL Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20220312215308-avl_tree/</link>
      <pubDate>Sat, 12 Mar 2022 21:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312215308-avl_tree/</guid>
      <description> tags: Binary Search Tree  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312215158-binary_search_tree/&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Binary Search Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20220312215158-binary_search_tree/</link>
      <pubDate>Sat, 12 Mar 2022 21:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312215158-binary_search_tree/</guid>
      <description> tags: Data Structures  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Red-Black Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20220312215140-red_black_tree/</link>
      <pubDate>Sat, 12 Mar 2022 21:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312215140-red_black_tree/</guid>
      <description> tags: Binary Search Tree, AVL Tree  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312215158-binary_search_tree/&#34;&gt;Binary Search Tree&lt;/a&gt;, &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312215308-avl_tree/&#34;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>set vs unordered_set in C&#43;&#43; STL</title>
      <link>https://www.linuxzen.com/notes/notes/20220312215003-set_vs_unordered_set_in_c_stl/</link>
      <pubDate>Sat, 12 Mar 2022 21:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312215003-set_vs_unordered_set_in_c_stl/</guid>
      <description>tags: C/C++ source: GeeksforGeeks. “Set vs Unordered_set in C++ STL,” May 28, 2018. https://www.geeksforgeeks.org/set-vs-unordered_set-c-stl/.  set Ordered set that implemented by a &amp;ldquo;Self balancing BST&amp;rdquo; like Red-Black Tree.
Extra find operations  equal_range returns range of elements matching a specific key lower_bound returns an iterator to the first element not less than the given key upper_bound returns an iterator to the first element greater than the given key  #include &amp;lt;iostream&amp;gt;#include &amp;lt;set&amp;gt;#include &amp;lt;assert.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_NQWCERKU&#34;&gt;GeeksforGeeks. “Set vs Unordered_set in C++ STL,” May 28, 2018. https://www.geeksforgeeks.org/set-vs-unordered_set-c-stl/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;set&#34;&gt;set&lt;/h2&gt;
&lt;p&gt;Ordered set that implemented by a &amp;ldquo;Self balancing BST&amp;rdquo; like &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312215140-red_black_tree/&#34;&gt;Red-Black Tree&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;extra-find-operations&#34;&gt;Extra find operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;equal_range
returns range of elements matching a specific key&lt;/li&gt;
&lt;li&gt;lower_bound
returns an iterator to the first element not less than the given key&lt;/li&gt;
&lt;li&gt;upper_bound
returns an iterator to the first element greater than the given key&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hset;

	hset.insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
	hset.insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
	hset.insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;);

	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Lower bound equal or greater than
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.lower_bound(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
		assert(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 5&amp;#39;s lower bound is 5 itself in the set
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Upper bound greater than 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.upper_bound(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
		assert(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 5&amp;#39;s upper bound is the first value greater than itself
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unordered-set&#34;&gt;unordered_set&lt;/h2&gt;
&lt;p&gt;Set that implemented by &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311221617-hash_table/&#34;&gt;Hash Table&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>OrderedSet</title>
      <link>https://www.linuxzen.com/notes/notes/20220312213701-orderedset/</link>
      <pubDate>Sat, 12 Mar 2022 21:37:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312213701-orderedset/</guid>
      <description>tags: C/C++,Java,Data Structures  In C++ the set container is an ordered or sorted set, unordered_set is the normal set in C++. Differences between them please check set vs unordered_set in C++ STL.
In Java there is an java.util.SortedSet interface.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210901081938-java/&#34;&gt;Java&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In C++ the &lt;a href=&#34;https://en.cppreference.com/w/cpp/container/set&#34;&gt;set&lt;/a&gt; container is an ordered or sorted set, &lt;a href=&#34;https://en.cppreference.com/w/cpp/container/unordered%5Fset&#34;&gt;unordered_set&lt;/a&gt; is the normal set in C++. Differences between them please check &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312215003-set_vs_unordered_set_in_c_stl/&#34;&gt;set vs unordered_set in C++ STL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Java there is an &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html&#34;&gt;java.util.SortedSet&lt;/a&gt; interface.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 220. Contains Duplicate III</title>
      <link>https://www.linuxzen.com/notes/notes/20220312212227-leetcode101_220_contains_duplicate_iii/</link>
      <pubDate>Sat, 12 Mar 2022 21:22:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312212227-leetcode101_220_contains_duplicate_iii/</guid>
      <description>tags: Sliding Window,OrderedSet  Use HashSet to attempt to meet the requirements in the window class Solution { public: bool containsNearbyAlmostDuplicate(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k, int t) { auto left = 0; auto K = 0; set&amp;lt;long&amp;gt; hset; // set in cpp is an sorted set 	for (auto right = 0; right &amp;lt; nums.size(); right++) { K = right - left; if (K &amp;gt; k) { hset.erase(nums[left]); left++; } hset.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220312213701-orderedset/&#34;&gt;OrderedSet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-hashset-to-attempt-to-meet-the-requirements-in-the-window&#34;&gt;Use HashSet to attempt to meet the requirements in the window&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; containsNearbyAlmostDuplicate(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hset; &lt;span style=&#34;color:#75715e&#34;&gt;// set in cpp is an sorted set
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (K &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; k) {
				hset.erase(nums[left]);
				left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			}
			hset.insert(nums[right]);

			&lt;span style=&#34;color:#75715e&#34;&gt;// some numbers are the same.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hset.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// abs less than or equal t
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.begin();
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.begin(); iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; hset.end(); iter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; abs(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;prev &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
				}
				prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter;
			}

		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
	}
};


&lt;span style=&#34;color:#75715e&#34;&gt;// 1. find previous value that meet the requirement, which is abs(nums[i] - nums[j]) &amp;lt;= t
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 2. See if also meet the requirement, which is abs(i - j) &amp;lt;= k, otherwise slide left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Use a fixed window, which size is ~k~. And maintain a set of numbers in the window.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// To check if there numbers meet the requirement.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s too slow and got &amp;ldquo;Time Limit Exceeded&amp;rdquo;&lt;/strong&gt;: &lt;a href=&#34;https://leetcode.com/submissions/detail/658425251/testcase/&#34;&gt;https://leetcode.com/submissions/detail/658425251/testcase/&lt;/a&gt;. In this case the &lt;em&gt;t&lt;/em&gt; is &lt;code&gt;0&lt;/code&gt;, so we can avoid the embed for loop with a &lt;code&gt;if&lt;/code&gt; condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (t &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// abs less than or equal t
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.begin();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.begin(); iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; hset.end(); iter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; abs(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;prev &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
		}
		prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But then we got: &lt;a href=&#34;https://leetcode.com/submissions/detail/658426815/testcase/&#34;&gt;https://leetcode.com/submissions/detail/658426815/testcase/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;use-sortedset-lower-bound-uppoer-bound-to-meet-the-requirements-of-abs--nums-i-nums-j--t&#34;&gt;Use SortedSet lower_bound/uppoer_bound to meet the requirements of abs(nums[i] - nums[j]) &amp;lt; t&lt;/h2&gt;
&lt;p&gt;After a search of OrderedSet. As we known &lt;em&gt;nums[j]&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt;, we need find which range
of &lt;em&gt;nums[i]&lt;/em&gt; is meeting the requirement. Then we can find it in the OrderedSet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; containsNearbyAlmostDuplicate(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hset; &lt;span style=&#34;color:#75715e&#34;&gt;// set in cpp is an sorted set
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[right];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; k) {
				hset.erase(nums[left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]);
			}
			&lt;span style=&#34;color:#75715e&#34;&gt;// Find a value that equal or greater than required.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// According to abs(nums[i] - nums[j]) &amp;lt;= t, the differ between
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// nums[i] and nums[j] less than t.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// Which means nums[i] - nums[j] &amp;lt;= t and nums[j] - nums[i] &amp;lt;= t.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// So here, we find back /t/ based on current value, as we are using
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// sorted set, so a bigger value could be found too.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// For example, now the value is 5, t is 2. Then we found the value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// greater than or equal to 3, the possible values may found: 3, 4, 5, 6, 7.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// Any of them is meeting the requirements.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hset.lower_bound(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; hset.end() and (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
			}
			hset.insert(nums[right]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
	}
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode101: 219. Contains Duplicate II</title>
      <link>https://www.linuxzen.com/notes/notes/20220312073726-219_contains_duplicate_ii/</link>
      <pubDate>Sat, 12 Mar 2022 07:37:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220312073726-219_contains_duplicate_ii/</guid>
      <description>tags: Sliding Window,Hash Table,LeetCode101  This is an &amp;ldquo;near by&amp;rdquo; problem that can be solved by Sliding Window. The k in the problem is somehow means contiguous.
And using a HashTable to indicate that two values in the different position are equal.
The steps is following:
 Find two values at each side of window are equal. Return true if the offset between their indices is less than or equal k.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311221617-hash_table/&#34;&gt;Hash Table&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an &amp;ldquo;near by&amp;rdquo; problem that can be solved by Sliding Window. The &lt;em&gt;k&lt;/em&gt; in the problem is somehow means &lt;strong&gt;contiguous&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And using a &lt;code&gt;HashTable&lt;/code&gt; to indicate that two values in the different position are equal.&lt;/p&gt;
&lt;p&gt;The steps is following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find two values at each side of window are equal.&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;true&lt;/code&gt; if the offset between their indices is less than or equal &lt;em&gt;k&lt;/em&gt;.
Otherwise set &lt;code&gt;left&lt;/code&gt; to the new position and continue.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; containsNearbyDuplicate(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indices;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices.find(nums[right]);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end()) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (abs(right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; iter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;second) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
				}
				left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}
			indices[nums[right]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Hash Table</title>
      <link>https://www.linuxzen.com/notes/notes/20220311221617-hash_table/</link>
      <pubDate>Fri, 11 Mar 2022 22:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311221617-hash_table/</guid>
      <description> tags: Data Structures  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 209. Minimum Size Subarray Sum</title>
      <link>https://www.linuxzen.com/notes/notes/20220311220839-209_minimum_size_subarray_sum/</link>
      <pubDate>Fri, 11 Mar 2022 22:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311220839-209_minimum_size_subarray_sum/</guid>
      <description>tags: Sliding Window,LeetCode101  Key:
 sum is greater than or equal to target Compute minimal must above slide left window, as decrease may cause sum less than target. See also 1695. Maximum Erasure Value  class Solution { public: int minSubArrayLen(int target, vector&amp;lt;int&amp;gt;&amp;amp; nums) { int left = 0; int sum = 0; int minimal = INT_MAX; for (auto right = 0; right &amp;lt; nums.size(); right++) { sum += nums[right]; while (sum &amp;gt;= target) { minimal = min(minimal, right - left + 1); sum -= nums[left++]; } } return minimal == INT_MAX ?</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sum is &lt;em&gt;greater than&lt;/em&gt; or &lt;em&gt;equal&lt;/em&gt; to &lt;code&gt;target&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compute minimal must above slide left window, as decrease may cause sum less than target.&lt;/li&gt;
&lt;li&gt;See also &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311183843-1695_maximum_erasure_value/&#34;&gt;1695. Maximum Erasure Value&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minSubArrayLen(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INT_MAX;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; nums[right];

			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; target) {
				minimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(minimal, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
				sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; nums[left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;];
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; minimal &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; INT_MAX &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; minimal;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>187. Repeated DNA Sequences</title>
      <link>https://www.linuxzen.com/notes/notes/20220311213000-187_repeated_dna_sequences/</link>
      <pubDate>Fri, 11 Mar 2022 21:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311213000-187_repeated_dna_sequences/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>LeetCode101: 187. Repeated DNA Sequences</title>
      <link>https://www.linuxzen.com/notes/notes/20220311213045-187_repeated_dna_sequences/</link>
      <pubDate>Fri, 11 Mar 2022 21:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311213045-187_repeated_dna_sequences/</guid>
      <description> tags: Sliding Window,LeetCode101,Hash Set  Key:
 Fixed size window, right should start from 9  class Solution { public: vector&amp;lt;string&amp;gt; findRepeatedDnaSequences(string s) { int left = 0; unordered_set&amp;lt;string&amp;gt; results; unordered_set&amp;lt;string&amp;gt; hset; for (auto right = 9; right &amp;lt; s.size(); right++) { string sub(s, left, 10); if (hset.find(sub) != hset.end()) { results.insert(sub); } hset.insert(sub); left++; } return vector&amp;lt;string&amp;gt;(results.begin(), results.end()); } }; </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311183913-hash_set/&#34;&gt;Hash Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fixed size window, &lt;code&gt;right&lt;/code&gt; should start from &lt;code&gt;9&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; findRepeatedDnaSequences(string s) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		unordered_set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results;
		unordered_set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hset;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			string &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;(s, left, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hset.find(sub) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; hset.end()) {
				results.insert(sub);
			}
			hset.insert(sub);
			left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(results.begin(), results.end());
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Hash Set</title>
      <link>https://www.linuxzen.com/notes/notes/20220311183913-hash_set/</link>
      <pubDate>Fri, 11 Mar 2022 18:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311183913-hash_set/</guid>
      <description> tags: Data Structures  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 1695. Maximum Erasure Value</title>
      <link>https://www.linuxzen.com/notes/notes/20220311183843-1695_maximum_erasure_value/</link>
      <pubDate>Fri, 11 Mar 2022 18:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311183843-1695_maximum_erasure_value/</guid>
      <description>tags: Sliding Window,LeetCode101,Hash Set  Use HashMap to store indices See also: 3. Longest Substring Without Repeating Characters
class Solution { public: int maximumUniqueSubarray(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int maximum = 0; int left = 0, right = 0; unordered_map&amp;lt;int, int&amp;gt; indices; for (; right &amp;lt; nums.size(); right++) { int n = nums[right]; if (indices.find(n) != indices.end() &amp;amp;&amp;amp; indices[n] + 1 &amp;gt; left) { left = indices[n] + 1; } maximum = max(maximum, std::accumulate(nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311183913-hash_set/&#34;&gt;Hash Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-hashmap-to-store-indices&#34;&gt;Use HashMap to store indices&lt;/h2&gt;
&lt;p&gt;See also: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074801-3_longest_substring_without_repeating_characters/&#34;&gt;3. Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maximumUniqueSubarray(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maximum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indices;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[right];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(n) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; indices[n] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left) {
				left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[n] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}
			maximum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maximum, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;accumulate(nums.begin() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; left, nums.begin() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
			indices[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; maximum;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is too slow, as there is a \(O(n^2)\) time complexity(&lt;code&gt;std::accmulate&lt;/code&gt; is the embed \(O(n)\) ).&lt;/p&gt;
&lt;h2 id=&#34;slide-left-window-step-by-step-and-use-hashset-to-store-numbers&#34;&gt;Slide left window step by step and use HashSet to store numbers&lt;/h2&gt;
&lt;p&gt;The keys we should noted:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We must decrease all the numbers that behind the new left position(a &lt;code&gt;while&lt;/code&gt; loop is used here).&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maximumUniqueSubarray(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maximum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		unordered_set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hset;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[right];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (hset.find(n) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; hset.end()) {
				hset.erase(nums[left]);
				sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; nums[left];
				left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			}
			sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; n;
			maximum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maximum, sum);
			hset.insert(n);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; maximum;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>An Introduction to Sliding Window Algorithms</title>
      <link>https://www.linuxzen.com/notes/notes/20220311083843-an_introduction_to_sliding_window_algorithms/</link>
      <pubDate>Fri, 11 Mar 2022 08:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311083843-an_introduction_to_sliding_window_algorithms/</guid>
      <description>tags: Sliding Window source: Moore, Jordan. “An Introduction to Sliding Window Algorithms.” Medium, July 26, 2020. https://levelup.gitconnected.com/an-introduction-to-sliding-window-algorithms-5533c4fe1cc7.  Efficientive algorithm:
 Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. &amp;ndash; Antoine de Saint-Exupéry
 The following return values can use a sliding window:
 Minimum value Maximum value Longest value Shortest value K-sized value  And contiguous is one of the biggest clues.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_DHN8YQ98&#34;&gt;Moore, Jordan. “An Introduction to Sliding Window Algorithms.” Medium, July 26, 2020. https://levelup.gitconnected.com/an-introduction-to-sliding-window-algorithms-5533c4fe1cc7.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Efficientive algorithm:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. &amp;ndash; Antoine de Saint-Exupéry&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The following return values can use a sliding window:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Minimum value&lt;/li&gt;
&lt;li&gt;Maximum value&lt;/li&gt;
&lt;li&gt;Longest value&lt;/li&gt;
&lt;li&gt;Shortest value&lt;/li&gt;
&lt;li&gt;K-sized value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And &lt;strong&gt;contiguous&lt;/strong&gt; is one of the biggest clues.&lt;/p&gt;
&lt;p&gt;Common data structures are &lt;strong&gt;strings&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt; and even &lt;strong&gt;linked lists&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Framework:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slide right window to move forward&lt;/li&gt;
&lt;li&gt;Slide left window to meet the requirements.&lt;/li&gt;
&lt;li&gt;Compare to result.&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Window Sliding Technique</title>
      <link>https://www.linuxzen.com/notes/notes/20220311081613-window_sliding_technique/</link>
      <pubDate>Fri, 11 Mar 2022 08:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311081613-window_sliding_technique/</guid>
      <description>tags: Sliding Window,Brute Force Approach source: GeeksforGeeks. “Window Sliding Technique,” April 16, 2017. https://www.geeksforgeeks.org/window-sliding-technique/.  Use a Sliding Window to instead Brute Force Approach, improve time complexity big O from \(O(n^2)\) to \(O(n)\).</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311081528-brute_force_approach/&#34;&gt;Brute Force Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_NC9YM6AZ&#34;&gt;GeeksforGeeks. “Window Sliding Technique,” April 16, 2017. https://www.geeksforgeeks.org/window-sliding-technique/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use a Sliding Window to instead &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311081528-brute_force_approach/&#34;&gt;Brute Force Approach&lt;/a&gt;, improve time complexity big O from \(O(n^2)\) to \(O(n)\).&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Brute Force Approach</title>
      <link>https://www.linuxzen.com/notes/notes/20220311081528-brute_force_approach/</link>
      <pubDate>Fri, 11 Mar 2022 08:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311081528-brute_force_approach/</guid>
      <description> tags: Algorithm  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Two Pointer</title>
      <link>https://www.linuxzen.com/notes/notes/20220311075423-two_pointer/</link>
      <pubDate>Fri, 11 Mar 2022 07:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311075423-two_pointer/</guid>
      <description> tags: Algorithm  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Differences between Sliding Window and Two Pointer</title>
      <link>https://www.linuxzen.com/notes/notes/20220311075357-differences_between_sliding_window_and_two_pointer/</link>
      <pubDate>Fri, 11 Mar 2022 07:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311075357-differences_between_sliding_window_and_two_pointer/</guid>
      <description>tags: Sliding Window,Two Pointer source:  力扣 LeetCode. “题解：借这个问题科普一下「滑动窗口」和「双指针」的区别 - 力扣（LeetCode）.” Accessed March 11, 2022. https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-hua-dong-6128z/. https://stackoverflow.com/a/64078338    Two Pointer to slove the problem of two elements that two pointes pointed.
Sliding Window to slove the problem of all elements that in the window.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311075423-two_pointer/&#34;&gt;Two Pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//select/items/1_J7GH8PBW&#34;&gt;力扣 LeetCode. “题解：借这个问题科普一下「滑动窗口」和「双指针」的区别 - 力扣（LeetCode）.” Accessed March 11, 2022. https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-hua-dong-6128z/.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/64078338&#34;&gt;https://stackoverflow.com/a/64078338&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Two Pointer&lt;/strong&gt; to slove the problem of two elements that two pointes pointed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sliding Window&lt;/strong&gt; to slove the problem of all elements that in the window.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 3. Longest Substring Without Repeating Characters</title>
      <link>https://www.linuxzen.com/notes/notes/20220311074801-3_longest_substring_without_repeating_characters/</link>
      <pubDate>Fri, 11 Mar 2022 07:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311074801-3_longest_substring_without_repeating_characters/</guid>
      <description>tags: Sliding Window,LeetCode101,Hash Table  Use HashMap to store counts of letters Two points we should be noticed:
  The length of substring should be (right - left) + 1, as one side must be counted.
  We must decrese the number in the counts first, and then slide the left window, or we must decrese the wrong one, please compare between Wrong and Correct.
Wrong
left++; counts[s[left]]--; Correct</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311074820-sliding_window/&#34;&gt;Sliding Window&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311221617-hash_table/&#34;&gt;Hash Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-hashmap-to-store-counts-of-letters&#34;&gt;Use HashMap to store counts of letters&lt;/h2&gt;
&lt;p&gt;Two points we should be noticed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;length of substring&lt;/strong&gt; should be &lt;code&gt;(right - left) + 1&lt;/code&gt;, as one side must be counted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We must decrese the number in the &lt;code&gt;counts&lt;/code&gt; first, and then slide the left window, or we must decrese the wrong one, please compare between &lt;strong&gt;Wrong&lt;/strong&gt; and &lt;strong&gt;Correct&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrong&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
counts[s[left]]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Correct&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;counts[s[left]]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full code see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lengthOfLongestSubstring(string s) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c;
		map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; counts;

		&lt;span style=&#34;color:#75715e&#34;&gt;// for loop to slide the right side of window.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[right];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counts.find(c) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; counts.end()) {
				counts[c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
			}
			counts[c]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;

			&lt;span style=&#34;color:#75715e&#34;&gt;// slide the left side of window to meet the requirements,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// here is &amp;#34;Without Repeating Characters&amp;#34;.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; counts.begin(); iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; counts.end(); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;iter) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
					counts[s[left]]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
					left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
				}
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// compare to result.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; longest;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See also: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311083843-an_introduction_to_sliding_window_algorithms/&#34;&gt;An Introduction to Sliding Window Algorithms&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;use-hashmap-to-store-index-of-letters&#34;&gt;Use HashMap to store index of letters&lt;/h2&gt;
&lt;p&gt;Points that should be noticed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The whole string without repeating, that will not meet the condition: letter is indexed already.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;au&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// no duplicated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end()) {
	left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In those cases longest will be 0, if this is the only one block to compute the &lt;code&gt;longest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Move compute the &lt;code&gt;longest&lt;/code&gt; out of the if block, the problem should be sloved.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// no duplicated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end()) {
	left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;left&lt;/code&gt; may go backward from a HashTable, and that must be avoid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;abba&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left) {
	left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And notice that &lt;code&gt;+1&lt;/code&gt; must exists in the condition, the &lt;strong&gt;WRONG&lt;/strong&gt; edition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left) {
	left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lengthOfLongestSubstring(string s) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

		map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indices;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[right];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left) {
				left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}
			longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; longest;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Full with failed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lengthOfLongestSubstring(string s) {

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

		map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indices;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[right];

			&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			// failed on string without repeating: &amp;#34; &amp;#34; &amp;#34;au&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			if (indices.find(l) != indices.end()) {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;				left = indices[l] + 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;				longest = max(longest, right - left + 1);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			*/&lt;/span&gt;

			&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			// failed on left go backward: &amp;#34;abba&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			 if (indices.find(l) != indices.end()) {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;				 left = indices[l] + 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			 longest = max(longest, right - left + 1);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			*/&lt;/span&gt;

			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left) {
				left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}
			longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; longest;
	}
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Optimization:&lt;/strong&gt; use the &lt;code&gt;unordered_map&lt;/code&gt; to instead &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lengthOfLongestSubstring(string s) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

		unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indices;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.size(); right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[right];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (indices.find(l) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; indices.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left) {
				left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}
			longest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(longest, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			indices[l] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; longest;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Sliding Window</title>
      <link>https://www.linuxzen.com/notes/notes/20220311074820-sliding_window/</link>
      <pubDate>Fri, 11 Mar 2022 07:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311074820-sliding_window/</guid>
      <description> tags: Algorithm   Slide right to move forward to find the solution. Slide left to keep the solution, and collect to the results. Must avoid left go to backward.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;Slide right to move forward to find the solution.&lt;/li&gt;
&lt;li&gt;Slide left to keep the solution, and collect to the results.&lt;/li&gt;
&lt;li&gt;Must avoid left go to backward.&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>445. Add Two Numbers II</title>
      <link>https://www.linuxzen.com/notes/notes/20220311073803-445_add_two_numbers_ii/</link>
      <pubDate>Fri, 11 Mar 2022 07:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311073803-445_add_two_numbers_ii/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://www.linuxzen.com/notes/notes/20220311073856-data_structures/</link>
      <pubDate>Fri, 11 Mar 2022 07:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311073856-data_structures/</guid>
      <description> tags: Computer Systems  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 445. Add Two Numbers II</title>
      <link>https://www.linuxzen.com/notes/notes/20220311073810-445_add_two_numbers_ii/</link>
      <pubDate>Fri, 11 Mar 2022 07:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311073810-445_add_two_numbers_ii/</guid>
      <description>tags: Linked List,Stack, LeetCode101,2. Add Two Numbers  两数之和的进阶版，位高的数字在链表的头部，常规解法是通过「栈」进行反转链表，然后回退到2. Add Two Numbers的解法。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311070813-linked_list/&#34;&gt;Linked List&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073821-stack/&#34;&gt;Stack&lt;/a&gt;, &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311070727-2_add_two_numbers/&#34;&gt;2. Add Two Numbers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两数之和的进阶版，位高的数字在链表的头部，常规解法是通过「栈」进行反转链表，然后回退到&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311070727-2_add_two_numbers/&#34;&gt;2. Add Two Numbers&lt;/a&gt;的解法。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Stack</title>
      <link>https://www.linuxzen.com/notes/notes/20220311073821-stack/</link>
      <pubDate>Fri, 11 Mar 2022 07:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311073821-stack/</guid>
      <description> tags: Data Structures  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://www.linuxzen.com/notes/notes/20220311070813-linked_list/</link>
      <pubDate>Fri, 11 Mar 2022 07:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311070813-linked_list/</guid>
      <description> tags: Data Structures  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode101: 2. Add Two Numbers</title>
      <link>https://www.linuxzen.com/notes/notes/20220311070727-2_add_two_numbers/</link>
      <pubDate>Fri, 11 Mar 2022 07:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311070727-2_add_two_numbers/</guid>
      <description>tags: Linked List, LeetCode101  正常的「链表」遍历操作，需要注意的就是不要在末尾忘记处理进位，如果 carry 大于 0 需要追加到结果链表末尾。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311070813-linked_list/&#34;&gt;Linked List&lt;/a&gt;, &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311065137-leetcode101/&#34;&gt;LeetCode101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正常的「链表」遍历操作，需要注意的就是不要在末尾忘记处理进位，如果 carry 大于 0 需要追加到结果链表末尾。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://www.linuxzen.com/notes/notes/20220311070749-linked_list/</link>
      <pubDate>Fri, 11 Mar 2022 07:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311070749-linked_list/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>LeetCode101</title>
      <link>https://www.linuxzen.com/notes/notes/20220311065137-leetcode101/</link>
      <pubDate>Fri, 11 Mar 2022 06:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220311065137-leetcode101/</guid>
      <description> tags: Algorithm,Data Structures  又要开始找工作了，刷题、刷题、刷题！步骤：
 按顺序找到题目 解题/学习 总结考察的点（树、双指针、回溯、DP、模拟现实、递归） 刷相同解法框架的题  一些模糊的感觉：
 尝试不同的遍历顺序可能是解题关键，正序遍历不行试一下反序遍历，反之亦然！  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220311073856-data_structures/&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又要开始找工作了，刷题、刷题、刷题！步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按顺序找到题目&lt;/li&gt;
&lt;li&gt;解题/学习&lt;/li&gt;
&lt;li&gt;总结考察的点（树、双指针、回溯、DP、模拟现实、递归）&lt;/li&gt;
&lt;li&gt;刷相同解法框架的题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些模糊的感觉：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尝试不同的遍历顺序可能是解题关键，正序遍历不行试一下反序遍历，反之亦然！&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>fork() is evil; vfork() is goodness; afork() would be better; clone() is stupid</title>
      <link>https://www.linuxzen.com/notes/notes/20220302114010-fork_is_evil_vfork_is_goodness_afork_would_be_better_clone_is_stupid/</link>
      <pubDate>Wed, 02 Mar 2022 11:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220302114010-fork_is_evil_vfork_is_goodness_afork_would_be_better_clone_is_stupid/</guid>
      <description> tags: Computer Systems,Linux source: 262588213843476. “Fork() Is Evil; Vfork() Is Goodness; Afork() Would Be Better; Clone() Is Stupid.” Gist. Accessed March 2, 2022. https://gist.github.com/nicowilliams/a8a07b0fc75df05f684c23c18d7db234.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104103936-linux/&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_FYXLR8WW&#34;&gt;262588213843476. “Fork() Is Evil; Vfork() Is Goodness; Afork() Would Be Better; Clone() Is Stupid.” Gist. Accessed March 2, 2022. https://gist.github.com/nicowilliams/a8a07b0fc75df05f684c23c18d7db234.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Podcast/YouTube: Lex Fridman</title>
      <link>https://www.linuxzen.com/notes/notes/20220228105442-podcast_youtube_lex_fridman/</link>
      <pubDate>Mon, 28 Feb 2022 10:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220228105442-podcast_youtube_lex_fridman/</guid>
      <description> tags: English Listening Practice source: https://www.youtube.com/channel/UCSHZKyawb77ixDdsGog4iWA  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220228104819-english_listening_practice/&#34;&gt;English Listening Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://www.youtube.com/channel/UCSHZKyawb77ixDdsGog4iWA&#34;&gt;https://www.youtube.com/channel/UCSHZKyawb77ixDdsGog4iWA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>English Listening Practice</title>
      <link>https://www.linuxzen.com/notes/notes/20220228104819-english_listening_practice/</link>
      <pubDate>Mon, 28 Feb 2022 10:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220228104819-english_listening_practice/</guid>
      <description> tags: Learning English  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>的地得</title>
      <link>https://www.linuxzen.com/notes/notes/20220226070756-%E7%9A%84%E5%9C%B0%E5%BE%97/</link>
      <pubDate>Sat, 26 Feb 2022 07:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220226070756-%E7%9A%84%E5%9C%B0%E5%BE%97/</guid>
      <description> 物前白 动前土 行动后面双人来  </description>
      <content>&lt;ul&gt;
&lt;li&gt;物前白&lt;/li&gt;
&lt;li&gt;动前土&lt;/li&gt;
&lt;li&gt;行动后面双人来&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Wealth</title>
      <link>https://www.linuxzen.com/notes/notes/20220221084730-wealth/</link>
      <pubDate>Mon, 21 Feb 2022 08:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220221084730-wealth/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>How To Get Rich (without getting lucky)</title>
      <link>https://www.linuxzen.com/notes/notes/20220221083059-how_to_get_rich_without_getting_lucky/</link>
      <pubDate>Mon, 21 Feb 2022 08:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220221083059-how_to_get_rich_without_getting_lucky/</guid>
      <description> tags: Financial Management,Wealth,English Listening Practice source: Naval. “How to Get Rich,” December 28, 2019. https://nav.al/rich. YouTube: https://www.youtube.com/watch?v=1-TZqOsVCNM  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224132507/&#34;&gt;Financial Management&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220221084730-wealth/&#34;&gt;Wealth&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220228104819-english_listening_practice/&#34;&gt;English Listening Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_Z9DC73SF&#34;&gt;Naval. “How to Get Rich,” December 28, 2019. https://nav.al/rich.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/watch?v=1-TZqOsVCNM&#34;&gt;https://www.youtube.com/watch?v=1-TZqOsVCNM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Material Design</title>
      <link>https://www.linuxzen.com/notes/notes/20220212074018-material_design/</link>
      <pubDate>Sat, 12 Feb 2022 07:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220212074018-material_design/</guid>
      <description> tags: Design  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220212073844-design/&#34;&gt;Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Material Design:  Tools for picking colors</title>
      <link>https://www.linuxzen.com/notes/notes/20220212074044-material_design_tools_for_picking_colors/</link>
      <pubDate>Sat, 12 Feb 2022 07:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220212074044-material_design_tools_for_picking_colors/</guid>
      <description> tags: Online Tools,Material Design,Design source: https://material.io/design/color/the-color-system.html#tools-for-picking-colors full: https://material.io/resources/color/#!/?view.left=0&amp;amp;view.right=0&amp;amp;primary.color=b3e4ff  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220212074018-material_design/&#34;&gt;Material Design&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220212073844-design/&#34;&gt;Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://material.io/design/color/the-color-system.html#tools-for-picking-colors&#34;&gt;https://material.io/design/color/the-color-system.html#tools-for-picking-colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;full: &lt;a href=&#34;https://material.io/resources/color/#!/?view.left=0&amp;amp;view.right=0&amp;amp;primary.color=b3e4ff&#34;&gt;https://material.io/resources/color/#!/?view.left=0&amp;amp;view.right=0&amp;amp;primary.color=b3e4ff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Design</title>
      <link>https://www.linuxzen.com/notes/notes/20220212073844-design/</link>
      <pubDate>Sat, 12 Feb 2022 07:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220212073844-design/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Material Design: The color system</title>
      <link>https://www.linuxzen.com/notes/notes/20220212073824-material_design_the_color_system/</link>
      <pubDate>Sat, 12 Feb 2022 07:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220212073824-material_design_the_color_system/</guid>
      <description>tags: Design,Material Design: Tools for picking colorsMaterial Design source: Material Design. “Material Design.” Accessed February 12, 2022. https://material.io/design/color/the-color-system.html#color-usage-and-palettes.  Principles   Hierarchical
Color indicates which elements are interactive, how they relate to other elements, and their level of prominence. Important elements should stand out the most.
  Legible
Text and import elements, like icons, should meet legibility standards when appearing on colored backgrounds.
  Expressive
Show brand colors at memorable moments that reinforce your brand&amp;rsquo;s style.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220212073844-design/&#34;&gt;Design&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220212074044-material_design_tools_for_picking_colors/&#34;&gt;Material Design:  Tools for picking colors&lt;/a&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220212074018-material_design/&#34;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_6S9BCEF5&#34;&gt;Material Design. “Material Design.” Accessed February 12, 2022. https://material.io/design/color/the-color-system.html#color-usage-and-palettes.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;principles&#34;&gt;Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hierarchical&lt;/p&gt;
&lt;p&gt;Color indicates which elements are interactive, how they relate to other elements, and their level of prominence. Important elements should stand out the most.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Legible&lt;/p&gt;
&lt;p&gt;Text and import elements, like icons, should meet legibility standards when appearing on colored backgrounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expressive&lt;/p&gt;
&lt;p&gt;Show brand colors at memorable moments that reinforce your brand&amp;rsquo;s style.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;colors-we-need&#34;&gt;Colors we need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Primary colors&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;screens and components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variants of primary colors&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dark and light primary variants&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondary colors&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Floating action buttons&lt;/li&gt;
&lt;li&gt;Selection controls, like sliders and switches&lt;/li&gt;
&lt;li&gt;Highlighting selected text&lt;/li&gt;
&lt;li&gt;Progress bars&lt;/li&gt;
&lt;li&gt;Links and headlines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variants of secondary colors (optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional UI colors, such as colors for backgrounds, surfaces, errors, typography, and iconography.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Surface colors&lt;/em&gt; affect surfaces of components, such as cards, sheets, and menus.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;background color&lt;/em&gt; appears behind scrollable content. The baseline background and surface color is #FFFFFF.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Error color&lt;/em&gt; indicates errors in components, such as invalid text in a text field. The baseline error color is #B00020.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2022-02-12_07-48-07_k6WO1fd7T40A9JvSVfHqs0CPLFyTEDCecsVGxEDhOaTP0wUTPYOVVkxt60hKxBprgNoMqs8OyKqtlaQ4tDBtQJs-fTcZrpZEjxhUVQ=w1064-v0.png&#34;   /&gt;
    
  &lt;/figure&gt;


</content>
    </item>
    
    <item>
      <title>GTK</title>
      <link>https://www.linuxzen.com/notes/notes/20220209130912-gtk/</link>
      <pubDate>Wed, 09 Feb 2022 13:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220209130912-gtk/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>GUI</title>
      <link>https://www.linuxzen.com/notes/notes/20220209130903-gui/</link>
      <pubDate>Wed, 09 Feb 2022 13:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220209130903-gui/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>GTK&#43; 3 Text Widget Overview</title>
      <link>https://www.linuxzen.com/notes/notes/20220209130852-gtk_3_text_widget_overview/</link>
      <pubDate>Wed, 09 Feb 2022 13:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220209130852-gtk_3_text_widget_overview/</guid>
      <description> tags: GUI,GTK source: “Text Widget Overview.” Accessed February 9, 2022. https://docs.huihoo.com/gtk/3.0.3/TextWidget.html.   GtkTextBuffer for the text to edit. GtkTextIter to manipulate text, can&amp;rsquo;t be used to preserve positions across buffer modifications GtkTextMark can be used to preserve a position. GtkTextView to show GtkTextBuffer. GtkTextTagTable to control the appearence of text, like bold/color/etc.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220209130903-gui/&#34;&gt;GUI&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220209130912-gtk/&#34;&gt;GTK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_BIYLWANH&#34;&gt;“Text Widget Overview.” Accessed February 9, 2022. https://docs.huihoo.com/gtk/3.0.3/TextWidget.html.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GtkTextBuffer&lt;/code&gt; for the text to edit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GtkTextIter&lt;/code&gt; to manipulate text, can&amp;rsquo;t be used to preserve positions across buffer modifications&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GtkTextMark&lt;/code&gt; can be used to preserve a position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GtkTextView&lt;/code&gt; to show &lt;code&gt;GtkTextBuffer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GtkTextTagTable&lt;/code&gt; to control the appearence of text, like bold/color/etc.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: antoyo/relm  – Idiomatic, GTK&#43;-based, GUI library, inspired by Elm, written in Rust</title>
      <link>https://www.linuxzen.com/notes/notes/20220208150754-github_antoyo_relm_idiomatic_gtk_based_gui_library_inspired_by_elm_written_in_rust/</link>
      <pubDate>Tue, 08 Feb 2022 15:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208150754-github_antoyo_relm_idiomatic_gtk_based_gui_library_inspired_by_elm_written_in_rust/</guid>
      <description> tags: Rust GUI,Elm,GTK  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208121029-rust_gui/&#34;&gt;Rust GUI&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208150622-elm/&#34;&gt;Elm&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220209130912-gtk/&#34;&gt;GTK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Elm</title>
      <link>https://www.linuxzen.com/notes/notes/20220208150622-elm/</link>
      <pubDate>Tue, 08 Feb 2022 15:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208150622-elm/</guid>
      <description> source: https://elm-lang.org/   A delightful language for reliable web applications.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;source: &lt;a href=&#34;https://elm-lang.org/&#34;&gt;https://elm-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A delightful language for reliable web applications.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: iced-rs/iced – A cross-platform GUI library for Rust, inspired by Elm</title>
      <link>https://www.linuxzen.com/notes/notes/20220208150550-github_iced_rs_iced_a_cross_platform_gui_library_for_rust_inspired_by_elm/</link>
      <pubDate>Tue, 08 Feb 2022 15:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208150550-github_iced_rs_iced_a_cross_platform_gui_library_for_rust_inspired_by_elm/</guid>
      <description>tags: Rust GUI,Elm  The most popular GUI library for Rust.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208121029-rust_gui/&#34;&gt;Rust GUI&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208150622-elm/&#34;&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most popular GUI library for Rust.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Are we GUI Yet?</title>
      <link>https://www.linuxzen.com/notes/notes/20220208150415-are_we_gui_yet/</link>
      <pubDate>Tue, 08 Feb 2022 15:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208150415-are_we_gui_yet/</guid>
      <description>tags: Rust GUI source: “Are We GUI Yet?” Accessed February 8, 2022. https://www.areweguiyet.com/.  The answer is no, it seems the most popular GUI libraries are beta and not production ready.
 GitHub: antoyo/relm &amp;ndash; Idiomatic, GTK+-based, GUI library, inspired by Elm, written in Rust GitHub: iced-rs/iced &amp;ndash; A cross-platform GUI library for Rust, inspired by Elm GitHub: linebender/druid &amp;ndash; A data-first Rust-native UI design toolkit. GitHub: redox-os/orbtk &amp;ndash; The Rust UI-Toolkit.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208121029-rust_gui/&#34;&gt;Rust GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_2XA65HHD&#34;&gt;“Are We GUI Yet?” Accessed February 8, 2022. https://www.areweguiyet.com/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer is no, it seems the most popular GUI libraries are beta and not production ready.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208150754-github_antoyo_relm_idiomatic_gtk_based_gui_library_inspired_by_elm_written_in_rust/&#34;&gt;GitHub: antoyo/relm  &amp;ndash; Idiomatic, GTK+-based, GUI library, inspired by Elm, written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208150550-github_iced_rs_iced_a_cross_platform_gui_library_for_rust_inspired_by_elm/&#34;&gt;GitHub: iced-rs/iced &amp;ndash; A cross-platform GUI library for Rust, inspired by Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208133213-github_linebender_druid_a_data_first_rust_native_ui_design_toolkit/&#34;&gt;GitHub: linebender/druid &amp;ndash; A data-first Rust-native UI design toolkit.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208121018-github_redox_os_orbtk_the_rust_ui_toolkit/&#34;&gt;GitHub: redox-os/orbtk &amp;ndash;  The Rust UI-Toolkit.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: linebender/druid – A data-first Rust-native UI design toolkit.</title>
      <link>https://www.linuxzen.com/notes/notes/20220208133213-github_linebender_druid_a_data_first_rust_native_ui_design_toolkit/</link>
      <pubDate>Tue, 08 Feb 2022 13:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208133213-github_linebender_druid_a_data_first_rust_native_ui_design_toolkit/</guid>
      <description>tags: Rust,Rust GUI  Overview    Platform Documentation Community Activity Most Activity Period Native UI     Cross platform Leak 5.7k stars Yes 2019-2021 No    Conclusion   Use the the platform-native widgets or mimic them. (Relm, SixtyFPS) Embed easily into custom render pipelines. (Conrod) Adhere to a specific architectural style such as Elm. (Iced, Relm) Support rendering to HTML when targeting the web.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208121029-rust_gui/&#34;&gt;Rust GUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;th&gt;Community&lt;/th&gt;
&lt;th&gt;Activity&lt;/th&gt;
&lt;th&gt;Most Activity Period&lt;/th&gt;
&lt;th&gt;Native UI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cross platform&lt;/td&gt;
&lt;td&gt;Leak&lt;/td&gt;
&lt;td&gt;5.7k stars&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2019-2021&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Use the the platform-native widgets or mimic them. (&lt;a href=&#34;https://github.com/antoyo/relm&#34;&gt;Relm&lt;/a&gt;, &lt;a href=&#34;https://github.com/sixtyfpsui/sixtyfps&#34;&gt;SixtyFPS&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Embed easily into custom render pipelines. (&lt;a href=&#34;https://github.com/PistonDevelopers/conrod&#34;&gt;Conrod&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Adhere to a specific architectural style such as Elm. (&lt;a href=&#34;https://github.com/hecrj/iced&#34;&gt;Iced&lt;/a&gt;, &lt;a href=&#34;https://github.com/antoyo/relm&#34;&gt;Relm&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support rendering to HTML when targeting the web. (&lt;a href=&#34;https://github.com/hecrj/iced&#34;&gt;Iced&lt;/a&gt;, &lt;a href=&#34;https://github.com/anp/moxie&#34;&gt;Moxie&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: redox-os/orbtk –  The Rust UI-Toolkit.</title>
      <link>https://www.linuxzen.com/notes/notes/20220208121018-github_redox_os_orbtk_the_rust_ui_toolkit/</link>
      <pubDate>Tue, 08 Feb 2022 12:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208121018-github_redox_os_orbtk_the_rust_ui_toolkit/</guid>
      <description> tags: Rust,Rust GUI  Overview    Platform Documentation Community Activity Most Activity Period Native UI     Cross platform Leak 3.5k stars Kind of 2020 No    Conclusion  Highlights &amp;ndash; Cross platform Downsides &amp;ndash; Documentation leak and not in activity development.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220208121029-rust_gui/&#34;&gt;Rust GUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;th&gt;Community&lt;/th&gt;
&lt;th&gt;Activity&lt;/th&gt;
&lt;th&gt;Most Activity Period&lt;/th&gt;
&lt;th&gt;Native UI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cross platform&lt;/td&gt;
&lt;td&gt;Leak&lt;/td&gt;
&lt;td&gt;3.5k stars&lt;/td&gt;
&lt;td&gt;Kind of&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Highlights&lt;/em&gt; &amp;ndash; Cross platform&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Downsides&lt;/em&gt; &amp;ndash; Documentation leak and not in activity development.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Rust GUI</title>
      <link>https://www.linuxzen.com/notes/notes/20220208121029-rust_gui/</link>
      <pubDate>Tue, 08 Feb 2022 12:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208121029-rust_gui/</guid>
      <description> tags: Rust,GUI  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220209130903-gui/&#34;&gt;GUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>The Dark Side Of Smart Contracts</title>
      <link>https://www.linuxzen.com/notes/notes/20220208070254-the_dark_side_of_smart_contracts/</link>
      <pubDate>Tue, 08 Feb 2022 07:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220208070254-the_dark_side_of_smart_contracts/</guid>
      <description>tags: Smart contracts source: Business Tech Guides. “The Dark Side Of Smart Contracts.” Accessed February 7, 2022. https://businesstechguides.co/smart-contracts.  WHAT are Smart Contracts? Blockchain-based programmes that execute agreements once certain criteria are fulfilled by all parties involved.
A self-executing piece of code. When it&amp;rsquo;s deployed on blockchain, meaning nobody controls it.
Analog a contract in the real world, for example, the contract you are signed with your landloard to lease an apartment.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105113810-smart_contracts/&#34;&gt;Smart contracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_G32WDDCR&#34;&gt;Business Tech Guides. “The Dark Side Of Smart Contracts.” Accessed February 7, 2022. https://businesstechguides.co/smart-contracts.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-are-smart-contracts&#34;&gt;&lt;strong&gt;WHAT&lt;/strong&gt; are Smart Contracts?&lt;/h2&gt;
&lt;p&gt;Blockchain-based programmes that execute agreements once certain criteria are fulfilled by all parties involved.&lt;/p&gt;
&lt;p&gt;A self-executing piece of code. When it&amp;rsquo;s deployed on blockchain, meaning nobody controls it.&lt;/p&gt;
&lt;p&gt;Analog a contract in the real world, for example, the contract you are signed with your landloard to lease an apartment. More like a vending machine: insert coins and receive a drink.&lt;/p&gt;
&lt;h2 id=&#34;why-are-smart-contracts-popular&#34;&gt;&lt;strong&gt;WHY&lt;/strong&gt; are Smart Contracts Popular?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Operate on the blockchain.&lt;/li&gt;
&lt;li&gt;Immutable.&lt;/li&gt;
&lt;li&gt;Simple and fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-are-the-problems-with-smart-contracts&#34;&gt;&lt;strong&gt;What&lt;/strong&gt; are the Problems With Smart Contracts?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reliance on External Data Sources&lt;/p&gt;
&lt;p&gt;Not all data stored in the blockchain, and blockchain cannot communicate with the outside world.
Oracles are needed, but how can we trust the oracles?&lt;/p&gt;
&lt;p&gt;For example, I was received some tokens from &lt;a href=&#34;https://ossdao.org/&#34;&gt;The Open Source Software DAO&lt;/a&gt;, the oracle it relayed on is GitHub account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rigidity - The other side of immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confidentiality of Information - everybody can access the information on the blockchain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Legal Status&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security Flaws - Bugs &amp;amp; Immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simplistic Operation - Too simple can&amp;rsquo;t carry too much functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>YouTube: 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software)</title>
      <link>https://www.linuxzen.com/notes/notes/20220123081120-youtube_250_my_zettelkasten_an_author_s_digital_slip_box_method_example_using_plain_text_software/</link>
      <pubDate>Sun, 23 Jan 2022 08:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220123081120-youtube_250_my_zettelkasten_an_author_s_digital_slip_box_method_example_using_plain_text_software/</guid>
      <description> tags: slip-box,PKM source: David Kadavy. 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software), 2021. https://www.youtube.com/watch?v=Ji96vbaCT-s.  Using a GTD pattern to collect notes:
  An Inbox to collect Fleeting Notes.
  Review the Inbox periodically.
a. If it&amp;rsquo;s still interesting, then move it to the Permanent Notes. b. Otherwise move it to &amp;ldquo;Some day&amp;rdquo;
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;slip-box&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220122071820-personal_knowledge_management/&#34;&gt;PKM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_JADUPTIV&#34;&gt;David Kadavy. 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software), 2021. https://www.youtube.com/watch?v=Ji96vbaCT-s.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using a GTD pattern to collect notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An Inbox to collect Fleeting Notes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review the Inbox periodically.&lt;/p&gt;
&lt;p&gt;a. If it&amp;rsquo;s still interesting, then move it to the Permanent Notes.
b. Otherwise move it to &amp;ldquo;Some day&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>为什么要定期回顾：避免「我学会了」的假象</title>
      <link>https://www.linuxzen.com/notes/notes/20220123080003-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AE%9A%E6%9C%9F%E5%9B%9E%E9%A1%BE_%E9%81%BF%E5%85%8D_%E6%88%91%E5%AD%A6%E4%BC%9A%E4%BA%86_%E7%9A%84%E5%81%87%E8%B1%A1/</link>
      <pubDate>Sun, 23 Jan 2022 08:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220123080003-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AE%9A%E6%9C%9F%E5%9B%9E%E9%A1%BE_%E9%81%BF%E5%85%8D_%E6%88%91%E5%AD%A6%E4%BC%9A%E4%BA%86_%E7%9A%84%E5%81%87%E8%B1%A1/</guid>
      <description>tags: slip-box,How to Take Smart Notes,PKM 参考：YouTube: 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software)  我身边有很多人包括我自己都很喜欢收藏文章、课程和教学视频等学习类资源，当然还包括给 GitHub 上的项目添加星星。一些更努力的人会在收藏后进行阅读并记录笔记，我们的学习焦虑被得到了满足。 然后呢？你会去看收藏的学习资源吗？会定期查看自己的笔记吗？我觉得这更像是一种自我欺骗或者麻痹，一种「我学会了」的假象被制造出来。
定期回顾总结可以避免这种假象，这是我最近实践 Luhmann 的 Zettelkasten 所学习到的。 先通过 Overaching workflow 记下所有我们需要关注的主题到 Inbox 中，然后通过回顾的方式来总结转化成自己的知识，记录到 PKM 中去。 也就是依然可以去“收藏”，但是要定期的去查看自己的收藏，最好不要太久以免忘记自己为什么收藏。 如果收藏了很多大部分已经没有兴趣了，可以参考 GTD 将内容整理到 Some day 中去，避免 Inbox 过大让我们产生畏惧感从而导致我们放弃。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;slip-box&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110110642-how_to_take_smart_notes/&#34;&gt;How to Take Smart Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220122071820-personal_knowledge_management/&#34;&gt;PKM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220123081120-youtube_250_my_zettelkasten_an_author_s_digital_slip_box_method_example_using_plain_text_software/&#34;&gt;YouTube: 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我身边有很多人包括我自己都很喜欢收藏文章、课程和教学视频等学习类资源，当然还包括给 GitHub 上的项目添加星星。一些更努力的人会在收藏后进行阅读并记录笔记，我们的学习焦虑被得到了满足。
然后呢？你会去看收藏的学习资源吗？会定期查看自己的笔记吗？我觉得这更像是一种自我欺骗或者麻痹，一种「我学会了」的假象被制造出来。&lt;/p&gt;
&lt;p&gt;定期回顾总结可以避免这种假象，这是我最近实践 Luhmann 的 Zettelkasten 所学习到的。
先通过 Overaching workflow 记下所有我们需要关注的主题到 Inbox 中，然后通过回顾的方式来总结转化成自己的知识，记录到 PKM 中去。
也就是依然可以去“收藏”，但是要定期的去查看自己的收藏，最好不要太久以免忘记自己为什么收藏。
如果收藏了很多大部分已经没有兴趣了，可以参考 GTD 将内容整理到 Some day 中去，避免 Inbox 过大让我们产生畏惧感从而导致我们放弃。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>记笔记就像编相声</title>
      <link>https://www.linuxzen.com/notes/notes/20220123075328-%E8%AE%B0%E7%AC%94%E8%AE%B0%E5%B0%B1%E5%83%8F%E7%BC%96%E7%9B%B8%E5%A3%B0/</link>
      <pubDate>Sun, 23 Jan 2022 07:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220123075328-%E8%AE%B0%E7%AC%94%E8%AE%B0%E5%B0%B1%E5%83%8F%E7%BC%96%E7%9B%B8%E5%A3%B0/</guid>
      <description>tags: slip-box,How to Take Smart Notes source: 豆瓣. “记笔记就像编相声.” Accessed January 22, 2022. https://book.douban.com/review/12678970/.  通过「收集 -&amp;gt; 整理 -&amp;gt; 回顾 -&amp;gt; 输出」将听到的段子转化成自己的故事。所以说书中所说的 “Writing” 不能只局限于写作，应该扩展为输出更好。
比如我作为一个程序员，很多研究都是为了落地成为具体的产品或者技术方案，这个时候我就是在输出（Writing），而且有更加明显的反馈。 通过所学的知识能不能搭建具体的技术方案，实现具体的产品需求。
「输出」或者按照 “How to Take Smart Notes” 中说的 “Writing”。输出给了你一个明确的目标，让你在看到、听到、读到的时候有一个明确的目标， 驱动你用自己的语言将知识进行转化，并在其之上进行思考。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;slip-box&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110110642-how_to_take_smart_notes/&#34;&gt;How to Take Smart Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_257CEAB8&#34;&gt;豆瓣. “记笔记就像编相声.” Accessed January 22, 2022. https://book.douban.com/review/12678970/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过「收集 -&amp;gt; 整理 -&amp;gt; 回顾 -&amp;gt; 输出」将听到的段子转化成自己的故事。所以说书中所说的 “Writing” 不能只局限于写作，应该扩展为输出更好。&lt;/p&gt;
&lt;p&gt;比如我作为一个程序员，很多研究都是为了落地成为具体的产品或者技术方案，这个时候我就是在输出（Writing），而且有更加明显的反馈。
通过所学的知识能不能搭建具体的技术方案，实现具体的产品需求。&lt;/p&gt;
&lt;p&gt;「输出」或者按照 “How to Take Smart Notes” 中说的 “Writing”。输出给了你一个明确的目标，让你在看到、听到、读到的时候有一个明确的目标，
驱动你用自己的语言将知识进行转化，并在其之上进行思考。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The Four Underlying Principles of Taking Smart Notes</title>
      <link>https://www.linuxzen.com/notes/notes/20220123075024-the_four_underlying_priciples/</link>
      <pubDate>Sun, 23 Jan 2022 07:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220123075024-the_four_underlying_priciples/</guid>
      <description>tags: How to Take Smart Notes,slip-box,PKM source: Part 2: &amp;ldquo;THE FOUR UNDERLYING PRINCIPLES&amp;rdquo; from Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017.  Writing Is the Only Thing That Matters Don&amp;rsquo;t be afraid to writing ideas down and push them public, as there is no private knowledge in the academia area, and there is no such thing as a history of unwritten ideas.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110110642-how_to_take_smart_notes/&#34;&gt;How to Take Smart Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;slip-box&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220122071820-personal_knowledge_management/&#34;&gt;PKM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: Part 2: &amp;ldquo;THE FOUR UNDERLYING PRINCIPLES&amp;rdquo; from &lt;a href=&#34;//select/items/1_9BZCXAJX&#34;&gt;Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;writing-is-the-only-thing-that-matters&#34;&gt;Writing Is the Only Thing That Matters&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t be afraid to writing ideas down and push them public, as there is no private knowledge in the academia area, and there is no such thing as a history of unwritten ideas. Writing to answer question, in a specific angle on a problem.&lt;/p&gt;
&lt;p&gt;With this purpose, reading will be the main source of material for writing, and lectures or seminars will provide the ideas to write about and questions worth answering. So writing doesn&amp;rsquo;t mean to stop doing everything less well.&lt;/p&gt;
&lt;p&gt;Writing changes the way you read and learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For finding ideas, questions worth answering, feedbacks and what you should learn: you will have a clear, tangible purpose when you attend a lecture, discussion or seminar.&lt;/li&gt;
&lt;li&gt;For writing it down: you will be more focused on the most relevant aspects of reading and learning.&lt;/li&gt;
&lt;li&gt;For using your own words: you will be more engaged way to read and learning.&lt;/li&gt;
&lt;li&gt;For turning it into something new: you will think beyond the things you read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;simplicity-is-paramount&#34;&gt;Simplicity Is Paramount&lt;/h2&gt;
&lt;p&gt;Change the way of organising notes, don&amp;rsquo;t store notes under topics, instead to ask youself &amp;ldquo;In which context will I want to stumble upon it again?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A simple idea can shape the world. The slip-box is the shipping container&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; that helps to organise notes and achieve a critical mass. To do so,
there are three types of notes to avoid lose its value when notes are added to it indiscriminately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Fleeting notes&lt;/em&gt;, which to remind, need to review within a day or two, then move to trash.&lt;/p&gt;
&lt;p&gt;Which is the best you can do without interruputing what you are in the middle of doing.
And they are only useful if you review them within a day or two to turn them into proper notes you can use later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Permanent notes&lt;/em&gt;, which will &lt;em&gt;never&lt;/em&gt; be thrown away and contain the necessary information in themselves in a permanently understandable way.&lt;/p&gt;
&lt;p&gt;Always stored in the same way in the same place. Which are written in a way that can still be understood even when you have forgotten the context they are taken from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Project notes&lt;/em&gt;, which only relevant to on particular project. Kept within a project-specific folder.&lt;/p&gt;
&lt;p&gt;Which can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comments in the manuscript&lt;/li&gt;
&lt;li&gt;collections of projecte-related literature&lt;/li&gt;
&lt;li&gt;outlines&lt;/li&gt;
&lt;li&gt;sinppets of drafts&lt;/li&gt;
&lt;li&gt;reminders&lt;/li&gt;
&lt;li&gt;to-do lists&lt;/li&gt;
&lt;li&gt;and of course the draft itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And there some typical mistakes we should avoid:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Treat all notes as permanent notes, for example, a journal that kept everything.&lt;/li&gt;
&lt;li&gt;Only take notes related to specific projects: That means that everything you found, thought or encountered during the time of a project will be lost.&lt;/li&gt;
&lt;li&gt;Treat all notes as fleetings notes, never review or understand the fleeting notes and convert them to permanent notes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nobody-ever-starts-from-scratch&#34;&gt;Nobody Ever Starts From Scratch&lt;/h2&gt;
&lt;h2 id=&#34;let-the-work-carry-you-forward&#34;&gt;Let the Work Carry You Forward&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gAs01Xr1U8w&#34;&gt;Malcom McLean and Containerisation | Maersk Line&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>Personal Knowledge Management</title>
      <link>https://www.linuxzen.com/notes/notes/20220122071820-personal_knowledge_management/</link>
      <pubDate>Sat, 22 Jan 2022 07:18:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220122071820-personal_knowledge_management/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Zettelkasten 卡片盒筆記法，建立知識連結網路來活用筆記</title>
      <link>https://www.linuxzen.com/notes/notes/20220120084941-zettelkasten_%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95_%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98/</link>
      <pubDate>Thu, 20 Jan 2022 08:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220120084941-zettelkasten_%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95_%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98/</guid>
      <description>tags: Zettelkasten,Note-Taking,How to Take Smart Notes source: 朱騏. “Zettelkasten卡片盒筆記法，建立知識連結網路來活用筆記.” PM的生產力工具箱 (blog), October 16, 2021. https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/zettelkasten%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95-%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98-f85a91729521.  文章中附上了一则视频更好的展现 Luhmann 如何管理文件笔记，同时建立了我对 Slip-box 的中文理解。完善了我脑中的一部分图像。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;Zettelkasten&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Note-Taking&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110110642-how_to_take_smart_notes/&#34;&gt;How to Take Smart Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_WAYI3AJ8&#34;&gt;朱騏. “Zettelkasten卡片盒筆記法，建立知識連結網路來活用筆記.” PM的生產力工具箱 (blog), October 16, 2021. https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/zettelkasten%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95-%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98-f85a91729521.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章中附上了一则视频更好的展现 Luhmann 如何管理文件笔记，同时建立了我对 Slip-box 的中文理解。完善了我脑中的一部分图像。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>GTD</title>
      <link>https://www.linuxzen.com/notes/notes/20220120080936-gtd/</link>
      <pubDate>Thu, 20 Jan 2022 08:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220120080936-gtd/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Introduction: The slip-box and Overarching workflow</title>
      <link>https://www.linuxzen.com/notes/notes/20220120080908-with_the_slip_box_and_overarching_workflow_to_keep_a_good_structure/</link>
      <pubDate>Thu, 20 Jan 2022 08:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220120080908-with_the_slip_box_and_overarching_workflow_to_keep_a_good_structure/</guid>
      <description>tags: How to Take Smart Notes,slip-box,GTD source: Part 1: &amp;ldquo;INTRODUCTION&amp;rdquo; from Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017.  To Keep a Good Structure First, it&amp;rsquo;s about the flow, and a good structure enables the flow. The flow is:
 It is the state in which you get so completely immersed in you work that you lose track of time and can just on going as the work becomes effortless.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110110642-how_to_take_smart_notes/&#34;&gt;How to Take Smart Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;slip-box&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080936-gtd/&#34;&gt;GTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: Part 1: &amp;ldquo;INTRODUCTION&amp;rdquo; from &lt;a href=&#34;//select/items/1_9BZCXAJX&#34;&gt;Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;to-keep-a-good-structure&#34;&gt;To Keep a Good Structure&lt;/h2&gt;
&lt;p&gt;First, it&amp;rsquo;s about the &lt;em&gt;flow&lt;/em&gt;, and a good structure enables the &lt;em&gt;flow&lt;/em&gt;. The &lt;em&gt;flow&lt;/em&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is the state in which you get so completely immersed in you work that you lose track of time and can just on going as the work becomes effortless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And how to be in a good structure? It&amp;rsquo;s must be a simple tool, because &amp;ldquo;The complexity is an issue&amp;rdquo;. Here we got, the &lt;strong&gt;slip box&lt;/strong&gt; from Luhman and the &lt;strong&gt;overarching workflow&lt;/strong&gt; from GTD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use the  &lt;strong&gt;slip box&lt;/strong&gt; to take and organise notes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And the &lt;strong&gt;overarching workflow&lt;/strong&gt; to take care of everything we need.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even the best tool will not improve your productivity considerably if you don&amp;rsquo;t change your daily routes the tool is embedded in, just as the fastest car won&amp;rsquo;t help you much if you don&amp;rsquo;t have proper roads to drive it on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So how does the slip box work? Luhman taken notes with two slip boxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bibliographic one: fleeting notes: thoughts and ideas from reading books,talks or something else.&lt;/li&gt;
&lt;li&gt;main slip-box: shortly after bibliographic notes were taked, review notes in bibliographic slip-box and write down some new.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“I never force myself to do anything I don’t feel like. Whenever I am stuck, I do something else.”
&amp;ndash; The son of a brewer, most productive and reverd social sientists of the 20^th century.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So with the above two well-known and proven ideas we can be in a good structure and enabling the &lt;em&gt;flow&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by Step&lt;/h2&gt;
&lt;p&gt;Note-taking is not the main work, the main work is: Reading, Writing, Understanding and coming up with ideas. The notes are just the tangible outcome of it.&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/how-to-take-smart-notes-need-to-do.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;With the above steps you can write multiple papers/articles at a time.&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pen and paper or keyboard and computer: to write with and to write on&lt;/li&gt;
&lt;li&gt;A reference management system: Zotero&lt;/li&gt;
&lt;li&gt;The slip-box: Daniel Lüdecke’s Zettelkasten&lt;/li&gt;
&lt;li&gt;The editor: Microsoft Word, OpenOffice,LibreOffice or NeoOffice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keep-in-mind&#34;&gt;Keep in Mind&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If we try to use a tool without putting any thought into the way we work with it, even the best tool would not be of much help.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t make the slip-box as a graveyard for thoughts.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>slip-box</title>
      <link>https://www.linuxzen.com/notes/notes/20220120080920-slip_box/</link>
      <pubDate>Thu, 20 Jan 2022 08:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220120080920-slip_box/</guid>
      <description> tags: Note-Taking,Personal Knowledge Management  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Note-Taking&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220122071820-personal_knowledge_management/&#34;&gt;Personal Knowledge Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Why Rust strings seem hard</title>
      <link>https://www.linuxzen.com/notes/notes/20220117170333-why_rust_strings_seem_hard/</link>
      <pubDate>Mon, 17 Jan 2022 17:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117170333-why_rust_strings_seem_hard/</guid>
      <description> tags: Rust “Why Rust Strings Seem Hard | Brandon’s Website.” Accessed January 17, 2022. https://www.brandons.me/blog/why-rust-strings-seem-hard.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//select/items/1_QN2J92H2&#34;&gt;“Why Rust Strings Seem Hard | Brandon’s Website.” Accessed January 17, 2022. https://www.brandons.me/blog/why-rust-strings-seem-hard.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Thread Safety</title>
      <link>https://www.linuxzen.com/notes/notes/20220117165224-thread_safety/</link>
      <pubDate>Mon, 17 Jan 2022 16:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117165224-thread_safety/</guid>
      <description> tags: Computer Systems  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>如何理解 Sync 和 Send?</title>
      <link>https://www.linuxzen.com/notes/notes/20220117165142-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3_sync_%E5%92%8C_send/</link>
      <pubDate>Mon, 17 Jan 2022 16:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117165142-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3_sync_%E5%92%8C_send/</guid>
      <description> tags: Rust,Thread Safety source: Hexi. “如何理解 Sync 和 Send?” 李晨曦的博客 | Hexi Blog, May 5, 2019. https://hexilee.me/2019/05/05/how-to-understand-sync-and-send-in-rust/.  语义：
 实现了 Send 的类型，可以安全地在线程间传递所有权。也就是说， 可以跨线程移动。 实现了 Sync 的类型， 可以安全地在线程间传递不可变借用。也就是说，可以跨线程共享。  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220117165224-thread_safety/&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_MCDD9VBZ&#34;&gt;Hexi. “如何理解 Sync 和 Send?” 李晨曦的博客 | Hexi Blog, May 5, 2019. https://hexilee.me/2019/05/05/how-to-understand-sync-and-send-in-rust/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现了 &lt;code&gt;Send&lt;/code&gt; 的类型，可以安全地在线程间传递所有权。也就是说， 可以跨线程移动。&lt;/li&gt;
&lt;li&gt;实现了 &lt;code&gt;Sync&lt;/code&gt; 的类型， 可以安全地在线程间传递不可变借用。也就是说，可以跨线程共享。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>The Little Book of Rust Macros</title>
      <link>https://www.linuxzen.com/notes/notes/20220117164736-the_little_book_of_rust_macros/</link>
      <pubDate>Mon, 17 Jan 2022 16:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117164736-the_little_book_of_rust_macros/</guid>
      <description> tags: Rust,Rust Macro,Online Tutorial source: https://danielkeep.github.io/tlborm/book/index.html  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220117164506-rust_macro/&#34;&gt;Rust Macro&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://danielkeep.github.io/tlborm/book/index.html&#34;&gt;https://danielkeep.github.io/tlborm/book/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>A half-hour to learn Rust</title>
      <link>https://www.linuxzen.com/notes/notes/20220117164630-a_half_hour_to_learn_rust/</link>
      <pubDate>Mon, 17 Jan 2022 16:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117164630-a_half_hour_to_learn_rust/</guid>
      <description> tags: Rust,Online Tutorial source: fasterthanli.me. “A Half-Hour to Learn Rust.” Accessed January 17, 2022. https://fasterthanli.me/articles/a-half-hour-to-learn-rust.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_PMTVHJUD&#34;&gt;fasterthanli.me. “A Half-Hour to Learn Rust.” Accessed January 17, 2022. https://fasterthanli.me/articles/a-half-hour-to-learn-rust.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Rust Macro</title>
      <link>https://www.linuxzen.com/notes/notes/20220117164506-rust_macro/</link>
      <pubDate>Mon, 17 Jan 2022 16:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117164506-rust_macro/</guid>
      <description> tags: Rust  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: dtolnay/proc-macro-workshop - Learn to write Rust procedural macros</title>
      <link>https://www.linuxzen.com/notes/notes/20220117164450-github_dtolnay_proc_macro_workshop_learn_to_write_rust_procedural_macros/</link>
      <pubDate>Mon, 17 Jan 2022 16:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117164450-github_dtolnay_proc_macro_workshop_learn_to_write_rust_procedural_macros/</guid>
      <description> tags: Rust,Rust Macro,Learning  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220117164506-rust_macro/&#34;&gt;Rust Macro&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: pingcap/talent-plan - open source training courses about distributed database and distributed systemes</title>
      <link>https://www.linuxzen.com/notes/notes/20220117164352-github_pingcap_talent_plan_open_source_training_courses_about_distributed_database_and_distributed_systemes/</link>
      <pubDate>Mon, 17 Jan 2022 16:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117164352-github_pingcap_talent_plan_open_source_training_courses_about_distributed_database_and_distributed_systemes/</guid>
      <description> tags: Rust,Distributed Systems,Online Tutorial,Learning source: https://github.com/pingcap/talent-plan  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;Distributed Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/pingcap/talent-plan&#34;&gt;https://github.com/pingcap/talent-plan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: rust-lang/rustlings – Small exercises to get you used to reading and writing Rust code!</title>
      <link>https://www.linuxzen.com/notes/notes/20220117164303-github_rust_lang_rustlings_small_exercises_to_get_you_used_to_reading_and_writing_rust_code/</link>
      <pubDate>Mon, 17 Jan 2022 16:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117164303-github_rust_lang_rustlings_small_exercises_to_get_you_used_to_reading_and_writing_rust_code/</guid>
      <description> tags: Rust,Online Tutorial,Learning source: https://github.com/rust-lang/rustlings  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/rust-lang/rustlings&#34;&gt;https://github.com/rust-lang/rustlings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Blockchain: It&#39;s not still the early days</title>
      <link>https://www.linuxzen.com/notes/notes/20220117110536-blockchain_it_s_not_still_the_early_days/</link>
      <pubDate>Mon, 17 Jan 2022 11:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220117110536-blockchain_it_s_not_still_the_early_days/</guid>
      <description>tags: Blockchain,Web3 source: White, Molly. “It’s Not Still the Early Days.” Molly White, January 14, 2022. https://blog.mollywhite.net/its-not-still-the-early-days/.  For blockchains, some thoughts are false, like:
 &amp;ldquo;It&amp;rsquo;s the early days.&amp;rdquo; &amp;ldquo;Give it a chance.&amp;rdquo;  The reason is long time have passed, but no bright changes happened, the long time means Bitcoin began to be used in 2009, and Ethereum lanched in 2015.
To compare:
 Smartphones from 2009 to 2015: Nokia -&amp;gt; iPhone/Android.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_ZUX3RBG8&#34;&gt;White, Molly. “It’s Not Still the Early Days.” Molly White, January 14, 2022. https://blog.mollywhite.net/its-not-still-the-early-days/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For blockchains, some thoughts are false, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;It&amp;rsquo;s the early days.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Give it a chance.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason is long time have passed, but no bright changes happened, the long time means Bitcoin began to be used in 2009, and Ethereum lanched in 2015.&lt;/p&gt;
&lt;p&gt;To compare:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smartphones from 2009 to 2015: Nokia -&amp;gt; iPhone/Android.&lt;/li&gt;
&lt;li&gt;Blogs: Google Reader -&amp;gt; Twitter.&lt;/li&gt;
&lt;li&gt;Fully-electric cars: Tesla.&lt;/li&gt;
&lt;li&gt;CPU: i3/i5 -&amp;gt; i9/M1&lt;/li&gt;
&lt;li&gt;GPU&lt;/li&gt;
&lt;li&gt;Operating System.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a &lt;em&gt;lot&lt;/em&gt; has changed in the technology world in the past six to twelve years.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>AQM</title>
      <link>https://www.linuxzen.com/notes/notes/20220114071913-aqm/</link>
      <pubDate>Fri, 14 Jan 2022 07:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220114071913-aqm/</guid>
      <description> tags: Network,Message Queue  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220114071952-message_queue/&#34;&gt;Message Queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Message Queue</title>
      <link>https://www.linuxzen.com/notes/notes/20220114071952-message_queue/</link>
      <pubDate>Fri, 14 Jan 2022 07:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220114071952-message_queue/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Bufferbloat Dark Buffers in the Internet</title>
      <link>https://www.linuxzen.com/notes/notes/20220114070627-bufferbloat_dark_buffers_in_the_internet/</link>
      <pubDate>Fri, 14 Jan 2022 07:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220114070627-bufferbloat_dark_buffers_in_the_internet/</guid>
      <description> tags: Network,Bufferbloat source: “Bufferbloat - Dark Buffers in the Internet,” 2011, 36.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220114070451-bufferbloat/&#34;&gt;Bufferbloat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_C6NIFGZD&#34;&gt;“Bufferbloat - Dark Buffers in the Internet,” 2011, 36.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Bufferbloat</title>
      <link>https://www.linuxzen.com/notes/notes/20220114070451-bufferbloat/</link>
      <pubDate>Fri, 14 Jan 2022 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220114070451-bufferbloat/</guid>
      <description> tags: Network  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>5W1H</title>
      <link>https://www.linuxzen.com/notes/notes/20220112070827-5w1h/</link>
      <pubDate>Wed, 12 Jan 2022 07:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220112070827-5w1h/</guid>
      <description> tags: Learning  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>TCP Fast Open</title>
      <link>https://www.linuxzen.com/notes/notes/20220112070151-tcp_fast_open/</link>
      <pubDate>Wed, 12 Jan 2022 07:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220112070151-tcp_fast_open/</guid>
      <description>tags: TCP,Network,5W1H  TCP Fast Open(TFO):
  WHY TFO is proposed?
TCP Three-Way Handshake for every new TCP connection is too expensive.
  WHAT is the TFO?
TCP Fast Open (TFO) is a mechanism that aims to reduce the latency penalty imposed on new TCP connections.
  HOW the TFO reduce the latency on new TCP connections?
TFO allows data transfer within the SYN packet.
  WHEN the TFO is avaiable.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813071635-tcp/&#34;&gt;TCP&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220112070827-5w1h/&#34;&gt;5W1H&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP Fast Open(TFO):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt; TFO is proposed?&lt;/p&gt;
&lt;p&gt;TCP Three-Way Handshake for every new TCP connection is too expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHAT&lt;/strong&gt; is the TFO?&lt;/p&gt;
&lt;p&gt;TCP Fast Open (TFO) is a mechanism that aims to reduce the latency penalty imposed on new TCP connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HOW&lt;/strong&gt; the TFO reduce the latency on new TCP connections?&lt;/p&gt;
&lt;p&gt;TFO allows data transfer within the &lt;em&gt;SYN&lt;/em&gt; packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHEN&lt;/strong&gt; the TFO is avaiable.&lt;/p&gt;
&lt;p&gt;TFO support is now avaiable in Linux 3.7+ kernels, and should be enabled by a viable option in both client and server side.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHAT&lt;/strong&gt; limitations does TFO have?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maximum size limited.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Controlling Queue Delay</title>
      <link>https://www.linuxzen.com/notes/notes/20220111081756-controlling_queue_delay/</link>
      <pubDate>Tue, 11 Jan 2022 08:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220111081756-controlling_queue_delay/</guid>
      <description>tags: CoDel,Network source: “Controlling Queue Delay - ACM Queue.” Accessed January 11, 2022. https://queue.acm.org/detail.cfm?id=2209336.  Bufferbloat   What is the bufferbloat? In the internet, large buffer is used everywhere:
 PC Router/Swtich/ISP Server  The large may cause delay.
  Why the bufferbloat still with us and made increaingly critical by two trends?
 Cheap memory. Complicate network paths.    How to sloves the problem? AQM(active queue management) is the known solution, but it&amp;rsquo;s difficult to implement, so even it has been known two decades but still not been widely deployed.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220111081657-codel/&#34;&gt;CoDel&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_LT2XHF9V&#34;&gt;“Controlling Queue Delay - ACM Queue.” Accessed January 11, 2022. https://queue.acm.org/detail.cfm?id=2209336.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bufferbloat&#34;&gt;Bufferbloat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What&lt;/em&gt; is the bufferbloat?
In the internet, large buffer is used everywhere:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PC&lt;/li&gt;
&lt;li&gt;Router/Swtich/ISP&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The large may cause delay.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Why&lt;/em&gt; the bufferbloat still with us and made increaingly critical by two trends?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cheap memory.&lt;/li&gt;
&lt;li&gt;Complicate network paths.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How&lt;/em&gt; to sloves the problem?
AQM(active queue management) is the known solution, but it&amp;rsquo;s difficult to implement, so even it has been known two decades but still not been widely deployed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>CoDel</title>
      <link>https://www.linuxzen.com/notes/notes/20220111081657-codel/</link>
      <pubDate>Tue, 11 Jan 2022 08:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220111081657-codel/</guid>
      <description> tags: Network,Bufferbloat,AQM  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220114070451-bufferbloat/&#34;&gt;Bufferbloat&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220114071913-aqm/&#34;&gt;AQM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Fun Bugs</title>
      <link>https://www.linuxzen.com/notes/notes/20220111072413-fun_bugs/</link>
      <pubDate>Tue, 11 Jan 2022 07:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220111072413-fun_bugs/</guid>
      <description> tags: Fun Story  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220111072424-fun_story/&#34;&gt;Fun Story&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Fun Story</title>
      <link>https://www.linuxzen.com/notes/notes/20220111072424-fun_story/</link>
      <pubDate>Tue, 11 Jan 2022 07:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220111072424-fun_story/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Speed of Light: We can&#39;t send mail more than 500 miles</title>
      <link>https://www.linuxzen.com/notes/notes/20220111072354-speed_of_light_we_can_t_send_mail_more_than_500_miles/</link>
      <pubDate>Tue, 11 Jan 2022 07:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220111072354-speed_of_light_we_can_t_send_mail_more_than_500_miles/</guid>
      <description>tags: Networking 101: Primer on Latency and Bandwidth,Fun Bugs source: https://web.mit.edu/jemorris/humor/500-miles  I remember this story when I&amp;rsquo;m reading the section &amp;ldquo;Speed of Light and Propagation Latency&amp;rdquo; in High Performance Browser Networking. It&amp;rsquo;s funny to record it.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220111071605-networking_101_primer_on_latency_and_bandwidth/&#34;&gt;Networking 101: Primer on Latency and Bandwidth&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220111072413-fun_bugs/&#34;&gt;Fun Bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://web.mit.edu/jemorris/humor/500-miles&#34;&gt;https://web.mit.edu/jemorris/humor/500-miles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I remember this story when I&amp;rsquo;m reading the section &amp;ldquo;Speed of Light and Propagation Latency&amp;rdquo; in &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813080226-high_performance_browser_networking/&#34;&gt;High Performance Browser Networking&lt;/a&gt;. It&amp;rsquo;s funny to record it.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Networking 101: Primer on Latency and Bandwidth</title>
      <link>https://www.linuxzen.com/notes/notes/20220111071605-networking_101_primer_on_latency_and_bandwidth/</link>
      <pubDate>Tue, 11 Jan 2022 07:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220111071605-networking_101_primer_on_latency_and_bandwidth/</guid>
      <description> tags: High Performance Browser Networking,Network  Defination:
 Latency - Time cost between sending and receiving, lower is better. Bandwitdh - throughtput, higher is better.  Things affect to Latency:
 Distance of fiber, Speed of Light, that could be optimized by CDN. Bufferbloat of router, large buffer make queue delay, addressed by CoDel. ISP gateway.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813080226-high_performance_browser_networking/&#34;&gt;High Performance Browser Networking&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defination:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Latency&lt;/em&gt; - Time cost between sending and receiving, lower is better.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bandwitdh&lt;/em&gt; - throughtput, higher is better.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things affect to &lt;em&gt;Latency&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Distance&lt;/em&gt; of fiber, Speed of Light, that could be optimized by &lt;strong&gt;CDN&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bufferbloat&lt;/em&gt; of router, large buffer make queue delay, addressed by &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220111081657-codel/&#34;&gt;CoDel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ISP&lt;/em&gt; gateway.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Reproducible Research Papers using Org-mode and R: A Guide</title>
      <link>https://www.linuxzen.com/notes/notes/20220110121108-reproducible_research_papers_using_org_mode_and_r_a_guide/</link>
      <pubDate>Mon, 10 Jan 2022 12:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110121108-reproducible_research_papers_using_org_mode_and_r_a_guide/</guid>
      <description> tags: Org Mode,How to Write source: https://github.com/vikasrawal/orgpaper  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110071453-writing/&#34;&gt;How to Write&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/vikasrawal/orgpaper&#34;&gt;https://github.com/vikasrawal/orgpaper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>High Performance</title>
      <link>https://www.linuxzen.com/notes/projects/20220110112848-high_performance/</link>
      <pubDate>Mon, 10 Jan 2022 11:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20220110112848-high_performance/</guid>
      <description> tags: Computer Systems  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>How to Take Smart Notes</title>
      <link>https://www.linuxzen.com/notes/notes/20220110110642-how_to_take_smart_notes/</link>
      <pubDate>Mon, 10 Jan 2022 11:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110110642-how_to_take_smart_notes/</guid>
      <description> tags: Note-Taking,How to Write,Zettelkasten source: Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Note-Taking&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110071453-writing/&#34;&gt;How to Write&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220120080920-slip_box/&#34;&gt;Zettelkasten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_9BZCXAJX&#34;&gt;Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Patterns of Distributed Systems</title>
      <link>https://www.linuxzen.com/notes/projects/20220110110515-patterns_of_distributed_systems/</link>
      <pubDate>Mon, 10 Jan 2022 11:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20220110110515-patterns_of_distributed_systems/</guid>
      <description> tags: Distributed Systems source: https://martinfowler.com/articles/patterns-of-distributed-systems/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://martinfowler.com/articles/patterns-of-distributed-systems/&#34;&gt;https://martinfowler.com/articles/patterns-of-distributed-systems/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://www.linuxzen.com/notes/notes/20220110082953-http/</link>
      <pubDate>Mon, 10 Jan 2022 08:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110082953-http/</guid>
      <description> tags: TCP  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813071635-tcp/&#34;&gt;TCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: duckwork/titlecase.el -  Titlecase things in Emacs</title>
      <link>https://www.linuxzen.com/notes/notes/20220110071604-github_duckwork_titlecase_el_titlecase_things_in_emacs/</link>
      <pubDate>Mon, 10 Jan 2022 07:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110071604-github_duckwork_titlecase_el_titlecase_things_in_emacs/</guid>
      <description> tags: Title Case,Emacs source: https://github.com/duckwork/titlecase.el  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110070124-title_case/&#34;&gt;Title Case&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/duckwork/titlecase.el&#34;&gt;https://github.com/duckwork/titlecase.el&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>How to Write</title>
      <link>https://www.linuxzen.com/notes/projects/20220110071453-writing/</link>
      <pubDate>Mon, 10 Jan 2022 07:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20220110071453-writing/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Chicago Manual of Style: Chapter 8 Names, Terms, and Titles of Works</title>
      <link>https://www.linuxzen.com/notes/notes/20220110071319-chicago_manual_of_style_chaper_8_names_terms_and_titles_of_works/</link>
      <pubDate>Mon, 10 Jan 2022 07:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110071319-chicago_manual_of_style_chaper_8_names_terms_and_titles_of_works/</guid>
      <description> tags: Learning English,Online: Title Case source: The Chicago Manual of Style. Seventeenth edition. Chicago: The University of Chicago Press, 2017.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110070643-online_title_case/&#34;&gt;Online: Title Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_V4GXX86P&#34;&gt;The Chicago Manual of Style. Seventeenth edition. Chicago: The University of Chicago Press, 2017.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Online: Title Case</title>
      <link>https://www.linuxzen.com/notes/notes/20220110070643-online_title_case/</link>
      <pubDate>Mon, 10 Jan 2022 07:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110070643-online_title_case/</guid>
      <description> tags: Online Tools,Title Case source: https://titlecase.com/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110070124-title_case/&#34;&gt;Title Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://titlecase.com/&#34;&gt;https://titlecase.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Title Case</title>
      <link>https://www.linuxzen.com/notes/notes/20220110070124-title_case/</link>
      <pubDate>Mon, 10 Jan 2022 07:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110070124-title_case/</guid>
      <description> tags: Learning English,Writing  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110071453-writing/&#34;&gt;Writing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>The Programmer&#39;s Way to Write in Title Case Using Emacs Lisp</title>
      <link>https://www.linuxzen.com/notes/notes/20220110070044-the_programmer_s_way_to_write_in_title_case_using_emacs_lisp/</link>
      <pubDate>Mon, 10 Jan 2022 07:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220110070044-the_programmer_s_way_to_write_in_title_case_using_emacs_lisp/</guid>
      <description>tags: Learning English,Title Case source: “The Programmer’s Way to Write in Title Case Using Emacs Lisp.” Accessed January 10, 2022. https://hungyi.net/posts/programmers-way-to-title-case.  Genernal correct title cased phrase:
  Uppercase the first letter of most words
e.g. &amp;ldquo;There Is No Spoon&amp;rdquo;
  Not capitalize &amp;lsquo;small&amp;rsquo; and &amp;lsquo;unimportant&amp;rsquo; words
e.g. &amp;ldquo;Long Live the King&amp;rdquo;
  Always capitalize the first and the last words, even if they&amp;rsquo;re small
e.g. &amp;ldquo;The Land and Save We Live On&amp;rdquo;</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110070124-title_case/&#34;&gt;Title Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_CEYWCPDZ&#34;&gt;“The Programmer’s Way to Write in Title Case Using Emacs Lisp.” Accessed January 10, 2022. https://hungyi.net/posts/programmers-way-to-title-case.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Genernal correct title cased phrase:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Uppercase the first letter  of &lt;em&gt;most&lt;/em&gt; words&lt;/p&gt;
&lt;p&gt;e.g. &amp;ldquo;There Is No Spoon&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not capitalize &amp;lsquo;small&amp;rsquo; and &amp;lsquo;unimportant&amp;rsquo; words&lt;/p&gt;
&lt;p&gt;e.g. &amp;ldquo;Long Live &lt;strong&gt;the&lt;/strong&gt; King&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always capitalize the first and the last words, even if they&amp;rsquo;re small&lt;/p&gt;
&lt;p&gt;e.g. &amp;ldquo;&lt;strong&gt;The&lt;/strong&gt; Land and Save We Live &lt;strong&gt;On&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Capitalize sub-phrase as if they were their own title&lt;/p&gt;
&lt;p&gt;e.g. &amp;ldquo;The Lonely Reindeer: &lt;strong&gt;A&lt;/strong&gt; Christmas Story&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Patterns of Distributed Systems: Quorum</title>
      <link>https://www.linuxzen.com/notes/notes/20220107113911-patterns_of_distributed_systems_quorum/</link>
      <pubDate>Fri, 07 Jan 2022 11:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107113911-patterns_of_distributed_systems_quorum/</guid>
      <description> tags: quorum,一致性，Distributed Systems,Patterns of Distributed Systems,Paxos,Patterns of Distributed Systems: Paxos source: martinfowler.com. “Quorum.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/quorum.html.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;quorum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;Distributed Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110110515-patterns_of_distributed_systems/&#34;&gt;Patterns of Distributed Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075140-paxos/&#34;&gt;Paxos&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220107113056-patterns_of_distributed_systems_paxos/&#34;&gt;Patterns of Distributed Systems: Paxos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_YS2UCQDD&#34;&gt;martinfowler.com. “Quorum.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/quorum.html.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Patterns of Distributed Systems: Paxos</title>
      <link>https://www.linuxzen.com/notes/notes/20220107113056-patterns_of_distributed_systems_paxos/</link>
      <pubDate>Fri, 07 Jan 2022 11:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107113056-patterns_of_distributed_systems_paxos/</guid>
      <description> tags: Paxos,分布式,Patterns of Distributed Systems source: martinfowler.com. “Paxos.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/paxos.html.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075140-paxos/&#34;&gt;Paxos&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110110515-patterns_of_distributed_systems/&#34;&gt;Patterns of Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_H6LPPEDN&#34;&gt;martinfowler.com. “Paxos.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/paxos.html.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Career</title>
      <link>https://www.linuxzen.com/notes/notes/20220107110909-career/</link>
      <pubDate>Fri, 07 Jan 2022 11:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107110909-career/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>How to quit like a boss</title>
      <link>https://www.linuxzen.com/notes/notes/20220107110859-how_to_quit_like_a_boss/</link>
      <pubDate>Fri, 07 Jan 2022 11:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107110859-how_to_quit_like_a_boss/</guid>
      <description>tags: Career source: “How to Quit like a Boss.” Accessed January 7, 2022. https://jmsbrdy.com/blog/leaving-spring/. HN: https://news.ycombinator.com/item?id=29830296  From the article:
  Avoid communication failures: your manager should not be surprised by your leaving.
 Do have regular, clear, frank conversations about your career with your direct manager. Do tell your manager clearly if there’s something you’re looking for in your career which your current role isn’t providing. Don&amp;rsquo;t withhold concerns or aspirations from your manager.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220107110909-career/&#34;&gt;Career&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_VAZ72TLR&#34;&gt;“How to Quit like a Boss.” Accessed January 7, 2022. https://jmsbrdy.com/blog/leaving-spring/.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HN: &lt;a href=&#34;https://news.ycombinator.com/item?id=29830296&#34;&gt;https://news.ycombinator.com/item?id=29830296&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid communication failures&lt;/strong&gt;: your manager should not be surprised by your leaving.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; have regular, clear, frank conversations about your career with your direct manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; tell your manager clearly if there’s something you’re looking for in your career which your current role isn’t providing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;rsquo;t&lt;/strong&gt; withhold concerns or aspirations from your manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The worst you do above:&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2022-01-07_11-15-32_leaving-flowchart.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;But how can I avoid afraid of leaving?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Match your notice period to the handover period&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hand over: key services and systems, knowledge, documentation, helping hire replacement,helping communicate your departure to the wider team.&lt;/li&gt;
&lt;li&gt;Avoid giving to much notice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Team without you&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t sabotage&lt;/li&gt;
&lt;li&gt;Help other people take on larger roles&lt;/li&gt;
&lt;li&gt;Fresh thiking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Crypto: the good, the bad and the ugly</title>
      <link>https://www.linuxzen.com/notes/notes/20220107103820-crypto_the_good_the_bad_and_the_ugly/</link>
      <pubDate>Fri, 07 Jan 2022 10:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107103820-crypto_the_good_the_bad_and_the_ugly/</guid>
      <description>tags: Blockchain,Smart contracts,Web3 source: “Crypto: The Good, the Bad and the Ugly.” Accessed January 7, 2022. https://seldo.com/posts/crypto-the-good-the-bad-and-the-ugly.  The good:
 Smart contracts allows anybody to execute arbitrary code in the network. And use money to avoid abuse, as every action in the smart contract cost money(computing resource). Finaacial engineering: new money. Entertainment: NFT, a big dream(culture) for everybody who loves crypto. True cloud computing: Smart contracts again. Web3  The bad:</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105113810-smart_contracts/&#34;&gt;Smart contracts&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_7IKF42UQ&#34;&gt;“Crypto: The Good, the Bad and the Ugly.” Accessed January 7, 2022. https://seldo.com/posts/crypto-the-good-the-bad-and-the-ugly.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Smart contracts&lt;/strong&gt; allows anybody to execute arbitrary code in the network. And use money to avoid abuse, as every action in the smart contract cost money(computing resource).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finaacial engineering&lt;/strong&gt;: new money.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Entertainment&lt;/strong&gt;: NFT, a big dream(culture) for everybody who loves crypto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;True cloud computing&lt;/strong&gt;: Smart contracts again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web3&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Environmental impact&lt;/strong&gt;: the grievously wateful nature of PoW. But it&amp;rsquo;s changing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interactions at boundaries&lt;/strong&gt;: private(isolate) network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DAOs have a major boundary problem&lt;/strong&gt;: not a legally binding contract, without goverment support.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Governace&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GAS fee limit scale&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incentives for participation&lt;/strong&gt;: how money come in to this system?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web3&lt;/strong&gt;: is a currency a practical model for general computing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ugly: NFTs, ICOS.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Ethereum development</title>
      <link>https://www.linuxzen.com/notes/notes/20220107072021-ethereum_development/</link>
      <pubDate>Fri, 07 Jan 2022 07:20:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107072021-ethereum_development/</guid>
      <description> tags: Ethereum  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Set up your local development environment</title>
      <link>https://www.linuxzen.com/notes/notes/20220107070826-set_up_your_local_development_environment/</link>
      <pubDate>Fri, 07 Jan 2022 07:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107070826-set_up_your_local_development_environment/</guid>
      <description>tags: Smart contracts,Ethereum,Ethereum development source: ethereum.org. “Ethereum Local Development Setup.” Accessed January 7, 2022. https://ethereum.org.  Local development node:
  Use Hardhat to build the ethereum development environment.
And also there are some tools that based on Hardhat:
 scaffold-eth: forkable Ethereum dev stack focused on fast product iterations    Ganache: A tool for creating a local blockchain for fast Ethereum development.
Tools that based on Ganache:</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105113810-smart_contracts/&#34;&gt;Smart contracts&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220107072021-ethereum_development/&#34;&gt;Ethereum development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_WY3XW9R3&#34;&gt;ethereum.org. “Ethereum Local Development Setup.” Accessed January 7, 2022. https://ethereum.org.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Local development node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&#34;https://hardhat.org/&#34;&gt;Hardhat&lt;/a&gt; to build the ethereum development environment.&lt;/p&gt;
&lt;p&gt;And also there are some tools that based on &lt;em&gt;Hardhat&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scaffold-eth/scaffold-eth&#34;&gt;scaffold-eth: forkable Ethereum dev stack focused on fast product iterations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/trufflesuite/ganache&#34;&gt;Ganache&lt;/a&gt;: A tool for creating a local blockchain for fast Ethereum development.&lt;/p&gt;
&lt;p&gt;Tools that based on &lt;em&gt;Ganache&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python based: &lt;a href=&#34;https://github.com/eth-brownie/brownie&#34;&gt;brownie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://getwaffle.io/&#34;&gt;Waffle&lt;/a&gt;: ethers.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trufflesuite/truffle&#34;&gt;Truffle&lt;/a&gt;: Web3.js&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Ethereum: Deploying your first smart contract</title>
      <link>https://www.linuxzen.com/notes/notes/20220107070103-ethereum_deploying_your_first_smart_contract/</link>
      <pubDate>Fri, 07 Jan 2022 07:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107070103-ethereum_deploying_your_first_smart_contract/</guid>
      <description> tags: Smart contracts,Ethereum,Ethereum development source: ethereum.org. “Deploying Your First Smart Contract.” Accessed January 7, 2022. https://ethereum.org.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105113810-smart_contracts/&#34;&gt;Smart contracts&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220107072021-ethereum_development/&#34;&gt;Ethereum development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_9RYYVWL5&#34;&gt;ethereum.org. “Deploying Your First Smart Contract.” Accessed January 7, 2022. https://ethereum.org.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>PoA</title>
      <link>https://www.linuxzen.com/notes/notes/20220107065931-poa/</link>
      <pubDate>Fri, 07 Jan 2022 06:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107065931-poa/</guid>
      <description> tags: Blockchain Proof,Ethereum  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104070749-blockchain_proof/&#34;&gt;Blockchain Proof&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Wikipedia: Proof of authority</title>
      <link>https://www.linuxzen.com/notes/notes/20220107065917-wikipedia_proof_of_authority/</link>
      <pubDate>Fri, 07 Jan 2022 06:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220107065917-wikipedia_proof_of_authority/</guid>
      <description> tags: PoA source: https://en.wikipedia.org/wiki/Proof%5Fof%5Fauthority  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220107065931-poa/&#34;&gt;PoA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://en.wikipedia.org/wiki/Proof%5Fof%5Fauthority&#34;&gt;https://en.wikipedia.org/wiki/Proof%5Fof%5Fauthority&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Comparison of Classical Test Theory and Item Response Theory and Their Applications to Test Development</title>
      <link>https://www.linuxzen.com/notes/notes/20220106173433-comparison_of_classical_test_theory_and_item_response_theory_and_their_applications_to_test_development/</link>
      <pubDate>Thu, 06 Jan 2022 17:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106173433-comparison_of_classical_test_theory_and_item_response_theory_and_their_applications_to_test_development/</guid>
      <description> tags: IRT,CTT,Educational Measurement source: Hambleton, Ronald K, and Russell W Jones. “Comparison of Classical Test Theory and Item Response Theory and Their Applications to Test Development,” 1993, 11.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106164620-irt/&#34;&gt;IRT&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106173441-ctt/&#34;&gt;CTT&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106173334-educational_measurement/&#34;&gt;Educational Measurement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_F9KS8Y27&#34;&gt;Hambleton, Ronald K, and Russell W Jones. “Comparison of Classical Test Theory and Item Response Theory and Their Applications to Test Development,” 1993, 11.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>CTT</title>
      <link>https://www.linuxzen.com/notes/notes/20220106173441-ctt/</link>
      <pubDate>Thu, 06 Jan 2022 17:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106173441-ctt/</guid>
      <description> tags: Educational Measurement  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106173334-educational_measurement/&#34;&gt;Educational Measurement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Educational</title>
      <link>https://www.linuxzen.com/notes/notes/20220106173353-educational/</link>
      <pubDate>Thu, 06 Jan 2022 17:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106173353-educational/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Educational Measurement</title>
      <link>https://www.linuxzen.com/notes/notes/20220106173334-educational_measurement/</link>
      <pubDate>Thu, 06 Jan 2022 17:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106173334-educational_measurement/</guid>
      <description> tags: Educational  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106173353-educational/&#34;&gt;Educational&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>A Simple Guide to the Item Response Theory (IRT)</title>
      <link>https://www.linuxzen.com/notes/notes/20220106164610-a_simple_guide_to_the_item_response_theory_irt/</link>
      <pubDate>Thu, 06 Jan 2022 16:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106164610-a_simple_guide_to_the_item_response_theory_irt/</guid>
      <description>tags: Algorithm,IRT,读书笔记 source: Yu, Chong Ho. “A Simple Guide to the Item Response Theory ( IRT ) and Rasch Modeling.” Accessed January 6, 2022. https://www.semanticscholar.org/paper/A-Simple-Guide-to-the-Item-Response-Theory-(-IRT-)-Yu/f42efb1bcf38f6650a8b16650e2811e8803cd4ec.  IRT is about fitness or simplicity for test. There are two versions of IRT:
 IRT - three parameters. Rasch modeling - one parameter only.  Three parameters:
 A - discrimination, how effectively this item can discriminate students&amp;rsquo;s proficient between highly and less.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106164620-irt/&#34;&gt;IRT&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_ZJTHYQ25&#34;&gt;Yu, Chong Ho. “A Simple Guide to the Item Response Theory ( IRT ) and Rasch Modeling.” Accessed January 6, 2022. https://www.semanticscholar.org/paper/A-Simple-Guide-to-the-Item-Response-Theory-(-IRT-)-Yu/f42efb1bcf38f6650a8b16650e2811e8803cd4ec.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IRT is about fitness or simplicity for test. There are two versions of IRT:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;IRT&lt;/em&gt; - three parameters.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rasch modeling&lt;/em&gt; - one parameter only.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three parameters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;A&lt;/em&gt; - &lt;strong&gt;discrimination&lt;/strong&gt;, how effectively this item can discriminate students&amp;rsquo;s proficient between highly and less.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;B&lt;/em&gt; - &lt;strong&gt;difficulty,&lt;/strong&gt; or the &lt;strong&gt;threshold&lt;/strong&gt;, tells us how easy or how difficult an item is.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;G&lt;/em&gt; or &lt;em&gt;C&lt;/em&gt; -  &lt;strong&gt;guessing&lt;/strong&gt;, indicates the item correct by guess.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One parameter: keep the &lt;em&gt;A&lt;/em&gt; parameter constant and ignoring the &lt;em&gt;G&lt;/em&gt; parameter.&lt;/p&gt;
&lt;h2 id=&#34;new-words&#34;&gt;New words&lt;/h2&gt;
&lt;h3 id=&#34;tentatively&#34;&gt;tentatively&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2022-01-06T08:56:49Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adverb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/tentatively%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtɛntətɪvli&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subject to further confirmation; not definitely&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the project is tentatively scheduled for next year&lt;/li&gt;
&lt;li&gt;unions tentatively agreed to a three-year contract&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;proficiency&#34;&gt;proficiency&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2022-01-06T09:06:43Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/proficiency%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;prəˈfɪʃnsi&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a high degree of skill; expertise&lt;/p&gt;
&lt;p&gt;Synonyms: skill/skilfulness/expertise/experience/ability/capability/capacity/competence/competency/adeptness/adroitness/excellence/mastery/prowess/professionalism/aptitude/deftness/dexterity/finesse/facility/effectiveness/accomplishment/aptness/expertness/talent&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he demonstrated his proficiency in Chinese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;characteristic&#34;&gt;characteristic&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2022-01-06T09:07:38Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/characteristic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌkarɪktəˈrɪstɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;typical of a particular person, place, or thing&lt;/p&gt;
&lt;p&gt;Synonyms: typical/usual/normal/predictable/habitual/in character&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he began with a characteristic attack on extremism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/characteristic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌkarɪktəˈrɪstɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a feature or quality belonging typically to a person, place, or thing and serving to identify them&lt;/p&gt;
&lt;p&gt;Synonyms: attribute/feature&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;certain defining characteristics of the school emerge from the study&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the whole number or integral part of a logarithm, which gives the order of magnitude of the original number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;curve&#34;&gt;curve&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2022-01-06T09:08:21Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/curve%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kəːv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a line or outline which gradually deviates from being straight for some or all of its length&lt;/p&gt;
&lt;p&gt;Synonyms: curve/bend/bow/arch&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the parapet wall sweeps down in a bold curve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/curve%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kəːv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;form or cause to form a curve&lt;/p&gt;
&lt;p&gt;Synonyms: bend/turn/loop/wind/meander/undulate/snake/spiral/twist/coil/curl/bent/arched/bowed/crescent/curving/recurved/wavy/twisted/twisty/sinuous/serpentine/meandering/undulating/curvilinear/curvy&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;her mouth curved in a smile&lt;/li&gt;
&lt;li&gt;starting with arms outstretched, curve the body sideways&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;discrimination&#34;&gt;discrimination&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2022-01-06T09:13:29Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/discrimination%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;dɪˌskrɪmɪˈneɪʃn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the unjust or prejudicial treatment of different categories of people, especially on the grounds of ethnicity, age, sex, or disability&lt;/p&gt;
&lt;p&gt;Synonyms: prejudice/bias/bigotry/intolerance/narrow-mindedness/unfairness/inequity/favouritism/one-sidedness/partisanship&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;victims of racial discrimination&lt;/li&gt;
&lt;li&gt;there is widespread discrimination against women&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recognition and understanding of the difference between one thing and another&lt;/p&gt;
&lt;p&gt;Synonyms: differentiation/distinction/telling the difference&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;discrimination between right and wrong&lt;/li&gt;
&lt;li&gt;young children have difficulties in making fine discriminations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the selection of a signal having a required characteristic, such as frequency or amplitude, by means of a discriminator.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>IRT</title>
      <link>https://www.linuxzen.com/notes/notes/20220106164620-irt/</link>
      <pubDate>Thu, 06 Jan 2022 16:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106164620-irt/</guid>
      <description> tags: Algorithm,Bigdata,Educational Measurement  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220106173334-educational_measurement/&#34;&gt;Educational Measurement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>How I took my SaaS from idea to sold in 14 months</title>
      <link>https://www.linuxzen.com/notes/notes/20220106121912-how_i_took_my_saas_from_idea_to_sold_in_14_months/</link>
      <pubDate>Thu, 06 Jan 2022 12:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106121912-how_i_took_my_saas_from_idea_to_sold_in_14_months/</guid>
      <description>tags: Freelance source: “How I Took My SaaS from Idea to Sold in 14 Months | Masilotti.Com.” Accessed January 6, 2022. https://masilotti.com/idea-to-sold-in-14-months/.  Building in public: teased new designs and features, documented decisions, UX with polls.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104175356-freelance/&#34;&gt;Freelance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_AIRSFL56&#34;&gt;“How I Took My SaaS from Idea to Sold in 14 Months | Masilotti.Com.” Accessed January 6, 2022. https://masilotti.com/idea-to-sold-in-14-months/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Building in public: teased new designs and features, documented decisions, UX with polls.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Problems once solved by a metaclass can be solved by init_subclass</title>
      <link>https://www.linuxzen.com/notes/notes/20220106121656-problems_once_solved_by_a_metaclass_can_be_solved_by_init_subclass/</link>
      <pubDate>Thu, 06 Jan 2022 12:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220106121656-problems_once_solved_by_a_metaclass_can_be_solved_by_init_subclass/</guid>
      <description> tags: Python source: “init_subclass.” Accessed January 6, 2022. https://til.simonwillison.net/til/til/python_init-subclass.md.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200628133616-python/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_3BV7J4YK&#34;&gt;“&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;init_subclass&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.” Accessed January 6, 2022. https://til.simonwillison.net/til/til/python_init-subclass.md.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Rust Language Cheat Sheet</title>
      <link>https://www.linuxzen.com/notes/notes/20220105190301-rust_language_cheat_sheet/</link>
      <pubDate>Wed, 05 Jan 2022 19:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105190301-rust_language_cheat_sheet/</guid>
      <description> tags: Rust,Online Tutorial source: https://cheats.rs/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://cheats.rs/&#34;&gt;https://cheats.rs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Streaming</title>
      <link>https://www.linuxzen.com/notes/notes/20220105165615-streaming/</link>
      <pubDate>Wed, 05 Jan 2022 16:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105165615-streaming/</guid>
      <description> tags: Bigdata  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Why local state is a fundamental primitive in stream processing</title>
      <link>https://www.linuxzen.com/notes/notes/20220105165604-why_local_state_is_a_fundamental_primitive_in_stream_processing/</link>
      <pubDate>Wed, 05 Jan 2022 16:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105165604-why_local_state_is_a_fundamental_primitive_in_stream_processing/</guid>
      <description> tags: Bigdata,Streaming,Stateful Stream Processing source: Kreps, Jay. “Why Local State Is a Fundamental Primitive in Stream Processing - O’Reilly Radar.” Accessed January 5, 2022. http://radar.oreilly.com/2014/07/why-local-state-is-a-fundamental-primitive-in-stream-processing.html.  Why
 local state is much faster than a distribut database. local state can easily restore by some middleware like Kafka: by writing changes to a Kafka topic.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105165615-streaming/&#34;&gt;Streaming&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105853-stateful_stream_processing/&#34;&gt;Stateful Stream Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_KICLQDYF&#34;&gt;Kreps, Jay. “Why Local State Is a Fundamental Primitive in Stream Processing - O’Reilly Radar.” Accessed January 5, 2022. http://radar.oreilly.com/2014/07/why-local-state-is-a-fundamental-primitive-in-stream-processing.html.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local state is much faster than a distribut database.&lt;/li&gt;
&lt;li&gt;local state can easily restore by some middleware like Kafka: by writing changes to a Kafka topic.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Streaming 102: The world beyond batch</title>
      <link>https://www.linuxzen.com/notes/notes/20220105164146-streaming_102_the_world_beyond_batch/</link>
      <pubDate>Wed, 05 Jan 2022 16:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105164146-streaming_102_the_world_beyond_batch/</guid>
      <description>tags: Bigdata,Flink,Dataflow Model,Streaming source: “Streaming 102: The World beyond Batch – O’Reilly.” Accessed January 5, 2022. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-102/.  Three more concepts:
 Watermarks: Useful for event time windowing. All input data with event times less than watermark have been observed. Triggers: Signal for a window to produce output. Accumulation: The way to handle multiple results that are observed for the same window.  Streaming 101 Redux What: Transformations Where: windowing Make a temporal boundary for a unbounded data source.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105163640-dataflow_model/&#34;&gt;Dataflow Model&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105165615-streaming/&#34;&gt;Streaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_A6HSBD85&#34;&gt;“Streaming 102: The World beyond Batch – O’Reilly.” Accessed January 5, 2022. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-102/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three more concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Watermarks&lt;/strong&gt;: Useful for event time windowing. All input data with event times less than &lt;em&gt;watermark&lt;/em&gt; have been observed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Triggers&lt;/strong&gt;: Signal for a window to produce output.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulation&lt;/strong&gt;: The way to handle multiple results that are observed for the same window.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;streaming-101-redux&#34;&gt;Streaming 101 Redux&lt;/h2&gt;
&lt;h3 id=&#34;what-transformations&#34;&gt;What: Transformations&lt;/h3&gt;
&lt;h3 id=&#34;where-windowing&#34;&gt;Where: windowing&lt;/h3&gt;
&lt;p&gt;Make a temporal boundary for a unbounded data source.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed window&lt;/li&gt;
&lt;li&gt;Sliding window&lt;/li&gt;
&lt;li&gt;Session window&lt;/li&gt;
&lt;/ul&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2022-01-06_11-23-54_Figure-03-Windowing.jpg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;streaming-102&#34;&gt;Streaming 102&lt;/h2&gt;
&lt;h3 id=&#34;when-watermarks&#34;&gt;When: watermarks&lt;/h3&gt;
&lt;p&gt;Watermarks is a function:
\(F(P) -&amp;gt; E\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;P&lt;/em&gt; - processing time&lt;/li&gt;
&lt;li&gt;&lt;em&gt;E&lt;/em&gt; - event time, all inputs with event time less than &lt;em&gt;E&lt;/em&gt; have been observed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The guarantee of watermarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Perfect watermarks&lt;/strong&gt;: no late data, all inputs with event time less than watermarks have been observed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heuristic watermarks&lt;/strong&gt;: may have late data, as accurate as possible. The data may late if the gap between processing time and event time is too large.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt;: windows are materialized? The watermark passes the end of the window.&lt;/p&gt;
&lt;p&gt;Shortcomings of watermarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Too slow&lt;/strong&gt;: will be very slow to konwn unprocessed data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Too fast&lt;/strong&gt;: window may miss data that cause late data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;when-triggers&#34;&gt;When: triggers&lt;/h3&gt;
&lt;p&gt;Triggers complete watermarks that answered: &lt;strong&gt;When&lt;/strong&gt; in processing time are results materialized?&lt;/p&gt;
&lt;p&gt;Triggers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Watermark progress&lt;/strong&gt;: implicit version that will be trigger when the watermark passed the end of the window.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processing time progress&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Element counts&lt;/strong&gt;: Triggering when some finite number of elements have been observed in a window.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Punctuations&lt;/strong&gt;: data-dependent triggers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Composite triggers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repetitions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conjunctions&lt;/strong&gt; (logical AND)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disjunctions&lt;/strong&gt; (logical OR)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sequences&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-accumulation&#34;&gt;How: accumulation&lt;/h3&gt;
&lt;p&gt;Do refinements of results relate when multiple panes are produced by triggers in a single window.&lt;/p&gt;
&lt;p&gt;Three different modes of accumulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Discarding&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulating&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulatin &amp;amp; retracting&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;where-session-windows&#34;&gt;Where: session windows&lt;/h3&gt;
&lt;p&gt;Captures a period of activity, terminated by a gap of inactivity.&lt;/p&gt;
&lt;h2 id=&#34;intermezzo&#34;&gt;Intermezzo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What&lt;/em&gt; results are calculated? Answered via transformations.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Where&lt;/em&gt; in event time are results calculated? Answered via windowing.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;When&lt;/em&gt; in processing time are results materialized? Answered via watermarks and triggers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How&lt;/em&gt; do refinements of results relate? Answered via accumulation modes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Dataflow Model</title>
      <link>https://www.linuxzen.com/notes/notes/20220105163640-dataflow_model/</link>
      <pubDate>Wed, 05 Jan 2022 16:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105163640-dataflow_model/</guid>
      <description> tags: Bigdata,Streaming source: Akidau, Tyler, Robert Bradshaw, Craig Chambers, Slava Chernyak, Rafael J. Fernández-Moctezuma, Reuven Lax, Sam McVeety, et al. “The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, out-of-Order Data Processing.” Proceedings of the VLDB Endowment 8, no. 12 (August 2015): 1792–1803. https://doi.org/10.14778/2824032.2824076.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105165615-streaming/&#34;&gt;Streaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_LFSTQH5K&#34;&gt;Akidau, Tyler, Robert Bradshaw, Craig Chambers, Slava Chernyak, Rafael J. Fernández-Moctezuma, Reuven Lax, Sam McVeety, et al. “The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, out-of-Order Data Processing.” Proceedings of the VLDB Endowment 8, no. 12 (August 2015): 1792–1803. https://doi.org/10.14778/2824032.2824076.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Streaming 101: The world beyond batch</title>
      <link>https://www.linuxzen.com/notes/notes/20220105163321-streaming_101_the_world_beyond_batch/</link>
      <pubDate>Wed, 05 Jan 2022 16:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105163321-streaming_101_the_world_beyond_batch/</guid>
      <description>tags: Bigdata,Flink,Streaming source: Akidau, Tyler. “Streaming 101: The World beyond Batch.” O’Reilly Media, August 5, 2015. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/.  Streaming: a type of data processing engine that is designed with infinite data sets in mind. Other common uses of &amp;ldquo;streaming&amp;rdquo; that will be avoid in the rest of the post:
 Unbounded data: A type of ever-growing, essentially infinite data set. Unbounded data processing: An ongoing mode of data processing, applied to the aforementioned type of unbounded data.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105165615-streaming/&#34;&gt;Streaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_RAWLR8Q4&#34;&gt;Akidau, Tyler. “Streaming 101: The World beyond Batch.” O’Reilly Media, August 5, 2015. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;streaming-a-type-of-data-processing-engine-that-is-designed-with-infinite-data-sets-in-mind-dot&#34;&gt;Streaming: &lt;em&gt;a type of data processing engine that is designed with infinite data sets in mind.&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Other common uses of &amp;ldquo;streaming&amp;rdquo; that will be avoid in the rest of the post:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Unbounded data&lt;/strong&gt;: A type of ever-growing, essentially infinite data set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unbounded data processing&lt;/strong&gt;: An ongoing mode of data processing, applied to the aforementioned type of unbounded data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low-latency, approximate, and/or speculative results&lt;/strong&gt;: These types of results are most often associated with streaming engines.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;limitations-of-streaming&#34;&gt;Limitations of streaming&lt;/h2&gt;
&lt;p&gt;To beat batch at its own game, you really only need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Correctness&lt;/strong&gt;: exactly-once requires strongly consistent state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tools for reasoning about time&lt;/strong&gt; - This gets you &lt;em&gt;beyond&lt;/em&gt; batch.Good tools for reasoning about time are essential for dealing with unbounded, unordered data of varying event-time skew.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;event-time-vs-dot-processing-time&#34;&gt;Event time vs. processing time&lt;/h3&gt;
&lt;p&gt;Within any data processing system, there are typically two domains of time we care about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Event time&lt;/strong&gt;, which is the time at which events actually &lt;em&gt;occurred&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processing time&lt;/strong&gt;, which is the time at which events are &lt;em&gt;abserved&lt;/em&gt; in the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Skew always exists between Event time and Processing time.&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2022-01-05_17-11-36_post01_fig01_timedomains-ea86183a3a9d99179a6e6f5c521ffdbf.jpg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;If you care about event times, you cannot analyzer your data solely within the contxt of when they are abserved in your pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you care about correctness and are interested in analyzing your data in the context of their event times, you cannot define those temporal boundaries using processing time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;data-processing-patterns&#34;&gt;Data processing patterns&lt;/h2&gt;
&lt;h3 id=&#34;bounded-data&#34;&gt;Bounded data&lt;/h3&gt;
&lt;h3 id=&#34;unbounded-data-batch&#34;&gt;Unbounded data — batch&lt;/h3&gt;
&lt;h3 id=&#34;fixed-windows&#34;&gt;Fixed windows&lt;/h3&gt;
&lt;h3 id=&#34;sessions&#34;&gt;Sessions&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Sessions are typically defined as periods of activity (e.g., for a specific user) terminated by a gap of inactivity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;unbounded-data-streaming&#34;&gt;Unbounded data — streaming&lt;/h3&gt;
&lt;h2 id=&#34;four-groups-of-dealing-data&#34;&gt;Four groups of dealing data&lt;/h2&gt;
&lt;h3 id=&#34;time-agnostic&#34;&gt;Time-agnostic&lt;/h3&gt;
&lt;h4 id=&#34;filtering&#34;&gt;Filtering&lt;/h4&gt;
&lt;p&gt;Just look at each record as it arrived, and drop the records that we are not interested. We don&amp;rsquo;t care about the time.&lt;/p&gt;
&lt;h4 id=&#34;inner-joins&#34;&gt;Inner-joins&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;When joining two unbounded data sources, if you only care about the results of a join when an element from both sources arrive, there’s no temporal element to the logic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;approximation-algorithms&#34;&gt;Approximation algorithms&lt;/h3&gt;
&lt;h3 id=&#34;windowing-by-processing-time&#34;&gt;Windowing by processing time&lt;/h3&gt;
&lt;h3 id=&#34;windowing-by-event-time&#34;&gt;Windowing by event time&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>DAOs, DACs, DAs and More: An Incomplete Terminology Guide</title>
      <link>https://www.linuxzen.com/notes/notes/20220105145433-daos_dacs_das_and_more_an_incomplete_terminology_guide/</link>
      <pubDate>Wed, 05 Jan 2022 14:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105145433-daos_dacs_das_and_more_an_incomplete_terminology_guide/</guid>
      <description> tags: DAO,Web3 source: Foundation, Ethereum. “DAOs, DACs, DAs and More: An Incomplete Terminology Guide.” Accessed January 5, 2022. https://blog.ethereum.org/2014/05/06/daos-dacs-das-and-more-an-incomplete-terminology-guide/.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105112648-decentralized_autonomous_organizations_daos/&#34;&gt;DAO&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_6QF886IL&#34;&gt;Foundation, Ethereum. “DAOs, DACs, DAs and More: An Incomplete Terminology Guide.” Accessed January 5, 2022. https://blog.ethereum.org/2014/05/06/daos-dacs-das-and-more-an-incomplete-terminology-guide/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Online Tutorial</title>
      <link>https://www.linuxzen.com/notes/notes/20220105144742-online_tutorial/</link>
      <pubDate>Wed, 05 Jan 2022 14:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105144742-online_tutorial/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>DAO  Education: Level Up Your Knowledge of DAOs</title>
      <link>https://www.linuxzen.com/notes/notes/20220105144616-level_up_your_knowledge_of_daos/</link>
      <pubDate>Wed, 05 Jan 2022 14:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105144616-level_up_your_knowledge_of_daos/</guid>
      <description> tags: DAO,Online Tutorial source: https://aragon.org/dao  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105112648-decentralized_autonomous_organizations_daos/&#34;&gt;DAO&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://aragon.org/dao&#34;&gt;https://aragon.org/dao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>My writing finances, 2021</title>
      <link>https://www.linuxzen.com/notes/notes/20220105135009-my_writing_finances_2021/</link>
      <pubDate>Wed, 05 Jan 2022 13:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105135009-my_writing_finances_2021/</guid>
      <description> tags: Freelance source: Dan. “My Writing Finances, 2021 | Dan Moren.” Accessed January 5, 2022. https://dmoren.com/2022/01/03/my-writing-finances-2021/.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104175356-freelance/&#34;&gt;Freelance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_483Y22G3&#34;&gt;Dan. “My Writing Finances, 2021 | Dan Moren.” Accessed January 5, 2022. https://dmoren.com/2022/01/03/my-writing-finances-2021/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>HN: I make $3K/mo from a browser extension!</title>
      <link>https://www.linuxzen.com/notes/notes/20220105134652-hn_i_make_3k_mo_from_a_browser_extension/</link>
      <pubDate>Wed, 05 Jan 2022 13:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105134652-hn_i_make_3k_mo_from_a_browser_extension/</guid>
      <description> tags: Freelance source: “I Make $3K/Mo from a Browser Extension! (+ December 2021 Updates).” Accessed January 5, 2022. http://newsletter.tonydinh.com/issues/i-make-3k-mo-from-a-browser-extension-december-2021-updates-966892. HN: https://news.ycombinator.com/item?id=29803817  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104175356-freelance/&#34;&gt;Freelance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_EE6Q5C5I&#34;&gt;“I Make $3K/Mo from a Browser Extension! (+ December 2021 Updates).” Accessed January 5, 2022. http://newsletter.tonydinh.com/issues/i-make-3k-mo-from-a-browser-extension-december-2021-updates-966892.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HN: &lt;a href=&#34;https://news.ycombinator.com/item?id=29803817&#34;&gt;https://news.ycombinator.com/item?id=29803817&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Web3/Crypto: Why Bother?</title>
      <link>https://www.linuxzen.com/notes/notes/20220105134324-web3_crypto_why_bother/</link>
      <pubDate>Wed, 05 Jan 2022 13:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105134324-web3_crypto_why_bother/</guid>
      <description> tags: Web3 source: Continuations by Albert Wenger. “Web3/Crypto: Why Bother?” Accessed January 5, 2022. https://continuations.com/post/671863718643105792/web3crypto-why-bother.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_3MWGCYF2&#34;&gt;Continuations by Albert Wenger. “Web3/Crypto: Why Bother?” Accessed January 5, 2022. https://continuations.com/post/671863718643105792/web3crypto-why-bother.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Skiff x Ethereum Naming Service</title>
      <link>https://www.linuxzen.com/notes/notes/20220105120811-skiff_x_ethereum_naming_service/</link>
      <pubDate>Wed, 05 Jan 2022 12:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105120811-skiff_x_ethereum_naming_service/</guid>
      <description> tags: Ethereum,MetaMask,Online Tools source: https://www.skiff.org/updates/skiff-ens  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105120401-metamask/&#34;&gt;MetaMask&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://www.skiff.org/updates/skiff-ens&#34;&gt;https://www.skiff.org/updates/skiff-ens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>MetaMask</title>
      <link>https://www.linuxzen.com/notes/notes/20220105120401-metamask/</link>
      <pubDate>Wed, 05 Jan 2022 12:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105120401-metamask/</guid>
      <description> tags: Web3,Online Tools,Real Problems That Web3 Solves, Part 1 source: https://metamask.io/   MetaMask has implemented private key login via a Chrome extension and now has 21 million users. In theory, something like this could have existed a long time ago. In practice, the existence of blockchains and the need for better UX for cryptocurrency incentivized much more investmenets in these tools.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105114740-real_problems_that_web3_solves_part_1/&#34;&gt;Real Problems That Web3 Solves, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://metamask.io/&#34;&gt;https://metamask.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MetaMask has implemented private key login via a Chrome extension and now has 21 million users. In theory, something like this could have existed a long time ago. In practice, the existence of blockchains and the need for better UX for cryptocurrency incentivized much more investmenets in these tools.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Real Problems That Web3 Solves, Part 1</title>
      <link>https://www.linuxzen.com/notes/notes/20220105114740-real_problems_that_web3_solves_part_1/</link>
      <pubDate>Wed, 05 Jan 2022 11:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105114740-real_problems_that_web3_solves_part_1/</guid>
      <description>tags: Web3,Smart contracts source: Bill Prin’s Personal Page. “Real Problems That Web3 Solves, Part 1,” January 3, 2022. https://billprin.com/2022/01/03/real-problems-web3-solves.html.  What exactly is the difference between Web3, blockchain, and cryptocurrency  You can think of blockchain and cryptocurrency as technological implementation details, and Web3 as the communities, businesses, and social relationships that form on top of that technology. A similar analogy would be the original World Wide Web, which could have been construed as a rebrand of the underlying technologies of HTML over HTTP over TCP/IP.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105113810-smart_contracts/&#34;&gt;Smart contracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_49B67TUV&#34;&gt;Bill Prin’s Personal Page. “Real Problems That Web3 Solves, Part 1,” January 3, 2022. https://billprin.com/2022/01/03/real-problems-web3-solves.html.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-exactly-is-the-difference-between-web3-blockchain-and-cryptocurrency&#34;&gt;What exactly is the difference between Web3, blockchain, and cryptocurrency&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can think of blockchain and cryptocurrency as technological implementation details, and Web3 as the communities, businesses, and social relationships that form on top of that technology.
A similar analogy would be the original World Wide Web, which could have been construed as a rebrand of the underlying technologies of HTML over HTTP over TCP/IP. Those protocols have served as the foundation for virtually all web content for the last 30 years, but it’d certainly be unfair to describe “the Web” as merely a rebranding of HTML/HTTP/TCP/IP since what happens on top of those protocols is much bigger than just the protocols themselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using blockchain as a database to store personal data in account?&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;h3 id=&#34;before-web3&#34;&gt;Before Web3&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Username and password&lt;/li&gt;
&lt;li&gt;OAuth protocols(namely OAuth2)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web3&#34;&gt;Web3&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Wallets that use asymmetric cryptographic algorithm(public key and private key).&lt;/li&gt;
&lt;li&gt;Smart contracts enables advances features, like recovery your lost key.&lt;/li&gt;
&lt;li&gt;MetaMask.&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Smart contracts</title>
      <link>https://www.linuxzen.com/notes/notes/20220105113810-smart_contracts/</link>
      <pubDate>Wed, 05 Jan 2022 11:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105113810-smart_contracts/</guid>
      <description>tags: Blockchain,Ethereum source: https://ethereum.org/en/developers/docs/smart-contracts/  A type of Ethereum account. Some code deployed and running in some VM, like Ethereum Virtual Machine.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/developers/docs/smart-contracts/&#34;&gt;https://ethereum.org/en/developers/docs/smart-contracts/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A type of Ethereum account. Some code deployed and running in some VM, like Ethereum Virtual Machine.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Decentralized autonomous organizations (DAOs)</title>
      <link>https://www.linuxzen.com/notes/notes/20220105112648-decentralized_autonomous_organizations_daos/</link>
      <pubDate>Wed, 05 Jan 2022 11:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105112648-decentralized_autonomous_organizations_daos/</guid>
      <description>tags: Ethereum,Smart contracts,Blockchain,Web3 source: https://ethereum.org/en/dao/  Based on smart contracts and use tokens for voting. Tokens can be exchanged in the market.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105113810-smart_contracts/&#34;&gt;Smart contracts&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/dao/&#34;&gt;https://ethereum.org/en/dao/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on smart contracts and use tokens for voting. Tokens can be exchanged in the market.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Neural Network From Scratch</title>
      <link>https://www.linuxzen.com/notes/notes/20220105105024-neural_network_from_scratch/</link>
      <pubDate>Wed, 05 Jan 2022 10:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105105024-neural_network_from_scratch/</guid>
      <description> tags: AI,Deep Learning source: “Neural Network From Scratch.” Accessed January 5, 2022. https://sirupsen.com/napkin/neural-net.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200309112015_ai/&#34;&gt;AI&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200310093014_deep_learning/&#34;&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_DF3DX9WZ&#34;&gt;“Neural Network From Scratch.” Accessed January 5, 2022. https://sirupsen.com/napkin/neural-net.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>my personal note taking journey</title>
      <link>https://www.linuxzen.com/notes/notes/20220105104616-my_personal_note_taking_journey/</link>
      <pubDate>Wed, 05 Jan 2022 10:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105104616-my_personal_note_taking_journey/</guid>
      <description> tags: Taking Notes,RoamResearch source: “My Personal Note Taking Journey.” Accessed January 5, 2022. https://phonetonote.com/blog/my-personal-note-taking-journey/.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123253-roamresearch/&#34;&gt;RoamResearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_CW234YBN&#34;&gt;“My Personal Note Taking Journey.” Accessed January 5, 2022. https://phonetonote.com/blog/my-personal-note-taking-journey/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Zotero zotxt&#39;s api 500 as the specify style is not installed</title>
      <link>https://www.linuxzen.com/notes/notes/20220105090334-zotero_zotxt_500/</link>
      <pubDate>Wed, 05 Jan 2022 09:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105090334-zotero_zotxt_500/</guid>
      <description>tags: Zotero,Emacs  I got an error when I&amp;rsquo;m inserting Zotero ref to Emacs by M-x org-zotxt-insert-reference-link RET
[error] request--callback: peculiar error: 500 I got the error of zotxt by follow the instruction Debug Output Logging:
(5)(+0000003): HTTP/1.0 500 Internal Server Error X-Zotero-Version: 5.0.96.3 X-Zotero-Connector-API-Version: 2 Content-Type: text/plain; charset=UTF-8 csl is nullTypeError: csl is null buildBibliographyResponse/responseData&amp;lt;@resource://gre/modules/addons/XPIProvider.jsm -&amp;gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:220:9 buildBibliographyResponse@resource://gre/modules/addons/XPIProvider.jsm -&amp;gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:219:24 buildResponse/&amp;lt;@resource://gre/modules/addons/XPIProvider.jsm -&amp;gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:156:20 tryCatcher@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/util.js:16:16 module.exports/Promise.prototype._settlePromiseFromHandler@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105065640-zotero/&#34;&gt;Zotero&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I got an error when I&amp;rsquo;m inserting Zotero ref to Emacs by &lt;code&gt;M-x org-zotxt-insert-reference-link RET&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[error] request--callback: peculiar error: 500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I got the error of zotxt by follow the instruction &lt;a href=&#34;https://www.zotero.org/support/debug%5Foutput&#34;&gt;Debug Output Logging&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(5)(+0000003): HTTP/1.0 500 Internal Server Error X-Zotero-Version: 5.0.96.3 X-Zotero-Connector-API-Version: 2 Content-Type: text/plain; charset=UTF-8 csl is nullTypeError: csl is null buildBibliographyResponse/responseData&amp;lt;@resource://gre/modules/addons/XPIProvider.jsm -&amp;gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:220:9 buildBibliographyResponse@resource://gre/modules/addons/XPIProvider.jsm -&amp;gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:219:24 buildResponse/&amp;lt;@resource://gre/modules/addons/XPIProvider.jsm -&amp;gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:156:20 tryCatcher@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/util.js:16:16 module.exports/Promise.prototype._settlePromiseFromHandler@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.js:547:13 module.exports/Promise.prototype._settlePromise@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.js:604:13 module.exports/Promise.prototype._settlePromise0@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.js:649:5 module.exports/Promise.prototype._settlePromises@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.js:729:13 module.exports/Promise.prototype._fulfill@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.js:673:13 module.exports/PromiseArray.prototype._resolve@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise_array.js:127:5 module.exports/MappingPromiseArray.prototype._promiseFulfilled@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/map.js:108:13 module.exports/Promise.prototype._settlePromise@resource://zotero/loader.jsm -&amp;gt; resource://zotero/bluebird/promise.js:609:17 module.exports/Promise… (3613 chars)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And I found &lt;a href=&#34;https://github.com/egh/zotxt/issues/8&#34;&gt;this issue:  zotxt api does not work for non-latin references&lt;/a&gt;. By looking at &lt;a href=&#34;https://github.com/egh/zotxt/issues/8#issuecomment-608167494&#34;&gt;the reply&lt;/a&gt;, I think it&amp;rsquo;s the same issue I&amp;rsquo;m got: I did&amp;rsquo;nt install the style which I setted in my Emacs config:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(use-package org-zotxt
  :straight (:host github :repo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;egh/zotxt-emacs&amp;#34;&lt;/span&gt;)
  :bind
  (:map org-mode-map
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c z i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-zotxt-insert-reference-link)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c z a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-zotxt-open-attachment))
  :custom
  (zotxt-default-bibliography-style &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mkbehr-short&amp;#34;&lt;/span&gt;)
  :hook
  (org-mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-zotxt-mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By removing the &lt;code&gt;:custom&lt;/code&gt;, issue resolved:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(use-package org-zotxt
  :straight (:host github :repo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;egh/zotxt-emacs&amp;#34;&lt;/span&gt;)
  :bind
  (:map org-mode-map
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c z i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-zotxt-insert-reference-link)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c z a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-zotxt-open-attachment))
  :hook
  (org-mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-zotxt-mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Scientific Writing with Zotero and Org Mode</title>
      <link>https://www.linuxzen.com/notes/notes/20220105080634-scientific_writing_with_zotero_and_org_mode/</link>
      <pubDate>Wed, 05 Jan 2022 08:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105080634-scientific_writing_with_zotero_and_org_mode/</guid>
      <description> tags: Org Mode,Taking Notes,Zotero,Research,Emacs source: “Scientific Writing with Zotero and Org Mode | Irreal.” Accessed January 5, 2022. https://irreal.org/blog/?p=5771.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105065640-zotero/&#34;&gt;Zotero&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105065739-research/&#34;&gt;Research&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_I7EYI4QK&#34;&gt;“Scientific Writing with Zotero and Org Mode | Irreal.” Accessed January 5, 2022. https://irreal.org/blog/?p=5771.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Research</title>
      <link>https://www.linuxzen.com/notes/notes/20220105065739-research/</link>
      <pubDate>Wed, 05 Jan 2022 06:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105065739-research/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>A research workflow with Zotero and Org mode</title>
      <link>https://www.linuxzen.com/notes/notes/20220105065621-a_research_workflow_with_zotero_and_org_mode/</link>
      <pubDate>Wed, 05 Jan 2022 06:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105065621-a_research_workflow_with_zotero_and_org_mode/</guid>
      <description>tags: Org Mode,Taking Notes,Zotero,Research,Emacs source: “A Research Workflow with Zotero and Org Mode | Mkbehr.Com.” Accessed January 5, 2022. http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/.  Gluing zotero and Org mode together with zotxt(zotxt-emacs).
Workflow:
 Store papers into zotero by its browser plugin, that may also download the PDF. Create a page in Emacs and link to zotero via zotxt-emacs C-c &amp;quot; &amp;quot;. When I want to read the paper. Go to the page in Emacs and type C-c &amp;quot; a.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105065640-zotero/&#34;&gt;Zotero&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105065739-research/&#34;&gt;Research&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_JQ5Y52AP&#34;&gt;“A Research Workflow with Zotero and Org Mode | Mkbehr.Com.” Accessed January 5, 2022. http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gluing zotero and Org mode together with &lt;a href=&#34;https://github.com/egh/zotxt&#34;&gt;zotxt&lt;/a&gt;(&lt;a href=&#34;https://github.com/egh/zotxt-emacs&#34;&gt;zotxt-emacs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Store papers into zotero by its browser plugin, that may also download the PDF.&lt;/li&gt;
&lt;li&gt;Create a page in Emacs and link to zotero via zotxt-emacs &lt;code&gt;C-c &amp;quot; &amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When I want to read the paper. Go to the page in Emacs and type &lt;code&gt;C-c &amp;quot; a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When I&amp;rsquo;m reading a paper and see a citation that might be useful, I look it up on the internet and repeat this process to store a note linking to it.&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Zotero</title>
      <link>https://www.linuxzen.com/notes/notes/20220105065640-zotero/</link>
      <pubDate>Wed, 05 Jan 2022 06:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220105065640-zotero/</guid>
      <description> tags: Tools,Learning,Taking Notes  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162549-tools/&#34;&gt;Tools&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Deserializing JSON really fast</title>
      <link>https://www.linuxzen.com/notes/notes/20220104184242-deserializing_json_really_fast/</link>
      <pubDate>Tue, 04 Jan 2022 18:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104184242-deserializing_json_really_fast/</guid>
      <description> tags: Rust,优化,High Performance source: https://blog.datalust.co/deserializing-json-really-fast/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200628182150-%E4%BC%98%E5%8C%96/&#34;&gt;优化&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110112848-high_performance/&#34;&gt;High Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://blog.datalust.co/deserializing-json-really-fast/&#34;&gt;https://blog.datalust.co/deserializing-json-really-fast/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://www.linuxzen.com/notes/notes/20220104184051-database/</link>
      <pubDate>Tue, 04 Jan 2022 18:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104184051-database/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>[译] RFC 1180：朴素 TCP/IP 教程（1991）</title>
      <link>https://www.linuxzen.com/notes/notes/20220104183852-%E8%AF%91_rfc_1180_%E6%9C%B4%E7%B4%A0_tcp_ip_%E6%95%99%E7%A8%8B_1991/</link>
      <pubDate>Tue, 04 Jan 2022 18:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104183852-%E8%AF%91_rfc_1180_%E6%9C%B4%E7%B4%A0_tcp_ip_%E6%95%99%E7%A8%8B_1991/</guid>
      <description> tags: TCP source: https://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813071635-tcp/&#34;&gt;TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/&#34;&gt;https://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Assembly Nights</title>
      <link>https://www.linuxzen.com/notes/notes/20220104183330-assembly_nights/</link>
      <pubDate>Tue, 04 Jan 2022 18:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104183330-assembly_nights/</guid>
      <description> tags: Assembly,NASM Assembly Language Tutorials source: https://ratfactor.com/assembly-nights  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104180603-assembly/&#34;&gt;Assembly&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104180539-nasm_assembly_language_tutorials/&#34;&gt;NASM Assembly Language Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ratfactor.com/assembly-nights&#34;&gt;https://ratfactor.com/assembly-nights&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>web3 is Centralized</title>
      <link>https://www.linuxzen.com/notes/notes/20220104183132-web3_is_centralized/</link>
      <pubDate>Tue, 04 Jan 2022 18:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104183132-web3_is_centralized/</guid>
      <description> tags: Web3 source: https://blog.wesleyac.com/posts/web3-centralized  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://blog.wesleyac.com/posts/web3-centralized&#34;&gt;https://blog.wesleyac.com/posts/web3-centralized&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>An Algorithm for Passing Programming Interviews</title>
      <link>https://www.linuxzen.com/notes/notes/20220104182458-an_algorithm_for_passing_programming_interviews/</link>
      <pubDate>Tue, 04 Jan 2022 18:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104182458-an_algorithm_for_passing_programming_interviews/</guid>
      <description> tags: Algorithm source: https://malisper.me/an-algorithm-for-passing-programming-interviews/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://malisper.me/an-algorithm-for-passing-programming-interviews/&#34;&gt;https://malisper.me/an-algorithm-for-passing-programming-interviews/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>https://www.linuxzen.com/notes/notes/20220104182327-algorithm/</link>
      <pubDate>Tue, 04 Jan 2022 18:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104182327-algorithm/</guid>
      <description> tags: Computer Systems  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>A not so gentle intro to web3</title>
      <link>https://www.linuxzen.com/notes/notes/20220104181901-a_not_so_gentle_intro_to_web3/</link>
      <pubDate>Tue, 04 Jan 2022 18:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104181901-a_not_so_gentle_intro_to_web3/</guid>
      <description> tags: Blockchain,Web3 source: https://www.kooslooijesteijn.net/blog/web3  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104181911-web3/&#34;&gt;Web3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://www.kooslooijesteijn.net/blog/web3&#34;&gt;https://www.kooslooijesteijn.net/blog/web3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Web3</title>
      <link>https://www.linuxzen.com/notes/notes/20220104181911-web3/</link>
      <pubDate>Tue, 04 Jan 2022 18:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104181911-web3/</guid>
      <description> tags: Blockchain  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Go Fuzzing</title>
      <link>https://www.linuxzen.com/notes/notes/20220104181647-go_fuzzing/</link>
      <pubDate>Tue, 04 Jan 2022 18:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104181647-go_fuzzing/</guid>
      <description> tags: Go source: https://tip.golang.org/doc/fuzz/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200218115725/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://tip.golang.org/doc/fuzz/&#34;&gt;https://tip.golang.org/doc/fuzz/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Bonsai offers freelance contracts, proposals, invoices</title>
      <link>https://www.linuxzen.com/notes/notes/20220104181343-bonsai_offers_freelance_contracts_proposals_invoices/</link>
      <pubDate>Tue, 04 Jan 2022 18:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104181343-bonsai_offers_freelance_contracts_proposals_invoices/</guid>
      <description> tags: Freelance source:  https://www.hellobonsai.com/ HN: https://news.ycombinator.com/item?id=29782097    </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104175356-freelance/&#34;&gt;Freelance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hellobonsai.com/&#34;&gt;https://www.hellobonsai.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HN: &lt;a href=&#34;https://news.ycombinator.com/item?id=29782097&#34;&gt;https://news.ycombinator.com/item?id=29782097&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Assembly</title>
      <link>https://www.linuxzen.com/notes/notes/20220104180603-assembly/</link>
      <pubDate>Tue, 04 Jan 2022 18:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104180603-assembly/</guid>
      <description> tags: Computer Systems  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>NASM Assembly Language Tutorials</title>
      <link>https://www.linuxzen.com/notes/notes/20220104180539-nasm_assembly_language_tutorials/</link>
      <pubDate>Tue, 04 Jan 2022 18:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104180539-nasm_assembly_language_tutorials/</guid>
      <description> tags: Computer Systems,Assembly,Linux,Online Tutorial source: “NASM Assembly Language Tutorials - Asmtutor.Com.” Accessed January 5, 2022. https://asmtutor.com/.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104180603-assembly/&#34;&gt;Assembly&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104103936-linux/&#34;&gt;Linux&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105144742-online_tutorial/&#34;&gt;Online Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_T8IFZ4EW&#34;&gt;“NASM Assembly Language Tutorials - Asmtutor.Com.” Accessed January 5, 2022. https://asmtutor.com/.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Microstartup</title>
      <link>https://www.linuxzen.com/notes/notes/20220104175722-microstartup/</link>
      <pubDate>Tue, 04 Jan 2022 17:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104175722-microstartup/</guid>
      <description> tags: Freelance  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104175356-freelance/&#34;&gt;Freelance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Freelance</title>
      <link>https://www.linuxzen.com/notes/projects/20220104175356-freelance/</link>
      <pubDate>Tue, 04 Jan 2022 17:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20220104175356-freelance/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>HN: My Microstartups make $500/day while I&#39;m sleeping</title>
      <link>https://www.linuxzen.com/notes/notes/20220104175332-hn_my_microstartups_make_500_day_while_i_m_sleeping/</link>
      <pubDate>Tue, 04 Jan 2022 17:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104175332-hn_my_microstartups_make_500_day_while_i_m_sleeping/</guid>
      <description>tags: Freelance,Microstartup source: https://news.ycombinator.com/item?id=29790964  Comments:
 Related:
&amp;ldquo;Tell HN: My Microstartups make $500/day while I&amp;rsquo;m sleeping&amp;rdquo; (this): https://news.ycombinator.com/item?id=29790964
&amp;ldquo;AMA: I make $100K+ ARR from my microstartups&amp;rdquo; (3 months ago): https://news.ycombinator.com/item?id=28561132
&amp;ldquo;Show HN: I passed up an opportunity to make $200K from my microstartup&amp;rdquo; (2020): https://twitter.com/1HaKr/status/1301142901510995969
&amp;ldquo;Show HN: My Indie Hacker goal - Earn $100 a day to keep your desk job away&amp;rdquo; (2020): https://news.ycombinator.com/item?id=24304674
&amp;ldquo;Show HN: I made $9000 posting on Hacker News about my microstartup&amp;rdquo; (2020): https://news.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104175356-freelance/&#34;&gt;Freelance&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104175722-microstartup/&#34;&gt;Microstartup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://news.ycombinator.com/item?id=29790964&#34;&gt;https://news.ycombinator.com/item?id=29790964&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Related:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Tell HN: My Microstartups make $500/day while I&amp;rsquo;m sleeping&amp;rdquo; (this): &lt;a href=&#34;https://news.ycombinator.com/item?id=29790964&#34;&gt;https://news.ycombinator.com/item?id=29790964&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;AMA: I make $100K+ ARR from my microstartups&amp;rdquo; (3 months ago): &lt;a href=&#34;https://news.ycombinator.com/item?id=28561132&#34;&gt;https://news.ycombinator.com/item?id=28561132&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Show HN: I passed up an opportunity to make $200K from my microstartup&amp;rdquo; (2020): &lt;a href=&#34;https://twitter.com/1HaKr/status/1301142901510995969&#34;&gt;https://twitter.com/1HaKr/status/1301142901510995969&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Show HN: My Indie Hacker goal - Earn $100 a day to keep your desk job away&amp;rdquo; (2020): &lt;a href=&#34;https://news.ycombinator.com/item?id=24304674&#34;&gt;https://news.ycombinator.com/item?id=24304674&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Show HN: I made $9000 posting on Hacker News about my microstartup&amp;rdquo; (2020): &lt;a href=&#34;https://news.ycombinator.com/submitted?id=1hakr&#34;&gt;https://news.ycombinator.com/submitted?id=1hakr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And so on: &lt;a href=&#34;https://news.ycombinator.com/submitted?id=1hakr&#34;&gt;https://news.ycombinator.com/submitted?id=1hakr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To answer the question &amp;ldquo;how do you advertise your products?&amp;rdquo;, clearly it is to spam Hacker News until you get lucky.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to validate ideas?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not OP, but validating ideas is (relatively) easy. First, you figure out who will use your product. Then, you get a few of those people to use or discuss your product. You only need a few people, and they can be close acquaintances. After showing the product to a few people you imagine to use your product, you come to a determination of whether or not they liked your product. This part is a little subtle. You don&amp;rsquo;t ask them &amp;ldquo;did you like my product?&amp;rdquo; Instead, you try to figure out if your product seems like something they were excited about, would continue to use, and, most importantly, tell others about.&lt;/p&gt;
&lt;p&gt;Think about it like this. If you show the product to a handful of people that you imagine to be ideal users, and NONE of those people are excited enough about your business to share it with others, then what chance of success do you really have?&lt;/p&gt;
&lt;p&gt;To give you a concrete example. I made an app that was a pretty revolutionary take on reading short stories. I had a few friends try it out, all of whom were passionate readers. They said they liked it, but I could see that none of them opened it again after their initial test. To me, that was all the signal I needed to pivot to something else.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Ledger, the first peer-reviewed journal dedicated to the study of blockchains and cryptocurrencies!</title>
      <link>https://www.linuxzen.com/notes/notes/20220104174944-ledger_the_first_peer_reviewed_journal_dedicated_to_the_study_of_blockchains_and_cryptocurrencies/</link>
      <pubDate>Tue, 04 Jan 2022 17:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104174944-ledger_the_first_peer_reviewed_journal_dedicated_to_the_study_of_blockchains_and_cryptocurrencies/</guid>
      <description> tags: Blockchain  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Privoxy socks5 to HTTP</title>
      <link>https://www.linuxzen.com/notes/notes/20220104163050-privoxy_socks5_to_http/</link>
      <pubDate>Tue, 04 Jan 2022 16:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104163050-privoxy_socks5_to_http/</guid>
      <description> tags: Privoxy,Over the Wall source: https://wiki.archlinux.org/title/Privoxy%5F(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BD%AC%E5%8F%91%E5%8D%8F%E8%AE%AE  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162722-privoxy/&#34;&gt;Privoxy&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/&#34;&gt;Over the Wall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://wiki.archlinux.org/title/Privoxy%5F(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BD%AC%E5%8F%91%E5%8D%8F%E8%AE%AE&#34;&gt;https://wiki.archlinux.org/title/Privoxy%5F(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BD%AC%E5%8F%91%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Privoxy</title>
      <link>https://www.linuxzen.com/notes/notes/20220104162722-privoxy/</link>
      <pubDate>Tue, 04 Jan 2022 16:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104162722-privoxy/</guid>
      <description> tags: Tools,Unix home: https://www.privoxy.org/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162549-tools/&#34;&gt;Tools&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200218174814/&#34;&gt;Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;home: &lt;a href=&#34;https://www.privoxy.org/&#34;&gt;https://www.privoxy.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://www.linuxzen.com/notes/notes/20220104162549-tools/</link>
      <pubDate>Tue, 04 Jan 2022 16:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104162549-tools/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>HTTPs</title>
      <link>https://www.linuxzen.com/notes/notes/20220104162448-https/</link>
      <pubDate>Tue, 04 Jan 2022 16:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104162448-https/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Beam</title>
      <link>https://www.linuxzen.com/notes/notes/20220104150531-beam/</link>
      <pubDate>Tue, 04 Jan 2022 15:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104150531-beam/</guid>
      <description> tags: Bigdata source: https://beam.apache.org/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://beam.apache.org/&#34;&gt;https://beam.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Flink: Keyed State</title>
      <link>https://www.linuxzen.com/notes/notes/20220104120927-flink_keyed_state/</link>
      <pubDate>Tue, 04 Jan 2022 12:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104120927-flink_keyed_state/</guid>
      <description> tags: Flink State Snapshots source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/#keyed-state   Keyed state is maintained in what can be thought of as an embedded key/value store.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/#keyed-state&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/#keyed-state&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Keyed state is maintained in what can be thought of as an embedded key/value store.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Flink: Exactly Once Guarantees</title>
      <link>https://www.linuxzen.com/notes/notes/20220104113644-flink_exactly_once_guarantees/</link>
      <pubDate>Tue, 04 Jan 2022 11:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104113644-flink_exactly_once_guarantees/</guid>
      <description>tags: Flink State Snapshots,Fault Tolerance via State Snapshots source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#exactly-once-guarantees  Depending on the choices you make, Flink possiable outcomes:
 Flink makes no effort to recover from failures (at most once) Nothing is lost, but you may experience duplicated results (at least once) Nothing is lost or duplicated (exactly once)   Given that Flink recovers from faults by rewinding and replaying the source data streams, when the ideal situation is described as exactly once this does not mean that every event will be processed exactly once.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/&#34;&gt;Fault Tolerance via State Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#exactly-once-guarantees&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#exactly-once-guarantees&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on the choices you make, Flink possiable outcomes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flink makes no effort to recover from failures (at most once)&lt;/li&gt;
&lt;li&gt;Nothing is lost, but you may experience duplicated results (at least once)&lt;/li&gt;
&lt;li&gt;Nothing is lost or duplicated (exactly once)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Given that Flink recovers from faults by rewinding and replaying the source data streams, when the ideal situation is described as exactly once this does not mean that every event will be processed exactly once. Instead, it means that every event will affect the state being managed by Flink exactly once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;exactly-once-end-to-end&#34;&gt;Exactly Once End-to-end&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;To achieve exactly once end-to-end, so that every event from the sources affects the sinks exactly once, the following must be true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;your sources must be replayable, and&lt;/li&gt;
&lt;li&gt;your sinks must be transactional (or idempotent)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Wikipedia: Chandy–Lamport algorithm</title>
      <link>https://www.linuxzen.com/notes/notes/20220104112626-wikipedia_chandy_lamport_algorithm/</link>
      <pubDate>Tue, 04 Jan 2022 11:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104112626-wikipedia_chandy_lamport_algorithm/</guid>
      <description> tags: 分布式 source: https://en.wikipedia.org/wiki/Chandy%E2%80%93Lamport%5Falgorithm  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://en.wikipedia.org/wiki/Chandy%E2%80%93Lamport%5Falgorithm&#34;&gt;https://en.wikipedia.org/wiki/Chandy%E2%80%93Lamport%5Falgorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Flink: How does State Snapshotting Work?</title>
      <link>https://www.linuxzen.com/notes/notes/20220104112527-flink_how_does_state_snapshotting_work/</link>
      <pubDate>Tue, 04 Jan 2022 11:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104112527-flink_how_does_state_snapshotting_work/</guid>
      <description>tags: Fault Tolerance via State Snapshots,Flink State Snapshots,Wikipedia: Chandy–Lamport algorithm source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#how-does-state-snapshotting-work  Workflow:
  Checkpoint coordinator (part of the job manager) instructs a task manager to begin a checkpoint.
  Insert numbered checkpoint barriers into their streams of all the sources record their offsets.
  checkpoint barriers flow through the job graph, indicating the part of the stream before and after each checkpoint.
Checkpoint n will contain the state of each operator that resulted from having consumed every event before checkpoint barrier n, and none of the events after it.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/&#34;&gt;Fault Tolerance via State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104112626-wikipedia_chandy_lamport_algorithm/&#34;&gt;Wikipedia: Chandy–Lamport algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#how-does-state-snapshotting-work&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#how-does-state-snapshotting-work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Checkpoint coordinator (part of the job manager) instructs a task manager to begin a checkpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert numbered &lt;em&gt;checkpoint barriers&lt;/em&gt; into their streams of all the sources record their offsets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;checkpoint barriers&lt;/em&gt; flow through the job graph, indicating the part of the stream before and after each checkpoint.&lt;/p&gt;
&lt;p&gt;Checkpoint &lt;em&gt;n&lt;/em&gt; will contain the state of each operator that resulted from having consumed &lt;strong&gt;every event before checkpoint barrier n, and none of the events after it&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As each operator in the job graph receives one of these barriers, it records its state.&lt;/p&gt;
&lt;p&gt;Operators with two input streams (such as a CoProcessFunction) perform barrier alignment so that the snapshot will reflect the state resulting from consuming events from both input streams up to (but not past) both barriers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2022-01-04_11-31-22_stream_barriers.svg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;asynchronously-snapshot&#34;&gt;Asynchronously snapshot&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Flink’s state backends use a copy-on-write mechanism to allow stream processing to continue unimpeded while older versions of the state are being asynchronously snapshotted. Only when the snapshots have been durably persisted will these older versions of the state be garbage collected.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Flink Checkpoint</title>
      <link>https://www.linuxzen.com/notes/notes/20220104112356-flink_checkpoint/</link>
      <pubDate>Tue, 04 Jan 2022 11:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104112356-flink_checkpoint/</guid>
      <description> tags: Flink State Snapshots,Fault Tolerance via State Snapshots   a snapshot taken automatically by Flink for the purpose of being able to recover from faults. Checkpoints can be incremental, and are optimized for being restored quickly.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/&#34;&gt;Fault Tolerance via State Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;a snapshot taken automatically by Flink for the purpose of being able to recover from faults. Checkpoints can be incremental, and are optimized for being restored quickly.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Flink Savepoint</title>
      <link>https://www.linuxzen.com/notes/notes/20220104112301-flink_savepoint/</link>
      <pubDate>Tue, 04 Jan 2022 11:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104112301-flink_savepoint/</guid>
      <description> tags: Flink State Snapshots   a snapshot triggered manually by a user (or an API call) for some operational purpose, such as a stateful redeploy/upgrade/rescaling operation. Savepoints are always complete, and are optimized for operational flexibility.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;a snapshot triggered manually by a user (or an API call) for some operational purpose, such as a stateful redeploy/upgrade/rescaling operation. Savepoints are always complete, and are optimized for operational flexibility.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Flink Checkpoint Storage</title>
      <link>https://www.linuxzen.com/notes/notes/20220104111922-flink_checkpoint_storage/</link>
      <pubDate>Tue, 04 Jan 2022 11:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104111922-flink_checkpoint_storage/</guid>
      <description>tags: Flink State Snapshots,Fault Tolerance via State Snapshots,Flink Checkpoint source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#checkpoint-storage   Flink periodically takes persistent snapshots of all the state in every operator and copies these snapshots somewhere more durable, such as a distributed file system. In the event of the failure, Flink can restore the complete state of your application and resume processing as though nothing had gone wrong.
 Two implementations:
 A distributed file system.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/&#34;&gt;Fault Tolerance via State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104112356-flink_checkpoint/&#34;&gt;Flink Checkpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#checkpoint-storage&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#checkpoint-storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Flink periodically takes persistent snapshots of all the state in every operator and copies these snapshots somewhere more durable, such as a distributed file system. In the event of the failure, Flink can restore the complete state of your application and resume processing as though nothing had gone wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two implementations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A distributed file system.&lt;/li&gt;
&lt;li&gt;JobManager’s heap.&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>State Backends</title>
      <link>https://www.linuxzen.com/notes/notes/20220104111432-state_backends/</link>
      <pubDate>Tue, 04 Jan 2022 11:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104111432-state_backends/</guid>
      <description>tags: Flink State Snapshots,Fault Tolerance via State Snapshots,Stateful Stream Processing  Two implementations of state backends are available:
RocksDB An embedded key/value store keeps its working state on disk.
Overhead Accesses and updates involve serialization and deserialization.
Java heap-based state backend Keeps its working state in memory, on the Java heap.
Risk Large amount state will cause OOM.
Conclusion  Both of these state backends are able to do asynchronous snapshotting, meaning that they can take a snapshot without impeding the ongoing stream processing.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/&#34;&gt;Fault Tolerance via State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105853-stateful_stream_processing/&#34;&gt;Stateful Stream Processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two implementations of state backends are available:&lt;/p&gt;
&lt;h2 id=&#34;rocksdb&#34;&gt;RocksDB&lt;/h2&gt;
&lt;p&gt;An embedded key/value store keeps its working state on disk.&lt;/p&gt;
&lt;h3 id=&#34;overhead&#34;&gt;Overhead&lt;/h3&gt;
&lt;p&gt;Accesses and updates involve serialization and deserialization.&lt;/p&gt;
&lt;h2 id=&#34;java-heap-based-state-backend&#34;&gt;Java heap-based state backend&lt;/h2&gt;
&lt;p&gt;Keeps its working state in memory, on the Java heap.&lt;/p&gt;
&lt;h3 id=&#34;risk&#34;&gt;Risk&lt;/h3&gt;
&lt;p&gt;Large amount state will cause OOM.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Both of these state backends are able to do asynchronous snapshotting, meaning that they can take a snapshot without impeding the ongoing stream processing.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Fault Tolerance via State Snapshots</title>
      <link>https://www.linuxzen.com/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/</link>
      <pubDate>Tue, 04 Jan 2022 11:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104111325-fault_tolerance_via_state_snapshots/</guid>
      <description> tags: Flink State Snapshots,Stateful Stream Processing source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105853-stateful_stream_processing/&#34;&gt;Stateful Stream Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Flink State Snapshots</title>
      <link>https://www.linuxzen.com/notes/notes/20220104111119-flink_state_snapshots/</link>
      <pubDate>Tue, 04 Jan 2022 11:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104111119-flink_state_snapshots/</guid>
      <description> tags: Stateful Stream Processing  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105853-stateful_stream_processing/&#34;&gt;Stateful Stream Processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Stateful Stream Processing</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105853-stateful_stream_processing/</link>
      <pubDate>Tue, 04 Jan 2022 10:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105853-stateful_stream_processing/</guid>
      <description>tags: Stream processing,Flink source:  https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#stateful-stream-processing https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/     This means that how one event is handled can depend on the accumulated effect of all the events that came before it.
 How the stateful streaming processing works on a distributed cluster?  The set of parallel instances of a stateful operator is effectively a sharded key-value store. Each parallel instance is responsible for handling events for a specific group of keys, and the state for those keys is kept locally.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105119-stream_processing/&#34;&gt;Stream processing&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#stateful-stream-processing&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#stateful-stream-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This means that how one event is handled can depend on the accumulated effect of all the events that came before it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;how-the-stateful-streaming-processing-works-on-a-distributed-cluster&#34;&gt;How the stateful streaming processing works on  a distributed cluster?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The set of parallel instances of a stateful operator is effectively a sharded key-value store. Each parallel instance is responsible for handling events for a specific group of keys, and the state for those keys is kept locally.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;State are stored and accessed locally by sharded key-value store,&lt;/li&gt;
&lt;li&gt;A fully-connected network shuffle will be occurring between all the instances,&lt;/li&gt;
&lt;li&gt;All of the events that will be processed together.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;State is always accessed locally, which helps Flink applications achieve high throughput and low-latency. You can choose to keep state on the JVM heap, or if it is too large, in efficiently organized on-disk data structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;some-examples-of-stateful-operations&#34;&gt;Some examples of stateful operations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;When an application searches for certain event patterns, the state will store the sequence of events encountered so far.&lt;/li&gt;
&lt;li&gt;When aggregating events per minute/hour/day, the state holds the pending aggregates.&lt;/li&gt;
&lt;li&gt;When training a machine learning model over a stream of data points, the state holds the current version of the model parameters.&lt;/li&gt;
&lt;li&gt;When historic data needs to be managed, the state allows efficient access to events that occurred in the past.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Timely Stream Processing</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105829-timely_stream_processing/</link>
      <pubDate>Tue, 04 Jan 2022 10:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105829-timely_stream_processing/</guid>
      <description>tags: Stream processing,Flink source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#timely-stream-processing  Flink timely stream processing support by using event timestamps that are recorded in data stream, rather than using the clocks of the machines processing the data.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105119-stream_processing/&#34;&gt;Stream processing&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#timely-stream-processing&#34;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#timely-stream-processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flink timely stream processing support by using event timestamps that are recorded in data stream, rather than using the clocks of the machines processing the data.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Flink Redistributing</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105758-flink_redistributing/</link>
      <pubDate>Tue, 04 Jan 2022 10:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105758-flink_redistributing/</guid>
      <description>tags: Flink Parallel Dataflows   Redistributing streams (as between map() and keyBy/window above, as well as between keyBy/window and Sink) change the partitioning of streams. Each operator subtask sends data to different target subtasks, depending on the selected transformation. Examples are keyBy() (which re-partitions by hashing the key), broadcast(), or rebalance() (which re-partitions randomly). In a redistributing exchange the ordering among the elements is only preserved within each pair of sending and receiving subtasks (for example, subtask[1] of map() and subtask[2] of keyBy/window).</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105628-flink_parallel_dataflows/&#34;&gt;Flink Parallel Dataflows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Redistributing streams (as between map() and keyBy/window above, as well as between keyBy/window and Sink) change the partitioning of streams. Each operator subtask sends data to different target subtasks, depending on the selected transformation. Examples are keyBy() (which re-partitions by hashing the key), broadcast(), or rebalance() (which re-partitions randomly). In a redistributing exchange the ordering among the elements is only preserved within each pair of sending and receiving subtasks (for example, subtask[1] of map() and subtask[2] of keyBy/window). So, for example, the redistribution between the keyBy/window and the Sink operators shown above introduces non-determinism regarding the order in which the aggregated results for different keys arrive at the Sink.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>One-to-one</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105704-one_to_one/</link>
      <pubDate>Tue, 04 Jan 2022 10:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105704-one_to_one/</guid>
      <description> tags: Flink Parallel Dataflows   One-to-one streams (for example between the Source and the map() operators in the figure above) preserve the partitioning and ordering of the elements. That means that subtask[1] of the map() operator will see the same elements in the same order as they were produced by subtask[1] of the Source operator.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104105628-flink_parallel_dataflows/&#34;&gt;Flink Parallel Dataflows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;One-to-one streams (for example between the Source and the map() operators in the figure above) preserve the partitioning and ordering of the elements. That means that subtask[1] of the map() operator will see the same elements in the same order as they were produced by subtask[1] of the Source operator.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Flink Parallel Dataflows</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105628-flink_parallel_dataflows/</link>
      <pubDate>Tue, 04 Jan 2022 10:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105628-flink_parallel_dataflows/</guid>
      <description> tags: Flink   Streams can transport data between two operators in a one-to-one (or forwarding) pattern, or in a redistributing pattern:
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Streams can transport data between two operators in a one-to-one (or forwarding) pattern, or in a redistributing pattern:&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Stream processing</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105119-stream_processing/</link>
      <pubDate>Tue, 04 Jan 2022 10:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105119-stream_processing/</guid>
      <description> tags: Flink   Stream processing, on the other hand, involves unbounded data streams. Conceptually, at least, the input may never end, and so you are forced to continuously process the data as it arrives.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Stream processing, on the other hand, involves unbounded data streams. Conceptually, at least, the input may never end, and so you are forced to continuously process the data as it arrives.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Batch processing</title>
      <link>https://www.linuxzen.com/notes/notes/20220104105030-batch_processing/</link>
      <pubDate>Tue, 04 Jan 2022 10:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104105030-batch_processing/</guid>
      <description> tags: Spark   Batch processing is the paradigm at work when you process a bounded data stream. In this mode of operation you can choose to ingest the entire dataset before producing any results, which means that it is possible, for example, to sort the data, compute global statistics, or produce a final report that summarizes all of the input.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210827080540-spark/&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Batch processing is the paradigm at work when you process a bounded data stream. In this mode of operation you can choose to ingest the entire dataset before producing any results, which means that it is possible, for example, to sort the data, compute global statistics, or produce a final report that summarizes all of the input.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Flink实时计算-深入理解 Checkpoint和Savepoint</title>
      <link>https://www.linuxzen.com/notes/notes/20220104104436-flink%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97_%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3_checkpoint%E5%92%8Csavepoint/</link>
      <pubDate>Tue, 04 Jan 2022 10:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104104436-flink%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97_%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3_checkpoint%E5%92%8Csavepoint/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>知乎：Flink实时计算-深入理解 Checkpoint和Savepoint</title>
      <link>https://www.linuxzen.com/notes/notes/20220104104450-%E7%9F%A5%E4%B9%8E_flink%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97_%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3_checkpoint%E5%92%8Csavepoint/</link>
      <pubDate>Tue, 04 Jan 2022 10:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104104450-%E7%9F%A5%E4%B9%8E_flink%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97_%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3_checkpoint%E5%92%8Csavepoint/</guid>
      <description> tags: Flink,Flink State Snapshots,Flink Checkpoint,Flink Savepoint source: https://zhuanlan.zhihu.com/p/79526638  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20200320100601_flink/&#34;&gt;Flink&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104111119-flink_state_snapshots/&#34;&gt;Flink State Snapshots&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104112356-flink_checkpoint/&#34;&gt;Flink Checkpoint&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104112301-flink_savepoint/&#34;&gt;Flink Savepoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://zhuanlan.zhihu.com/p/79526638&#34;&gt;https://zhuanlan.zhihu.com/p/79526638&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: 像小说一样品读 Linux 0.11 核心代码</title>
      <link>https://www.linuxzen.com/notes/notes/20220104104331-github_%E5%83%8F%E5%B0%8F%E8%AF%B4%E4%B8%80%E6%A0%B7%E5%93%81%E8%AF%BB_linux_0_11_%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Tue, 04 Jan 2022 10:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104104331-github_%E5%83%8F%E5%B0%8F%E8%AF%B4%E4%B8%80%E6%A0%B7%E5%93%81%E8%AF%BB_linux_0_11_%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/</guid>
      <description> tags: Linux source: https://github.com/sunym1993/flash-linux0.11-talk  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104103936-linux/&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk&#34;&gt;https://github.com/sunym1993/flash-linux0.11-talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Audio: The lost talks from Linus Torvalds at DECUS&#39;94</title>
      <link>https://www.linuxzen.com/notes/notes/20220104104134-audio_the_lost_talks_from_linus_torvalds_at_decus_94/</link>
      <pubDate>Tue, 04 Jan 2022 10:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104104134-audio_the_lost_talks_from_linus_torvalds_at_decus_94/</guid>
      <description> tags: Linux source: https://archive.org/details/199405-decusnew-orleans/1994050DECUSNewOrleansLinuxImplementationIssuesInLinux.ogg  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104103936-linux/&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://archive.org/details/199405-decusnew-orleans/1994050DECUSNewOrleansLinuxImplementationIssuesInLinux.ogg&#34;&gt;https://archive.org/details/199405-decusnew-orleans/1994050DECUSNewOrleansLinuxImplementationIssuesInLinux.ogg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://www.linuxzen.com/notes/notes/20220104103936-linux/</link>
      <pubDate>Tue, 04 Jan 2022 10:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104103936-linux/</guid>
      <description> tags: Operating system  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074112-operating_system/&#34;&gt;Operating system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Ethereum: Shard chains</title>
      <link>https://www.linuxzen.com/notes/notes/20220104083051-ethereum_shard_chains/</link>
      <pubDate>Tue, 04 Jan 2022 08:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104083051-ethereum_shard_chains/</guid>
      <description> tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/eth2/shard-chains/   Sharding is the process of splitting a database horizontally to spread the load – it’s a common concept in computer science. In an Ethereum context, sharding will reduce network congestion and increase transactions per second by creating new chains, known as “shards”.
This is important for reasons other than scalability.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104071052-proof_of_stake/&#34;&gt;Proof-of-stake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/eth2/shard-chains/&#34;&gt;https://ethereum.org/en/eth2/shard-chains/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Sharding is the process of splitting a database horizontally to spread the load – it’s a common concept in computer science. In an Ethereum context, sharding will reduce network congestion and increase transactions per second by creating new chains, known as “shards”.&lt;/p&gt;
&lt;p&gt;This is important for reasons other than scalability.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Ethereum: The Beacon Chain</title>
      <link>https://www.linuxzen.com/notes/notes/20220104082350-ethereum_the_beacon_chain/</link>
      <pubDate>Tue, 04 Jan 2022 08:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104082350-ethereum_the_beacon_chain/</guid>
      <description> tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/eth2/beacon-chain/  Extra coordination for the Ethereum: Shard chains.
 The beacon chain receives state information from shards and makes it available for other shards, allowing the network to stay in sync. The beacon chain will also manage the validators from registering their stake deposits to issuing their rewards and penalties.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104071052-proof_of_stake/&#34;&gt;Proof-of-stake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/eth2/beacon-chain/&#34;&gt;https://ethereum.org/en/eth2/beacon-chain/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extra coordination for the &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104083051-ethereum_shard_chains/&#34;&gt;Ethereum: Shard chains&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The beacon chain receives state information from shards and makes it available for other shards, allowing the network to stay in sync. The beacon chain will also manage the validators from registering their stake deposits to issuing their rewards and penalties.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>How does Ethereum&#39;s proof-of-stake work?</title>
      <link>https://www.linuxzen.com/notes/notes/20220104082123-how_does_ehtereum_s_proof_of_stake_work/</link>
      <pubDate>Tue, 04 Jan 2022 08:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104082123-how_does_ehtereum_s_proof_of_stake_work/</guid>
      <description>tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#how-does-pos-work  When you submit a transaction on a shard, a validator will be responsible for adding your transaction to a shard block. Validators are algorithmically chosen by Ethereum: The Beacon Chain to propose new blocks.
  Attestation
If a validator isn&amp;rsquo;t chosen to propose a new shard block, they&amp;rsquo;ll have to attest to another validator&amp;rsquo;s proposal and confirm that everything looks as it should. It&amp;rsquo;s the attestation that is recorded in the beacon chain rather than the transaction itself.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104071052-proof_of_stake/&#34;&gt;Proof-of-stake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#how-does-pos-work&#34;&gt;https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#how-does-pos-work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you submit a transaction on a shard, a validator will be responsible for adding your transaction to a shard block. Validators are algorithmically chosen by &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104082350-ethereum_the_beacon_chain/&#34;&gt;Ethereum: The Beacon Chain&lt;/a&gt; to propose new blocks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Attestation&lt;/p&gt;
&lt;p&gt;If a validator isn&amp;rsquo;t chosen to propose a new shard block, they&amp;rsquo;ll have to attest to another validator&amp;rsquo;s proposal and confirm that everything looks as it should. It&amp;rsquo;s the attestation that is recorded in the beacon chain rather than the transaction itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At least 128 validators are required to attest to each shard block – this is known as a &amp;ldquo;committee.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The committee has a time-frame in which to propose and validate a shard block. This is known as a &amp;ldquo;slot.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only one valid block is created per slot, and there are 32 slots in an &amp;ldquo;epoch.&amp;rdquo; After each epoch, the committee is disbanded and reformed with different, random participants. This helps keep shards safe from committees of bad actors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crosslinks&lt;/p&gt;
&lt;p&gt;Once a new shard block proposal has enough attestations, a &amp;ldquo;crosslink&amp;rdquo; is created which confirms the inclusion of the block and your transaction in the beacon chain.&lt;/p&gt;
&lt;p&gt;Once there&amp;rsquo;s a crosslink, the validator who proposed the block gets their reward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finality&lt;/p&gt;
&lt;p&gt;In distributed networks, a transaction has &amp;ldquo;finality&amp;rdquo; when it&amp;rsquo;s part of a block that can&amp;rsquo;t change.&lt;/p&gt;
&lt;p&gt;To do this in proof-of-stake, Casper, a finality protocol, gets validators to agree on the state of a block at certain checkpoints. So long as 2/3 of the validators agree, the block is finalised. Validators will lose their entire stake if they try and revert this later on via a 51% attack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>ETH</title>
      <link>https://www.linuxzen.com/notes/notes/20220104081524-eth/</link>
      <pubDate>Tue, 04 Jan 2022 08:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104081524-eth/</guid>
      <description> tags: Ethereum  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Proof-of-history</title>
      <link>https://www.linuxzen.com/notes/notes/20220104081314-proof_of_history/</link>
      <pubDate>Tue, 04 Jan 2022 08:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104081314-proof_of_history/</guid>
      <description> tags: Blockchain Proof,Solana,Proof-of-stake   Solana is a Proof of Stake network. This short phrase - &amp;ldquo;Proof of Stake&amp;rdquo; - represents a much larger concept with considerable complexity behind it, and even more so for Solana, which adds the unique properties of Proof of History to the mix to enable fast, low-latency transactions while still maintaining censorship resistance.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104070749-blockchain_proof/&#34;&gt;Blockchain Proof&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070432-solana/&#34;&gt;Solana&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104071052-proof_of_stake/&#34;&gt;Proof-of-stake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Solana is a Proof of Stake network. This short phrase - &amp;ldquo;Proof of Stake&amp;rdquo; - represents a much larger concept with considerable complexity behind it, and even more so for Solana, which adds the unique properties of Proof of History to the mix to enable fast, low-latency transactions while still maintaining censorship resistance.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Proof-of-stake</title>
      <link>https://www.linuxzen.com/notes/notes/20220104071052-proof_of_stake/</link>
      <pubDate>Tue, 04 Jan 2022 07:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104071052-proof_of_stake/</guid>
      <description>tags: Blockchain,Blockchain Proof,Ethereum,Solana source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/  Proof workflow:
  Users stake money(ETH) to become a validator.
  Validators are chosen at random to create blocks and are responsible for checking and confirming blocks they don&amp;rsquo;t create.
user&amp;rsquo;s stake is also used as a way to incentivise good validator behavior. For example, a user can lose a portion of their stake for things like going offline (failing to validate) or their entire stake for deliberate collusion.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104070749-blockchain_proof/&#34;&gt;Blockchain Proof&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070432-solana/&#34;&gt;Solana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/&#34;&gt;https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proof workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Users stake money(&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104081524-eth/&#34;&gt;ETH&lt;/a&gt;) to become a validator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Validators are chosen at random to create blocks and are responsible for checking and confirming blocks they don&amp;rsquo;t create.&lt;/p&gt;
&lt;p&gt;user&amp;rsquo;s stake is also used as a way to incentivise good validator behavior. For example, a user can lose a portion of their stake for things like going offline (failing to validate) or their entire stake for deliberate collusion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you attest to malicious blocks, you lose your stake.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Ethereum</title>
      <link>https://www.linuxzen.com/notes/projects/20220104070947-ethereum/</link>
      <pubDate>Tue, 04 Jan 2022 07:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20220104070947-ethereum/</guid>
      <description> tags: Blockchain  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Proof-of-work</title>
      <link>https://www.linuxzen.com/notes/notes/20220104070857-proof_of_work/</link>
      <pubDate>Tue, 04 Jan 2022 07:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104070857-proof_of_work/</guid>
      <description>tags: Blockchain Proof,Blockchain,Ethereum source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/ Wikipedia: https://en.wikipedia.org/wiki/Proof%5Fof%5Fwork   A key feature of proof-of-work schemes is their asymmetry: the work – the computation – must be moderately hard (yet feasible) on the prover or requester side but easy to check for the verifier or service provider.
 With a hash function, let&amp;rsquo;s say SHA-1. For example, to do PoW, we need to generate a SHA-1 hash of the given data that must begins 52 binary zeros, that is 13 hexadecimal zeros:</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104070749-blockchain_proof/&#34;&gt;Blockchain Proof&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070947-ethereum/&#34;&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/&#34;&gt;https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/Proof%5Fof%5Fwork&#34;&gt;https://en.wikipedia.org/wiki/Proof%5Fof%5Fwork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A key feature of proof-of-work schemes is their asymmetry: the &lt;em&gt;work&lt;/em&gt; – the computation – must be moderately hard (yet feasible) on the prover or requester side but easy to check for the verifier or service provider.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With a hash function, let&amp;rsquo;s say SHA-1. For example, to do PoW, we need to generate a SHA-1 hash of the given data that must begins 52 binary zeros, that is 13 hexadecimal zeros:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;0000000000000756af69e2ffbdb930261873cd71
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How? By using a random or increasing nounce number can do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib


difficulty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
given_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transactions in the block&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; nounce &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(int(&lt;span style=&#34;color:#ae81ff&#34;&gt;1e100&lt;/span&gt;)):
    work &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha1(bytes(nounce) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; given_data)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; work[:difficulty] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; difficulty:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;We have proof the work, nounce: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, hash: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, nounce, work)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can use the nounce to show our proof, anyone else can use the nounce to check our proof on the given data, and also it&amp;rsquo;s easy to check.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Blockchain Proof</title>
      <link>https://www.linuxzen.com/notes/notes/20220104070749-blockchain_proof/</link>
      <pubDate>Tue, 04 Jan 2022 07:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104070749-blockchain_proof/</guid>
      <description> tags: Blockchain  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Shinobi Systems&#39; Solana Proof of Stake &#43; Proof of History Primer</title>
      <link>https://www.linuxzen.com/notes/notes/20220104070408-shinobi_systems_solana_proof_of_stake_proof_of_history_primer/</link>
      <pubDate>Tue, 04 Jan 2022 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220104070408-shinobi_systems_solana_proof_of_stake_proof_of_history_primer/</guid>
      <description> tags: Blockchain,Solana,Proof-of-stake,Proof-of-history source: “Shinobi Systems’ Solana Proof of Stake + Proof of History Primer.” Accessed January 5, 2022. https://www.shinobi-systems.com/primer.html.  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;Blockchain,&lt;/a&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220104070432-solana/&#34;&gt;Solana&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104071052-proof_of_stake/&#34;&gt;Proof-of-stake&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104081314-proof_of_history/&#34;&gt;Proof-of-history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_GCR5N3UA&#34;&gt;“Shinobi Systems’ Solana Proof of Stake + Proof of History Primer.” Accessed January 5, 2022. https://www.shinobi-systems.com/primer.html.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Solana</title>
      <link>https://www.linuxzen.com/notes/projects/20220104070432-solana/</link>
      <pubDate>Tue, 04 Jan 2022 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20220104070432-solana/</guid>
      <description> tags: 区块链  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;区块链&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Blockchain Demo</title>
      <link>https://www.linuxzen.com/notes/notes/20220103082057-blockchain_demo/</link>
      <pubDate>Mon, 03 Jan 2022 08:20:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220103082057-blockchain_demo/</guid>
      <description> tags: Video: Blockchain 101 - A Visual Demo，区块链, Online Tools source: https://andersbrownworth.com/blockchain/hash  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220103081929-video_blockchain_101_a_visual_demo/&#34;&gt;Video: Blockchain 101 - A Visual Demo&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;区块链&lt;/a&gt;, &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://andersbrownworth.com/blockchain/hash&#34;&gt;https://andersbrownworth.com/blockchain/hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Video: Blockchain 101 - A Visual Demo</title>
      <link>https://www.linuxzen.com/notes/notes/20220103081929-video_blockchain_101_a_visual_demo/</link>
      <pubDate>Mon, 03 Jan 2022 08:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220103081929-video_blockchain_101_a_visual_demo/</guid>
      <description>tags: 区块链 source: https://youtu.be/%5F160oMzblY8  It&amp;rsquo;s like Git but not support merge. The progress of changing blocks like git rebase.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;区块链&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://youtu.be/%5F160oMzblY8&#34;&gt;https://youtu.be/%5F160oMzblY8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s like Git but not support merge. The progress of changing blocks like &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 多态</title>
      <link>https://www.linuxzen.com/notes/notes/20220102074500-c_c_%E5%A4%9A%E6%80%81/</link>
      <pubDate>Sun, 02 Jan 2022 07:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220102074500-c_c_%E5%A4%9A%E6%80%81/</guid>
      <description>tags: C/C++  只能通过抽象类的指针或引用调用动态解析子类函数，虚函数表示需要动态解析，纯虚函数必须被子类覆盖，否则无法实例化。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只能通过抽象类的指针或引用调用动态解析子类函数，虚函数表示需要动态解析，纯虚函数必须被子类覆盖，否则无法实例化。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Programming Tools</title>
      <link>https://www.linuxzen.com/notes/topics/20220102074329-programming_tools/</link>
      <pubDate>Sun, 02 Jan 2022 07:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20220102074329-programming_tools/</guid>
      <description> tags: Tools  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162549-tools/&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Operating system</title>
      <link>https://www.linuxzen.com/notes/topics/20220102074112-operating_system/</link>
      <pubDate>Sun, 02 Jan 2022 07:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20220102074112-operating_system/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>macOS</title>
      <link>https://www.linuxzen.com/notes/topics/20220102074038-macos/</link>
      <pubDate>Sun, 02 Jan 2022 07:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20220102074038-macos/</guid>
      <description> tags: Operating system  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074112-operating_system/&#34;&gt;Operating system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://www.linuxzen.com/notes/notes/20220102073737-javascript/</link>
      <pubDate>Sun, 02 Jan 2022 07:37:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220102073737-javascript/</guid>
      <description> tags: Programming Language  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Swift</title>
      <link>https://www.linuxzen.com/notes/notes/20220102073640-swift/</link>
      <pubDate>Sun, 02 Jan 2022 07:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220102073640-swift/</guid>
      <description> tags: Programming Language  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>《深入理解计算机系统》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 02 Jan 2022 07:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description> tags: Computer Systems,读书笔记  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Memory Model</title>
      <link>https://www.linuxzen.com/notes/topics/20220102072550-memory_model/</link>
      <pubDate>Sun, 02 Jan 2022 07:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20220102072550-memory_model/</guid>
      <description> tags: Computer Systems  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>SO: What is the difference between iter and into_iter?</title>
      <link>https://www.linuxzen.com/notes/notes/20220101082142-so_what_is_the_difference_between_iter_and_into_iter/</link>
      <pubDate>Sat, 01 Jan 2022 08:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101082142-so_what_is_the_difference_between_iter_and_into_iter/</guid>
      <description> tags: Rust source: https://stackoverflow.com/a/34745885/2873718  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://stackoverflow.com/a/34745885/2873718&#34;&gt;https://stackoverflow.com/a/34745885/2873718&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: Rust Memory Container Cheat-sheet</title>
      <link>https://www.linuxzen.com/notes/notes/20220101082045-github_rust_memory_container_cheat_sheet/</link>
      <pubDate>Sat, 01 Jan 2022 08:20:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101082045-github_rust_memory_container_cheat_sheet/</guid>
      <description> tags: Rust Wrapper Types,Rust source: Rust Memory Container Cheat-sheet  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200325165657_rust_wrapper_types/&#34;&gt;Rust Wrapper Types&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/usagi/rust-memory-container-cs&#34;&gt;Rust Memory Container Cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Wrapper Types in Rust: Choosing Your Guarantees</title>
      <link>https://www.linuxzen.com/notes/notes/20220101081950-wrapper_types_in_rust_choosing_your_guarantees/</link>
      <pubDate>Sat, 01 Jan 2022 08:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101081950-wrapper_types_in_rust_choosing_your_guarantees/</guid>
      <description> tags: Rust,Rust Wrapper Types source: https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200325165657_rust_wrapper_types/&#34;&gt;Rust Wrapper Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/&#34;&gt;https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: Internal details of Tokio from code to designs</title>
      <link>https://www.linuxzen.com/notes/notes/20220101081722-github_internal_details_of_tokio_from_code_to_designs/</link>
      <pubDate>Sat, 01 Jan 2022 08:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101081722-github_internal_details_of_tokio_from_code_to_designs/</guid>
      <description> tags: Tokio source: https://github.com/tony612/tokio-internals  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808083146-tokio/&#34;&gt;Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/tony612/tokio-internals&#34;&gt;https://github.com/tony612/tokio-internals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>PAPER: Raft</title>
      <link>https://www.linuxzen.com/notes/notes/20220101080713-paper_raft/</link>
      <pubDate>Sat, 01 Jan 2022 08:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101080713-paper_raft/</guid>
      <description> tags: Raft source: https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075154-raft/&#34;&gt;Raft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf&#34;&gt;https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>PAPER: Time, Clocks, and the Ordering of Events in a Distributed System</title>
      <link>https://www.linuxzen.com/notes/notes/20220101080622-paper_time_clocks_and_the_ordering_of_events_in_a_distributed_system/</link>
      <pubDate>Sat, 01 Jan 2022 08:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101080622-paper_time_clocks_and_the_ordering_of_events_in_a_distributed_system/</guid>
      <description> tags: 分布式,一致性 source: https://lamport.azurewebsites.net/pubs/time-clocks.pdf  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>CSDN:  理解这两点，也就理解了paxos协议的精髓</title>
      <link>https://www.linuxzen.com/notes/notes/20220101080340-csdn_%E7%90%86%E8%A7%A3%E8%BF%99%E4%B8%A4%E7%82%B9_%E4%B9%9F%E5%B0%B1%E7%90%86%E8%A7%A3%E4%BA%86paxos%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%B2%BE%E9%AB%93/</link>
      <pubDate>Sat, 01 Jan 2022 08:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101080340-csdn_%E7%90%86%E8%A7%A3%E8%BF%99%E4%B8%A4%E7%82%B9_%E4%B9%9F%E5%B0%B1%E7%90%86%E8%A7%A3%E4%BA%86paxos%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%B2%BE%E9%AB%93/</guid>
      <description> tags: Paxos source: https://blog.csdn.net/qq%5F35440678/article/details/78080431  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075140-paxos/&#34;&gt;Paxos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://blog.csdn.net/qq%5F35440678/article/details/78080431&#34;&gt;https://blog.csdn.net/qq%5F35440678/article/details/78080431&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>GitHub: raft-rs</title>
      <link>https://www.linuxzen.com/notes/notes/20220101080223-github_raft_rs/</link>
      <pubDate>Sat, 01 Jan 2022 08:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101080223-github_raft_rs/</guid>
      <description> tags: Rust,Raft source: https://github.com/tikv/raft-rs  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075154-raft/&#34;&gt;Raft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/tikv/raft-rs&#34;&gt;https://github.com/tikv/raft-rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Raft Understandable Distributed Consensus</title>
      <link>https://www.linuxzen.com/notes/notes/20220101080054-raft_understandable_distributed_consensus/</link>
      <pubDate>Sat, 01 Jan 2022 08:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101080054-raft_understandable_distributed_consensus/</guid>
      <description> tags: Raft,分布式，分布式共识，Online Tools source: http://thesecretlivesofdata.com/raft/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075154-raft/&#34;&gt;Raft&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Distributed consensus (blockchain) simulation and visualization</title>
      <link>https://www.linuxzen.com/notes/notes/20220101075156-distributed_consensus_blockchain_simulation_and_visualization/</link>
      <pubDate>Sat, 01 Jan 2022 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20220101075156-distributed_consensus_blockchain_simulation_and_visualization/</guid>
      <description> tags: 分布式共识,Online Tools,区块链 source: https://web3scout.github.io/forcecons-sim/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/&#34;&gt;区块链&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://web3scout.github.io/forcecons-sim/&#34;&gt;https://web3scout.github.io/forcecons-sim/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>一致性</title>
      <link>https://www.linuxzen.com/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Sat, 01 Jan 2022 07:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description> tags: 分布式  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Incomplete</title>
      <link>https://www.linuxzen.com/notes/topics/20211231172037-incomplete/</link>
      <pubDate>Fri, 31 Dec 2021 17:20:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20211231172037-incomplete/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>计划读的书</title>
      <link>https://www.linuxzen.com/notes/topics/20211231171333-%E8%AE%A1%E5%88%92%E8%AF%BB%E7%9A%84%E4%B9%A6/</link>
      <pubDate>Fri, 31 Dec 2021 17:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20211231171333-%E8%AE%A1%E5%88%92%E8%AF%BB%E7%9A%84%E4%B9%A6/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>LSP</title>
      <link>https://www.linuxzen.com/notes/topics/20211231165951-lsp/</link>
      <pubDate>Fri, 31 Dec 2021 16:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20211231165951-lsp/</guid>
      <description> tags: Emacs,Programming Tools source: https://emacs-lsp.github.io/lsp-mode/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074329-programming_tools/&#34;&gt;Programming Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/&#34;&gt;https://emacs-lsp.github.io/lsp-mode/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>org-roam</title>
      <link>https://www.linuxzen.com/notes/topics/20211231142654-org_roam/</link>
      <pubDate>Fri, 31 Dec 2021 14:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20211231142654-org_roam/</guid>
      <description> tags: Org Mode  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Org-roam export backlinks on Hugo</title>
      <link>https://www.linuxzen.com/notes/notes/20211231142642-org_roam_export_backlinks_on_hugo/</link>
      <pubDate>Fri, 31 Dec 2021 14:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231142642-org_roam_export_backlinks_on_hugo/</guid>
      <description>tags: org-roam, Org Mode source:  https://seds.nl/notes/org%5Froam%5Fexport%5Fbacklinks%5Fon%5Fhugo/ https://seds.nl/notes/export%5Forg%5Froam%5Fbacklinks%5Fwith%5Fgohugo/    利用 hugo 的 partial template layouts/partials/backlinks.html
{{ $re := $.File.BaseFileName }} {{ $backlinks := slice }} {{ range .Site.AllPages }} {{ if and (findRE $re .RawContent) (not (eq $re .File.BaseFileName)) }} {{ $backlinks = $backlinks | append . }} {{ end }} {{ end }} &amp;lt;hr&amp;gt; {{ if gt (len $backlinks) 0 }} &amp;lt;div class=&amp;#34;bl-section&amp;#34;&amp;gt; &amp;lt;h4&amp;gt;Links to this note&amp;lt;/h4&amp;gt; &amp;lt;div class=&amp;#34;backlinks&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; {{ range $backlinks }} &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;{{ .</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231142654-org_roam/&#34;&gt;org-roam&lt;/a&gt;, &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://seds.nl/notes/org%5Froam%5Fexport%5Fbacklinks%5Fon%5Fhugo/&#34;&gt;https://seds.nl/notes/org%5Froam%5Fexport%5Fbacklinks%5Fon%5Fhugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://seds.nl/notes/export%5Forg%5Froam%5Fbacklinks%5Fwith%5Fgohugo/&#34;&gt;https://seds.nl/notes/export%5Forg%5Froam%5Fbacklinks%5Fwith%5Fgohugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用-hugo-的-partial-template&#34;&gt;利用 hugo 的 partial template&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;layouts/partials/backlinks.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ $re := $.File.BaseFileName }}
{{ $backlinks := slice }}
{{ range .Site.AllPages }}
   {{ if and (findRE $re .RawContent) (not (eq $re .File.BaseFileName)) }}
	  {{ $backlinks = $backlinks | append . }}
   {{ end }}
{{ end }}

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;hr&lt;/span&gt;&amp;gt;
{{ if gt (len $backlinks) 0 }}
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bl-section&amp;#34;&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt;&amp;gt;Links to this note&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;backlinks&amp;#34;&lt;/span&gt;&amp;gt;
	  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
	   {{ range $backlinks }}
		  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .RelPermalink }}&amp;#34;&lt;/span&gt;&amp;gt;{{ .Title }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
	   {{ end }}
	 &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
{{ else  }}
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bl-section&amp;#34;&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt;&amp;gt;No notes link to this note&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后插入到的 &lt;code&gt;single.html&lt;/code&gt; 就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ partial &amp;#34;backlinks.html&amp;#34; . }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hugo-theme-terminal&#34;&gt;hugo-theme-terminal&lt;/h2&gt;
&lt;p&gt;放在项目的 &lt;code&gt;layouts/partials/comments.html&lt;/code&gt; 中避免污染模版。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Online Tools</title>
      <link>https://www.linuxzen.com/notes/notes/20211231123329-online_tools/</link>
      <pubDate>Fri, 31 Dec 2021 12:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231123329-online_tools/</guid>
      <description> tags: Tools  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162549-tools/&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>RoamResearch</title>
      <link>https://www.linuxzen.com/notes/notes/20211231123253-roamresearch/</link>
      <pubDate>Fri, 31 Dec 2021 12:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231123253-roamresearch/</guid>
      <description> tags: Taking Notes,Online Tools  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123329-online_tools/&#34;&gt;Online Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Roam: Why I Love It and How I Use It</title>
      <link>https://www.linuxzen.com/notes/notes/20211231122919-roam_why_i_love_it_and_how_i_use_it/</link>
      <pubDate>Fri, 31 Dec 2021 12:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231122919-roam_why_i_love_it_and_how_i_use_it/</guid>
      <description> tags: Learning,Taking Notes source: https://www.nateliason.com/blog/roam  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://www.nateliason.com/blog/roam&#34;&gt;https://www.nateliason.com/blog/roam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>How To Take Smart Notes: 10 Principles to Revolutionize Your Note-Taking and Writing</title>
      <link>https://www.linuxzen.com/notes/notes/20211231122658-how_to_take_smart_notes_10_principles_to_revolutionize_your_note_taking_and_writing/</link>
      <pubDate>Fri, 31 Dec 2021 12:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231122658-how_to_take_smart_notes_10_principles_to_revolutionize_your_note_taking_and_writing/</guid>
      <description>tags: Learning,Taking Notes,RoamResearch source: https://fortelabs.co/blog/how-to-take-smart-notes/  Luhmann’s slip-box: build second brain  context &amp;ndash; its network of associations, relationships, and connections to other information.
  But Luhmann often remarked that he never forced himself to do anything he didn’t feel like doing: “I only do what is easy. I only write when I immediately know how to do it. If I falter for a moment, I put the matter aside and do something else” (Luhmann et al.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231123253-roamresearch/&#34;&gt;RoamResearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://fortelabs.co/blog/how-to-take-smart-notes/&#34;&gt;https://fortelabs.co/blog/how-to-take-smart-notes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;luhmann-s-slip-box-build-second-brain&#34;&gt;Luhmann’s slip-box: build second brain&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;context&lt;/em&gt; &amp;ndash; its network of associations, relationships, and connections to other information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;But Luhmann often remarked that he never forced himself to do anything he didn’t feel like doing: “I only do what is easy. I only write when I immediately know how to do it. If I falter for a moment, I put the matter aside and do something else” (Luhmann et al., 1987, 154f).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;10-principles&#34;&gt;10 principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Writing is not the outcome of thinking; it is the medium in which thinking takes place&lt;/li&gt;
&lt;li&gt;Do your work as if writing is the only thing that matters&lt;/li&gt;
&lt;li&gt;Nobody ever starts from scratch&lt;/li&gt;
&lt;li&gt;Our tools and techniques are only as valuable as the workflow&lt;/li&gt;
&lt;li&gt;Standardization enables creativity&lt;/li&gt;
&lt;li&gt;Our work only gets better when exposed to high-quality feedback&lt;/li&gt;
&lt;li&gt;Work on multiple, simultaneous projects&lt;/li&gt;
&lt;li&gt;Organize your notes by context, not by topic&lt;/li&gt;
&lt;li&gt;Always follow the most interesting path&lt;/li&gt;
&lt;li&gt;Save contradictory ideas&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-8-steps-of-taking-smart-notes&#34;&gt;The 8 Steps of Taking Smart Notes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make fleeting notes&lt;/li&gt;
&lt;li&gt;Make literature notes&lt;/li&gt;
&lt;li&gt;Make permanent notes&lt;/li&gt;
&lt;li&gt;Now add your new permanent notes to the slip-box&lt;/li&gt;
&lt;li&gt;Develop your topics, questions and research projects bottom up from within the slip-box&lt;/li&gt;
&lt;li&gt;Decide on a topic to write about from within the slip-box&lt;/li&gt;
&lt;li&gt;Turn your notes into a rough draft&lt;/li&gt;
&lt;li&gt;Edit and proofread your manuscript&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;Principle #8: Organize your notes by context, not by topic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifically, the &lt;em&gt;context&lt;/em&gt; in which it will be used. The primary question when deciding where to put something becomes “In which &lt;em&gt;context&lt;/em&gt; will I want to stumble upon this again?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I always thought I have not much good ideas. But from now on, I think I will not have much good ideas, if I don&amp;rsquo;t do much research. Or I have not done the research in the correct way.
So let me build my second brain.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>How To Take Smart Notes With Org-mode</title>
      <link>https://www.linuxzen.com/notes/notes/20211231122318-how_to_take_smart_notes_with_org_mode/</link>
      <pubDate>Fri, 31 Dec 2021 12:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231122318-how_to_take_smart_notes_with_org_mode/</guid>
      <description>tags: Learning,Taking Notes,org-roam,Org Mode source: https://blog.jethro.dev/posts/how%5Fto%5Ftake%5Fsmart%5Fnotes%5Forg/   Notes aren’t a record of my thinking process. They are my thinking process. – Richard Feynman
  The primary purpose of note-taking should not be for storing ideas, but for developing them. When we take notes, we should ask: “In what context do I want to see this note again?”
 Note-taking for writing:
  Find topic/research question Research/find literature Read and take notes Draw conclusions / outline text Write   Two types of notes:</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231142654-org_roam/&#34;&gt;org-roam&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://blog.jethro.dev/posts/how%5Fto%5Ftake%5Fsmart%5Fnotes%5Forg/&#34;&gt;https://blog.jethro.dev/posts/how%5Fto%5Ftake%5Fsmart%5Fnotes%5Forg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Notes aren’t a record of my thinking process. They are my thinking process. – Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;The primary purpose of note-taking should not be for storing ideas, but for developing them. When we take notes, we should ask: “In what context do I want to see this note again?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note-taking for writing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Find topic/research question&lt;/li&gt;
&lt;li&gt;Research/find literature&lt;/li&gt;
&lt;li&gt;Read and take notes&lt;/li&gt;
&lt;li&gt;Draw conclusions / outline text&lt;/li&gt;
&lt;li&gt;Write&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two types of notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fleeting notes by org-journal.&lt;/li&gt;
&lt;li&gt;Project notes are basically everything else:
&lt;ul&gt;
&lt;li&gt;a talk&lt;/li&gt;
&lt;li&gt;a book&lt;/li&gt;
&lt;li&gt;a paper&lt;/li&gt;
&lt;li&gt;any topic or thought I&amp;rsquo;ve refined from fleeting notes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Workflow with Org-roam:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-x org-roam-node-find RET&lt;/code&gt; create new node from anywhere.&lt;/li&gt;
&lt;li&gt;Link to or create the context nodes as the tag, the context node can be empty.&lt;/li&gt;
&lt;li&gt;Taking notes in one buffer.&lt;/li&gt;
&lt;li&gt;Thereafter if we want to see the accociated notes in a context, we can see the &lt;code&gt;Backlinks&lt;/code&gt; in the context node: &lt;code&gt;M-x org-roam-buffer-toggle RET&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Learning</title>
      <link>https://www.linuxzen.com/notes/notes/20211231122121-learning/</link>
      <pubDate>Fri, 31 Dec 2021 12:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211231122121-learning/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Taking Notes</title>
      <link>https://www.linuxzen.com/notes/projects/20211231122047-taking_notes/</link>
      <pubDate>Fri, 31 Dec 2021 12:20:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20211231122047-taking_notes/</guid>
      <description> tags: Learning,How to Write  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110071453-writing/&#34;&gt;How to Write&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>actix-web extractors 支持提取任意长度的参数</title>
      <link>https://www.linuxzen.com/notes/articles/20211221174651-actix_web_extractor/</link>
      <pubDate>Tue, 21 Dec 2021 17:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20211221174651-actix_web_extractor/</guid>
      <description>tags: Rust  背景 今天看了一下 actix-web 发现该框架支持基于参数的 Extractor，可以非常方便地解析参数（包括 URI、Query、JSON 和 FormData）。
先来看一个在项目 README.md 中的例子：
use actix_web::{get, web, App, HttpServer, Responder}; #[get(&amp;#34;/{id}/{name}/index.html&amp;#34;)] async fn index(web::Path((id, name)): web::Path&amp;lt;(u32, String)&amp;gt;) -&amp;gt; impl Responder { format!(&amp;#34;Hello {}! id:{}&amp;#34;, name, id) } #[actix_web::main] async fn main() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; { HttpServer::new(|| App::new().service(index)) .bind(&amp;#34;127.0.0.1:8080&amp;#34;)? .run() .await } 初看之下觉得很神奇，但细想通过宏实现应该不是特别困难，然后发现其官网还有不是基于宏的运行时调用：
use actix_web::{web, App, HttpRequest, HttpServer, Responder}; async fn greet(req: HttpRequest) -&amp;gt; impl Responder { let name = req.match_info().get(&amp;#34;name&amp;#34;).unwrap_or(&amp;#34;World&amp;#34;); format!</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;今天看了一下 actix-web 发现该框架支持基于参数的 Extractor，可以非常方便地解析参数（包括 URI、Query、JSON 和 FormData）。&lt;/p&gt;
&lt;p&gt;先来看一个在项目 &lt;code&gt;README.md&lt;/code&gt; 中的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; actix_web::{get, web, App, HttpServer, Responder};

&lt;span style=&#34;color:#75715e&#34;&gt;#[get(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{id}/{name}/index.html&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;(web::Path((id, name)): &lt;span style=&#34;color:#a6e22e&#34;&gt;web&lt;/span&gt;::Path&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;, String)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Responder {
	format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello {}! id:{}&amp;#34;&lt;/span&gt;, name, id)
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[actix_web::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	HttpServer::new(&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; App::new().service(index))
		.bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
		.run()
		.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初看之下觉得很神奇，但细想通过宏实现应该不是特别困难，然后发现其官网还有不是基于宏的运行时调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; actix_web::{web, App, HttpRequest, HttpServer, Responder};

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;(req: &lt;span style=&#34;color:#a6e22e&#34;&gt;HttpRequest&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Responder {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; req.match_info().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;).unwrap_or(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;);
	format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello {}!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;name)
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[actix_web::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	HttpServer::new(&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {
		App::new()
			.route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, web::get().to(greet))
			.route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{name}&amp;#34;&lt;/span&gt;, web::get().to(greet))
	})
	.bind((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
	.run()
	.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看下来方法 &lt;code&gt;to&lt;/code&gt; 的签名，实现一个参数的提取也不困难：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self, handler: &lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	   F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	   T: &lt;span style=&#34;color:#a6e22e&#34;&gt;FromRequest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
	   R: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
	   R::Output: &lt;span style=&#34;color:#a6e22e&#34;&gt;Responder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
	   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;R::Output &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Responder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;::Body: &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageBody&lt;/span&gt;,
	   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;R::Output &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Responder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;::Body &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; MessageBody&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;::Error: Into&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BoxError&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
   {
	   self.service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; handler_service(handler);
	   self
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是尝试之后发现 &lt;code&gt;to&lt;/code&gt; 同样可以支持多个参数，基于宏实现对于多个参数的支持相对比较简单，但是对于不通过宏实现对多个参数的解析就很神奇了。&lt;/p&gt;
&lt;h2 id=&#34;原理探究&#34;&gt;原理探究&lt;/h2&gt;
&lt;p&gt;经过深入了解之后发现底层原理大体如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; Handler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;)  -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; FromRequest {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_request&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持空参数的函数当作 Handler 传递
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Handler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; F
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: Fn() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, (): ()) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; {
		(self)()
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持一个参数的函数当作 Handler 传递
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, A, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Handler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(A,), R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; F
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: Fn(A) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, (A,): (A,)) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; {
		(self)(A)
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持两个参数的函数作为 Handler 传递
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, A, B, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Handler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(A, B), R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; F
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: Fn(A, B) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, (A, B): (A, B)) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; {
		(self)(A, B)
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持 0 参数变成 Tuple 后的 from_request 调用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; FromRequest &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; () {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_request&lt;/span&gt;() -&amp;gt; () {
		()
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持一个参数变成 Tuple 后的 from_request 调用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; FromRequest &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (A, )
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; A: &lt;span style=&#34;color:#a6e22e&#34;&gt;FromRequest&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_request&lt;/span&gt;() -&amp;gt; (A,) {
		(A::from_request(), )
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持两个参数变成 Tuple 后的 from_request 调用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; FromRequest &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (A, B)
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;FromRequest&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;FromRequest&lt;/span&gt;,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_request&lt;/span&gt;() -&amp;gt; (A, B) {
		(A::from_request(), B::from_request())
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 委托调用函数，对被委托的函数参数进行解析后调用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, R, F&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(handler: &lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	T: &lt;span style=&#34;color:#a6e22e&#34;&gt;FromRequest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
	R: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static,
{
	handler.call(T::from_request())
}


&lt;span style=&#34;color:#75715e&#34;&gt;// 对 i32 实现 FromRequest 支持参数提取
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; FromRequest &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_request&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
		&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test0&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;(v: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, v);
	v
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test2&lt;/span&gt;(v: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, v2: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
	v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	handle(test0);
	handle(test1);
	handle(test2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本思路就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过一个委托调用的函数，接收一个 &lt;code&gt;trait Object Handler&lt;/code&gt; 来抹掉变长参数；&lt;/li&gt;
&lt;li&gt;为不同长度的参数的函数类型全部实现 &lt;code&gt;Handler&lt;/code&gt;，并将参数变成 Tuple单一参数（通过宏生成）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FromRequest&lt;/code&gt; 实现不同长度 Tuple（通过宏生成），这样可以保证不同长度的参数变成 Tuple 后 &lt;code&gt;from_request&lt;/code&gt; 可正常调用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;源码参见&#34;&gt;源码参见&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/actix/actix-web/blob/17f636a1839850b0141ac0b697e8a74129f8a512/src/extract.rs#L391-L400&#34;&gt;使用宏实现 FromRequest 支持多参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/actix/actix-web/blob/17f636a1839850b0141ac0b697e8a74129f8a512/src/handler.rs#L78-L90&#34;&gt;使用宏实现 Handler 支持多参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/</link>
      <pubDate>Fri, 10 Dec 2021 18:12:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Words of To Kill A Mockingbird</title>
      <link>https://www.linuxzen.com/notes/flashcards/to-kill-a-mockingbird-words/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/flashcards/to-kill-a-mockingbird-words/</guid>
      <description>Words of To Kill A Mockingbird hostess    position ease box interval due     front 2.5 0 0 2021-12-24T14:03:09Z    Back Noun ˈhəʊstəs həʊˈstɛs
  a woman who receives or entertains guests
Synonyms: party-giver/entertainer/hostess
Examples:
 the perfect dinner-party hostess    incurable    position ease box interval due     front 2.5 0 0 2021-12-24T14:02:18Z    Back Adjective ɪnˈkjʊərəb(ə)l</description>
      <content>&lt;h2 id=&#34;words-of-to-kill-a-mockingbird&#34;&gt;Words of To Kill A Mockingbird&lt;/h2&gt;
&lt;h3 id=&#34;hostess&#34;&gt;hostess&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:03:09Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/hostess%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈhəʊstəs&lt;/em&gt;&lt;/a&gt;
&lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/hostess%5Fgb%5F5.mp3&#34;&gt;&lt;em&gt;həʊˈstɛs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a woman who receives or entertains guests&lt;/p&gt;
&lt;p&gt;Synonyms: party-giver/entertainer/hostess&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the perfect dinner-party hostess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;incurable&#34;&gt;incurable&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:02:18Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/incurable%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈkjʊərəb(ə)l&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a sick person or a disease) not able to be cured&lt;/p&gt;
&lt;p&gt;Synonyms: untreatable/inoperable/irremediable/beyond cure&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;even when the sick are incurable they are never untreatable&lt;/li&gt;
&lt;li&gt;incurable diseases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/incurable%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈkjʊərəb(ə)l&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a person who cannot be cured.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;squat&#34;&gt;squat&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:01:50Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/squatt%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;skwɒt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;crouch or sit with one&amp;rsquo;s knees bent and one&amp;rsquo;s heels close to or touching one&amp;rsquo;s buttocks or the back of one&amp;rsquo;s thighs&lt;/p&gt;
&lt;p&gt;Synonyms: crouch/crouch down/hunker/hunker down/sit on one&amp;rsquo;s haunches/sit on one&amp;rsquo;s heels/sit/bend down/bob down/duck down/hunch/cower/cringe&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I squatted down in front of him&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unlawfully occupy an uninhabited building or settle on a piece of land&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eight families are squatting in the house&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/squatt%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;skwɒt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;short and thickset; disproportionately broad or wide&lt;/p&gt;
&lt;p&gt;Synonyms: stocky/dumpy/stubby/stumpy/short/thickset/heavily built/sturdy/sturdily built/heavyset/chunky/solid/low/stumpy/short/small/stocky/stunted&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he was muscular and squat&lt;/li&gt;
&lt;li&gt;a squat grey house&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/squatt%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;skwɒt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a squatting position.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a building occupied by people living in it without the legal right to do so&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a basement room in a North London squat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I didn&amp;rsquo;t know squat about writing plays&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gossip&#34;&gt;gossip&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:01:30Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/gossip%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɡɒsɪp&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;casual or unconstrained conversation or reports about other people, typically involving details that are not confirmed as being true&lt;/p&gt;
&lt;p&gt;Synonyms: chat/talk/conversation/chatter/heart-to-heart/tête-à-tête/blether/blather&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he became the subject of much local gossip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/gossip%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɡɒsɪp&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;engage in gossip&lt;/p&gt;
&lt;p&gt;Synonyms: spread rumours/spread gossip/circulate rumours/spread stories/tittle-tattle/tattle/talk/whisper/tell tales/muckrake/chat/talk/converse/speak to each other/discuss things/have a talk/have a chat/have a tête-à-tête/have a conversation/engage in conversation&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they would start gossiping about her as soon as she left&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;choir&#34;&gt;choir&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:00:35Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/choir%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkwʌɪə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an organized group of singers, especially one that takes part in church services or performs in public&lt;/p&gt;
&lt;p&gt;Synonyms: singers/chorus/chorale&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a church choir&lt;/li&gt;
&lt;li&gt;the choir of the University of Ulster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;royal&#34;&gt;royal&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:00:19Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/royal%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈrɔɪəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;having the status of a king or queen or a member of their family&lt;/p&gt;
&lt;p&gt;Synonyms: royal/regal/monarchal/monarchial/monarchical/sovereign/kingly/queenly/princely/majestic&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contributors included members of the royal family&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/royal%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈrɔɪəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a member of the royal family&lt;/p&gt;
&lt;p&gt;Synonyms: monarch/sovereign/king/queen/emperor/empress/tsar/tsarina/prince/princess/potentate/head of state/leader/chief/ruler/lord/overlord&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the royals are coming under the TV microscope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a paper size, 636 × 480 mm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a system of change-ringing using ten bells.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;assured&#34;&gt;assured&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:00:12Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/assured%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;əˈʃɔːd&lt;/em&gt;&lt;/a&gt;
&lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/assured%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;əˈʃʊəd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;confident&lt;/p&gt;
&lt;p&gt;Synonyms: self-confident/confident/self-assured/sure of oneself/positive/assertive/self-possessed/self-reliant/poised/filled with aplomb/phlegmatic/level-headed/cool-headed&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an extremely assured performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protected against discontinuance or change&lt;/p&gt;
&lt;p&gt;Synonyms: guaranteed/certain/sure/secure/reliable/dependable/solid/sound/established&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an assured tenancy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;territorial&#34;&gt;territorial&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T14:00:04Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/territorial%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˌtɛrɪˈtɔːrɪəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;relating to the ownership of an area of land or sea&lt;/p&gt;
&lt;p&gt;Synonyms: geographical/topographical/zonal/territorial/topical&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;territorial disputes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;relating to a particular territory, district, or locality&lt;/p&gt;
&lt;p&gt;Synonyms: local/localized/devolved&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a bizarre territorial rite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/territorial%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˌtɛrɪˈtɔːrɪəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(in the UK) a member of the Territorial Army.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prerogative&#34;&gt;prerogative&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:59:28Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/prerogative%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;prɪˈrɒɡətɪv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a right or privilege exclusive to a particular individual or class&lt;/p&gt;
&lt;p&gt;Synonyms: entitlement/right/privilege/advantage/due/birthright&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in some countries, higher education is predominantly the prerogative of the rich&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/prerogative%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;prɪˈrɒɡətɪv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;arising from the prerogative of the Crown (usually delegated to the government or the judiciary) and based in common law rather than statutory law&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the monarch retained the formal prerogative power to appoint the Prime Minister&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;amused&#34;&gt;amused&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:59:12Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/amused%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;əˈmjuːzd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;finding something funny or entertaining&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;people looked on with amused curiosity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heredity&#34;&gt;heredity&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:58:58Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/heredity%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;hɪˈrɛdɪti&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the passing on of physical or mental characteristics genetically from one generation to another&lt;/p&gt;
&lt;p&gt;Synonyms: congenital characteristics/congenital traits/genetics/genetic make-up/genes&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the relative influence of heredity and environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the inheritance of a title, office, or right&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a second chamber whose membership is largely based on heredity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;myopic&#34;&gt;myopic&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:58:47Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/myopic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;mʌɪˈɒpɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;short-sighted&lt;/p&gt;
&lt;p&gt;Synonyms: short-sighted&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;most myopic children can be fitted with glasses to correct their vision&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;streak&#34;&gt;streak&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:58:36Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/streak%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;striːk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a long, thin line or mark of a different substance or colour from its surroundings&lt;/p&gt;
&lt;p&gt;Synonyms: band/line/strip/stripe/vein/slash/bar/mark/smear/smudge/stain/blotch&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a streak of oil&lt;/li&gt;
&lt;li&gt;she could see white streaks in his beard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an element of a specified kind in someone&amp;rsquo;s character&lt;/p&gt;
&lt;p&gt;Synonyms: element/vein/trace/touch/dash/strain&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there&amp;rsquo;s a streak of insanity in the family&lt;/li&gt;
&lt;li&gt;Lucy had a ruthless streak&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an act of running naked in a public place so as to shock or amuse others&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a streak for charity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/streak%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;striːk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cover (a surface) with streaks&lt;/p&gt;
&lt;p&gt;Synonyms: stripe/band/bar/fleck/mark/daub/smear/smudge/stain&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tears streaking her face, Cynthia looked up&lt;/li&gt;
&lt;li&gt;his beard was streaked with grey&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;move very fast in a specified direction&lt;/p&gt;
&lt;p&gt;Synonyms: race/dash/rush/run/sprint/bolt/dart/gallop/career/charge/shoot/hurtle/hare/bound/fly/speed/zoom/go hell for leather/plunge/dive/whisk/scurry/scuttle/scamper/scramble&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the cat streaked across the street&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run naked in a public place so as to shock or amuse others&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the singer admitted to streaking in his home town in the seventies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;incestuous&#34;&gt;incestuous&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:58:18Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/incestuous%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ɪnˈsɛstjʊəs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;involving or guilty of incest&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the child of an incestuous relationship&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of human relations) excessively close and resistant to outside influence&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the incestuous nature of literary journalism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;utterly&#34;&gt;utterly&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:57:54Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adverb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/utterly%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈʌtəli&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;completely and without qualification; absolutely&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he looked utterly ridiculous&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kin&#34;&gt;kin&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:57:38Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/kin%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kɪn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&amp;rsquo;s family and relations&lt;/p&gt;
&lt;p&gt;Synonyms: relatives/relations/family/family members/kindred/connections/clan/tribe/kith and kin/one&amp;rsquo;s own flesh and blood/nearest and dearest&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;many elderly people have no kin to turn to for assistance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/kin%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kɪn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a person) related&lt;/p&gt;
&lt;p&gt;Synonyms: related/akin/allied/close/connected with/cognate with&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he was kin to the brothers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;preoccupation&#34;&gt;preoccupation&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:57:22Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/preoccupation%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;prɪˌɒkjʊˈpeɪʃn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the state or condition of being preoccupied or engrossed with something&lt;/p&gt;
&lt;p&gt;Synonyms: pensiveness/concentration/engrossment/absorption/self-absorption/musing/thinking/thinking of other things/deep thought/brown study/brooding&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he began to overcome his preoccupation with germs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;moral&#34;&gt;moral&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:56:54Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/morrel%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈmɒrəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;concerned with the principles of right and wrong behaviour&lt;/p&gt;
&lt;p&gt;Synonyms: virtuous/good/righteous/upright/upstanding/high-minded/right-minded/principled/proper/honourable/honest/just/noble/incorruptible/scrupulous/respectable/decent/irreproachable/truthful/law-abiding/clean-living/chaste/pure/blameless/sinless&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the moral dimensions of medical intervention&lt;/li&gt;
&lt;li&gt;a moral judgement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;holding or manifesting high principles for proper conduct&lt;/p&gt;
&lt;p&gt;Synonyms: virtuous/good/righteous/upright/upstanding/high-minded/right-minded/principled/proper/honourable/honest/just/noble/incorruptible/scrupulous/respectable/decent/irreproachable/truthful/law-abiding/clean-living/chaste/pure/blameless/sinless&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he prides himself on being a highly moral and ethical person&lt;/li&gt;
&lt;li&gt;he is a caring, moral man&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/morrel%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈmɒrəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a lesson that can be derived from a story or experience&lt;/p&gt;
&lt;p&gt;Synonyms: lesson/message/meaning/significance/signification/import/point/precept/teaching&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the moral of this story was that one must see the beauty in what one has&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;standards of behaviour; principles of right and wrong&lt;/p&gt;
&lt;p&gt;Synonyms: moral code/code of ethics/moral standards/moral values/principles/principles of right and wrong/rules of conduct/principles of behaviour/standards of behaviour/standards/morality/sense of morality/scruples/ideals&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the corruption of public morals&lt;/li&gt;
&lt;li&gt;they believe addicts have no morals and cannot be trusted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oblique&#34;&gt;oblique&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:56:45Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/oblique%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ə(ʊ)ˈbliːk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;neither parallel nor at right angles to a specified or implied line; slanting&lt;/p&gt;
&lt;p&gt;Synonyms: slanting/slanted/sloping/at an angle/angled/diagonal/aslant/slant/slantwise/sloped/inclined/inclining/tilted/tilting/atilt/skew/on the skew/askew&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we sat on the settee oblique to the fireplace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not expressed or done in a direct way&lt;/p&gt;
&lt;p&gt;Synonyms: indirect/inexplicit/roundabout/circuitous/circumlocutory/implicit/implied/elliptical/evasive/backhanded&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he issued an oblique attack on the President&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;denoting any case other than the nominative or vocative.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/oblique%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ə(ʊ)ˈbliːk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Synonyms: slash/forward slash/solidus/oblique stroke/backslash/diagonal/virgule/slant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an oblique muscle&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it is the obliques and abdominals which create the well-trained look&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;glove&#34;&gt;glove&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:56:34Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/glove%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɡlʌv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a covering for the hand worn for protection against cold or dirt and typically having separate parts for each finger and the thumb&lt;/p&gt;
&lt;p&gt;Synonyms: mitten/mitt/gauntlet&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rubber gloves&lt;/li&gt;
&lt;li&gt;a pair of black leather gloves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/glove%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɡlʌv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a wicketkeeper, baseball catcher, etc.) catch, deflect, or touch (the ball) with a gloved hand&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vaughan gloved it and got to his knees to throw&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;revive&#34;&gt;revive&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:56:20Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/revive%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;rɪˈvʌɪv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;restore to life or consciousness&lt;/p&gt;
&lt;p&gt;Synonyms: resuscitate/bring round/bring to life/bring back/bring someone to their senses/bring someone back to their senses/bring back to consciousness/bring back from the edge of death/regain consciousness/recover consciousness/come round/come to life/come to one&amp;rsquo;s senses/recover/awake/wake up&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;both men collapsed, but were revived&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;soberly&#34;&gt;soberly&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:56:06Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adverb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/soberly%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈsəʊbəli&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;in a serious, sensible, and solemn manner&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we must soberly assess their actions&lt;/li&gt;
&lt;li&gt;you spoke very soberly and seriously in your statement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with moderation or self-restraint; temperately&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the citizens lived soberly and simply&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;persevere&#34;&gt;persevere&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:55:58Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/persevere%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌpəːsɪˈvɪə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;continue in a course of action even in the face of difficulty or with little or no indication of success&lt;/p&gt;
&lt;p&gt;Synonyms: persist/continue/carry on/go on/keep on/keep going/not give up/struggle on/hammer away/be persistent/be determined/follow something through/see something through/keep at it/show determination/press ahead/press on/stay with something/not take no for an answer/be tenacious/be pertinacious/be patient/stand one&amp;rsquo;s ground/stand fast/stand firm/hold on/hold out/go the distance/stay the course/plod on/plough on/grind away/stop at nothing/leave no stone unturned&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;his family persevered with his treatment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tale&#34;&gt;tale&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:55:39Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/tael%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;teɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a fictitious or true narrative or story, especially one that is imaginatively recounted&lt;/p&gt;
&lt;p&gt;Synonyms: story/short story/narrative/anecdote/report/account/record/history/rumour/gossip/hearsay/slander/talk/allegation/tittle-tattle/libel/story&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a delightful children&amp;rsquo;s tale&lt;/li&gt;
&lt;li&gt;tales of witches and warlocks&lt;/li&gt;
&lt;li&gt;she enjoyed hearing others tell their tales&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a number or total&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an exact tale of the dead bodies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;grin&#34;&gt;grin&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:55:24Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/grin%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɡrɪn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;smile broadly&lt;/p&gt;
&lt;p&gt;Synonyms: smile/smile broadly/beam/grin from ear to ear/smile from ear to ear/grin like a Cheshire cat/smirk&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dennis appeared, grinning cheerfully&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/grin%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɡrɪn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a broad smile&lt;/p&gt;
&lt;p&gt;Synonyms: smile/broad smile/smirk&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a silly grin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gallop&#34;&gt;gallop&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:54:51Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/gallop%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɡaləp&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the fastest pace of a horse or other quadruped, with all the feet off the ground together in each stride&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the horse broke into a furious gallop&lt;/li&gt;
&lt;li&gt;a mounted police charge at full gallop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/gallop%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɡaləp&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a horse) go at the pace of a gallop&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we galloped along the sand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proceed at great speed&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t gallop through your speech&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throaty&#34;&gt;throaty&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:54:23Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/throaty%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈθrəʊti&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a voice or other sound) deep and husky&lt;/p&gt;
&lt;p&gt;Synonyms: gravelly/husky/rough/guttural/deep/thick/gruff/growly/growling/hoarse/croaky/croaking&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rich, throaty laughter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stun&#34;&gt;stun&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:53:43Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stun%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stʌn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;knock unconscious or into a dazed or semi-conscious state&lt;/p&gt;
&lt;p&gt;Synonyms: daze/stupefy/knock senseless/knock unconscious/knock out/lay out&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the man was stunned by a blow to the head&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;astonish or shock (someone) so that they are temporarily unable to react&lt;/p&gt;
&lt;p&gt;Synonyms: astound/amaze/astonish/startle/take someone&amp;rsquo;s breath away/dumbfound/stupefy/overwhelm/stagger/shock/confound/take aback/shake up&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the community was stunned by the tragedy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fidget&#34;&gt;fidget&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:52:55Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/fidget%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈfɪdʒɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make small movements, especially of the hands and feet, through nervousness or impatience&lt;/p&gt;
&lt;p&gt;Synonyms: move restlessly/wriggle/squirm/twitch/jiggle/writhe/twist/shuffle/be jittery/be anxious/be agitated&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the audience began to fidget and whisper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/fidget%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈfɪdʒɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a person who fidgets.&lt;/p&gt;
&lt;p&gt;Synonyms: restless person/bundle of nerves&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;curt&#34;&gt;curt&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:52:40Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/curt%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kəːt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rudely brief&lt;/p&gt;
&lt;p&gt;Synonyms: terse/brusque/abrupt/clipped/blunt/short/monosyllabic/summary/snappy/snappish/sharp/crisp/tart&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;his reply was curt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sip&#34;&gt;sip&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:52:30Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sip%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sɪp&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;drink (something) by taking small mouthfuls&lt;/p&gt;
&lt;p&gt;Synonyms: drink slowly/drink/taste/sample&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I sat sipping coffee&lt;/li&gt;
&lt;li&gt;she sipped at her tea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sip%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sɪp&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a small mouthful of liquid&lt;/p&gt;
&lt;p&gt;Synonyms: mouthful/swallow/drink/drop/dram/nip&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she took a sip of the red wine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disgust&#34;&gt;disgust&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:52:15Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/disgust%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;dɪsˈɡʌst&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a feeling of revulsion or strong disapproval aroused by something unpleasant or offensive&lt;/p&gt;
&lt;p&gt;Synonyms: revulsion/repugnance/aversion/distaste/abhorrence/loathing/detestation/odium/execration/horror&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the sight filled her with disgust&lt;/li&gt;
&lt;li&gt;some of the audience walked out in disgust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/disgust%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;dɪsˈɡʌst&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cause (someone) to feel revulsion or strong disapproval&lt;/p&gt;
&lt;p&gt;Synonyms: revolt/repel/repulse/sicken/nauseate/cause to feel nauseous/make shudder/turn someone&amp;rsquo;s stomach/make someone&amp;rsquo;s gorge rise/outrage/shock/horrify/appal/scandalize/offend/affront/dismay/displease/dissatisfy&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they were disgusted by the violence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sting&#34;&gt;sting&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:51:57Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sting%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stɪŋ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a small sharp-pointed organ at the end of the abdomen of bees, wasps, ants, and scorpions, capable of inflicting a painful or dangerous wound by injecting poison.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a carefully planned operation, typically one involving deception&lt;/p&gt;
&lt;p&gt;Synonyms: swindle/fraud/piece of deception/trickery/cheat/bit of sharp practice&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;five blackmailers were jailed last week after they were snared in a police sting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sting%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stɪŋ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wound or pierce with a sting&lt;/p&gt;
&lt;p&gt;Synonyms: prick/wound/injure/hurt&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he was stung by a jellyfish&lt;/li&gt;
&lt;li&gt;a nettle stings if you brush it lightly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;swindle or exorbitantly overcharge (someone)&lt;/p&gt;
&lt;p&gt;Synonyms: swindle/defraud/cheat/fleece/gull&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I had to buy some boxer shorts at the last minute and got stung for £42.50!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;convey&#34;&gt;convey&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:51:34Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconvey%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kənˈveɪ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;transport or carry to a place&lt;/p&gt;
&lt;p&gt;Synonyms: transport/carry/bring/take/fetch/bear/move/ferry/shuttle/shift/transfer&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pipes were laid to convey water to the house&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transfer the title to (property)&lt;/p&gt;
&lt;p&gt;Synonyms: transfer/give the right of/give the title of/grant/cede/devolve/lease&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no application for registration is required when the property is conveyed following a court order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comb&#34;&gt;comb&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:51:00Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/comb%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kəʊm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a strip of plastic, metal, or wood with a row of narrow teeth, used for untangling or arranging the hair.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a device for separating and dressing textile fibres.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the red fleshy crest on the head of a domestic fowl, especially a cock&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a grey-speckled hen with a red comb and wattles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/comb%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kəʊm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;untangle or arrange (the hair) by drawing a comb through it&lt;/p&gt;
&lt;p&gt;Synonyms: groom/untangle/disentangle/smooth out/straighten/arrange/neaten/tidy/dress/rake&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she combed her hair and put some lipstick on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prepare (wool, flax, or cotton) for manufacture with a comb&lt;/p&gt;
&lt;p&gt;Synonyms: separate/dress/card/tease/hackle/heckle/hatchel&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the wool had been cleaned and combed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search carefully and systematically&lt;/p&gt;
&lt;p&gt;Synonyms: search/scour/look around in/explore/sweep/probe/hunt through/look through/scrabble about in/scrabble around in/root about in/root around in/ferret in/ferret about in/ferret in/ferret around in/rummage about in/rummage round in/rummage around in/rummage in/rummage through/forage through/fish about in/fish around in/poke about in/poke around in/dig in/grub about in/grub around in/delve in/go through/sift through/rake/rifle through/ransack/turn over/go through with a fine-tooth comb&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;police combed the area for the murder weapon&lt;/li&gt;
&lt;li&gt;his mother combed through the cardboard boxes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;firm&#34;&gt;firm&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:49:56Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/firm%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fəːm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;having a solid, almost unyielding surface or structure&lt;/p&gt;
&lt;p&gt;Synonyms: hard/solid/unyielding/resistant&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the bed should be reasonably firm, but not too hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strongly felt and unlikely to change&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he retains a firm belief in the efficacy of prayer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/firm%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fəːm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make more solid or resilient&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how can I firm up a sagging bustline?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Adverb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/firm%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fəːm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;in a resolute and determined manner&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Chancellor has held firm to tough economic policies&lt;/li&gt;
&lt;li&gt;she will stand firm against the proposal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/firm%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fəːm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a business concern, especially one involving a partnership of two or more people&lt;/p&gt;
&lt;p&gt;Synonyms: company/business/concern/enterprise/venture/undertaking/house/establishment/organization/corporation/conglomerate/franchise/cooperative/office/bureau/service/agency/practice/partnership/consortium/syndicate&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state support for small firms&lt;/li&gt;
&lt;li&gt;a law firm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inflection&#34;&gt;inflection&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:49:48Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/inflection%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈflɛkʃn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a change in the form of a word (typically the ending) to express a grammatical function or attribute such as tense, mood, person, number, case, and gender&lt;/p&gt;
&lt;p&gt;Synonyms: conjugation/declension&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a set of word forms differing only in respect of inflections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the modulation of intonation or pitch in the voice&lt;/p&gt;
&lt;p&gt;Synonyms: stress/cadence/rhythm/accentuation/intonation/emphasis/modulation/metre/measure/rise and fall/swing/lilt/beat/change of pitch/change of tone/change of timbre&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she spoke slowly and without inflection&lt;/li&gt;
&lt;li&gt;the variety of his vocal inflections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a change of curvature from convex to concave at a particular point on a curve&lt;/p&gt;
&lt;p&gt;Synonyms: curving/curvature/bending/turning&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the point of inflection of the bell-shaped curve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elusive&#34;&gt;elusive&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:49:12Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/elusive%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪˈl(j)uːsɪv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;difficult to find, catch, or achieve&lt;/p&gt;
&lt;p&gt;Synonyms: difficult to catch/difficult to find/difficult to track down&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;success will become ever more elusive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;isolation&#34;&gt;isolation&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:48:59Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/isolation%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ʌɪsəˈleɪʃən&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the process or fact of isolating or being isolated&lt;/p&gt;
&lt;p&gt;Synonyms: separation/segregation/setting apart/keeping apart/solitariness/loneliness/friendlessness/lack of contact/exile/sense of exile/aloneness/remoteness/seclusion/loneliness/inaccessibility&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;isolation from family and friends may also contribute to anxiety&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;neglect&#34;&gt;neglect&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:48:38Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/neglect%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;nɪˈɡlɛkt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fail to care for properly&lt;/p&gt;
&lt;p&gt;Synonyms: uncared for/mistreated/abandoned/forsaken/run down/derelict/dilapidated/tumbledown/ramshackle/untended/unmaintained/fail to look after/fail to care for/fail to provide for/leave alone/abandon&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the old churchyard has been sadly neglected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/neglect%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;nɪˈɡlɛkt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the state of being uncared for&lt;/p&gt;
&lt;p&gt;Synonyms: disrepair/dilapidation/deterioration/shabbiness/disuse/abandonment&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the place had a hopeless air of neglect&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;breeding&#34;&gt;breeding&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:48:18Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/breeding%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈbriːdɪŋ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the mating and production of offspring by animals&lt;/p&gt;
&lt;p&gt;Synonyms: reproduction/reproducing/procreation/multiplying/propagation/rearing/raising/nurturing&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the flooding of the rivers is a trigger for breeding to start&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the good manners regarded as characteristic of the aristocracy and conferred by heredity&lt;/p&gt;
&lt;p&gt;Synonyms: upbringing/rearing/manners/good manners/gentility/refinement/cultivation/culture/polish/civility/urbanity&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;that&amp;rsquo;s the kind of modesty you get from good breeding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;slam&#34;&gt;slam&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:48:05Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/slam%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;slam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;shut (a door, window, or lid) forcefully and loudly&lt;/p&gt;
&lt;p&gt;Synonyms: bang/close with a bang/shut with a bang/close noisily/shut noisily/close with a crash/shut with a crash/close with force/shut with force/fling shut&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he slams the door behind him as he leaves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;criticize severely&lt;/p&gt;
&lt;p&gt;Synonyms: criticize/find fault with/censure/denounce/condemn/arraign/attack/lambast/pillory/disapprove of/carp at/cavil at/rail against/inveigh against/cast aspersions on/pour scorn on/disparage/denigrate/deprecate/malign/vilify/besmirch/run down/give a bad press to&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the new TV soap was slammed as being cynical and irresponsible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a telephone company) take over the account of (a telephone customer) without their permission&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they will provide compensation in cases where it can be shown that the customer had been slammed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/slam%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;slam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a loud bang caused by the forceful shutting of something such as a door&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the door closed with a slam&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prison&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if he challenged the judge, he was definitely going to the slam&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a poetry contest in which competitors recite their entries and are judged by members of the audience, the winner being elected after several elimination rounds&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a poetry slam&lt;/li&gt;
&lt;li&gt;slams will be spreading out to suburban poetry clubs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a grand slam (all thirteen tricks) or small slam (twelve tricks), for which bonus points are scored if bid and made.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;venue&#34;&gt;venue&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:47:44Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/venue%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈvɛnjuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the place where something happens, especially an organized event such as a concert, conference, or sports competition&lt;/p&gt;
&lt;p&gt;Synonyms: place/site/spot/area&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the club is the city&amp;rsquo;s main venue for live music&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;impress&#34;&gt;impress&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:47:12Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/impress%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪmˈprɛs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make (someone) feel admiration and respect&lt;/p&gt;
&lt;p&gt;Synonyms: make an impression on/have an impact on/influence/affect/leave a mark on/move/stir/rouse/excite/inspire/galvanize&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they immediately impressed the judges&lt;/li&gt;
&lt;li&gt;I was always impressed by the quality of the students&lt;/li&gt;
&lt;li&gt;he has to put on an act to impress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make a mark or design on (an object) using a stamp or seal&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the company should impress the cards with a stamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fix an idea in the mind of (someone)&lt;/p&gt;
&lt;p&gt;Synonyms: emphasize to/stress to/bring home to/establish in someone&amp;rsquo;s mind/fix deeply in someone&amp;rsquo;s mind/instil in/inculcate in/drum into/knock into/drive into/din into/ingrain in/leave in no doubt&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nobody impressed on me the need to save&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;apply (an electric current or potential) from an external source.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/impress%5Fgb%5F4.mp3&#34;&gt;&lt;em&gt;ˈɪmprɛs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an act of making an impression or mark&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bluish marks made by the impress of his fingers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/impress%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪmˈprɛs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;force (someone) to serve in an army or navy&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a number of Poles, impressed into the German army&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;venerable&#34;&gt;venerable&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:46:53Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/venerable%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈvɛn(ə)rəbl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;accorded a great deal of respect, especially because of age, wisdom, or character&lt;/p&gt;
&lt;p&gt;Synonyms: respected/venerated/revered/reverenced/worshipped/honoured/esteemed/hallowed/august/distinguished/acclaimed/celebrated/lionized&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a venerable statesman&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inaudible&#34;&gt;inaudible&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:46:41Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/inaudible%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ɪnˈɔːdɪb(ə)l&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unable to be heard&lt;/p&gt;
&lt;p&gt;Synonyms: unheard/not heard/out of earshot&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inaudible pulses of high-frequency sound&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cord&#34;&gt;cord&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:45:58Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/cord%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kɔːd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;thin, flexible string or rope made from several twisted strands&lt;/p&gt;
&lt;p&gt;Synonyms: string/thread/thong/lace/ribbon/strap/tape/tie/line/rope/cable/wire/ligature&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hang the picture from a rail on a length of cord&lt;/li&gt;
&lt;li&gt;my hands were tied with cord&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ribbed fabric, especially corduroy&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the cloth for their suits was cord&lt;/li&gt;
&lt;li&gt;cord jackets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a measure of cut wood (usually 128 cu. ft, 3.62 cubic metres).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/cord%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kɔːd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;attach a cord to&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you will need to cord the blind&lt;/li&gt;
&lt;li&gt;a corded curtain track&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;facade&#34;&gt;facade&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:45:40Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/facade%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fəˈsɑːd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the principal front of a building, that faces on to a street or open space&lt;/p&gt;
&lt;p&gt;Synonyms: front/frontage/face/aspect/elevation/exterior/outside&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the house has a half-timbered facade&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a deceptive outward appearance&lt;/p&gt;
&lt;p&gt;Synonyms: show/front/appearance/false display/pretence/simulation/affectation/semblance/illusion/posture/pose/sham/fake/act/masquerade/charade/guise/mask/cloak/veil/veneer&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;her flawless public facade masked private despair&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disgrace&#34;&gt;disgrace&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:45:25Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/disgrace%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;dɪsˈɡreɪs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;loss of reputation or respect as the result of a dishonourable action&lt;/p&gt;
&lt;p&gt;Synonyms: dishonour/shame/ignominy/discredit/degradation/disrepute/ill-repute/infamy/scandal/stigma/odium/opprobrium/obloquy/condemnation/vilification/contempt/disrespect/disapproval/disfavour/disapprobation/in disgrace/unpopular/in bad odour&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he left the army in disgrace&lt;/li&gt;
&lt;li&gt;if he&amp;rsquo;d gone back it would have brought disgrace on the family&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/disgrace%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;dɪsˈɡreɪs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bring shame or discredit on&lt;/p&gt;
&lt;p&gt;Synonyms: bring shame on/shame/dishonour/discredit/bring into disrepute/degrade/debase/defame/stigmatize/taint/sully/tarnish/besmirch/stain/blacken/drag through the mire/drag through the mud/give a bad name to/put in a bad light/reflect badly on&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you have disgraced the family name&lt;/li&gt;
&lt;li&gt;John stiffened his jaw so he wouldn&amp;rsquo;t disgrace himself by crying&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bulb&#34;&gt;bulb&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:45:07Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/bulb%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;bʌlb&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a rounded underground storage organ present in some plants, notably those of the lily family, consisting of a short stem surrounded by fleshy scale leaves or leaf bases, lying dormant over winter.&lt;/p&gt;
&lt;p&gt;Synonyms: tuber/corm/rhizome&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a light bulb.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an expanded part of a glass tube such as that forming the reservoir of a thermometer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oblivious&#34;&gt;oblivious&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:44:39Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/oblivious%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;əˈblɪvɪəs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;not aware of or concerned about what is happening around one&lt;/p&gt;
&lt;p&gt;Synonyms: unaware/unconscious/heedless/unmindful/insensible/unheeding/ignorant/blind/deaf/unsuspecting/unobservant/disregardful/unconcerned/impervious/unaffected/insensitive/indifferent/detached/removed&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she became absorbed, oblivious to the passage of time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reveal&#34;&gt;reveal&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:44:07Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/reveal%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;rɪˈviːl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make (previously unknown or secret information) known to others&lt;/p&gt;
&lt;p&gt;Synonyms: divulge/disclose/tell/let out/let slip/let drop/let fall/give away/give the game away/give the show away/blurt/blurt out/babble/give out/release/leak/betray/open up/unveil/bring out into the open&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brenda was forced to reveal Robbie&amp;rsquo;s whereabouts&lt;/li&gt;
&lt;li&gt;he revealed that he had received death threats&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/reveal%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;rɪˈviːl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(in a film or television programme) a final revelation of information that has previously been kept from the characters or viewers&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the big reveal at the end of the movie answers all questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/reveal%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;rɪˈviːl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;either side surface of an aperture in a wall for a door or window&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the gate can be easily fitted to the face or reveal of a window or door aperture&lt;/li&gt;
&lt;li&gt;the deep reveals of small square windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysterious&#34;&gt;mysterious&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:43:30Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/mysterious%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;mɪˈstɪərɪəs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;difficult or impossible to understand, explain, or identify&lt;/p&gt;
&lt;p&gt;Synonyms: puzzling/strange/peculiar/curious/funny/queer/odd/weird/bizarre/mystifying/inexplicable/baffling/perplexing/bewildering/confusing/uncanny/dark/impenetrable/incomprehensible/unexplainable/unfathomable/Delphic/sibylline/unaccountable/insoluble/obscure&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;his colleague had vanished in mysterious circumstances&lt;/li&gt;
&lt;li&gt;a mysterious benefactor provided the money&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;obedience&#34;&gt;obedience&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:42:49Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/obedience%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ə(ʊ)ˈbiːdɪəns&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;compliance with an order, request, or law or submission to another&amp;rsquo;s authority&lt;/p&gt;
&lt;p&gt;Synonyms: compliance/acquiescence/tractability/tractableness/amenability&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;children were taught to show their parents obedience&lt;/li&gt;
&lt;li&gt;obedience to moral standards&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sickening&#34;&gt;sickening&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:41:59Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sickening%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈsɪk(ə)nɪŋ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;causing or liable to cause a feeling of nausea or disgust&lt;/p&gt;
&lt;p&gt;Synonyms: nauseating/stomach-turning/stomach-churning/repulsive/revolting/disgusting/repellent/repugnant/appalling/abominable/hideous/horrible/awful/dreadful/terrible/obnoxious/nauseous/vile/nasty/foul/loathsome/offensive/objectionable/off-putting/distasteful/disagreeable/uninviting&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a sickening stench of blood&lt;/li&gt;
&lt;li&gt;she hit the ground with a sickening thud&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;definite&#34;&gt;definite&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:41:30Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/definite%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈdɛf(ɪ)nɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;clearly stated or decided; not vague or doubtful&lt;/p&gt;
&lt;p&gt;Synonyms: explicit/specific/express/precise/exact/defined/well defined/clear-cut/unmistakable/irrefutable/unequivocal/unambiguous/certain/undisputed/decided/marked/distinct/unquestioned/not in question/not in doubt&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we had no definite plans&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comic&#34;&gt;comic&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:40:50Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/comic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkɒmɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;causing or meant to cause laughter&lt;/p&gt;
&lt;p&gt;Synonyms: humorous/funny/droll/amusing/entertaining/diverting/absurd/ridiculous/comical/chucklesome/farcical/silly/slapstick/hilarious/uproarious/hysterical/hysterically funny/zany&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a comic monologue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/comic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkɒmɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a comedian&lt;/p&gt;
&lt;p&gt;Synonyms: comedian/comedienne/funny man/funny woman/comedy actor/comedy actress/humorist/wit/wag/quipster&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he is training as a stand-up comic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a periodical containing comic strips, intended chiefly for children&lt;/p&gt;
&lt;p&gt;Synonyms: cartoon paper/comic paper/funny magazine/comic book/graphic novel&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the shop sold newspapers and children&amp;rsquo;s comics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;incapable&#34;&gt;incapable&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:40:06Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/incapable%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈkeɪpəbl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unable to do or achieve (something)&lt;/p&gt;
&lt;p&gt;Synonyms: unable to/not capable of/lacking the ability to/not equipped to/lacking the experience to&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wilson blushed and was incapable of speech&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unable to behave rationally or manage one&amp;rsquo;s affairs&lt;/p&gt;
&lt;p&gt;Synonyms: incapacitated/helpless/powerless/impotent&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the pilot may become incapable from the lack of oxygen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stale&#34;&gt;stale&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:39:42Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stale%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;steɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of food) no longer fresh and pleasant to eat; hard, musty, or dry&lt;/p&gt;
&lt;p&gt;Synonyms: dry/dried out/hard/hardened/old/past its best/past its sell-by date&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stale bread&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stale%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;steɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make or become stale&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she would cut up yesterday&amp;rsquo;s leftover bread, staling now&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stale%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;steɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of an animal, especially a horse) urinate&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the horse staled while he was riding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pasture&#34;&gt;pasture&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:39:21Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/pasture%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈpɑːstʃə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;land covered with grass and other low plants suitable for grazing animals, especially cattle or sheep&lt;/p&gt;
&lt;p&gt;Synonyms: grazing land/grazing/grassland/grass/pastureland/pasturage/range/ley/paddock/croft&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;areas of rich meadow pasture&lt;/li&gt;
&lt;li&gt;many a horse was put out to pasture there&lt;/li&gt;
&lt;li&gt;grassy pastures&lt;/li&gt;
&lt;li&gt;a range of pasture grasses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;used to refer to a person&amp;rsquo;s situation in life&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she left the office for pastures new&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/pasture%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈpɑːstʃə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;put (animals) to graze in a pasture&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they pastured their cows in the water meadow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;antagonize&#34;&gt;antagonize&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:38:56Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/antagonize%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;anˈtaɡənʌɪz&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cause (someone) to become hostile or angry&lt;/p&gt;
&lt;p&gt;Synonyms: arouse hostility in/alienate/set someone against someone else/estrange/disaffect&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he antagonized fellow architects by criticizing traditional values&lt;/li&gt;
&lt;li&gt;she seemed reckless in the way she deliberately tried to antagonize her interviewers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a substance) act as an antagonist of (a substance or its action)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two other drugs antagonized the antidepressant-like effect&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pigsty&#34;&gt;pigsty&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:38:23Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/pigsty%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈpɪɡstʌɪ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a pen or enclosure for a pig or pigs.&lt;/p&gt;
&lt;p&gt;Synonyms: complete mess/pigsty&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pigpen&#34;&gt;pigpen&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:38:09Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/pigpen%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈpɪɡpɛn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a pigsty.&lt;/p&gt;
&lt;p&gt;Synonyms: complete mess/pigsty&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;triumphant&#34;&gt;triumphant&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:36:00Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/triumphant%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;trʌɪˈʌmf(ə)nt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;having won a battle or contest; victorious&lt;/p&gt;
&lt;p&gt;Synonyms: victorious/successful/winning/prize-winning/conquering&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two of their triumphant Cup team&lt;/li&gt;
&lt;li&gt;a comic fairy tale about innocence triumphant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sleeve&#34;&gt;sleeve&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:35:39Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sleeve%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sliːv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the part of a garment that wholly or partly covers a person&amp;rsquo;s arm&lt;/p&gt;
&lt;p&gt;Synonyms: sleeve&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a shirt with the sleeves rolled up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a protective paper or cardboard cover for a record, CD, or DVD&lt;/p&gt;
&lt;p&gt;Synonyms: wrapping/wrapper/wrap/sleeve/sheath/sheathing/envelope/cover/covering&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an album sleeve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a windsock.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;toe&#34;&gt;toe&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:35:26Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/tow%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;təʊ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;any of the five digits at the end of the human foot&lt;/p&gt;
&lt;p&gt;Synonyms: bottom/base/toe/edge/end/lowest part/lowest point/lower limits&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he cut his big toe on a sharp stone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the lower end, tip, or point of something.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/tow%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;təʊ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;push, touch, or kick with one&amp;rsquo;s toe&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he toed off his shoes and flexed his feet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;walk with the toes pointed in (or out)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he toes out when he walks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;crease&#34;&gt;crease&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:35:00Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/crease%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kriːs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a line or ridge produced on paper or cloth by folding, pressing, or crushing&lt;/p&gt;
&lt;p&gt;Synonyms: fold/groove/ridge/furrow/line/ruck/pleat/tuck/corrugation&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;khaki trousers with knife-edge creases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;any of a number of lines marked on the pitch at specified places, especially one defining the position of a batter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an area around the goal in ice hockey or lacrosse which the players may not enter unless the puck or the ball has already done so&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he was caught in the crease without the puck&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/crease%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kriːs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make a crease in (cloth or paper)&lt;/p&gt;
&lt;p&gt;Synonyms: crumple/wrinkle/crinkle/scrunch up/rumple/line/pucker/crimp/ruck up/gather/furrow/press/iron/put a crease in/fold&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he sank into the chair, careful not to crease his dinner jacket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;burst out or cause to burst out laughing&lt;/p&gt;
&lt;p&gt;Synonyms: entertain/make laugh/delight/divert/gladden/cheer/cheer up/please/charm/tickle/convulse/beguile/enliven/regale&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jo could imitate anybody and always made him crease up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hit or punch (someone) hard&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clap or I&amp;rsquo;ll crease you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a bullet) graze (someone or something)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a bullet creased his thigh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kerchief&#34;&gt;kerchief&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:34:20Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/kerchief%5Fgb%5F5.mp3&#34;&gt;&lt;em&gt;ˈkəːtʃɪf&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/kerchief%5Fgb%5F6.mp3&#34;&gt;&lt;em&gt;ˈkəːtʃiːf&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a piece of fabric used to cover the head.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;appoint&#34;&gt;appoint&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:33:52Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/appoint%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;əˈpɔɪnt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;assign a job or role to (someone)&lt;/p&gt;
&lt;p&gt;Synonyms: nominate/name/designate/install as/commission/engage/adopt/co-opt&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she has been appointed to the board&lt;/li&gt;
&lt;li&gt;they appointed her as personnel manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;determine or decide on (a time or a place)&lt;/p&gt;
&lt;p&gt;Synonyms: specify/determine/assign/designate/allot/set/fix/arrange/choose/decide on/establish/settle/authorize/ordain/prescribe/decree&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they appointed a day in May for the meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decide the disposition of (property of which one is not the owner) under powers granted by the owner&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trustees appoint the capital to the beneficiaries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tremble&#34;&gt;tremble&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:33:15Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/tremble%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtrɛmbl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a person or part of the body) shake involuntarily, typically as a result of anxiety, excitement, or frailty&lt;/p&gt;
&lt;p&gt;Synonyms: shake/shake like a leaf/quiver/twitch/palpitate&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isobel was trembling with excitement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/tremble%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtrɛmbl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a trembling feeling, movement, or sound&lt;/p&gt;
&lt;p&gt;Synonyms: tremor/shake/shakiness/trembling/quiver/twitch/twitchiness&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there was a slight tremble in his voice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a physical or emotional condition marked by trembling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;violently&#34;&gt;violently&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:32:28Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adverb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/violently%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈvʌɪələntli&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using physical force intended to hurt, damage, or kill someone or something&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I was once violently assaulted on a bus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in a very strong or vigorous manner&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he coughed violently&lt;/li&gt;
&lt;li&gt;the aircraft began violently shaking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fuss&#34;&gt;fuss&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:31:53Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/fuss%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fʌs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a display of unnecessary or excessive excitement, activity, or interest&lt;/p&gt;
&lt;p&gt;Synonyms: ado/excitement/agitation/uproar/to-do/stir/commotion/confusion/disturbance/tumult/hubbub/rigmarole/folderol/brouhaha/furore/much ado about nothing&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t know what all the fuss is about&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/fuss%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;fʌs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;show unnecessary or excessive concern about something&lt;/p&gt;
&lt;p&gt;Synonyms: worry/fret/be agitated/be worried/take pains/make a big thing out of&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she&amp;rsquo;s always fussing about her food&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;accustom&#34;&gt;accustom&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:31:16Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/accustom%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;əˈkʌstəm&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make someone or something accept (something) as normal or usual&lt;/p&gt;
&lt;p&gt;Synonyms: adapt/adjust/acclimatize/attune/habituate/accommodate/assimilate/acculturate/inure/harden/condition/reconcile/become resigned/resign&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I accustomed my eyes to the lenses&lt;/li&gt;
&lt;li&gt;sixth-form education is supposed to accustom pupils to think for themselves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;attitude&#34;&gt;attitude&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:30:02Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/attitude%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈatɪtjuːd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a settled way of thinking or feeling about something&lt;/p&gt;
&lt;p&gt;Synonyms: point of view/view/viewpoint/vantage point/frame of mind/way of thinking/way of looking at things/school of thought/outlook/angle/slant/perspective/reaction/stance/standpoint/position/inclination/orientation/approach&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he was questioned on his attitude to South Africa&lt;/li&gt;
&lt;li&gt;being competitive is an attitude of mind&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;truculent or uncooperative behaviour&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I asked the waiter for a clean fork and all I got was attitude&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the orientation of an aircraft or spacecraft, relative to the direction of travel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shin&#34;&gt;shin&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:29:46Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/shin%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ʃɪn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the front of the leg below the knee.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/shin%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ʃɪn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;climb quickly up or down by gripping with one&amp;rsquo;s arms and legs&lt;/p&gt;
&lt;p&gt;Synonyms: climb/climb down/climb up/clamber down/clamber up/scramble down/scramble up/scrabble down/scrabble up/swarm down/swarm up/shoot down/shoot up/go down/go up&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he shinned up a tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;morbid&#34;&gt;morbid&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:28:50Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/morbid%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈmɔːbɪd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;characterized by an unusual interest in disturbing and unpleasant subjects, especially death and disease&lt;/p&gt;
&lt;p&gt;Synonyms: ghoulish/macabre/unhealthy/gruesome/grisly/grotesque/ghastly/horrible/unwholesome/death-obsessed&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he had a morbid fascination with the horrors of contemporary warfare&lt;/li&gt;
&lt;li&gt;I used to enjoy murder trials—not for any morbid curiosity, but for the drama unfolding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;of the nature of or indicative of disease&lt;/p&gt;
&lt;p&gt;Synonyms: diseased/pathological&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the treatment of morbid obesity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;irritation&#34;&gt;irritation&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:28:35Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/irritation%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌɪrɪˈteɪʃn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the state of feeling annoyed, impatient, or slightly angry&lt;/p&gt;
&lt;p&gt;Synonyms: annoyance/infuriation/exasperation/vexation/indignation/impatience/crossness/displeasure/resentment/gall/chagrin/pique&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;much to my irritation, Chris fell asleep&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inflammation or other discomfort in a body part caused by reaction to an irritant substance&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some chemicals cause a direct irritation to the skin leading to dermatitis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;irritable&#34;&gt;irritable&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:28:10Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/irritable%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɪrɪtəbl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;having or showing a tendency to be easily annoyed&lt;/p&gt;
&lt;p&gt;Synonyms: bad-tempered/irascible/tetchy/testy/touchy/scratchy/grumpy/grouchy/moody/crotchety/in a mood/in a bad mood/cantankerous/curmudgeonly/ill-tempered/ill-natured/ill-humoured/peevish/having got out of bed on the wrong side/cross/fractious/disagreeable/pettish/crabbed/crabby/waspish/prickly/peppery/crusty/splenetic/shrewish/short-tempered/hot-tempered/quick-tempered/dyspeptic/choleric/bilious/liverish/cross-grained&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she was tired and irritable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a body part) abnormally sensitive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;entail&#34;&gt;entail&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:27:43Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/entail%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈteɪl&lt;/em&gt;&lt;/a&gt;
&lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/entail%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ɛnˈteɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;involve (something) as a necessary or inevitable part or consequence&lt;/p&gt;
&lt;p&gt;Synonyms: necessitate/make necessary/require/need/demand/call for&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a situation which entails considerable risks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;limit the inheritance of (property) over a number of generations so that ownership remains within a particular family or group&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;her father&amp;rsquo;s estate was entailed on a cousin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/entail%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈteɪl&lt;/em&gt;&lt;/a&gt;
&lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/entail%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ɛnˈteɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a limitation of the inheritance of property to certain heirs over a number of generations&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the damage being done in England by entails&lt;/li&gt;
&lt;li&gt;landed property was governed by primogeniture and entail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;subpoena&#34;&gt;subpoena&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:26:55Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/subpoena%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;səˈpiːnə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a writ ordering a person to attend a court&lt;/p&gt;
&lt;p&gt;Synonyms: order/command/directive/direction/decree/edict/injunction/mandate/dictate/commandment/diktat/demand/bidding/requirement/stipulation/charge/ruling/mandate/pronouncement&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a subpoena may be issued to compel their attendance&lt;/li&gt;
&lt;li&gt;they were all under subpoena to appear&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/subpoena%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;səˈpiːnə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;summon (someone) with a subpoena&lt;/p&gt;
&lt;p&gt;Synonyms: summon/summons/serve with a summons/subpoena/serve with a writ/call&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Queen is above the law and cannot be subpoenaed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jury&#34;&gt;jury&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:26:36Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/jury%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈdʒʊəri&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a body of people (typically twelve in number) sworn to give a verdict in a legal case on the basis of evidence submitted to them in court&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the jury returned unanimous guilty verdicts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/jury%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈdʒʊəri&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;judge (an art or craft exhibition or exhibit)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the exhibition was juried by a nationally acclaimed artist&lt;/li&gt;
&lt;li&gt;he had a painting in the juried exhibition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/jury%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈdʒʊəri&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of a mast or other fitting) improvised or temporary&lt;/p&gt;
&lt;p&gt;Synonyms: temporary/provisional/interim/pro tem/short-term/working/makeshift/improvised/emergency/impromptu/rough and ready&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we need to get that jury rudder fixed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;strap&#34;&gt;strap&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:26:05Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/strap%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;strap&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a strip of leather, cloth, or other flexible material, used to fasten, secure, or carry something or to hold on to something&lt;/p&gt;
&lt;p&gt;Synonyms: thong/tie/cord/band/belt/tape&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;her bra strap&lt;/li&gt;
&lt;li&gt;the strap of his shoulder bag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/strap%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;strap&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fasten or secure in a specified place or position with a strap&lt;/p&gt;
&lt;p&gt;Synonyms: fasten/secure/tie/bind/make fast/lash&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I had to strap the bag to my bicycle&lt;/li&gt;
&lt;li&gt;the children were strapped into their car seats&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;beat (someone) with a strip of leather&lt;/p&gt;
&lt;p&gt;Synonyms: beat/flog/whip/leather/belt/thrash/lash/horsewhip/birch/cane/strike/hit/clout&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I expected when my dad walked in that he&amp;rsquo;d strap him&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elucidate&#34;&gt;elucidate&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:25:29Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/elucidate%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪˈl(j)uːsɪdeɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make (something) clear; explain&lt;/p&gt;
&lt;p&gt;Synonyms: explain/make clear/make plain/illuminate/shed light on/throw light on/clarify&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;work such as theirs will help to elucidate this matter&lt;/li&gt;
&lt;li&gt;in what follows I shall try to elucidate what I believe the problems to be&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;circuit&#34;&gt;circuit&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:25:04Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/circuit%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈsəːkɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a roughly circular line, route, or movement that starts and finishes at the same place&lt;/p&gt;
&lt;p&gt;Synonyms: lap/turn/tour/round/circle/orbit/revolution/loop&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I ran a circuit of the village&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an established itinerary of events or venues used for a particular activity, typically involving sport or public performance&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the alternative cabaret circuit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a complete and closed path around which a circulating electric current can flow&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the maximum number of light fittings on a circuit is twelve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/circuit%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈsəːkɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;move all the way around (a place or thing)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the trains will follow the Northern line, circuiting the capital&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mule&#34;&gt;mule&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:23:32Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/mule%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;mjuːl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the offspring of a donkey and a horse (strictly, a male donkey and a female horse), typically sterile and used as a beast of burden.&lt;/p&gt;
&lt;p&gt;Synonyms: ass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a hybrid plant or animal, especially a sterile one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a kind of spinning machine producing yarn on spindles, invented by Samuel Crompton in 1779.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a small tractor or locomotive, typically one that is electrically powered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a coin with the obverse and reverse of designs not originally intended to be used together.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/mule%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;mjuːl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a woman&amp;rsquo;s slipper or light shoe without a back.&lt;/p&gt;
&lt;p&gt;Synonyms: mule/moccasin/house shoe/pump/mule&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;witness&#34;&gt;witness&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:23:09Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/witness%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈwɪtnɪs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a person who sees an event, typically a crime or accident, take place&lt;/p&gt;
&lt;p&gt;Synonyms: observer/onlooker/looker-on/eyewitness/spectator/viewer/watcher&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;police are appealing for witnesses to the accident&lt;/li&gt;
&lt;li&gt;I was witness to one of the most amazing comebacks in sprinting history&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;evidence; proof&lt;/p&gt;
&lt;p&gt;Synonyms: evidence/indication/proof/testimony&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the memorial service was witness to the wide circle of his interests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a line or remnant of an original surface on a workpiece to show how much material has been removed or the shape of the original outline.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/witness%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈwɪtnɪs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;see (an event, typically a crime or accident) happen&lt;/p&gt;
&lt;p&gt;Synonyms: see/observe/watch/look on at/be a witness to/view/note/notice/spot&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;staff who witnessed the murder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;have knowledge of (a development) from observation or experience&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what we are witnessing is the birth of a new political entity&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;openly profess one&amp;rsquo;s religious faith&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one of the purposes of his coming was to nerve the disciples to witness to Jesus&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;impassive&#34;&gt;impassive&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:19:27Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/impassive%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪmˈpasɪv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;not feeling or showing emotion&lt;/p&gt;
&lt;p&gt;Synonyms: expressionless/unexpressive/inexpressive/inscrutable/blank/deadpan/poker-faced/straight-faced/dispassionate&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;his cold, impassive face&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;casual&#34;&gt;casual&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-24T13:18:58Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/casual%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈkaʒʊ(ə)l&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;relaxed and unconcerned&lt;/p&gt;
&lt;p&gt;Synonyms: relaxed/friendly/natural/informal/unceremonious/unpretentious/easy-going/free and easy/uninhibited/open&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a casual attitude to life&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not regular or permanent.&lt;/p&gt;
&lt;p&gt;Synonyms: temporary/part-time/impermanent/freelance- happening by chance; accidental&lt;/p&gt;
&lt;p&gt;Synonyms: chance/accidental/random/unintentional/unplanned/unintended/inadvertent/unexpected/unforeseen/unanticipated/unlooked-for/occurring by accident/occurring by chance/fortuitous/coincidental/fluky/serendipitous/adventitious/aleatory&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he pretended it was a casual meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;without formality of style or manner, in particular (of clothing) suitable for everyday wear rather than formal occasions&lt;/p&gt;
&lt;p&gt;Synonyms: informal/not formal/relaxed/comfortable/sloppy/leisure/sportif/everyday&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a casual short-sleeved shirt&lt;/li&gt;
&lt;li&gt;an ideal coat for casual occasions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/casual%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈkaʒʊ(ə)l&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a person who does something irregularly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a number of casuals became regular customers&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;clothes or shoes suitable for everyday wear rather than formal occasions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she designs women&amp;rsquo;s casuals&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;a youth belonging to a subculture characterized by the wearing of expensive casual clothing and frequently associated with football hooliganism.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sack&#34;&gt;sack&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:48:38Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sack%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sak&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a large bag made of a strong material such as hessian, thick paper, or plastic, used for storing and carrying goods.&lt;/p&gt;
&lt;p&gt;Synonyms: bag/pack/pouch/pocket- a woman&amp;rsquo;s short loose unwaisted dress, typically narrowing at the hem, popular especially in the 1950s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dismissal from employment&lt;/p&gt;
&lt;p&gt;Synonyms: dismissal/discharge/redundancy/termination of employment/one&amp;rsquo;s marching orders&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he got the sack for swearing&lt;/li&gt;
&lt;li&gt;they were given the sack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bed, especially as regarded as a place for sex.&lt;/p&gt;
&lt;p&gt;Synonyms: bed- a base.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an act of tackling of a quarterback behind the line of scrimmage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sack%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sak&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dismiss from employment&lt;/p&gt;
&lt;p&gt;Synonyms: dismiss/give someone their notice/throw out/get rid of/lay off/let go/discharge/cashier&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any official found to be involved would be sacked on the spot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tackle (a quarterback) behind the line of scrimmage before they can throw a pass&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Oregon intercepted five of his passes and sacked him five times&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;put into a sack or sacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a small part of his wheat had been sacked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sack%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sak&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(chiefly in historical contexts) plunder and destroy (a captured town or building)&lt;/p&gt;
&lt;p&gt;Synonyms: ravage/lay waste/devastate/ransack/strip/fleece/plunder/pillage/loot/rob/raid&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the fort was rebuilt in AD 158 and was sacked again in AD 197&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sack%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sak&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the pillaging of a town or city&lt;/p&gt;
&lt;p&gt;Synonyms: laying waste/ransacking/plunder/plundering/sacking/looting/ravaging/pillage/pillaging/devastation/depredation/stripping/robbery/robbing/raiding&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the sack of Rome&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/sack%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;sak&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a dry white wine formerly imported into Britain from Spain and the Canaries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Poet Laureate traditionally gets a ‘butt of sack’, equivalent to roughly 600 bottles of sherry&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;standstill&#34;&gt;standstill&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:31:16Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/standstill%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈstan(d)stɪl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a situation or condition in which there is no movement or activity at all&lt;/p&gt;
&lt;p&gt;Synonyms: halt/stop/dead stop/stand&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the traffic came to a standstill&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;skew&#34;&gt;skew&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:13:47Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/skew%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;skjuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;neither parallel nor at right angles to a specified or implied line; askew; crooked&lt;/p&gt;
&lt;p&gt;Synonyms: crooked/awry/askew/lopsided/uneven/asymmetrical/to one side/off-centre/skewed/skew/misaligned&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;his hat looked slightly skew&lt;/li&gt;
&lt;li&gt;a skew angle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a pair of lines) neither parallel nor intersecting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a statistical distribution) not symmetrical.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/skew%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;skjuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an oblique angle; a slant.&lt;/p&gt;
&lt;p&gt;Synonyms: slope/incline/tilt/ramp/gradient/pitch/angle/rake/cant/camber/skew/leaning/inclination/shelving/listing- a bias towards one particular group or subject&lt;/p&gt;
&lt;p&gt;Synonyms: misrepresentation/perversion/twisting/falsification/misreporting/misstatement/manipulation&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the paper had a working-class skew&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the state of not being symmetrical.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/skew%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;skjuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;suddenly change direction or position&lt;/p&gt;
&lt;p&gt;Synonyms: distort/misrepresent/change/alter/pervert/falsify/warp/skew/put the wrong slant on/misinterpret/misconstrue/misstate/misquote/quote out of context/take out of context/misreport&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the car had skewed across the track&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make biased or distorted in a way that is regarded as inaccurate, unfair, or misleading&lt;/p&gt;
&lt;p&gt;Synonyms: biased/prejudiced/partisan/one-sided/slanted/skewed/coloured/interested/parti pris/discriminatory/preferential/jaundiced&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the curriculum is skewed towards the practical subjects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cause (a distribution) to be asymmetrical&lt;/p&gt;
&lt;p&gt;Synonyms: asymmetrical/unsymmetrical/uneven/unevenly balanced/unbalanced/off-balance/off-centre/unequal/askew/skew/skewed/squint/tilted/tilting/crooked/sloping/slanted/aslant/one-sided/out of true/out of line/to one side/awry&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the distributions were skewed to the right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oath&#34;&gt;oath&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:53:20Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/oath%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;əʊθ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a solemn promise, often invoking a divine witness, regarding one&amp;rsquo;s future action or behaviour&lt;/p&gt;
&lt;p&gt;Synonyms: vow/sworn statement/promise/pledge/avowal/affirmation/attestation/word of honour/word/bond/guarantee/guaranty&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they took an oath of allegiance to the king&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a coarse or blasphemous word or phrase used to express anger or other strong emotion&lt;/p&gt;
&lt;p&gt;Synonyms: swear word/profanity/expletive/four-letter word/dirty word/obscenity/imprecation/curse/malediction/blasphemy&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he exploded with a mouthful of oaths&lt;/li&gt;
&lt;li&gt;he was muttering foul oaths&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;academic&#34;&gt;academic&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:25:14Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/academic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌakəˈdɛmɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;relating to education and scholarship&lt;/p&gt;
&lt;p&gt;Synonyms: educational/scholastic/instructional/pedagogical/scholarly/studious/literary/well read/intellectual/clever/erudite/learned/educated/cultured/bookish/highbrow/pedantic/donnish/cerebral/serious&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;academic achievement&lt;/li&gt;
&lt;li&gt;he had no academic qualifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not of practical relevance; of only theoretical interest&lt;/p&gt;
&lt;p&gt;Synonyms: theoretical/conceptual/notional/philosophical/unpragmatic/hypothetical/speculative/conjectural/conjectured/suppositional/putative&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the debate has been largely academic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/academic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌakəˈdɛmɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a teacher or scholar in a university or other institute of higher education&lt;/p&gt;
&lt;p&gt;Synonyms: scholar/lecturer/don/teacher/educator/instructor/trainer/tutor/professor/fellow/man of letters/woman of letters/highbrow/thinker/bluestocking&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the EU offers grants to academics for research on approved projects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dramatic&#34;&gt;dramatic&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:25:54Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/dramatic%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;drəˈmatɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;relating to drama or the performance or study of drama&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the dramatic arts&lt;/li&gt;
&lt;li&gt;a dramatic society&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(of an event or circumstance) sudden and striking&lt;/p&gt;
&lt;p&gt;Synonyms: considerable/substantial/sizeable/goodly/fair/reasonable/tidy/marked/pronounced&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a dramatic increase in recorded crime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trauma&#34;&gt;trauma&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:31:10Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/trauma%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtrɔːmə&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/trauma%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈtraʊmə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a deeply distressing or disturbing experience&lt;/p&gt;
&lt;p&gt;Synonyms: torment/agony/suffering/pain&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a personal trauma like the death of a child&lt;/li&gt;
&lt;li&gt;many experience the trauma of divorce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;physical injury&lt;/p&gt;
&lt;p&gt;Synonyms: injury/damage/hurt/wound/wounding/sore/bruise/cut/laceration/lesion/abrasion/contusion&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rupture of the diaphragm caused by blunt trauma&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;character&#34;&gt;character&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:26:15Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/character%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkarɪktə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the mental and moral qualities distinctive to an individual&lt;/p&gt;
&lt;p&gt;Synonyms: personality/nature/disposition/temperament/temper/mentality/turn of mind/psychology/psyche/constitution/make-up/make/stamp/mould/cast&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;running away was not in keeping with her character&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a person in a novel, play, or film&lt;/p&gt;
&lt;p&gt;Synonyms: persona/person/role/part&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the author&amp;rsquo;s compassionate identification with his characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a printed or written letter or symbol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a characteristic, especially one that assists in the identification of a species.&lt;/p&gt;
&lt;p&gt;Synonyms: sort/variety/kind/style/type/category/order/breed/species/class/designation/specification/genre/genus/brand/make/character/ilk/kidney/grain/stamp/mould=Verb=  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/character%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkarɪktə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inscribe or write (something).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;debate&#34;&gt;debate&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:30:53Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/debate%5Fgb%5F4.mp3&#34;&gt;&lt;em&gt;dɪˈbeɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a formal discussion on a particular matter in a public meeting or legislative assembly, in which opposing arguments are put forward and which usually ends with a vote&lt;/p&gt;
&lt;p&gt;Synonyms: discussion/exchange of views/discourse/parley&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;last night&amp;rsquo;s debate on the Education Bill&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/debate%5Fgb%5F4.mp3&#34;&gt;&lt;em&gt;dɪˈbeɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;argue about (a subject), especially in a formal manner&lt;/p&gt;
&lt;p&gt;Synonyms: discuss/confer about/talk over/talk through/talk about/exchange views on/exchange views about/thrash out/argue/argue about/argue the pros and cons of/dispute/wrangle over/bandy words concerning/contend over/contest/controvert/moot&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MPs debated the issue in the Commons&lt;/li&gt;
&lt;li&gt;members of the society debated for five nights&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;connivance&#34;&gt;connivance&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:42:29Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconnivance%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kəˈnʌɪvns&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;willingness to allow or be secretly involved in an immoral or illegal act&lt;/p&gt;
&lt;p&gt;Synonyms: collusion/complicity/collaboration/involvement/assistance/abetting&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this infringement of the law had taken place with the connivance of officials&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;injury&#34;&gt;injury&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:26:39Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/injury%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɪn(d)ʒ(ə)ri&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an instance of being injured&lt;/p&gt;
&lt;p&gt;Synonyms: wound/bruise/cut/gash/tear/rent/slash/gouge/scratch/graze/laceration/abrasion/contusion/lesion/sore&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she suffered an injury to her back&lt;/li&gt;
&lt;li&gt;an ankle injury&lt;/li&gt;
&lt;li&gt;head injuries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;damage to a person&amp;rsquo;s feelings&lt;/p&gt;
&lt;p&gt;Synonyms: offence/abuse&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compensation for injury to feelings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;acrimonious&#34;&gt;acrimonious&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:37:43Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/acrimonious%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˌakrɪˈməʊnɪəs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(typically of speech or discussion) angry and bitter&lt;/p&gt;
&lt;p&gt;Synonyms: bitter/rancorous/caustic/acerbic/scathing/sarcastic/acid/harsh/sharp/razor-edged/cutting/astringent/trenchant/mordant/virulent&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an acrimonious dispute about wages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;indulge&#34;&gt;indulge&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-24T03:10:08Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/indulge%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ɪnˈdʌldʒ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allow oneself to enjoy the pleasure of&lt;/p&gt;
&lt;p&gt;Synonyms: wallow in/give oneself up to/give way to/yield to/abandon oneself to/give rein to/give free rein to&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we indulged in a cream tea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow (someone) to enjoy something desired&lt;/p&gt;
&lt;p&gt;Synonyms: pamper/spoil/overindulge/coddle/mollycoddle/cosset/nanny/nursemaid/mother/baby/pet/spoon-feed/overparent&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a luxury service used to indulge the chief executive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gullet&#34;&gt;gullet&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:49:24Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/gullet%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈɡʌlɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the passage by which food passes from the mouth to the stomach; the oesophagus.&lt;/p&gt;
&lt;p&gt;Synonyms: oesophagus/throat/pharynx&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stir&#34;&gt;stir&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:55:11Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stir%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stəː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;move a spoon or other implement round in (a liquid or other substance) in order to mix it thoroughly&lt;/p&gt;
&lt;p&gt;Synonyms: mix/blend/agitate&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Desmond stirred his tea and ate a biscuit&lt;/li&gt;
&lt;li&gt;pour in the cream and stir well&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;move or cause to move slightly&lt;/p&gt;
&lt;p&gt;Synonyms: move slightly/change one&amp;rsquo;s position/twitch/quiver/tremble/disturb/rustle/shake/move/flutter/agitate/swish&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nothing stirred except the wind&lt;/li&gt;
&lt;li&gt;a gentle breeze stirred the leaves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arouse strong feeling in (someone); move or excite&lt;/p&gt;
&lt;p&gt;Synonyms: arouse/rouse/kindle/inspire/stimulate/excite/awaken/waken/quicken/animate/activate/galvanize/fire/electrify/whet&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they will be stirred to action by what is written&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stir%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stəː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a slight physical movement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I stood, straining eyes and ears for the faintest stir&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a commotion&lt;/p&gt;
&lt;p&gt;Synonyms: commotion/disturbance/fuss/ado/excitement/flurry/uproar/ferment/brouhaha/furore/turmoil/sensation&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the event caused quite a stir&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an act of stirring food or drink&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he gives his Ovaltine a stir&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stir%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stəː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prison&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve spent twenty-eight years in stir&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throat&#34;&gt;throat&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:56:25Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/throat%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;θrəʊt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the passage which leads from the back of the mouth of a person or animal&lt;/p&gt;
&lt;p&gt;Synonyms: gullet/oesophagus&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;her throat was parched with thirst&lt;/li&gt;
&lt;li&gt;he&amp;rsquo;s pouring beer down his throat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;swivel&#34;&gt;swivel&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:33:24Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/swivel%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈswɪvl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a coupling between two parts enabling one to revolve without turning the other.&lt;/p&gt;
&lt;p&gt;Synonyms: pivot/axle/spindle/hinge/axis/fulcrum/pin/hub/kingpin/gudgeon/trunnion=Verb=  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/swivel%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈswɪvl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;turn around a point or axis or on a swivel&lt;/p&gt;
&lt;p&gt;Synonyms: turn/spin/swing/rotate/revolve/pivot/twirl/whirl/wheel/gyrate/pirouette&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he swivelled in the chair&lt;/li&gt;
&lt;li&gt;she swivelled her eyes round&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ordinary&#34;&gt;ordinary&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:52:43Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/ordinary%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈɔːdɪn(ə)ri&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;with no special or distinctive features; normal&lt;/p&gt;
&lt;p&gt;Synonyms: usual/normal/standard/typical/stock/common/customary/habitual/accustomed/expected/wonted/everyday/regular/routine/day-to-day/daily/established/settled/set/fixed/traditional/quotidian/prevailing&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he sets out to depict ordinary people&lt;/li&gt;
&lt;li&gt;it was just an ordinary evening&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(especially of a judge or bishop) exercising authority by virtue of office and not by deputation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/ordinary%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈɔːdɪn(ə)ri&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what is commonplace or standard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;their clichés were vested with enough emotion to elevate them above the ordinary&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a judge who exercises authority by virtue of office and not by deputation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a member of the clergy, such as an archbishop in a province or a bishop in a diocese, with immediate jurisdiction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;those parts of a Roman Catholic service, especially the Mass, which do not vary from day to day.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;any of the simplest principal charges used in coats of arms (especially chief, pale, bend, fess, bar, chevron, cross, saltire).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a meal provided at a fixed time and price at an inn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a penny-farthing bicycle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dispute&#34;&gt;dispute&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:38:22Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/dispute%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;dɪˈspjuːt&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/dispute%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈdɪspjuːt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a disagreement or argument&lt;/p&gt;
&lt;p&gt;Synonyms: debate/discussion/discourse/disputation/argument/controversy/contention/disagreement/altercation/falling-out/quarrelling/variance/dissension/conflict/friction/strife/discord/antagonism/quarrel/argument/altercation/squabble/falling-out/shouting match/disagreement/difference of opinion/clash/wrangle/feud/fight/fracas/brawl&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a territorial dispute between the two countries&lt;/li&gt;
&lt;li&gt;the Commission is in dispute with the government&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/dispute%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;dɪˈspjuːt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;argue about (something)&lt;/p&gt;
&lt;p&gt;Synonyms: debate/discuss/exchange views&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the point has been much disputed&lt;/li&gt;
&lt;li&gt;he taught and disputed with local poets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compete for; strive to win&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the two drivers crashed while disputing the lead&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solicitor&#34;&gt;solicitor&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:36:23Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/solicitor%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;səˈlɪsɪtə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a member of the legal profession qualified to deal with conveyancing, the drawing up of wills, and other legal matters. A solicitor may also instruct barristers and represent clients in some courts.&lt;/p&gt;
&lt;p&gt;Synonyms: lawyer/legal representative/legal practitioner/legal executive/notary/notary public/advocate/attorney- a person who tries to obtain business orders, advertising, etc.; a canvasser&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she had been a telephone solicitor for a Chicago newspaper&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;audibly&#34;&gt;audibly&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:33:10Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adverb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/audibly%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈɔːdɪbli&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in a way that can be heard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the view of the snow-capped Alps caused everyone in the carriage to gasp audibly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spectator&#34;&gt;spectator&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:24:50Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/spectator%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;spɛkˈteɪtə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a person who watches at a show, game, or other event&lt;/p&gt;
&lt;p&gt;Synonyms: onlooker/watcher/looker-on/fly on the wall/viewer/observer/witness/eyewitness/bystander/non-participant/sightseer&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;around fifteen thousand spectators came to watch the thrills and spills&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concentrate&#34;&gt;concentrate&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:32:44Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconcentrate%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkɒnsntreɪt&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconcentrate%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈkɒnsɛntreɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;focus all one&amp;rsquo;s attention on a particular object or activity&lt;/p&gt;
&lt;p&gt;Synonyms: focus/direct/centre/centralize/bring to bear/focus one&amp;rsquo;s attention on/focus on/pay attention to/keep one&amp;rsquo;s mind on/apply oneself to/address oneself to/devote oneself to/get down to/put one&amp;rsquo;s mind to&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she couldn&amp;rsquo;t concentrate on the film&lt;/li&gt;
&lt;li&gt;a threatened tax rise concentrates the mind wonderfully&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gather (people or things) together in a common location&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the nation&amp;rsquo;s wealth was concentrated in the hands of the governing elite&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;increase the strength or proportion of (a substance or solution) by removing or reducing the other diluting agent or by selective accumulation of atoms or molecules&lt;/p&gt;
&lt;p&gt;Synonyms: condense/boil down/reduce/distil/thicken/compress&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plants and microorganisms can concentrate metals from the environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconcentrate%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈkɒnsntreɪt&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconcentrate%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;ˈkɒnsɛntreɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a substance made by removing or reducing the diluting agent; a concentrated form of something&lt;/p&gt;
&lt;p&gt;Synonyms: distillation/essence/extract&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apple juice concentrate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;twisted&#34;&gt;twisted&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:54:39Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/twisted%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈtwɪstɪd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;forced out of its natural or proper shape; crumpled&lt;/p&gt;
&lt;p&gt;Synonyms: perverted/warped/deviant/depraved/corrupt/abnormal/unhealthy/aberrant/distorted/corrupted/debauched/debased/degenerate/sadistic/evil/wicked&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the crash left a trail of twisted metal across the carriageway&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(of a personality or a way of thinking) unpleasantly or unhealthily abnormal; warped&lt;/p&gt;
&lt;p&gt;Synonyms: unwholesome/undesirable/morbid/macabre/ghoulish/twisted/warped/depraved/abnormal/unnatural&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a man with a twisted mind&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trademark&#34;&gt;trademark&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:11:45Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/trademark%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtreɪdmɑːk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a symbol, word, or words legally registered or established by use as representing a company or product.&lt;/p&gt;
&lt;p&gt;Synonyms: logo/emblem/sign/stamp/symbol/device/badge/crest/insignia/seal/coat of arms/shield/motif/hallmark/mark/figure/monogram/logotype/colophon&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/trademark%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtreɪdmɑːk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mark with or register as a trademark&lt;/p&gt;
&lt;p&gt;Synonyms:&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she filed a request with the government to trademark her company&amp;rsquo;s name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hog&#34;&gt;hog&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:24:37Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/hogg%5F1%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;hɒɡ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a domesticated pig, especially a castrated male reared for slaughter.&lt;/p&gt;
&lt;p&gt;Synonyms: pig/sow/swine/porker/piglet/boar&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a large motorcycle, in particular a Harley Davidson.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a young sheep before the first shearing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/hogg%5F1%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;hɒɡ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;take or use most or all of (something) in an unfair or selfish way&lt;/p&gt;
&lt;p&gt;Synonyms: monopolize/keep to oneself/dominate/take over/corner/control&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he never hogged the limelight&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cause (a ship or its keel) to curve up in the centre and sag at the ends as a result of strain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trial&#34;&gt;trial&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:39:10Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/trial%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtrʌɪəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a formal examination of evidence by a judge, typically before a jury, in order to decide guilt in a case of criminal or civil proceedings
Synonyms: court case/case/lawsuit/suit/hearing/inquiry/tribunal/litigation/judicial proceedings/legal proceedings/proceedings/legal action
Examples:
&lt;ul&gt;
&lt;li&gt;the newspaper accounts of the trial&lt;/li&gt;
&lt;li&gt;the editor was summoned to stand trial for libel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a test of the performance, qualities, or suitability of someone or something
Synonyms: test/try-out/experiment/pilot study
Examples:
&lt;ul&gt;
&lt;li&gt;clinical trials must establish whether the new hip replacements are working&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a person, experience, or situation that tests a person&amp;rsquo;s endurance or forbearance
Synonyms: nuisance/pest/bother/irritant/source of annoyance/source of irritation/worry/problem/inconvenience/vexation/plague/source of aggravation/thorn in one&amp;rsquo;s flesh/the bane of one&amp;rsquo;s life/one&amp;rsquo;s cross to bear/trouble/worry/anxiety/burden/affliction/ordeal/tribulation/adversity/hardship/tragedy/trauma/reverse/setback/difficulty/problem/misfortune/bad luck/stroke of bad luck/ill fortune/mishap/misadventure
Examples:
&lt;ul&gt;
&lt;li&gt;this winter has been a trial for me, physically and emotionally&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/trial%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈtrʌɪəl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test (something, especially a new product) to assess its suitability or performance
Synonyms: test/try out/carry out trials on/put to the test/put through its paces/experiment with
Examples:
&lt;ul&gt;
&lt;li&gt;teachers all over the UK are trialling the materials&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(of a horse, dog, or other animal) compete in trials
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;the pup trialled on Saturday&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nephew&#34;&gt;nephew&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:41:37Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/nephew%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈnɛvjuː&lt;/em&gt;&lt;/a&gt;&lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/nephew%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈnɛfjuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a son of one&amp;rsquo;s brother or sister, or of one&amp;rsquo;s brother-in-law or sister-in-law&lt;/p&gt;
&lt;p&gt;Synonyms: relative/relation/blood relation/blood relative/family member/one&amp;rsquo;s own flesh and blood/next of kin&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he held up his little nephew in his arms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stick&#34;&gt;stick&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:29:44Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stich%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a thin piece of wood that has fallen or been cut off a tree.
Synonyms: piece of wood/twig/small branch/cane/pole/beanpole/post/stake/upright/rod
Examples:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a long, thin piece of something&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a stick of dynamite&lt;/li&gt;
&lt;li&gt;cinnamon sticks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a threat of punishment or unwelcome measures (often contrasted with the offer of reward as a means of persuasion)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;training that relies more on the carrot than on the stick&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;severe criticism or treatment&lt;/p&gt;
&lt;p&gt;Synonyms: criticism/flak/censure/reproach/reproof/condemnation/castigation/chastisement/blame/abuse&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I took a lot of stick from the press&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rural areas far from cities or civilization&lt;/p&gt;
&lt;p&gt;Synonyms: the country/the countryside/the provinces/rural districts/the backwoods/the back of beyond/the wilds/the hinterland/a backwater&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he felt hard done by living out in the sticks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a person of a specified kind&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Janet&amp;rsquo;s not such a bad old stick sometimes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a large quantity of unsold stock, especially the proportion of shares which must be taken up by underwriters after an unsuccessful issue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/stich%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;stɪk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;push a sharp or pointed object into or through (something)&lt;/p&gt;
&lt;p&gt;Synonyms: thrust/push/insert/jab/dig/plunge/ram/force&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he stuck his fork into the sausage&lt;/li&gt;
&lt;li&gt;she stuck her finger in his eye&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insert, thrust, or push&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a youth with a cigarette stuck behind one ear&lt;/li&gt;
&lt;li&gt;she stuck out her tongue at him&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;adhere or cling to something&lt;/p&gt;
&lt;p&gt;Synonyms: adhere/cling/be fixed/be glued/remain/stay/linger/dwell/persist/continue/last/endure&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the plastic seats stuck to my skin&lt;/li&gt;
&lt;li&gt;if you heat the noodles in the microwave, they tend to stick together&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;be fixed in a particular position or unable to move or be moved&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sara tried to open the window but it was stuck&lt;/li&gt;
&lt;li&gt;we got stuck in a traffic jam&lt;/li&gt;
&lt;li&gt;the cat&amp;rsquo;s stuck up a tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accept or tolerate (an unpleasant or unwelcome person or situation)&lt;/p&gt;
&lt;p&gt;Synonyms: tolerate/put up with/take/stand/stand for/accept/stomach/swallow/endure/bear/support/brook/submit to/take something lying down&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can&amp;rsquo;t stick Geoffrey—he&amp;rsquo;s a real old misery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;handful&#34;&gt;handful&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:37:25Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/handful%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈhan(d)fʊl&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a quantity that fills the hand&lt;/p&gt;
&lt;p&gt;Synonyms: a small number/a small amount/a small quantity/a sprinkling/a smattering/a scattering/a trickle&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a small handful of fresh coriander&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a person or group that is very difficult to deal with or control&lt;/p&gt;
&lt;p&gt;Synonyms: nuisance/problem/bother/irritant/source of annoyance/thorn in someone&amp;rsquo;s flesh/thorn in someone&amp;rsquo;s side/bugbear&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the kids could be such a handful&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;speculation&#34;&gt;speculation&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:44:29Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/speculation%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˌspɛkjʊˈleɪʃn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the forming of a theory or conjecture without firm evidence&lt;/p&gt;
&lt;p&gt;Synonyms: conjecture/theorizing/hypothesizing/supposition/guesswork/gamble/venture/risk&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there has been widespread speculation that he plans to quit&lt;/li&gt;
&lt;li&gt;this is pure speculation on my part&lt;/li&gt;
&lt;li&gt;these are only speculations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;investment in stocks, property, etc. in the hope of gain but with the risk of loss&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the company&amp;rsquo;s move into property speculation&lt;/li&gt;
&lt;li&gt;he was a millionaire from speculations on the stock market&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;advantage&#34;&gt;advantage&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:39:30Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/advantage%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ədˈvɑːntɪdʒ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a condition or circumstance that puts one in a favourable or superior position&lt;/p&gt;
&lt;p&gt;Synonyms: upper hand/edge/lead/head/whip hand/trump card&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;companies with a computerized database are at an advantage&lt;/li&gt;
&lt;li&gt;she had an advantage over her mother&amp;rsquo;s generation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/advantage%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ədˈvɑːntɪdʒ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;put in a favourable or superior position.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;delighted&#34;&gt;delighted&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:28:47Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/delighted%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;dɪˈlʌɪtɪd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feeling or showing great pleasure
Synonyms: very pleased/glad/happy/joyful/thrilled/overjoyed/ecstatic/euphoric/elated/blissful/enraptured/on cloud nine/on cloud seven/walking on air/in seventh heaven/in transports of delight/jumping for joy/beside oneself with happiness/excited
Examples:
&lt;ul&gt;
&lt;li&gt;a delighted smile&lt;/li&gt;
&lt;li&gt;we were delighted to see her&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;delight&#34;&gt;delight&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:21:02Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/delight%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;dɪˈlʌɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;please (someone) greatly
Synonyms: please greatly/charm/enchant/captivate/entrance/bewitch/thrill/excite/take someone&amp;rsquo;s breath away
Examples:
&lt;ul&gt;
&lt;li&gt;an experience guaranteed to delight both young and old&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/delight%5Fgb%5F3.mp3&#34;&gt;&lt;em&gt;dɪˈlʌɪt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;great pleasure
Synonyms: pleasure/happiness/joy/joyfulness/glee/gladness/gratification/relish/excitement/amusement
Examples:
&lt;ul&gt;
&lt;li&gt;the little girls squealed with delight&lt;/li&gt;
&lt;li&gt;we broke into an impromptu dance, to the delight of the crowd&lt;/li&gt;
&lt;li&gt;she took great delight in telling your story&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bust&#34;&gt;bust&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:27:05Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/bust%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;bʌst&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a sculpture of a person&amp;rsquo;s head, shoulders, and chest
Synonyms: sculpture/carving/effigy/three-dimensional representation
Examples:
&lt;ul&gt;
&lt;li&gt;Epstein concentrated increasingly on bronze portrait busts&lt;/li&gt;
&lt;li&gt;he keeps a bust of Norris on his desk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a woman&amp;rsquo;s chest as measured around her breasts
Synonyms: chest/bosom/breasts
Examples:
&lt;ul&gt;
&lt;li&gt;a 36-inch bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/bust%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;bʌst&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break, split, or burst
Synonyms: break/crack/snap/fracture/shatter/smash/smash to smithereens/fragment/splinter
Examples:
&lt;ul&gt;
&lt;li&gt;they bust the tunnel wide open&lt;/li&gt;
&lt;li&gt;the film bust every box office record&lt;/li&gt;
&lt;li&gt;the colour control had bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(of the police) raid or search (premises where illegal activity is suspected)
Synonyms: raid/search/make a search of/swoop on/make a raid on
Examples:
&lt;ul&gt;
&lt;li&gt;my flat got busted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/bust%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;bʌst&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a period of economic difficulty or depression
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;the boom was followed by the present bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a raid or arrest by the police
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;a drug bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a worthless thing
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;cynics remain convinced the political process is a bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a violent blow
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;a bust on the snout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/bust%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;bʌst&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;damaged or broken
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;the vacuum cleaner&amp;rsquo;s bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bankrupt
Synonyms: fail/collapse/crash/fold/fold up/go under/founder/be ruined/cave in
Examples:
&lt;ul&gt;
&lt;li&gt;six of their sponsors have gone bust&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reckon&#34;&gt;reckon&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:37:52Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/reckon%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈrɛk(ə)n&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;establish by calculation
Synonyms: calculate/compute/work out/put a figure on/figure/number/quantify
Examples:
&lt;ul&gt;
&lt;li&gt;his debts were reckoned at £300,000&lt;/li&gt;
&lt;li&gt;the Byzantine year was reckoned from 1 September&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;consider or regard in a specified way
Synonyms: regard as/consider/judge/hold to be/view/think of as/look on as
Examples:
&lt;ul&gt;
&lt;li&gt;the event was reckoned a failure&lt;/li&gt;
&lt;li&gt;these prisoners are reckoned to be the most dangerous&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;be of the opinion
Synonyms: believe/think/be of the opinion/be of the view/be convinced/suspect/dare say/have an idea/have a feeling/imagine/fancy/guess/suppose/assume/surmise/conjecture/consider
Examples:
&lt;ul&gt;
&lt;li&gt;he reckons that the army should pull out entirely&lt;/li&gt;
&lt;li&gt;I reckon I can manage that&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;despise&#34;&gt;despise&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:28:36Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/despise%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;dɪˈspʌɪz&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feel contempt or a deep repugnance for&lt;/p&gt;
&lt;p&gt;Synonyms: detest/hate/loathe/abhor/abominate/execrate/regard with contempt/feel contempt for/shrink from/be repelled by/not be able to bear/not be able to stand/not be able to stomach/find intolerable/deplore/dislike&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he despised himself for being selfish&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cellar&#34;&gt;cellar&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:36:54Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/cellar%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈsɛlə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a room below ground level in a house, often used for storing wine or coal
Synonyms: basement/vault/crypt/undercroft/underground room/catacomb
Examples:
&lt;ul&gt;
&lt;li&gt;the servants led us down into a cellar&lt;/li&gt;
&lt;li&gt;a wine cellar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/cellar%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈsɛlə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;store (wine) in a cellar
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;it is drinkable now but can be cellared for at least five years&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clown&#34;&gt;clown&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:26:56Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/clown%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;klaʊn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a comic entertainer, especially one in a circus, wearing a traditional costume and exaggerated make-up
Synonyms: comic entertainer/Pierrot/comedian
Examples:
&lt;ul&gt;
&lt;li&gt;a circus clown&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;an unsophisticated country person; a rustic.
Synonyms: countryman/countrywoman/peasant/daughter of the soil/son of the soil/country bumpkin/bumpkin/yokel/country cousin
Examples:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/clown%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;klaʊn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;behave in a comical or playful way
Synonyms: fool around/fool about/play the fool/act foolishly/act the clown/act the fool/act the goat/play about/play around/monkey about/monkey around/play tricks/indulge in horseplay/engage in high jinks
Examples:
&lt;ul&gt;
&lt;li&gt;Harvey clowned around pretending to be a dog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spat&#34;&gt;spat&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:35:08Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/spat%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;spat&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a short cloth gaiter covering the instep and ankle&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he would stand outside in his bowler hat and spats&lt;/li&gt;
&lt;li&gt;an old fellow dressed in spats and dinner suit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a cover for the upper part of an aircraft wheel&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new wheel spats were constructed and the large tyres were replaced by much smaller units&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/spat%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;spat&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a quarrel about an unimportant matter&lt;/p&gt;
&lt;p&gt;Synonyms: disturbance/quarrel/scuffle/brawl/affray/tussle/melee/free-for-all/fight/clash/skirmish/brouhaha/riot/uproar/commotion&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when we had our little spats, he had only to smile to get back on the right side of me&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/spat%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;spat&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;quarrel about an unimportant matter&lt;/p&gt;
&lt;p&gt;Synonyms: quarrel/disagree/row/squabble/bicker/fight/wrangle/dispute/feud/have a row/bandy words/have words/cross swords/lock horns/be at each other&amp;rsquo;s throats&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;people expected him and his wife to spat continually&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/spat%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;spat&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the spawn or larvae of shellfish, especially oysters&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oyster larvae attach themselves as spat to old shells&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;furtive&#34;&gt;furtive&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:36:54Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/furtive%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈfəːtɪv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;attempting to avoid notice or attention, typically because of guilt or a belief that discovery would lead to trouble; secretive&lt;/p&gt;
&lt;p&gt;Synonyms: secretive/secret/surreptitious&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they spent a furtive day together&lt;/li&gt;
&lt;li&gt;he stole a furtive glance at her&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hound&#34;&gt;hound&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:40:20Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/hound%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;haʊnd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a dog of a breed used for hunting, especially one able to track by scent
Synonyms: dog/hunting dog/canine/mongrel/cur
Examples:
&lt;ul&gt;
&lt;li&gt;a hound came running through the trees, nose to the ground&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;used in names of dogfishes, e.g. nurse hound, smooth hound.
Synonyms:
Examples:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/hound%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;haʊnd&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;harass, persecute, or pursue relentlessly
Synonyms: harass/persecute/harry/pester/bother/trouble/annoy/badger/torment/bedevil/keep after/force/drive/pressure/pressurize/propel/push/urge/coerce/impel/dragoon/strong-arm/pursue/chase/follow/shadow/give chase to/follow on the heels of/be hot on someone&amp;rsquo;s heels
Examples:
&lt;ul&gt;
&lt;li&gt;she was hounded by the Italian press&lt;/li&gt;
&lt;li&gt;his opponents used the allegations to hound him out of office&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chew&#34;&gt;chew&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2021-12-22T03:08:12Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/chew%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;tʃuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bite and work (food) in the mouth with the teeth, especially to make it easier to swallow
Synonyms: masticate/munch/champ/chomp/crunch/bite/nibble/gnaw/grind
Examples:
&lt;ul&gt;
&lt;li&gt;he was chewing a mouthful of toast&lt;/li&gt;
&lt;li&gt;he chewed for a moment, then swallowed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/chew%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;tʃuː&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a repeated biting or gnawing of something
Synonyms: nip/snap/chew/munch/nibble/gnaw
Examples:
&lt;ul&gt;
&lt;li&gt;the dog was enjoying a quiet chew of his bone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arrange&#34;&gt;arrange&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:47:14Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/arrange%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;əˈreɪn(d)ʒ&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;put (things) in a neat, attractive, or required order&lt;/p&gt;
&lt;p&gt;Synonyms: put in order/order/set out/lay out/spread out/array/present/put out/display/exhibit/group/sort/organize/tidy/position/dispose&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;she had just finished arranging the flowers&lt;/li&gt;
&lt;li&gt;the columns are arranged in 12 rows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;organize or make plans for (a future event)&lt;/p&gt;
&lt;p&gt;Synonyms: organize/fix/plan/schedule/pencil in/devise/contrive&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they hoped to arrange a meeting&lt;/li&gt;
&lt;li&gt;my aunt arranged for the furniture to be stored&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;adapt (a musical composition) for performance with instruments or voices other than those originally specified&lt;/p&gt;
&lt;p&gt;Synonyms: adapt/set/score/orchestrate/instrument/harmonize&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;songs arranged for viola and piano&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;settle (a dispute or claim)&lt;/p&gt;
&lt;p&gt;Synonyms: put in order/sort out/straighten out/tidy up/order/arrange/organize/adjust/clear up/set to rights/regulate/systematize&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the quarrel, partly by the interference of the Crown Prince, was arranged&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pageant&#34;&gt;pageant&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:50:34Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/pageant%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈpadʒ(ə)nt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a public entertainment consisting of a procession of people in elaborate, colourful costumes, or an outdoor performance of a historical scene&lt;/p&gt;
&lt;p&gt;Synonyms: parade/procession/cavalcade/scene/play/representation/tableau/tableau vivant&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they brought the history books to life at the town&amp;rsquo;s pageant&lt;/li&gt;
&lt;li&gt;the pageant of public life&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a beauty contest.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conduct&#34;&gt;conduct&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:09:42Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconduct%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈkɒndʌkt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the manner in which a person behaves, especially in a particular place or situation
Synonyms: behaviour/way of behaving/performance/comportment/demeanour/bearing/deportment
Examples:
&lt;ul&gt;
&lt;li&gt;they were arrested for disorderly conduct&lt;/li&gt;
&lt;li&gt;a code of conduct for directors of listed companies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;the manner in which an organization or activity is managed or directed
Synonyms: management/managing/running/direction/control/controlling/overseeing/supervision/regulation/leadership/masterminding/administration/organization/coordination/orchestration/handling/guidance/carrying out/carrying on
Examples:
&lt;ul&gt;
&lt;li&gt;the conduct of the elections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconduct%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;kənˈdʌkt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;organize and carry out
Synonyms: manage/direct/run/be in control of/control/oversee/supervise/be in charge of/preside over/regulate/mastermind/administer/organize/coordinate/orchestrate/handle/guide/govern/lead/carry out/carry on
Examples:
&lt;ul&gt;
&lt;li&gt;in the second trial he conducted his own defence&lt;/li&gt;
&lt;li&gt;surveys conducted among students&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lead or guide (someone) to or around a particular place
Synonyms: escort/guide/lead/usher/pilot/accompany/show/show someone the way
Examples:
&lt;ul&gt;
&lt;li&gt;he conducted us through his personal gallery of the Civil War&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;transmit (a form of energy such as heat or electricity) by conduction
Synonyms: transmit/convey/carry/transfer/pass on/hand on/communicate/impart/channel/bear/relay/dispatch/mediate
Examples:
&lt;ul&gt;
&lt;li&gt;heat is conducted to the surface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;direct the performance of (a piece of music or an orchestra, choir, etc.)
Synonyms:
Examples:
&lt;ul&gt;
&lt;li&gt;the concert is to be conducted by Sir Simon Rattle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;behave in a specified way
Synonyms: behave/perform/act/acquit oneself/bear oneself/carry oneself
Examples:
&lt;ul&gt;
&lt;li&gt;he conducted himself with the utmost propriety&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;confident&#34;&gt;confident&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:35:22Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Adjective&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconfident%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈkɒnfɪd(ə)nt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feeling or showing confidence in oneself or one&amp;rsquo;s abilities or qualities&lt;/p&gt;
&lt;p&gt;Synonyms: self-assured/assured/sure of oneself/self-confident/positive&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we require outgoing, confident people able to approach large groups&lt;/li&gt;
&lt;li&gt;people who are confident in their identity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feeling or showing certainty about something&lt;/p&gt;
&lt;p&gt;Synonyms: optimistic/hopeful/sanguine&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this time they&amp;rsquo;re confident of a happy ending&lt;/li&gt;
&lt;li&gt;I am not very confident about tonight&amp;rsquo;s game&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/xconfident%5Fgb%5F2.mp3&#34;&gt;&lt;em&gt;ˈkɒnfɪd(ə)nt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a confidant.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;evidence&#34;&gt;evidence&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2021-12-25T00:17:19Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/evidence%5Fgb%5F4.mp3&#34;&gt;&lt;em&gt;ˈɛvɪd(ə)ns&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the available body of facts or information indicating whether a belief or proposition is true or valid
Synonyms: proof/confirmation/verification/substantiation/corroboration/affirmation/authentication/attestation/documentation
Examples:
&lt;ul&gt;
&lt;li&gt;the study finds little evidence of overt discrimination&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Verb&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/evidence%5Fgb%5F4.mp3&#34;&gt;&lt;em&gt;ˈɛvɪd(ə)ns&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be or show evidence of
Synonyms: indicate/show/reveal/be evidence of/display/exhibit/manifest/denote/evince/signify
Examples:
&lt;ul&gt;
&lt;li&gt;the quality of the bracelet, as evidenced by the workmanship, is exceptional&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;algebra&#34;&gt;algebra&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;position&lt;/th&gt;
&lt;th&gt;ease&lt;/th&gt;
&lt;th&gt;box&lt;/th&gt;
&lt;th&gt;interval&lt;/th&gt;
&lt;th&gt;due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;2.50&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;2021-12-24T00:46:14Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;back&#34;&gt;Back&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Noun&lt;/code&gt;  &lt;a href=&#34;https://audio.oxforddictionaries.com/en/mp3/algebra%5Fgb%5F1.mp3&#34;&gt;&lt;em&gt;ˈaldʒɪbrə&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the part of mathematics in which letters and other general symbols are used to represent numbers and quantities in formulae and equations&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;courses in algebra, geometry, and Newtonian physics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>虚拟化</title>
      <link>https://www.linuxzen.com/notes/topics/20211122114900-%E8%99%9A%E6%8B%9F%E5%8C%96/</link>
      <pubDate>Mon, 22 Nov 2021 11:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20211122114900-%E8%99%9A%E6%8B%9F%E5%8C%96/</guid>
      <description> tags: 技术  相关论文  [译] [论文] 可虚拟化第三代（计算机）架构的规范化条件（ACM, 1974）  容器化  Learning Containers From The Bottom Up  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关论文&#34;&gt;相关论文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arthurchiao.art/blog/formal-requirements-for-virtualizable-arch-zh/&#34;&gt;[译] [论文] 可虚拟化第三代（计算机）架构的规范化条件（ACM, 1974）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器化&#34;&gt;容器化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iximiuz.com/en/posts/container-learning-path/&#34;&gt;Learning Containers From The Bottom Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>加解密</title>
      <link>https://www.linuxzen.com/notes/notes/20211009104957-%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Sat, 09 Oct 2021 10:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20211009104957-%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description>证书 [译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018）</description>
      <content>&lt;h2 id=&#34;证书&#34;&gt;证书&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://arthurchiao.art/blog/everything-about-pki-zh/&#34;&gt;[译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018）&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>英语读音规则</title>
      <link>https://www.linuxzen.com/notes/notes/20210925202345-%E8%8B%B1%E8%AF%AD%E8%AF%BB%E9%9F%B3%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 25 Sep 2021 20:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210925202345-%E8%8B%B1%E8%AF%AD%E8%AF%BB%E9%9F%B3%E8%A7%84%E5%88%99/</guid>
      <description> tags: Learning English  一般现在时第三人称单音形规则 一般过去时音形规则 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一般现在时第三人称单音形规则--20210920073034-英语时态-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210920073034-%E8%8B%B1%E8%AF%AD%E6%97%B6%E6%80%81/#一般现在时&#34;&gt;一般现在时第三人称单音形规则&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;一般过去时音形规则--20210920073034-英语时态-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210920073034-%E8%8B%B1%E8%AF%AD%E6%97%B6%E6%80%81/#一般过去时&#34;&gt;一般过去时音形规则&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>英语词法</title>
      <link>https://www.linuxzen.com/notes/notes/20210921092250-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B3%95/</link>
      <pubDate>Tue, 21 Sep 2021 09:22:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210921092250-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B3%95/</guid>
      <description>tags: Learning English  比较级 形容词/副词比较级  常规单音节词 -er  fast -&amp;gt; faster small -&amp;gt; smaller nice -&amp;gt; nicer large -&amp;gt; larger（删除词尾不发音的 e）   -y -&amp;gt; -ier  busy -&amp;gt; busier pretty -&amp;gt; prettier   短元音 + 辅音：重写辅音 -er  big -&amp;gt; bigger hot -&amp;gt; hotter   多音节： more +  diffcult -&amp;gt; more difficult interesting -&amp;gt; more interesting careful /kɛəful/ -&amp;gt; more careful   -y 二音节词（-ly副词除外）：常不加 more  busy -&amp;gt; busier pretty -&amp;gt; prettier quickly -&amp;gt; more quickly   特殊  much/many -&amp;gt; more little -&amp;gt; less good/well -&amp;gt; better bad -&amp;gt; worse    代词比较级  more less  比较级修饰  a little/ a bit + 比较级 更&amp;hellip;一点 much / a lot / far + 比较级 更&amp;hellip;得多  英语常见词用法 open/close 静态和动态 open  When do you open(v.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比较级&#34;&gt;比较级&lt;/h2&gt;
&lt;h3 id=&#34;形容词-副词比较级&#34;&gt;形容词/副词比较级&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;常规单音节词 -er
&lt;ul&gt;
&lt;li&gt;fast -&amp;gt; faster&lt;/li&gt;
&lt;li&gt;small -&amp;gt; smaller&lt;/li&gt;
&lt;li&gt;nice -&amp;gt; nicer&lt;/li&gt;
&lt;li&gt;large -&amp;gt; larger（删除词尾不发音的 e）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-y -&amp;gt; -ier
&lt;ul&gt;
&lt;li&gt;busy -&amp;gt; busier&lt;/li&gt;
&lt;li&gt;pretty -&amp;gt; prettier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;短元音 + 辅音：重写辅音 -er
&lt;ul&gt;
&lt;li&gt;big -&amp;gt; bigger&lt;/li&gt;
&lt;li&gt;hot -&amp;gt; hotter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多音节： more +
&lt;ul&gt;
&lt;li&gt;diffcult -&amp;gt; more difficult&lt;/li&gt;
&lt;li&gt;interesting -&amp;gt; more interesting&lt;/li&gt;
&lt;li&gt;careful &lt;code&gt;/kɛəful/&lt;/code&gt; -&amp;gt; more careful&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-y 二音节词（-ly副词除外）：常不加 more
&lt;ul&gt;
&lt;li&gt;busy -&amp;gt; busier&lt;/li&gt;
&lt;li&gt;pretty -&amp;gt; prettier&lt;/li&gt;
&lt;li&gt;quickly -&amp;gt; more quickly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊
&lt;ul&gt;
&lt;li&gt;much/many -&amp;gt; more&lt;/li&gt;
&lt;li&gt;little -&amp;gt; less&lt;/li&gt;
&lt;li&gt;good/well -&amp;gt; better&lt;/li&gt;
&lt;li&gt;bad -&amp;gt; worse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;代词比较级&#34;&gt;代词比较级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;more&lt;/li&gt;
&lt;li&gt;less&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;比较级修饰&#34;&gt;比较级修饰&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a little/ a bit + 比较级
更&amp;hellip;一点&lt;/li&gt;
&lt;li&gt;much / a lot / far + 比较级
更&amp;hellip;得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语常见词用法&#34;&gt;英语常见词用法&lt;/h2&gt;
&lt;h3 id=&#34;open-close-静态和动态&#34;&gt;open/close 静态和动态&lt;/h3&gt;
&lt;h3 id=&#34;open&#34;&gt;open&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;When do you open(v.)?
强调动态，时间点
&lt;ul&gt;
&lt;li&gt;We are open at 9 every day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When are you open(adj.)?
强调静态，时间段
&lt;ul&gt;
&lt;li&gt;We are open from 9 to 6 every day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;close&#34;&gt;close&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;close v. 动态&lt;/li&gt;
&lt;li&gt;closed adj. 静态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When do you close?
&lt;ul&gt;
&lt;li&gt;We close at 12 am.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When are you closed?
&lt;ul&gt;
&lt;li&gt;We are closed from 10 pm to 10 am.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;each-every-都加单数&#34;&gt;each/every 都加单数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;each 强调个体&lt;/li&gt;
&lt;li&gt;every 强调整体都&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都加单数&lt;/p&gt;
&lt;h3 id=&#34;start-stop-doing-sth-dot&#34;&gt;start/stop doing sth.&lt;/h3&gt;
&lt;p&gt;开始/停止做某事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t stop learning!&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll stop talking now.&lt;/li&gt;
&lt;li&gt;My nose won&amp;rsquo;t stop running.(I have a runny nose.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;record-动词和名词读音不同&#34;&gt;record 动词和名词读音不同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;v. &lt;code&gt;/riˈkɔːd/&lt;/code&gt; 记录录制&lt;/li&gt;
&lt;li&gt;cn. &lt;code&gt;/ˈrekɔːd/&lt;/code&gt; 记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语单词前后缀&#34;&gt;英语单词前后缀&lt;/h2&gt;
&lt;h3 id=&#34;ed-adj-vs-ing-adj-dot&#34;&gt;-ed adj vs -ing adj.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;-ed adj.: sb. 感觉如何&lt;/li&gt;
&lt;li&gt;-ing adj.: sth. 如何&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;interested-interesting&#34;&gt;interested / interesting&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Are you interested?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;excited-exciting&#34;&gt;excited / exciting&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The TV series is so exciting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;co-前缀-联合-共同&#34;&gt;co- 前缀：联合、共同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;co-writer&lt;/li&gt;
&lt;li&gt;co-worker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ache-eik-cn-dot-疼痛-后缀-ache&#34;&gt;ache &lt;code&gt;/eik/&lt;/code&gt; cn. 疼痛 -&amp;gt; 后缀: -ache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;have a headache &lt;code&gt;/had/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;have an earache &lt;code&gt;/iə/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;have a stomachache &lt;code&gt;/ˈstʌmək/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;have an ache in the nose &lt;code&gt;/neuz/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ness-名字后缀&#34;&gt;-ness 名字后缀&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sick adj. -&amp;gt; sickness n.&lt;/li&gt;
&lt;li&gt;ill adj. -&amp;gt; illness n.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;er-ress-ist-表示职业的后缀&#34;&gt;-er/-ress/-ist 表示职业的后缀&lt;/h3&gt;
&lt;h4 id=&#34;er&#34;&gt;-er&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;customer&lt;/li&gt;
&lt;li&gt;driver&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ist&#34;&gt;-ist&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;receptionist&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ress-通常表示女性&#34;&gt;-ress 通常表示女性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;actor -&amp;gt; actress&lt;/li&gt;
&lt;li&gt;waiter -&amp;gt; waitress&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单复数&#34;&gt;单复数&lt;/h2&gt;
&lt;h3 id=&#34;a-plus-复数&#34;&gt;a + 复数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a roast chicken wings
&lt;ul&gt;
&lt;li&gt;an order of rost chicken wings&lt;/li&gt;
&lt;li&gt;a piece of chicken wings&lt;/li&gt;
&lt;li&gt;a box of chicken wings&lt;/li&gt;
&lt;li&gt;a portion of chicken wings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;staff-没有复数形式&#34;&gt;staff 没有复数形式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We have a staff of 100.&lt;/li&gt;
&lt;li&gt;We have 100 staff.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超过一个即复数&#34;&gt;超过一个即复数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;one and a half hours&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;名字前面不加-the&#34;&gt;名字前面不加 the&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;at the airport&lt;/li&gt;
&lt;li&gt;at JFK airport&lt;/li&gt;
&lt;li&gt;&lt;del&gt;at the JFK airport&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语花费&#34;&gt;英语花费&lt;/h2&gt;
&lt;h3 id=&#34;take-sb-dot-plus-时间-plus-to-do-sth-dot&#34;&gt;take sb. + 时间 + to do sth.&lt;/h3&gt;
&lt;p&gt;sb. 处于被动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It usually takes two hours to finish my homework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sb-dot-spend-plus-时间-plus-on-sth-dot&#34;&gt;sb. spend + 时间 + on sth.&lt;/h3&gt;
&lt;p&gt;sb. 处于主动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll have to spend 20 more minutes on the trip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;花钱&#34;&gt;花钱&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I will spend a little more on it.&lt;/li&gt;
&lt;li&gt;It will cost me a little more.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语支付&#34;&gt;英语支付&lt;/h2&gt;
&lt;h3 id=&#34;pay-付款&#34;&gt;pay 付款&lt;/h3&gt;
&lt;p&gt;支付方式决定了介词的使用，现金使用 in ，支付方式使用 by/with，如果是信用卡则使用 by，特指某一张信用卡则用 with：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pay in cash&lt;/li&gt;
&lt;li&gt;pay by credit card&lt;/li&gt;
&lt;li&gt;pay with a credit card&lt;/li&gt;
&lt;li&gt;pay by Alipay/WeChat&lt;/li&gt;
&lt;li&gt;pay with Alipay/WithChat&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;charge-记账&#34;&gt;charge 记账&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;charge &amp;hellip; to &amp;hellip; 算到 &amp;hellip; 的账上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;charge-要价&#34;&gt;charge 要价&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m going to charge you $20 for the cleaning.&lt;/p&gt;
&lt;h2 id=&#34;英语倍数&#34;&gt;英语倍数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;triple&lt;/li&gt;
&lt;li&gt;times （至少 2 倍）
&lt;ul&gt;
&lt;li&gt;increase by &amp;hellip; times 上涨&amp;hellip;倍&lt;/li&gt;
&lt;li&gt;by up 随意口语&lt;/li&gt;
&lt;li&gt;by 程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>流利英语</title>
      <link>https://www.linuxzen.com/notes/notes/20210921091537-%E6%B5%81%E5%88%A9%E8%8B%B1%E8%AF%AD/</link>
      <pubDate>Tue, 21 Sep 2021 09:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210921091537-%E6%B5%81%E5%88%A9%E8%8B%B1%E8%AF%AD/</guid>
      <description>tags: Learning English  连读 变音  /d/ + /j/ = /dʒj/ Woul~d y~ou like to try int on? /t/ + /j/ = /tʃj/ What abou~t you~?  词尾辅音 + 词首元音  I~t i~s A glas~s o~f water  还原 r RP
 he~r i~deas Whe~re is i~t?  语块切割 Chunking 语块（Chunk） 能表达实际含义且语义不割裂的词串。
语块切割（Chunking） 根据说话节奏将句子自然切割为若干语块。
语块语连读 同一语块内能连则连。
吞音 基本原则 同一语块内，音同则吞。
示例   Excuse me, Coul~d you~ tell me how I can get to Pret A Monger?</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;连读&#34;&gt;连读&lt;/h2&gt;
&lt;h3 id=&#34;变音&#34;&gt;变音&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/d/&lt;/code&gt; + &lt;code&gt;/j/&lt;/code&gt; = &lt;code&gt;/dʒj/&lt;/code&gt;
Woul~d y~ou like to try int on?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/t/&lt;/code&gt; + &lt;code&gt;/j/&lt;/code&gt; = &lt;code&gt;/tʃj/&lt;/code&gt;
What abou~t you~?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;词尾辅音-plus-词首元音&#34;&gt;词尾辅音 + 词首元音&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I~t i~s&lt;/li&gt;
&lt;li&gt;A glas~s o~f water&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;还原-r&#34;&gt;还原 r&lt;/h3&gt;
&lt;p&gt;RP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he~r i~deas&lt;/li&gt;
&lt;li&gt;Whe~re is i~t?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语块切割-chunking&#34;&gt;语块切割 Chunking&lt;/h2&gt;
&lt;h3 id=&#34;语块-chunk&#34;&gt;语块（Chunk）&lt;/h3&gt;
&lt;p&gt;能表达实际含义且语义不割裂的词串。&lt;/p&gt;
&lt;h3 id=&#34;语块切割-chunking&#34;&gt;语块切割（Chunking）&lt;/h3&gt;
&lt;p&gt;根据说话节奏将句子自然切割为若干语块。&lt;/p&gt;
&lt;h3 id=&#34;语块语连读&#34;&gt;语块语连读&lt;/h3&gt;
&lt;p&gt;同一语块内能连则连。&lt;/p&gt;
&lt;h2 id=&#34;吞音&#34;&gt;吞音&lt;/h2&gt;
&lt;h3 id=&#34;基本原则&#34;&gt;基本原则&lt;/h3&gt;
&lt;p&gt;同一语块内，音同则吞。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Excuse me, Coul~d you~ tell me how I can get to Pret A Monger?&lt;/p&gt;
&lt;p&gt;get to -&amp;gt; geto&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;爆破音处于词尾&#34;&gt;爆破音处于词尾&lt;/h3&gt;
&lt;p&gt;三组浊化音（学名：爆破音）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/t/&lt;/code&gt;, &lt;code&gt;/d/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/k/&lt;/code&gt;, &lt;code&gt;/g/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/p/&lt;/code&gt;, &lt;code&gt;/b/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;爆破音处于词尾，且该词处于语块末尾或者后连辅音。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;twenty-eigh~th o~f June.&lt;/li&gt;
&lt;li&gt;Is that OKAY wi~th y~ou?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重音等时性&#34;&gt;重音等时性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;英语语句中，重读音节之间的时长基本相等。&lt;/li&gt;
&lt;li&gt;音节等时：句中词语缩话的时间&lt;del&gt;并非&lt;/del&gt;由音节数量的总数决定，而是由&lt;strong&gt;重读音节数量&lt;/strong&gt;决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1rt4y197Dy&#34;&gt;Video: 英语的节奏和&amp;quot;等时性&amp;quot;(这才是中式英语的罪魁祸首!)&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>英语习语</title>
      <link>https://www.linuxzen.com/notes/notes/20210920081734-%E8%8B%B1%E8%AF%AD%E4%B9%A0%E8%AF%AD/</link>
      <pubDate>Mon, 20 Sep 2021 08:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210920081734-%E8%8B%B1%E8%AF%AD%E4%B9%A0%E8%AF%AD/</guid>
      <description>tags: Learning English  Give me a hand come in 有  come in all/different colors/size  come on 「随意」鼓动、鼓励、催促 come to 总计 Excuse me 抱歉/引起注意 by the way/BTW 顺便说一下 shame on sb.! sb. 可耻 make it 成功达成 do/try one&amp;rsquo;s best (to do sth.) 尽最大努力做某事 sure thing no problem.
礼貌请求 礼貌程度  please &amp;gt; please 疑问句 &amp;gt; 肯定句 could &amp;gt; would &amp;gt; can  示例：
 Show me (please) Can you show me?</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;give-me-a-hand&#34;&gt;Give me a hand&lt;/h2&gt;
&lt;h2 id=&#34;come-in-有&#34;&gt;come in 有&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;come in all/different colors/size&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;come-on-随意-鼓动-鼓励-催促&#34;&gt;come on 「随意」鼓动、鼓励、催促&lt;/h2&gt;
&lt;h2 id=&#34;come-to-总计&#34;&gt;come to 总计&lt;/h2&gt;
&lt;h2 id=&#34;excuse-me-抱歉-引起注意&#34;&gt;Excuse me 抱歉/引起注意&lt;/h2&gt;
&lt;h2 id=&#34;by-the-way-btw-顺便说一下&#34;&gt;by the way/BTW 顺便说一下&lt;/h2&gt;
&lt;h2 id=&#34;shame-on-sb-dot-sb-dot-可耻&#34;&gt;shame on sb.! sb. 可耻&lt;/h2&gt;
&lt;h2 id=&#34;make-it-成功达成&#34;&gt;make it 成功达成&lt;/h2&gt;
&lt;h2 id=&#34;do-try-one-s-best--to-do-sth-dot--尽最大努力做某事&#34;&gt;do/try one&amp;rsquo;s best (to do sth.) 尽最大努力做某事&lt;/h2&gt;
&lt;h2 id=&#34;sure-thing&#34;&gt;sure thing&lt;/h2&gt;
&lt;p&gt;no problem.&lt;/p&gt;
&lt;h2 id=&#34;礼貌请求&#34;&gt;礼貌请求&lt;/h2&gt;
&lt;h3 id=&#34;礼貌程度&#34;&gt;礼貌程度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;please &amp;gt; &lt;del&gt;please&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;疑问句 &amp;gt; 肯定句&lt;/li&gt;
&lt;li&gt;could &amp;gt; would &amp;gt; can&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Show me (please)&lt;/li&gt;
&lt;li&gt;Can you show me?&lt;/li&gt;
&lt;li&gt;Can you show me please?&lt;/li&gt;
&lt;li&gt;Would you show me (please)?&lt;/li&gt;
&lt;li&gt;Could you show me (please)?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;适用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随意聊天 1-2&lt;/li&gt;
&lt;li&gt;服务场合 3-5&lt;/li&gt;
&lt;li&gt;商务场合 4-5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;give-me-a-hand&#34;&gt;Give me a hand&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;别愣着了
Give me a hand (please)!&lt;/li&gt;
&lt;li&gt;正常请求
Can you give me a hand (please)!&lt;/li&gt;
&lt;li&gt;客气请求
Would/Could you give me a hand (please)!&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;would-like-委婉表示想要-do-sth-dot--20210920075417-英语短语-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210920075417-%E8%8B%B1%E8%AF%AD%E7%9F%AD%E8%AF%AD/#would-like-委婉表示想要-do-sth-dot&#34;&gt;would like 委婉表示想要 do sth.&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;go-with-委婉-选择-采纳&#34;&gt;go with 【委婉】选择、采纳&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ll definitely go with your idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;may-i-start-with-dot-dot-dot&#34;&gt;May I start with &amp;hellip;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;May I start with a roast chicken wings?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;be-not-a-big-fan-委婉拒绝&#34;&gt;be not a big fan: 委婉拒绝&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I am not a big fan (of it), sorry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;i-am-sorry-but-plus-各式句型&#34;&gt;I am sorry but + 各式句型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I am sorry but I have to do it.&lt;/li&gt;
&lt;li&gt;I am sorry but can you wait a second&lt;/li&gt;
&lt;li&gt;I am sorry but what can I do.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;it-sb-dot-plus-seem-to-do-弱化语气&#34;&gt;It/sb. + seem to do 弱化语气&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It seems to be very popular&amp;hellip;&lt;/li&gt;
&lt;li&gt;I can&amp;rsquo;t seem to find&amp;hellip;&lt;/li&gt;
&lt;li&gt;It seems (that)
It 虚主语&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prefer-to-do-sth-dot&#34;&gt;prefer to do sth.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I prefer to pay now please.&lt;/li&gt;
&lt;li&gt;I would like to pay now please.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;would-will-之委婉客气版&#34;&gt;would：will 之委婉客气版&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;That would be $64.58
That will be $64.58.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;身体健康程度&#34;&gt;身体健康程度&lt;/h2&gt;
&lt;p&gt;find &amp;lt; good &amp;lt; great&lt;/p&gt;
&lt;h2 id=&#34;名字和人称顺序&#34;&gt;名字和人称顺序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lisa and I
I 置后&lt;/li&gt;
&lt;li&gt;You and Lisa
You 置前&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时日顺序&#34;&gt;时日顺序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通常从小到大
&lt;ul&gt;
&lt;li&gt;See you at 1pm this Sunday.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除非特别强调
&lt;ul&gt;
&lt;li&gt;See you this Sunday at 1pm.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thank-you-in-advance&#34;&gt;Thank you in advance&lt;/h2&gt;
&lt;p&gt;提前感谢您，不能说：&lt;del&gt;Thank you early!&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;日期表达&#34;&gt;日期表达&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jan. -&amp;gt; January &lt;code&gt;/ˈdʒænjuəri/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Feb. -&amp;gt; February &lt;code&gt;/ˈfebruəri/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mar. -&amp;gt; March &lt;code&gt;/mɑːtʃ/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apr. -&amp;gt; April &lt;code&gt;/ˈeiprəl/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;May -&amp;gt; May &lt;code&gt;/mei/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Jun. -&amp;gt; June &lt;code&gt;/dʒuːn/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Jul. -&amp;gt; Junly &lt;code&gt;/dʒˈlai/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Aug. -&amp;gt; August &lt;code&gt;/ɔːɡəst/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sep. -&amp;gt; September &lt;code&gt;/səpˈtembə/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Oct. -&amp;gt; October &lt;code&gt;/ɔkˈtəubə/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Nov. -&amp;gt; November &lt;code&gt;/nəuˈvembə/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dec. -&amp;gt; December &lt;code&gt;/diˈsembə/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;年月日读写-英式-bre&#34;&gt;年月日读写：英式（BrE）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dd/MM/yyyy
31st Oct 2019
(the thirty-first of October twenty nineteen)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;年月日读写-美式-ame&#34;&gt;年月日读写：美式（AmE）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MM/dd/yyyy
Oct 31st 2019
(October the thrity-first twenty nineteen)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;日期问答&#34;&gt;日期问答&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s the date today? （日期）
1st May 2020&lt;/li&gt;
&lt;li&gt;What day is it today?（星期）
It&amp;rsquo;s Thursday (today).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;星期-plus-年月日&#34;&gt;星期 + 年月日&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Thursday October 31st 2019&lt;/li&gt;
&lt;li&gt;Thursday 31st Oct 2019&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语牛排-cooked-程度&#34;&gt;英语牛排 cooked 程度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;well 熟的&lt;/li&gt;
&lt;li&gt;medium &lt;code&gt;/miːdjəm/&lt;/code&gt; 中等等&lt;/li&gt;
&lt;li&gt;rare &lt;code&gt;/rɛə/&lt;/code&gt; 生的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;well done 10&lt;/li&gt;
&lt;li&gt;medium well 7&lt;/li&gt;
&lt;li&gt;medium 5&lt;/li&gt;
&lt;li&gt;medium rare 3&lt;/li&gt;
&lt;li&gt;rare 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;take-a-rest&#34;&gt;take a rest&lt;/h2&gt;
&lt;h2 id=&#34;英语小数点读法&#34;&gt;英语小数点读法&lt;/h2&gt;
&lt;p&gt;64.58&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正式：64 point 58&lt;/li&gt;
&lt;li&gt;日常：64 &lt;del&gt;point&lt;/del&gt; 58&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;you-can-t-miss-it&#34;&gt;You can&amp;rsquo;t miss it&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>英语语法结构</title>
      <link>https://www.linuxzen.com/notes/notes/20210920081114-%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 20 Sep 2021 08:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210920081114-%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84/</guid>
      <description>tags: Learning English  双宾语  例句：I want to buy a birthday gift for my sister. 结构：buy sth. for sb. 双宾语：by sb. sth.  buy my sister a birthday gift. Can I buy a drink for you? Can I buy you a drink?    双宾语限制 第二个宾语必须为名词，不能是人称代词（pron.）。
下面语句不能使用双宾语
I want to buy you it.(X)
双宾语动词 bring/give/tell/sell/ask/show  Bring it to me Bring me a present. Give it to me Give me the pen.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;双宾语&#34;&gt;双宾语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例句：I want to buy a birthday gift for my sister.&lt;/li&gt;
&lt;li&gt;结构：buy sth. for sb.&lt;/li&gt;
&lt;li&gt;双宾语：by sb. sth.
&lt;ul&gt;
&lt;li&gt;buy my sister a birthday gift.&lt;/li&gt;
&lt;li&gt;Can I buy a drink for you?
Can I buy you a drink?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双宾语限制&#34;&gt;双宾语限制&lt;/h3&gt;
&lt;p&gt;第二个宾语必须为名词，不能是人称代词（pron.）。&lt;/p&gt;
&lt;p&gt;下面语句不能使用双宾语&lt;/p&gt;
&lt;p&gt;I want to buy you it.(X)&lt;/p&gt;
&lt;h3 id=&#34;双宾语动词-bring-give-tell-sell-ask-show&#34;&gt;双宾语动词 bring/give/tell/sell/ask/show&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bring it to me
Bring me a present.&lt;/li&gt;
&lt;li&gt;Give it to me
Give me the pen.&lt;/li&gt;
&lt;li&gt;tell the story to me
tell me the story&lt;/li&gt;
&lt;li&gt;email the photo to me
email me the photo&lt;/li&gt;
&lt;li&gt;sell the handbag to her
sell her the handbag&lt;/li&gt;
&lt;li&gt;ask sb. sth.&lt;/li&gt;
&lt;li&gt;show sb. sth.&lt;/li&gt;
&lt;li&gt;take the coffee to her: 不能使用&lt;/li&gt;
&lt;li&gt;Give me the hand：习语不能使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宾语从句&#34;&gt;宾语从句&lt;/h2&gt;
&lt;h3 id=&#34;i-think--that--dot-dot-dot&#34;&gt;I think (that) &amp;hellip;&lt;/h3&gt;
&lt;p&gt;在「一句简单句有且只有一个谓语动词」的基础上实现复杂句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think there is one on Green Street.
&lt;ul&gt;
&lt;li&gt;主句：I think&amp;hellip;&lt;/li&gt;
&lt;li&gt;从句：there is&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;宾语从句：从句作为宾语。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think (that) there is&amp;hellip;
&lt;ul&gt;
&lt;li&gt;that 作为引导标志可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;i-am-sure--that--dot-dot-dot&#34;&gt;I am sure (that) &amp;hellip;&lt;/h3&gt;
&lt;p&gt;结构类似 I think (that)&lt;/p&gt;
&lt;h3 id=&#34;i-remember--that--dot-dot-dot&#34;&gt;I remember (that)&amp;hellip;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I remember (that) she walked in the rain for one and a half hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双宾语-plus-宾语从句&#34;&gt;双宾语 + 宾语从句&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Let me tell you (that) you can find butter over there.&lt;/li&gt;
&lt;li&gt;I can tell you (that) he is a good man&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;问题型宾语从句&#34;&gt;问题型宾语从句&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;结构：where + I can find buffer&lt;/li&gt;
&lt;li&gt;特殊疑问词 + 陈述句语序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Could you tell me where I can find butter?&lt;/li&gt;
&lt;li&gt;Could you let me know What he does?&lt;/li&gt;
&lt;li&gt;Could you tell me What her job is?&lt;/li&gt;
&lt;li&gt;Could you ask him Where they are from?&lt;/li&gt;
&lt;li&gt;Could you teach us How we should use dumpling flour?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;倒装&#34;&gt;倒装&lt;/h2&gt;
&lt;h3 id=&#34;here-倒装-sb-dot-到了&#34;&gt;here 倒装： sb. 到了&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here we/you/they are.&lt;/li&gt;
&lt;li&gt;Here I am.&lt;/li&gt;
&lt;li&gt;Here he/she/it is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;here-is-are-dot-dot-dot-给你&#34;&gt;here is/are &amp;hellip; 给你&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here are my reservation number and my passport.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;so-特殊倒装表示-sb-dot-也是&#34;&gt;so 特殊倒装表示 sb. 也是&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;be: So + be + sb.&lt;/li&gt;
&lt;li&gt;do: Do + do/does + sb.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反问&#34;&gt;反问&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Aren&amp;rsquo;t they the same?
疑问句：Are they the same?&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t you know that?
疑问句：Do you konw that?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;反问回答-肯定yes-否定no&#34;&gt;反问回答 肯定yes/否定no&lt;/h3&gt;
&lt;p&gt;针对返回的回答这里和中文习惯不一样，英语回答的不是反问，而是回答问题。&lt;/p&gt;
&lt;p&gt;示例1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aren&amp;rsquo;t they the same?&lt;/li&gt;
&lt;li&gt;No, they are not. （不，他们不一样）&lt;/li&gt;
&lt;li&gt;Yes, there are.（是，他们一样）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t you know that? 难道你不知道吗？&lt;/li&gt;
&lt;li&gt;Yes, I do&lt;/li&gt;
&lt;li&gt;Yeah&lt;/li&gt;
&lt;li&gt;No, I don&amp;rsquo;t&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;祈使句&#34;&gt;祈使句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(You)&lt;/del&gt; Look there!&lt;/li&gt;
&lt;li&gt;&lt;del&gt;(You)&lt;/del&gt; Please wait here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;祈使句-plus-and-sb-dot-will-dot-dot&#34;&gt;祈使句 + and sb. will ..&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just avoid the major streets and we will be there in 16 minutes.&lt;/li&gt;
&lt;li&gt;Take the first right and you&amp;rsquo;ll find Red Lobster is just across the street.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原因状语从句&#34;&gt;原因状语从句&lt;/h2&gt;
&lt;h3 id=&#34;as-because-引导的原因状语从句&#34;&gt;as/because 引导的原因状语从句&lt;/h3&gt;
&lt;p&gt;There are a lot larger, as the room size nearly doubles.&lt;/p&gt;
&lt;p&gt;强调因果的程度上 as 小于 because。&lt;/p&gt;
&lt;h4 id=&#34;因果顺序任意&#34;&gt;因果顺序任意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;As the room size nearly doubles, they are a lot larger.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;so-引导的原因状语从句&#34;&gt;so 引导的原因状语从句&lt;/h3&gt;
&lt;p&gt;The room size nearly doubles, so they are a lot larger.&lt;/p&gt;
&lt;h3 id=&#34;as-because-不能和-so-一起使用&#34;&gt;as/because 不能和 so 一起使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;So they are a lot larger, the room size nearly doubles&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;As/because the room size nearly doubles, so they are a lot larger.&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;时态无限定&#34;&gt;时态无限定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If it rains, I&amp;rsquo;ll stay home.&lt;/li&gt;
&lt;li&gt;As it is raining now. I&amp;rsquo;ll stay home.&lt;/li&gt;
&lt;li&gt;As it is raining now, I&amp;rsquo;m staying home.&lt;/li&gt;
&lt;li&gt;As it is going to rain, I&amp;rsquo;ll stay home.&lt;/li&gt;
&lt;li&gt;As it is going to rain, I&amp;rsquo;m straying home.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>英语常用词</title>
      <link>https://www.linuxzen.com/notes/notes/20210920075833-%E8%8B%B1%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D/</link>
      <pubDate>Mon, 20 Sep 2021 07:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210920075833-%E8%8B%B1%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D/</guid>
      <description> tags: Learning English  seem 表示似乎  It seems to be very popular nowdays.  用作委婉 背景：the man in the photo。 对比以下两句
 He is in good health He seems to be in good health(这句是错的 He seems in good health)  表示犹豫  That&amp;rsquo;s not right That doesn&amp;rsquo;t seem right That doesn&amp;rsquo;t seem to be right  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;seem&#34;&gt;seem&lt;/h2&gt;
&lt;h3 id=&#34;表示似乎&#34;&gt;表示似乎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It seems to be very popular nowdays.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用作委婉&#34;&gt;用作委婉&lt;/h3&gt;
&lt;p&gt;背景：the man in the photo。
对比以下两句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;He is in good health&lt;/li&gt;
&lt;li&gt;He seems to be in good health(这句是错的 He seems in good health)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;表示犹豫&#34;&gt;表示犹豫&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;That&amp;rsquo;s not right&lt;/li&gt;
&lt;li&gt;That doesn&amp;rsquo;t seem right&lt;/li&gt;
&lt;li&gt;That doesn&amp;rsquo;t seem to be right&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>英语短语</title>
      <link>https://www.linuxzen.com/notes/notes/20210920075417-%E8%8B%B1%E8%AF%AD%E7%9F%AD%E8%AF%AD/</link>
      <pubDate>Mon, 20 Sep 2021 07:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210920075417-%E8%8B%B1%E8%AF%AD%E7%9F%AD%E8%AF%AD/</guid>
      <description>tags: Learning English  shape ʃeip  be in great/good shape stay/keep in (good) shape  英语表示次数范围  five times a month once two weeks  英语表示尺码  loose /luːs/ 松的 tight /tait/ 紧的  what/how about 提议  What/How about some coffee? What/How about you?  穿衣：try on/take off/put on  n.: try on sth I&amp;rsquo;d like to try on the shoes. pron.: try sth. on I&amp;rsquo;d like to try them on.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shape-ʃeip&#34;&gt;shape &lt;em&gt;ʃeip&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;be in great/good shape&lt;/li&gt;
&lt;li&gt;stay/keep in (good) shape&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语表示次数范围&#34;&gt;英语表示次数范围&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;five times a month&lt;/li&gt;
&lt;li&gt;once two weeks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;英语表示尺码&#34;&gt;英语表示尺码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;loose &lt;code&gt;/luːs/&lt;/code&gt; 松的&lt;/li&gt;
&lt;li&gt;tight &lt;code&gt;/tait/&lt;/code&gt; 紧的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-how-about-提议&#34;&gt;what/how about 提议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What/How about some coffee?&lt;/li&gt;
&lt;li&gt;What/How about you?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;穿衣-try-on-take-off-put-on&#34;&gt;穿衣：try on/take off/put on&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;n.: try on sth
I&amp;rsquo;d like to try on the shoes.&lt;/li&gt;
&lt;li&gt;pron.: try sth. on
I&amp;rsquo;d like to try them on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;think-of-认为-sth-dot-怎么样&#34;&gt;think of 认为 sth. 怎么样&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What do you think of my new shirt?&lt;/li&gt;
&lt;li&gt;What does she think of me?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;would-like-委婉表示想要-do-sth-dot&#34;&gt;would like 委婉表示想要 do sth.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;d like to see some casual shirts.&lt;/p&gt;
&lt;p&gt;&amp;rsquo;d = would&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to buy a birthday gift for my sister
want to 直接，适合朋友之间对话。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构&#34;&gt;结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;would like + to do sth.
&lt;ul&gt;
&lt;li&gt;Would you like to join us?&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like to have some water&lt;/li&gt;
&lt;li&gt;When would you like to go to the moveis?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;would like + sb. to do sth.
&lt;ul&gt;
&lt;li&gt;Would you like me to show you?&lt;/li&gt;
&lt;li&gt;What would you like me to do?&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like you to make a reservation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;would like + sth.(+ 介词短语)
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;d like a table&lt;/li&gt;
&lt;li&gt;Would you like some water?&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like a table in a non-smoking area.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like a table for him.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like some water for breakfast.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like the reservation for 1pm.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d like to make a reservation for 1pm.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chat-with-to-sb-dot-about-sth-dot&#34;&gt;chat with/to sb. about sth.&lt;/h2&gt;
&lt;h2 id=&#34;use-sth-dot-do-for-sth-dot-用-dot-dot-dot-来做-dot-dot-dot&#34;&gt;use sth. do/for sth. 用 &amp;hellip; 来做 &amp;hellip;&lt;/h2&gt;
&lt;h2 id=&#34;英语指路&#34;&gt;英语指路&lt;/h2&gt;
&lt;h3 id=&#34;沿着路-直走&#34;&gt;沿着路/直走&lt;/h3&gt;
&lt;p&gt;go along/down + 街道(street / road / avenue / Ave.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go along Fourth Street&lt;/li&gt;
&lt;li&gt;go down this Queen Ave.&lt;/li&gt;
&lt;li&gt;go straight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go + 距离 + down + 街道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go two blocks down the street&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go straight (on) 直走&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go straight on past the police station&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拐弯&#34;&gt;拐弯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;turn&lt;/li&gt;
&lt;li&gt;turn left/right
&lt;ul&gt;
&lt;li&gt;turn right onto Queen Avenue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;make/take a left/right turn&lt;/li&gt;
&lt;li&gt;make/take a left/right
&lt;ul&gt;
&lt;li&gt;take a left at the second crossing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-advance-adv-dot-提前&#34;&gt;in advance adv. 提前&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Do I need to book early?&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll go there in advance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210920081734-%E8%8B%B1%E8%AF%AD%E4%B9%A0%E8%AF%AD/#thank-you-in-advance&#34;&gt;Thank you in advance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get&#34;&gt;get&lt;/h2&gt;
&lt;h3 id=&#34;get-sb-dot-sth-dot-to-do&#34;&gt;get sb. sth. to do&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;May I get you anything to drink?&lt;/li&gt;
&lt;li&gt;May I get you a shirt to try on?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get-become-plus-比较级&#34;&gt;get/become + 比较级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s getting worse.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s getting hotter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;either-dot-dot-dot-or-二选一-neither-dot-dot-dot-nor-二者皆否&#34;&gt;either &amp;hellip; or 二选一/neither &amp;hellip; nor 二者皆否&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;take either the railroad train or Line A.&lt;/li&gt;
&lt;li&gt;You should take neither the railroad train nor Line A.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>英语词性</title>
      <link>https://www.linuxzen.com/notes/notes/20210920073442-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7/</link>
      <pubDate>Mon, 20 Sep 2021 07:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210920073442-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7/</guid>
      <description>tags: Learning English  副词 adv/adverb 是指在句子中表示行为或状态特征的词，用以修饰动词、形容词、其他副词或全句，表示时间、地点、程度、方式等概念。 副词可分为：时间副词、频率副词、地点副词、方式副词、程度副词、疑问副词、连接副词、关系副词、表顺序的副词以及表完成的副词。
频率副词  always usually often sometimes  about 表示大约大约修饰数量。
形容词 adj 形容词后缀 -ful  helpful useful thankful  形容词后缀 -ed  interested excited  形容词后缀 -ing  interesting exciting  动词 verb 情态动词 modal verb.
can(could)/may(might)/must/need/to/shall(should)/will(would).
动名词 形式 v.-ing 动词的名词化。
语法：名词 语意：动词
形变规则 特殊 1 -e：去 e 加 ing  live -&amp;gt; living give -&amp;gt; giving  特殊 2 短元音 + 一辅音：重复最后一个字母加 ing  jog -&amp;gt; jogging swim -&amp;gt; swimming  常规：直接加 ing  do -&amp;gt; doing study -&amp;gt; studying  词性 I usually go swimming.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;副词-adv-adverb&#34;&gt;副词 adv/adverb&lt;/h2&gt;
&lt;p&gt;是指在句子中表示行为或状态特征的词，用以修饰动词、形容词、其他副词或全句，表示时间、地点、程度、方式等概念。
副词可分为：时间副词、频率副词、地点副词、方式副词、程度副词、疑问副词、连接副词、关系副词、表顺序的副词以及表完成的副词。&lt;/p&gt;
&lt;h3 id=&#34;频率副词&#34;&gt;频率副词&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;always&lt;/li&gt;
&lt;li&gt;usually&lt;/li&gt;
&lt;li&gt;often&lt;/li&gt;
&lt;li&gt;sometimes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;about&#34;&gt;about&lt;/h3&gt;
&lt;p&gt;表示大约大约修饰数量。&lt;/p&gt;
&lt;h2 id=&#34;形容词-adj&#34;&gt;形容词 adj&lt;/h2&gt;
&lt;h3 id=&#34;形容词后缀-ful&#34;&gt;形容词后缀 -ful&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;helpful&lt;/li&gt;
&lt;li&gt;useful&lt;/li&gt;
&lt;li&gt;thankful&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;形容词后缀-ed&#34;&gt;形容词后缀 -ed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;interested&lt;/li&gt;
&lt;li&gt;excited&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;形容词后缀-ing&#34;&gt;形容词后缀 -ing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;interesting&lt;/li&gt;
&lt;li&gt;exciting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动词-verb&#34;&gt;动词 verb&lt;/h2&gt;
&lt;h3 id=&#34;情态动词&#34;&gt;情态动词&lt;/h3&gt;
&lt;p&gt;modal verb.&lt;/p&gt;
&lt;p&gt;can(could)/may(might)/must/need/to/shall(should)/will(would).&lt;/p&gt;
&lt;h3 id=&#34;动名词&#34;&gt;动名词&lt;/h3&gt;
&lt;p&gt;形式 &lt;code&gt;v.-ing&lt;/code&gt; 动词的名词化。&lt;/p&gt;
&lt;p&gt;语法：名词
语意：动词&lt;/p&gt;
&lt;h3 id=&#34;形变规则&#34;&gt;形变规则&lt;/h3&gt;
&lt;h4 id=&#34;特殊-1-e-去-e-加-ing&#34;&gt;特殊 1 -e：去 e 加 ing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;live -&amp;gt; living&lt;/li&gt;
&lt;li&gt;give -&amp;gt; giving&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;特殊-2-短元音-plus-一辅音-重复最后一个字母加-ing&#34;&gt;特殊 2 短元音 + 一辅音：重复最后一个字母加 ing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;jog -&amp;gt; jogging&lt;/li&gt;
&lt;li&gt;swim -&amp;gt; swimming&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常规-直接加-ing&#34;&gt;常规：直接加 ing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;do -&amp;gt; doing&lt;/li&gt;
&lt;li&gt;study -&amp;gt; studying&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;词性&#34;&gt;词性&lt;/h3&gt;
&lt;p&gt;I usually go swimming.&lt;/p&gt;
&lt;p&gt;动词含义：抽象
动名词: ucn.&lt;/p&gt;
&lt;p&gt;固定词组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you do for a living?&lt;/li&gt;
&lt;li&gt;How do you make a liveing?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常规用法&#34;&gt;常规用法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;特殊动词 + 动名词
&lt;ul&gt;
&lt;li&gt;start
&lt;ul&gt;
&lt;li&gt;start doing sth.&lt;/li&gt;
&lt;li&gt;start to do sth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go + doing 表示去做某事。
&lt;ul&gt;
&lt;li&gt;go jogging&lt;/li&gt;
&lt;li&gt;go swimming&lt;/li&gt;
&lt;li&gt;go shopping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接使用
&lt;ul&gt;
&lt;li&gt;名词用法
&lt;ul&gt;
&lt;li&gt;I lkie swimming.&lt;/li&gt;
&lt;li&gt;Swimming is my favorite.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;系动词&#34;&gt;系动词&lt;/h3&gt;
&lt;p&gt;系动词，也称连系动词（Linking verb），是用来辅助主语的动词。它本身有词义，但不能单独用作谓语，其后必须跟表语，构成系表结构说明主语的状况、性质、特征等情况。
在英语中，系动词的功能主要是把表语（名词、形容词、某些副词、非谓词、介词短语、从句）和它的主语联系在一起，说明主语的性质、特征、品性或状态。它有自己的但不完全的词义，不能在句中独立作谓语，必须和后面的表语一起构成句子的谓语。它虽是虚词，但是其用法很复杂，而且不可忽视。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;He is quick.
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;He is quickly&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;He walks quickly.
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;He walks quick.&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构&#34;&gt;结构&lt;/h4&gt;
&lt;p&gt;v + adj. vs adv.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;He is quick (v. + adj.)
adj. -&amp;gt; sb./sth. 形容词修饰人或物。
be quick
他 &amp;lt;- 是快的，他 &amp;lt;- 很快。&lt;/li&gt;
&lt;li&gt;He walks quickly (v. + adv.)
adv. -&amp;gt; v. 副词修饰动作
走 &amp;lt;- 得快，快步 -&amp;gt; 走&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;v-plus-adj-系动词&#34;&gt;v + adj: 系动词&lt;/h4&gt;
&lt;p&gt;S. + v. + adj.&lt;/p&gt;
&lt;p&gt;v. + adj. -&amp;gt; S.&lt;/p&gt;
&lt;h4 id=&#34;v-plus-adv-实意动词&#34;&gt;v + adv: 实意动词&lt;/h4&gt;
&lt;h4 id=&#34;系动词-实意动词-plus-n-dot&#34;&gt;系动词/实意动词 + n.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;My name is Jake.&lt;/li&gt;
&lt;li&gt;Can I have your name?&lt;/li&gt;
&lt;li&gt;That sounds fun(ucn. 乐趣)
That sounds funny(adj. 滑稽的)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;介词-prep-preposition&#34;&gt;介词 prep/preposition&lt;/h2&gt;
&lt;p&gt;表示名词、代词等与句中其它词的关系，在句中不能单独作句子成分。介词后面一般有名词、代词或相当于名词的其他词类、短语或从句作它的宾语，表示与其他成分的关系。&lt;/p&gt;
&lt;h3 id=&#34;介词-plus-street&#34;&gt;介词 + street&lt;/h3&gt;
&lt;h4 id=&#34;ame--american-english&#34;&gt;AmE(American English)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;on the street/road
指地点在在 XXX 马路上&lt;/li&gt;
&lt;li&gt;in the street/road
在马路中间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;be--british-english&#34;&gt;BE(British English)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;in the street/road
通常情况下表示「在街上」&lt;/li&gt;
&lt;li&gt;on the street/road
有些时候用 on 表示「在街上」&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ame-and-be&#34;&gt;AmE &amp;amp; BE&lt;/h4&gt;
&lt;p&gt;具体到门牌号时用 at&lt;/p&gt;
&lt;p&gt;It is at No.10 Downing Street.&lt;/p&gt;
&lt;h3 id=&#34;介词-in-on-穿衣&#34;&gt;介词 in/on 穿衣&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;on: 衣服在人身上
I think it looks prefect on you!&lt;/li&gt;
&lt;li&gt;in: 人穿着衣服（在衣服里面）
He is in the blue shirt.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-plus-时间&#34;&gt;介词 + 时间&lt;/h3&gt;
&lt;h4 id=&#34;介词-in-on-时间点&#34;&gt;介词 in/on 时间点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;on: 具体落实到天
&lt;ul&gt;
&lt;li&gt;on Sunday&lt;/li&gt;
&lt;li&gt;on Sunday afternoon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;in:
in the afternoon&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;介词-at-时刻&#34;&gt;介词 at 时刻&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;at 1pm/1 o&amp;rsquo;clock&lt;/li&gt;
&lt;li&gt;固定搭配 at night/noon&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;介词-in-时间段&#34;&gt;介词 in 时间段&lt;/h4&gt;
&lt;p&gt;刻意模糊，可以同时表达：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &amp;hellip; 之内&lt;/li&gt;
&lt;li&gt;在 &amp;hellip; 之后&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;介词-at-on-周末&#34;&gt;介词 at/on 周末&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;at/on weekends&lt;/li&gt;
&lt;li&gt;at/on the weekend&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无介词&#34;&gt;无介词&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;every/all
&lt;ul&gt;
&lt;li&gt;What are busy at weekends.&lt;/li&gt;
&lt;li&gt;What are busy every weekend.&lt;/li&gt;
&lt;li&gt;What are busy all weekends.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;this/that/these/those
&lt;ul&gt;
&lt;li&gt;See you on Sunday.&lt;/li&gt;
&lt;li&gt;See you this Sunday.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;next/last
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ll not be free that morning.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll not be free next morning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;介词-within-时间段&#34;&gt;介词 within 时间段&lt;/h4&gt;
&lt;p&gt;无歧义的表达「在 &amp;hellip; 之内」。&lt;/p&gt;
&lt;h4 id=&#34;介词-for-时间段表示持续&#34;&gt;介词 for 时间段表示持续&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;How long would you like to stay in our hotel
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;d like to stay for there nights.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How far is the hotel?
&lt;ul&gt;
&lt;li&gt;It will not be for long.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-at-the-bar-在吧台&#34;&gt;介词 at the bar 在吧台&lt;/h3&gt;
&lt;p&gt;at/in the bar 在酒吧。&lt;/p&gt;
&lt;h3 id=&#34;介词-for-prep-dot-为了&#34;&gt;介词 for prep. 为了&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;thanks for the/your help&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-as-比较级&#34;&gt;介词 as 比较级&lt;/h3&gt;
&lt;p&gt;as 如同: Thanks, please go as fast as possible.&lt;/p&gt;
&lt;h3 id=&#34;介词-past&#34;&gt;介词 past&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;You can go/walk past the street.&lt;/li&gt;
&lt;li&gt;You can pass the street.&lt;/li&gt;
&lt;li&gt;不能说：&lt;del&gt;You can past the street&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;介词-across&#34;&gt;介词 across&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is across the street.&lt;/li&gt;
&lt;li&gt;You can go/walk across the street.&lt;/li&gt;
&lt;li&gt;不能说：&lt;del&gt;You can across the street&lt;/del&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-per-按每个&#34;&gt;介词 per 按每个&lt;/h3&gt;
&lt;h3 id=&#34;介词-at-in-front&#34;&gt;介词 at/in front&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;at the front dest/reception
at the front dest&lt;/li&gt;
&lt;li&gt;in front of: 方位 before
&lt;ul&gt;
&lt;li&gt;Hero is in front of the hotel.&lt;/li&gt;
&lt;li&gt;Hero is standing in front of hotel.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-of-vs-for-sb-dot&#34;&gt;介词 of VS for sb.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is + adj. + of sb. + 不定式
&lt;ul&gt;
&lt;li&gt;That&amp;rsquo;s very generous of you to give me the free upgrade.
&lt;ol&gt;
&lt;li&gt;adj. 修饰 sb. ：You are very generous。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It is + adj. + for sb. + 不定式
&lt;ul&gt;
&lt;li&gt;It is very important for us to learn English.
&lt;ol&gt;
&lt;li&gt;adj. 修饰 不定式：To learn English is very important(不是 &lt;del&gt;We are important&lt;/del&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-in-bed&#34;&gt;介词 in bed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;He is in bed.
卧床（生病、睡觉、休息）&lt;/li&gt;
&lt;li&gt;He is in the bed.
在床上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-besides-adv-dot-prep-dot-除此之外&#34;&gt;介词 besides adv./prep. 除此之外&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Besides, you need to drink a lot of water.&lt;/li&gt;
&lt;li&gt;Besides that, you need to drink a lot of water.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-util-prep-dot-plus-时间-直到-dot-dot-dot-时间&#34;&gt;介词 util prep. + 时间：直到 &amp;hellip; 时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll have to stay in bed until next Monday.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介词-like-prep-dot&#34;&gt;介词 like prep.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You look like hime.&lt;/li&gt;
&lt;li&gt;You sound like hime.&lt;/li&gt;
&lt;li&gt;You are like him.&lt;/li&gt;
&lt;li&gt;What does he look/sound like?&lt;/li&gt;
&lt;li&gt;What is he like?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反身代词-pron-dot&#34;&gt;反身代词 pron.&lt;/h2&gt;
&lt;p&gt;你我他 + self（单数）/selves（复数）&lt;/p&gt;
&lt;h3 id=&#34;第一-二人称-所有格-plus-self-selves&#34;&gt;第一、二人称 所有格 + self/selves&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;our -&amp;gt; ourselves&lt;/li&gt;
&lt;li&gt;my -&amp;gt; myself&lt;/li&gt;
&lt;li&gt;your -&amp;gt; yourself&lt;/li&gt;
&lt;li&gt;your -&amp;gt; youselves&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第三人称-宾格-plus-self-selves&#34;&gt;第三人称 宾格 + self/selves&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;himself&lt;/li&gt;
&lt;li&gt;herself&lt;/li&gt;
&lt;li&gt;themselves&lt;/li&gt;
&lt;li&gt;itself&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;状语-conj-dot&#34;&gt;状语 conj.&lt;/h2&gt;
&lt;h3 id=&#34;条件状语&#34;&gt;条件状语&lt;/h3&gt;
&lt;h4 id=&#34;if-如果&#34;&gt;if 如果&lt;/h4&gt;
&lt;p&gt;主从颠倒，一般假设：主将从现。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you take&amp;hellip;, it will take you&amp;hellip;
&lt;ul&gt;
&lt;li&gt;if（条件）状语主句&lt;/li&gt;
&lt;li&gt;it: 主句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If it rains, I&amp;rsquo;ll stay home.&lt;/li&gt;
&lt;li&gt;If you come, I will be very happy.&lt;/li&gt;
&lt;li&gt;She won&amp;rsquo;t see you if you are late.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if 如果就会&lt;/p&gt;
&lt;p&gt;祈使句 and sb. will&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you exercise four times a week, You will be in great shape.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;util-conj-dot-plus-句子&#34;&gt;util conj. + 句子&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll have to stay in bed util it gets better.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;主将从现，类 if&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原因状语&#34;&gt;原因状语&lt;/h3&gt;
&lt;h4 id=&#34;as&#34;&gt;as&lt;/h4&gt;
&lt;h4 id=&#34;because&#34;&gt;because&lt;/h4&gt;
&lt;h4 id=&#34;so&#34;&gt;so&lt;/h4&gt;
</content>
    </item>
    
    <item>
      <title>英语时态</title>
      <link>https://www.linuxzen.com/notes/notes/20210920073034-%E8%8B%B1%E8%AF%AD%E6%97%B6%E6%80%81/</link>
      <pubDate>Mon, 20 Sep 2021 07:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210920073034-%E8%8B%B1%E8%AF%AD%E6%97%B6%E6%80%81/</guid>
      <description>tags: Learning English  通过动词变化来区分时间 通过动词变化来区分时间。
 I am walking in the rain. 正在 I will walk in the rain. 将要 I walk in the rain sometings. 一般状态、重复、常态  一般现在时 表示：
  当前的一般状态
  重复或习惯动作
  am/is/are（be 动词）：是，处于某状态
  do/does（实意动词）：具体动作
  (X): am/is/are + do/des 一般现在时不能 am/is/are 跟动词实意动词
一般现在时第三人称单音形规则  tags: 英语读音规则  一般现在时第三人称单数动词需要变形，需要注意变形后的读音
 清对清 /s/  works helps   非清则浊 /z/  lives sees goes does /dʌz/   组合 /dz/ /ts/  meets needs   近似音 -es /iz/  introduces fishes    现在进行时 当前正在发生的事情或动作，表示当前正在发生或者近将来。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通过动词变化来区分时间&#34;&gt;通过动词变化来区分时间&lt;/h2&gt;
&lt;p&gt;通过动词变化来区分时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am walking in the rain.
正在&lt;/li&gt;
&lt;li&gt;I will walk in the rain.
将要&lt;/li&gt;
&lt;li&gt;I walk in the rain sometings.
一般状态、重复、常态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一般现在时&#34;&gt;一般现在时&lt;/h2&gt;
&lt;p&gt;表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当前的一般状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复或习惯动作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;am/is/are（be 动词）：是，处于某状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;do/does（实意动词）：具体动作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(X): am/is/are + do/des 一般现在时不能 am/is/are 跟动词实意动词&lt;/p&gt;
&lt;h3 id=&#34;一般现在时第三人称单音形规则&#34;&gt;一般现在时第三人称单音形规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210925202345-%E8%8B%B1%E8%AF%AD%E8%AF%BB%E9%9F%B3%E8%A7%84%E5%88%99/&#34;&gt;英语读音规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般现在时第三人称单数动词需要变形，需要注意变形后的读音&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;清对清 &lt;code&gt;/s/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;works&lt;/li&gt;
&lt;li&gt;helps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非清则浊 &lt;code&gt;/z/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;lives&lt;/li&gt;
&lt;li&gt;sees&lt;/li&gt;
&lt;li&gt;goes&lt;/li&gt;
&lt;li&gt;does &lt;code&gt;/dʌz/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合 &lt;code&gt;/dz/&lt;/code&gt; &lt;code&gt;/ts/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;meets&lt;/li&gt;
&lt;li&gt;needs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;近似音 -es &lt;code&gt;/iz/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;introduces&lt;/li&gt;
&lt;li&gt;fishes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;现在进行时&#34;&gt;现在进行时&lt;/h2&gt;
&lt;p&gt;当前正在发生的事情或动作，表示当前正在发生或者近将来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m looking for a shirt.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m not taking it off.&lt;/li&gt;
&lt;li&gt;Everyone is wearing the same shirt on the street!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构&#34;&gt;结构&lt;/h3&gt;
&lt;p&gt;am/is/are doing&lt;/p&gt;
&lt;h3 id=&#34;doing-形态&#34;&gt;doing 形态&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;常规
a. look -&amp;gt; looking
b. wear -&amp;gt; wearing
c. do -&amp;gt; doing&lt;/li&gt;
&lt;li&gt;词尾 e 不发音
a. take -&amp;gt; taking
b. give -&amp;gt; giving
c. exercise -&amp;gt; exercising&lt;/li&gt;
&lt;li&gt;短元音 + 辅音
a. fit -&amp;gt; fitting
b. sit -&amp;gt; sitting
c. get -&amp;gt; getting&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进行时含义&#34;&gt;进行时含义&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;现在进行时
I&amp;rsquo;m looking for a shirt&lt;/li&gt;
&lt;li&gt;近将来
I&amp;rsquo;m not taking it off!&lt;/li&gt;
&lt;li&gt;临时的一种状态
I am working at the middle school. （暗示接下来可能不在中学工作）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;稳定-vs-变化&#34;&gt;稳定 VS 变化&lt;/h3&gt;
&lt;p&gt;一般状态：稳定、长期
现在进行：变化、临时&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do you like hime?
Are you liking him?&lt;/li&gt;
&lt;li&gt;I live in Shanghai
I am living in Shanghai&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;稳定含义动词&#34;&gt;稳定含义动词&lt;/h4&gt;
&lt;p&gt;稳定含义的动词一般不用现在进行时。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;常规稳定含义：work,live,like,love&lt;/li&gt;
&lt;li&gt;be
We are office workers.&lt;/li&gt;
&lt;li&gt;感官
see/look/hear/feel
&lt;ul&gt;
&lt;li&gt;I see a guy sitting at the bar.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;观点
think/believe&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;近将来-现在进行时-动作正在进行&#34;&gt;近将来：现在进行时 != 动作正在进行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;At this time, Camila is arriving at the restaurant.
表示正要到达&lt;/li&gt;
&lt;li&gt;He is coming
正要到达&lt;/li&gt;
&lt;li&gt;He is finishing the homework.
就要做完了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一般将来时&#34;&gt;一般将来时&lt;/h2&gt;
&lt;p&gt;未来的事件或动作。&lt;/p&gt;
&lt;p&gt;例句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think I&amp;rsquo;ll work on Saturday.&lt;/li&gt;
&lt;li&gt;Lisa and I are going to have a picnic on the beach.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构&#34;&gt;结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;will 引导(will not won&amp;rsquo;t &lt;code&gt;/wəunt/&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;&amp;rsquo;ll = will &lt;code&gt;/wil/&lt;/code&gt; 将要&lt;/li&gt;
&lt;li&gt;类&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210920073442-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7/#动词-verb&#34;&gt;情态动词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;will + 动词原形&lt;/li&gt;
&lt;li&gt;will 无人称变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;am/is/are going to
正在去做某事 -&amp;gt; 要去做某事&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实质含义决定时态，时间状语非必要。&lt;/p&gt;
&lt;h3 id=&#34;非一般将来时的将来&#34;&gt;非一般将来时的将来&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;情态动词
&lt;ul&gt;
&lt;li&gt;Can you be my hero?&lt;/li&gt;
&lt;li&gt;May I come in?&lt;/li&gt;
&lt;li&gt;You must study hard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自带将来含义的词
&lt;ul&gt;
&lt;li&gt;plan
cn. What a good pan!
v. He never plans anything for tormorrow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一般过去时&#34;&gt;一般过去时&lt;/h2&gt;
&lt;p&gt;动作发生于过去。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I walked in the rain yesterday.&lt;/li&gt;
&lt;li&gt;They started yesterday.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般过去时动词形变&#34;&gt;一般过去时动词形变&lt;/h3&gt;
&lt;h4 id=&#34;规则变形-ed&#34;&gt;规则变形：-ed&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;walked &lt;code&gt;/t/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;started &lt;code&gt;/id/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;seemed &lt;code&gt;/d/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;不规则形变&#34;&gt;不规则形变&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;have/has -&amp;gt; had&lt;/li&gt;
&lt;li&gt;be
&lt;ul&gt;
&lt;li&gt;am/is -&amp;gt; was  &lt;code&gt;/wɔz/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;are -&amp;gt; were &lt;code&gt;/wʒː/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;find -&amp;gt; found &lt;code&gt;/faund/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;bring -&amp;gt; brought &lt;code&gt;/brɔːt/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;do -&amp;gt; did &lt;code&gt;/did/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;come -&amp;gt; came&lt;/li&gt;
&lt;li&gt;take -&amp;gt; took&lt;/li&gt;
&lt;li&gt;give -&amp;gt; gave&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般过去时音形规则&#34;&gt;一般过去时音形规则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;清对清 &lt;code&gt;/t/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;walked&lt;/li&gt;
&lt;li&gt;helped&lt;/li&gt;
&lt;li&gt;missed&lt;/li&gt;
&lt;li&gt;stopped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非清则浊 &lt;code&gt;/d/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;seemed&lt;/li&gt;
&lt;li&gt;turned&lt;/li&gt;
&lt;li&gt;believed&lt;/li&gt;
&lt;li&gt;studied&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/t/&lt;/code&gt; &lt;code&gt;/d/&lt;/code&gt; 结尾特殊 &lt;code&gt;/id/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;started&lt;/li&gt;
&lt;li&gt;wanted&lt;/li&gt;
&lt;li&gt;needed&lt;/li&gt;
&lt;li&gt;recoreded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;过去时间&#34;&gt;过去时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;before&lt;/li&gt;
&lt;li&gt;ago  &amp;hellip; 之前&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;时态-实质时间&#34;&gt;时态：实质时间&lt;/h3&gt;
&lt;p&gt;可以不借助时间通过动词变形来表示时间。&lt;/p&gt;
&lt;h3 id=&#34;一般过去之否定&#34;&gt;一般过去之否定&lt;/h3&gt;
&lt;h4 id=&#34;be-plus-not&#34;&gt;be + not&lt;/h4&gt;
&lt;p&gt;wasn&amp;rsquo;t/weren&amp;rsquo;t&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is not in my pocket.&lt;/li&gt;
&lt;li&gt;It was not in my pocket.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;did-plus-not&#34;&gt;did + not&lt;/h4&gt;
&lt;p&gt;don&amp;rsquo;t/doesn&amp;rsquo;t -&amp;gt; didn&amp;rsquo;t do/did not do&lt;/p&gt;
&lt;h3 id=&#34;一般过去之疑问&#34;&gt;一般过去之疑问&lt;/h3&gt;
&lt;p&gt;疑问原理同否定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When did you start to have the signs?&lt;/li&gt;
&lt;li&gt;Were you lost??&lt;/li&gt;
&lt;li&gt;Did you have the signs of illness?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;情态与时态&#34;&gt;情态与时态&lt;/h2&gt;
&lt;p&gt;情态动词加动词原型，语境决定时间含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can&lt;/li&gt;
&lt;li&gt;may&lt;/li&gt;
&lt;li&gt;must&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;li&gt;shall&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can/may/must/should/shall come.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have to 现在
Sorry, I have to leave now.&lt;/li&gt;
&lt;li&gt;had to 过去
Sorry, I had to leave at that time.&lt;/li&gt;
&lt;li&gt;will have to 将来
Sorry, I will have to leave soon.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Linux kernel</title>
      <link>https://www.linuxzen.com/notes/notes/20210907142848-linux_kernel/</link>
      <pubDate>Tue, 07 Sep 2021 14:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210907142848-linux_kernel/</guid>
      <description>tags: Linux  Linux I/O Linux I/O 演进  阻塞式：read()/write() 非阻塞式：select()/poll()/epoll()，不支持文件 I/O Thread Pool Direct I/O（数据软件）：绕过 page cache 异步 IO（Linux AIO）：早起进支持文件 I/O，近期支持了 epoll 支持非文件 I/O  Linux io_uring  [译] Linux 异步 I/O 框架 io_uring：基本原理、程序示例与性能压测  对比 Linux AIO：
 重新设计实现真正的是不。 支持任何类型的 I/O：cached files、direct-access files 甚至 blocking sockets。 灵活、可扩展：基于 io_uring 能够重写 Linux 的每个系统调用。  原理及核心数据结构：SQ/CQ/SQE/CQE 每个 io_uring 实例都有两个环形队列，在内核和应用程序之间共享：
 提交队列：submission queue（SQ） 完成队列：completion queue（CQ）  这两个队列：
 都是单生产者、单消费者，size 是 2 的幂次； 提供无锁接口（lock-less access interface），内部使用内存屏障做同步（coordinated with memory barrers）。  使用方式：</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104103936-linux/&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux-i-o&#34;&gt;Linux I/O&lt;/h2&gt;
&lt;h3 id=&#34;linux-i-o-演进&#34;&gt;Linux I/O 演进&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阻塞式：read()/write()&lt;/li&gt;
&lt;li&gt;非阻塞式：select()/poll()/epoll()，不支持文件 I/O&lt;/li&gt;
&lt;li&gt;Thread Pool&lt;/li&gt;
&lt;li&gt;Direct I/O（数据软件）：绕过 page cache&lt;/li&gt;
&lt;li&gt;异步 IO（Linux AIO）：早起进支持文件 I/O，近期支持了 epoll 支持非文件 I/O&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux-io-uring&#34;&gt;Linux io_uring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arthurchiao.art/blog/intro-to-io-uring-zh/&#34;&gt;[译] Linux 异步 I/O 框架 io_uring：基本原理、程序示例与性能压测&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比 Linux AIO：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重新设计实现真正的是不。&lt;/li&gt;
&lt;li&gt;支持任何类型的 I/O：cached files、direct-access files 甚至 blocking sockets。&lt;/li&gt;
&lt;li&gt;灵活、可扩展：基于 &lt;code&gt;io_uring&lt;/code&gt; 能够重写 Linux 的每个系统调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;原理及核心数据结构-sq-cq-sqe-cqe&#34;&gt;原理及核心数据结构：SQ/CQ/SQE/CQE&lt;/h4&gt;
&lt;p&gt;每个 io_uring 实例都有两个环形队列，在内核和应用程序之间共享：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交队列：submission queue（SQ）&lt;/li&gt;
&lt;li&gt;完成队列：completion queue（CQ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2021-09-08_07-15-03_io_uring.png&#34; alt=&#34;&#34;&gt;
这两个队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是单生产者、单消费者，size 是 2 的幂次；&lt;/li&gt;
&lt;li&gt;提供无锁接口（lock-less access interface），内部使用内存屏障做同步（coordinated with memory barrers）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求
&lt;ul&gt;
&lt;li&gt;应用创建 SQ entries（SQE），更新 SQ tail；&lt;/li&gt;
&lt;li&gt;内核消费 SQE，更新 SQ head&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完成
&lt;ul&gt;
&lt;li&gt;内核为完成一个或多个请求创建 CQ enries（CQE），更新 CQ tail；&lt;/li&gt;
&lt;li&gt;应用消费 CQE，更新 CQ head&lt;/li&gt;
&lt;li&gt;完成事件（completion events）可能以任意顺序到达，到总是与特定的 SQE 相关联的。&lt;/li&gt;
&lt;li&gt;消费 CQE 过程无需切换到内核态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;带来的好处&#34;&gt;带来的好处&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持批处理&lt;/li&gt;
&lt;li&gt;支持文件 I/O 系统调用：read、write、send、recv、accept、opentat、stat、专用的一些系统调用，如 fallocate&lt;/li&gt;
&lt;li&gt;不再局限于数据库应用&lt;/li&gt;
&lt;li&gt;应对现在硬件架构：将硬件架构本身作为一个网络（多核多 CPU 是一个基础网络、CPU 之间是一个网络、CPU 和磁盘 I/O 之间又是一个网络）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三种工作模式&#34;&gt;三种工作模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中断驱动模式（interrupt driven）：默认模式。可通过 io_uring_enter() 提交 I/O 请求，然后直接检查 CQ 状态判断是否完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;轮询模式（polled）&lt;/p&gt;
&lt;p&gt;需要文件系统和块设备支持轮询功能。对比中断驱动方式，这种方式延迟更低，但可能会小号更多的 CPU 资源。&lt;/p&gt;
&lt;p&gt;只有指定了 O_DIRECT 标识位的的文件描述符才能使用这种模式。但一个读或写请求提交给轮询上下文（polled context）之后，
应用必须调用 &lt;code&gt;io_uring_enter()&lt;/code&gt; 来轮询 CQ 队列，判断请求是否已经完成。&lt;/p&gt;
&lt;p&gt;同一个 &lt;code&gt;io_uring&lt;/code&gt; 不支持混合使用轮询和非轮询模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核轮询模式（kernel polled）&lt;/p&gt;
&lt;p&gt;创建一个内核线程（kernel thread）来执行 SQ 的轮询工作。应用无需切换到内核态牛结果出发 I/O 操作。通过 SQ 来提交 SQE，以及监控 CQ 的完成状态，应用无需任何系统调用，就能提交和收割 I/O（submit and reap I/Os）。&lt;/p&gt;
&lt;p&gt;如果内核线程的空闲时间超过了用户的配置值，它会通知应用，然后进入 idle 状态。 这种情况下，应用必须调用 io_uring_enter() 来唤醒内核线程。如果 I/O 一直很繁忙，内核线性是不会 sleep 的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;高级特性&#34;&gt;高级特性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;File registration&lt;/li&gt;
&lt;li&gt;Buffer registration&lt;/li&gt;
&lt;li&gt;Poll ring&lt;/li&gt;
&lt;li&gt;Linked operations&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;用户空间库-liburing&#34;&gt;用户空间库 liburing&lt;/h4&gt;
&lt;h2 id=&#34;linux-virtual-memory-management--20200320174700-linux-virtual-memory-management-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320174700_linux_virtual_memory_management/&#34;&gt;Linux Virtual Memory Management&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Scala lsp-metals</title>
      <link>https://www.linuxzen.com/notes/notes/20210906151915-scala_lsp_metals/</link>
      <pubDate>Mon, 06 Sep 2021 15:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210906151915-scala_lsp_metals/</guid>
      <description> tags: Emacs,LSP  如果无法正常补全三方库，应该是 bloop 服务没有正常启动：
 创建 ~/Library/Caches/org.scalameta.metals/bsp.trace.json 开启跟踪 查看项目目录下 metals.log  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231165951-lsp/&#34;&gt;LSP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果无法正常补全三方库，应该是 bloop 服务没有正常启动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 &lt;code&gt;~/Library/Caches/org.scalameta.metals/bsp.trace.json&lt;/code&gt; 开启跟踪&lt;/li&gt;
&lt;li&gt;查看项目目录下 &lt;code&gt;metals.log&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>领域模式</title>
      <link>https://www.linuxzen.com/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 03 Sep 2021 08:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/</guid>
      <description>领域基础模式 模式：UBIQUITOUS LANGUAGE 在同领域专家、开发人员和项目管理沟通的过程中建立并使用 UBIQUITOUS LANGUAGE，，并在模型实现时依然使用 UBIQUITOUS LANGUAGE 来让设计与沟通相一致（中文语境下稍显困难），UBIQUITOUS LANGUAGE 让知识消化后直接驱动变更模型。
应用 UBIQUITOUS LANGUAGE 需要大声的建模。
模式：MODEL-DRIVEN DESIGN  严格按照模型来编写代码，让模型与实际系统相结合。 不再分离「分析模型」和程序设计，而是寻求一种能够满足这两方面需求的单一模型。 工具：面向对象编程语言、UML等。 更好的支持 UBIQUITOUS LANGUAGE.  模式：HANDS-ON MODELER  开发设计和模型设计紧密合作，避免模型设计者不参与编写和程序设计者不参与模型设计。 每一个开发人员都必须不同程度的参与模型讨论并且与领域专家保持联系，模型设计者及时通过 UBIQUITOUS LANGUAGE 与接触代码的人及时交换关于模型的想法。  领域模式构造块  模式：LAYERED ARCHITECTURE 分层架构是实现 DDD 的基础，分层架构将不同的层次的实现分开，自上倒下应分为：
 用户界面层 应用层 领域层（模型的精髓） 基础设施层  核心在于要将领域层单独出来实现 MODEL-DRIVEN DESIGN，对业务进行建模封装业务规则。调用规则也只能自上而下的调用，不能反向调用。
领域层（或模型层）分离出来之后使得模型足够丰富，结构足够清晰，可以捕捉到基本的业务知识，并有效的使用这些知识。
模式：ENTITY 用于跟踪对象的状态，有唯一标识符，在系统中是可变的，两个对象是否一个通过唯一标识来判断，不是靠它们的属性定义。
模式：VALUE OBJECT 区别与 ENTITY ，没有唯一标识，仅记录状态，一般设计为不可变用于共享 VALUE OBJECT，两个对象是否一个通过对象属性的值来判断。
模式：SERVICE 没有状态，但又需要建模的对象，只包含动作。用于一些不适合建模为对象的领域概念。
 与领域概念相关的操作不是 ENTITY 或 VALUE OBJECT 的一个自然组成部署 接口是根据领域模型的其他元素定义的。 操作是无状态的  模式：MODULE（或 PACKAGE） 根据对象的意义划分领域模型，低耦合高内聚。按照模式或者对象生命周期或者其他方式划分都是错误的。</description>
      <content>&lt;h2 id=&#34;领域基础模式&#34;&gt;领域基础模式&lt;/h2&gt;
&lt;h3 id=&#34;模式-ubiquitous-language&#34;&gt;模式：UBIQUITOUS LANGUAGE&lt;/h3&gt;
&lt;p&gt;在同领域专家、开发人员和项目管理沟通的过程中建立并使用 UBIQUITOUS LANGUAGE，，并在模型实现时依然使用 UBIQUITOUS LANGUAGE 来让设计与沟通相一致（中文语境下稍显困难），UBIQUITOUS LANGUAGE 让知识消化后直接驱动变更模型。&lt;/p&gt;
&lt;p&gt;应用 UBIQUITOUS LANGUAGE 需要&lt;strong&gt;大声的建模&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;模式-model-driven-design&#34;&gt;模式：MODEL-DRIVEN DESIGN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;严格按照模型来编写代码，让模型与实际系统相结合。&lt;/li&gt;
&lt;li&gt;不再分离「分析模型」和程序设计，而是寻求一种能够满足这两方面需求的单一模型。&lt;/li&gt;
&lt;li&gt;工具：面向对象编程语言、UML等。&lt;/li&gt;
&lt;li&gt;更好的支持 &lt;a href=&#34;#%E6%A8%A1%E5%BC%8F-ubiquitous-language&#34;&gt;UBIQUITOUS LANGUAGE&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式-hands-on-modeler&#34;&gt;模式：HANDS-ON MODELER&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发设计和模型设计紧密合作，避免模型设计者不参与编写和程序设计者不参与模型设计。&lt;/li&gt;
&lt;li&gt;每一个开发人员都必须不同程度的参与模型讨论并且与领域专家保持联系，模型设计者及时通过 &lt;a href=&#34;#%E6%A8%A1%E5%BC%8F-ubiquitous-language&#34;&gt;UBIQUITOUS LANGUAGE&lt;/a&gt; 与接触代码的人及时交换关于模型的想法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;领域模式构造块&#34;&gt;领域模式构造块&lt;/h2&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/ddd-blocks.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h3 id=&#34;模式-layered-architecture&#34;&gt;模式：LAYERED ARCHITECTURE&lt;/h3&gt;
&lt;p&gt;分层架构是实现 DDD 的基础，分层架构将不同的层次的实现分开，自上倒下应分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户界面层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;领域层（模型的精髓）&lt;/li&gt;
&lt;li&gt;基础设施层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心在于要将领域层单独出来实现 &lt;a href=&#34;#%E6%A8%A1%E5%BC%8F-model-driven-design&#34;&gt;MODEL-DRIVEN DESIGN&lt;/a&gt;，对业务进行建模封装业务规则。调用规则也只能自上而下的调用，不能反向调用。&lt;/p&gt;
&lt;p&gt;领域层（或模型层）分离出来之后使得模型足够丰富，结构足够清晰，可以捕捉到基本的业务知识，并有效的使用这些知识。&lt;/p&gt;
&lt;h3 id=&#34;模式-entity&#34;&gt;模式：ENTITY&lt;/h3&gt;
&lt;p&gt;用于跟踪对象的状态，有唯一标识符，在系统中是可变的，两个对象是否一个通过唯一标识来判断，不是靠它们的属性定义。&lt;/p&gt;
&lt;h3 id=&#34;模式-value-object&#34;&gt;模式：VALUE OBJECT&lt;/h3&gt;
&lt;p&gt;区别与 ENTITY ，没有唯一标识，仅记录状态，一般设计为不可变用于共享 VALUE OBJECT，两个对象是否一个通过对象属性的值来判断。&lt;/p&gt;
&lt;h3 id=&#34;模式-service&#34;&gt;模式：SERVICE&lt;/h3&gt;
&lt;p&gt;没有状态，但又需要建模的对象，只包含动作。用于一些不适合建模为对象的领域概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与领域概念相关的操作不是 ENTITY 或 VALUE OBJECT 的一个自然组成部署&lt;/li&gt;
&lt;li&gt;接口是根据领域模型的其他元素定义的。&lt;/li&gt;
&lt;li&gt;操作是无状态的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式-module-或-package&#34;&gt;模式：MODULE（或 PACKAGE）&lt;/h3&gt;
&lt;p&gt;根据对象的意义划分领域模型，低耦合高内聚。按照模式或者对象生命周期或者其他方式划分都是错误的。&lt;/p&gt;
&lt;h3 id=&#34;模式-aggregate&#34;&gt;模式：AGGREGATE&lt;/h3&gt;
&lt;p&gt;划分模型边界，统一对关联模型的创建、修改、复制和销毁。一般选定一个 ENTITY 对象作为 AGGREGATE 的「根」，同时对事务应用一组规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根 ENTITY 具有全局标识，它最终负责检查固定规则。&lt;/li&gt;
&lt;li&gt;边界内的 ENTITY 具有本地标识，这些标识只在 AGGREGATE 内部才是唯一的。&lt;/li&gt;
&lt;li&gt;AGGREGATE 外部不的对象不能引入除根 ENTITY 之外的任何内部对象。根 ENTITY 可以把内部 ENTITY 引用传递出去做临时使用，但不能保持引用。&lt;/li&gt;
&lt;li&gt;只有 AGGREGATE 的根能直接通过数据库查询获取。其他所有对象必须通过遍历关联来发现。&lt;/li&gt;
&lt;li&gt;AGGREGATE 内部的对象可以保持对其他 AGGREGATE 根的引用。&lt;/li&gt;
&lt;li&gt;删除操作必须一次删除 AGGREGATE 边界之内的所有对象。&lt;/li&gt;
&lt;li&gt;当提交对 AGGREGATE 的更改时，整个 AGGREGATE 的所有固定规则都必须被满足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式-factory&#34;&gt;模式：Factory&lt;/h3&gt;
&lt;p&gt;封装创建一个对象或者整个 AGGREGATE 的复杂创建工作，隐藏内部结构。实现的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单的对象可以通过 FACTORY METHOD 实现在 AGGREGATE 的根 ENTITY 对象上。&lt;/li&gt;
&lt;li&gt;复杂的对象应当转移给独立的 FACTORY。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;entity-factory-和-value-object-factory-两方面不同&#34;&gt;ENTITY FACTORY 和 VALUE OBJECT FACTORY 两方面不同&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;VALUE OBJECT 不可变，所以其 FACTORY 生成的对象就是最终形式，因此 FACTORY 操作必须得到创建对象的完整形式。&lt;/li&gt;
&lt;li&gt;ENTITY 需要在 FACTORY 生成对象时分配唯一标识。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式-repository&#34;&gt;模式：REPOSITORY&lt;/h3&gt;
&lt;p&gt;一个遍历 ENTITY 和 VALUE OBJECT 的起点对象（想象图书馆里的图书管理员）。&lt;/p&gt;
&lt;p&gt;只为那些确实需要直接访问的 AGGREGATE 根提供 REPOSITORY，让客户始终聚焦于模型，而将所有对象的存储和访问操作都交给 REPOSITORY 来完成。&lt;/p&gt;
&lt;h4 id=&#34;repository-与-factory-的关系&#34;&gt;REPOSITORY 与 Factory 的关系&lt;/h4&gt;
&lt;p&gt;从创建对象角度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REPOSITORY 负责基于查询的数据恢复已有对象，让客户感觉对象始终驻留内存。&lt;/li&gt;
&lt;li&gt;FACTORY 负责创建新的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时 REPOSITORY 负责持久化相关工作，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储对象&lt;/li&gt;
&lt;li&gt;删除对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;领域高阶-模式&#34;&gt;领域高阶（？）模式&lt;/h2&gt;
&lt;h3 id=&#34;模式-specification&#34;&gt;模式：SPECIFICATION&lt;/h3&gt;
&lt;p&gt;抽象谓词（返回真假的函数）。
为特殊目的创建谓词形式的显式的 VALUE OBJECT。 SPECIFICATION 就是一个谓词，可以用来测试任何对象以校验它们是否满足制定的标准。
规格（SPECIFICATION）中声明的是限制另一个对象状态的约束，被约束对象可以存在也可以不存在。&lt;/p&gt;
&lt;h2 id=&#34;领域反模式&#34;&gt;领域反模式&lt;/h2&gt;
&lt;h3 id=&#34;模式-the-smart-ui-反模式&#34;&gt;模式：THE SMART UI 反模式&lt;/h3&gt;
&lt;p&gt;不分离用户界面和领域，在界面中实现所有业务逻辑。使用关系数据库作为共享的数据存储库。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效率高&lt;/li&gt;
&lt;li&gt;人力成本低&lt;/li&gt;
&lt;li&gt;快速响应需求更改&lt;/li&gt;
&lt;li&gt;彼此独立，扩展容易&lt;/li&gt;
&lt;li&gt;关系数据库提供数据整合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖数据库&lt;/li&gt;
&lt;li&gt;没有行为重用&lt;/li&gt;
&lt;li&gt;有扩展和迭代极限&lt;/li&gt;
&lt;li&gt;无法适应复杂功能&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Airflow</title>
      <link>https://www.linuxzen.com/notes/notes/20210902153221-airflow/</link>
      <pubDate>Thu, 02 Sep 2021 15:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210902153221-airflow/</guid>
      <description>案例 Airflow powers AI。
Airflow SSO 接入 公司 SSO 系统不是基于开源标准，而是一套自定义的方式，目前网上没有成熟的解决方案，通过查看 Flask-AppBuilder 和 Airflow 的代码发现可以扩展 flask_appbuilder.security.views.AuthRemoteUserView 并通过自定义的 SecurityManager 指定 authremoteuserview 来实现，去掉具体 SSO 逻辑后的代码如下：
from urllib.parse import urlencode from urllib.parse import urljoin import requests from flask import flash from flask import redirect from flask import request from flask_appbuilder.baseviews import expose from flask_appbuilder.security.views import AuthRemoteUserView try: from airflow.www.security import AirflowSecurityManager except ImportError: AirflowSecurityManager = None __version__ = &amp;#34;0.1.0&amp;#34; AUTHORIZE_URL = &amp;#34;https://example.com/sso/login&amp;#34; ACCESS_TOKEN_URL = &amp;#34;https://example.</description>
      <content>&lt;h2 id=&#34;案例&#34;&gt;案例&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20210826074053-airflow_powers_ai/&#34;&gt;Airflow powers AI&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;airflow-sso-接入&#34;&gt;Airflow SSO 接入&lt;/h2&gt;
&lt;p&gt;公司 SSO 系统不是基于开源标准，而是一套自定义的方式，目前网上没有成熟的解决方案，通过查看 &lt;a href=&#34;https://github.com/dpgaspar/Flask-AppBuilder&#34;&gt;Flask-AppBuilder&lt;/a&gt; 和 Airflow 的代码发现可以扩展 &lt;code&gt;flask_appbuilder.security.views.AuthRemoteUserView&lt;/code&gt; 并通过自定义的 &lt;code&gt;SecurityManager&lt;/code&gt; 指定 &lt;code&gt;authremoteuserview&lt;/code&gt; 来实现，去掉具体 SSO 逻辑后的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urlencode
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urljoin

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flash
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; redirect
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; request
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_appbuilder.baseviews &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; expose
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_appbuilder.security.views &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AuthRemoteUserView

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; airflow.www.security &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AirflowSecurityManager
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ImportError&lt;/span&gt;:
	AirflowSecurityManager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

__version__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;

AUTHORIZE_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.com/sso/login&amp;#34;&lt;/span&gt;
ACCESS_TOKEN_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.com/sso/check&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthComCasView&lt;/span&gt;(AuthRemoteUserView):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_get_redirect_uri&lt;/span&gt;(self):
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; urljoin(request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;host_url, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;appbuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_url_for_login)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_authorize_params&lt;/span&gt;(self):
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;callback&amp;#34;&lt;/span&gt;: self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_get_redirect_uri(),
		}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@expose&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login/&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(self):
		token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; token:
			params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_authorize_params()
			redirect_uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(
				AUTHORIZE_URL,
				urlencode(params),
			)

			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(redirect_uri)

		data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange_token(token)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
			flash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid Token&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid token&amp;#34;&lt;/span&gt;

		&lt;span style=&#34;color:#75715e&#34;&gt;# Set REMOTE_USER to let user login&lt;/span&gt;
		request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REMOTE_USER&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; super()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_token_params&lt;/span&gt;(token):
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;: token,
		}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exchange_token&lt;/span&gt;(self, token):
		data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_token_params(token)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(ACCESS_TOKEN_URL, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; AirflowSecurityManager &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:

	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComCasAirflowSecurityManager&lt;/span&gt;(AirflowSecurityManager):
		authremoteuserview &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AuthComCasView
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 Airflow 的 &lt;code&gt;webserver_config.py&lt;/code&gt; 中应用就行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_appbuilder.security.manager &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AUTH_REMOTE_USER

AUTH_TYPE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AUTH_REMOTE_USER
FAB_SECURITY_MANAGER_CLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fab_auth_com.ComCasAirflowSecurityManager&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Java</title>
      <link>https://www.linuxzen.com/notes/topics/20210901081938-java/</link>
      <pubDate>Wed, 01 Sep 2021 08:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20210901081938-java/</guid>
      <description>tags: Programming Language  Java 生态工具 Maven/Ivy 依赖获取和解决工具  coursier  SDKMAN Java 环境和 SDK 管理 SDKMAN 可以实现 Java 环境和一些常见 SDK 的管理，包括：JDK、Scala、sbt 和 Spark 等。
Java 项目构建工具 Maven Graddle Ant JVM  Java 内存模型  JVM 设置代理 Java Networking and Proxies</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-生态工具&#34;&gt;Java 生态工具&lt;/h2&gt;
&lt;h3 id=&#34;maven-ivy-依赖获取和解决工具&#34;&gt;Maven/Ivy 依赖获取和解决工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://get-coursier.io/docs/overview&#34;&gt;coursier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sdkman-java-环境和-sdk-管理&#34;&gt;SDKMAN Java 环境和 SDK 管理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sdkman.io/&#34;&gt;SDKMAN&lt;/a&gt; 可以实现 Java 环境和一些常见 SDK 的管理，包括：JDK、Scala、sbt 和 Spark 等。&lt;/p&gt;
&lt;h2 id=&#34;java-项目构建工具&#34;&gt;Java 项目构建工具&lt;/h2&gt;
&lt;h3 id=&#34;maven&#34;&gt;Maven&lt;/h3&gt;
&lt;h3 id=&#34;graddle&#34;&gt;Graddle&lt;/h3&gt;
&lt;h3 id=&#34;ant&#34;&gt;Ant&lt;/h3&gt;
&lt;h2 id=&#34;jvm&#34;&gt;JVM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;Java 内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jvm-设置代理&#34;&gt;JVM 设置代理&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html&#34;&gt;Java Networking and Proxies&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Spark</title>
      <link>https://www.linuxzen.com/notes/notes/20210827080540-spark/</link>
      <pubDate>Fri, 27 Aug 2021 08:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210827080540-spark/</guid>
      <description>tags: Bigdata  Spark 编程语言选择 毋庸置疑，Python 应该是最简单也是大部分的选择，但是如果有依赖那么将要付出额外的心智负担（Spark 管理 Python 依赖）。 JVM 语言的依赖组织方式则具有天然的优势，可以将依赖（排除 Spark 生态之后）都 bundle 进 Jar 包里。 其中 Scala 兼具简单和 JVM 的优势，但是它「不流行」。
Spark Driver &amp;amp; Executor  Driver 执行 spark-commit 客户端，创建 SparkContext 执行 main 函数。 Executor Spark Worker 上的线程   See also:
 Understanding the working of Spark Driver and Executor Cluster Mode Overview  Spark 代码执行 我在配置 Spark 的时候就在好奇，从观察上看部分代码应该是执行在 Driver 上部分代码会执行在 Executer，这让我很好奇。 但是我通过学习 Spark RDD 学习到了一些知识。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-编程语言选择&#34;&gt;Spark 编程语言选择&lt;/h2&gt;
&lt;p&gt;毋庸置疑，Python 应该是最简单也是大部分的选择，但是如果有依赖那么将要付出额外的心智负担（&lt;a href=&#34;#spark-%E7%AE%A1%E7%90%86-python-%E4%BE%9D%E8%B5%96&#34;&gt;Spark 管理 Python 依赖&lt;/a&gt;）。
JVM 语言的依赖组织方式则具有天然的优势，可以将依赖（排除 Spark 生态之后）都 bundle 进 Jar 包里。
其中 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210827073626-scala/&#34;&gt;Scala&lt;/a&gt; 兼具简单和 JVM 的优势，但是它「不流行」。&lt;/p&gt;
&lt;h2 id=&#34;spark-driver-and-executor&#34;&gt;Spark Driver &amp;amp; Executor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Driver 执行 spark-commit 客户端，创建 &lt;code&gt;SparkContext&lt;/code&gt; 执行 &lt;code&gt;main&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;Executor Spark Worker 上的线程&lt;/li&gt;
&lt;/ul&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://spark.apache.org/docs/latest/img/cluster-overview.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.knoldus.com/understanding-the-working-of-spark-driver-and-executor/&#34;&gt;Understanding the working of Spark Driver and Executor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/cluster-overview.html&#34;&gt;Cluster Mode Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-代码执行&#34;&gt;Spark 代码执行&lt;/h2&gt;
&lt;p&gt;我在配置 Spark 的时候就在好奇，从观察上看部分代码应该是执行在 Driver 上部分代码会执行在 Executer，这让我很好奇。
但是我通过学习 &lt;a href=&#34;#spark-rdd&#34;&gt;Spark RDD&lt;/a&gt; 学习到了一些知识。&lt;/p&gt;
&lt;p&gt;以下代码是在 Executor 上执行的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transformations 和 Actions 是执行在 Spark 集群的。&lt;/li&gt;
&lt;li&gt;传递给 Transformations 和 Actions 的闭包函数也是执行在 Spark 集群上的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他额外的代码都是执行在 Driver 上的，所以想要在 Driver 打印日志需要上使用 &lt;code&gt;collect&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;foreach&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;collect&lt;/code&gt; 可能会导致 Driver 内存爆掉，可以使用 &lt;code&gt;take&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;rd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;foreach&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以在这就带来在闭包中共享变量的问题，参见 &lt;a href=&#34;#spark-%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F&#34;&gt;Spark 共享变量&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;spark-编程抽象&#34;&gt;Spark 编程抽象&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/rdd-programming-guide.html&#34;&gt;RDD Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;spark-rdd&#34;&gt;Spark RDD&lt;/h3&gt;
&lt;h4 id=&#34;集合并行化&#34;&gt;集合并行化&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; distData &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; sc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parallelize&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;外部数据集&#34;&gt;外部数据集&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;输入源支持支持 Hadoop 支持的任何存储源，包括：本地文件系统、&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808075530-hadoop_distributed_file_system/&#34;&gt;HDFS&lt;/a&gt;、Cassandra、&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210810071455-hbase/&#34;&gt;HBase&lt;/a&gt;、&lt;a href=&#34;http://wiki.apache.org/hadoop/AmazonS3&#34;&gt;Amazaon S3&lt;/a&gt; 等&lt;/li&gt;
&lt;li&gt;输入格式支持：文本文件、&lt;a href=&#34;https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/mapred/SequenceFileInputFormat.html&#34;&gt;SequenceFiles&lt;/a&gt; 和任何其他 Hadoop &lt;a href=&#34;http://hadoop.apache.org/docs/stable/api/org/apache/hadoop/mapred/InputFormat.html&#34;&gt;InputFormat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是本地文件系统，则文件需要存在与所有 Worker 节点上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;spark-transformations-vs-actions&#34;&gt;Spark Transformations vs Actions&lt;/h4&gt;
&lt;p&gt;Spark 支持两种操作类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;transformations&lt;/em&gt;：从现有数据集创建新的数据集，比如 &lt;code&gt;map&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;actions&lt;/em&gt;：在数据集上进行运算然后返回值给 &lt;em&gt;driver&lt;/em&gt;，比如 &lt;code&gt;reduce&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spark-transformations-懒执行&#34;&gt;Spark Transformations 懒执行&lt;/h4&gt;
&lt;p&gt;所有的 Spark &lt;em&gt;transformations&lt;/em&gt; 会记住应用的基础数据集，只要在需要将结果返回给 &lt;em&gt;driver&lt;/em&gt; 的时候才进行计算。
比如，我们可以感知到一个数据集（&lt;em&gt;dataset&lt;/em&gt;）通过 &lt;code&gt;map&lt;/code&gt; 创建，将会被 &lt;code&gt;reduce&lt;/code&gt; 使用并返回 &lt;code&gt;reduce&lt;/code&gt; 的结果给 &lt;em&gt;driver&lt;/em&gt; 而不是一个映射过（&lt;em&gt;mapped&lt;/em&gt;）的大数据集。&lt;/p&gt;
&lt;h4 id=&#34;spark-transformations-重复计算&#34;&gt;Spark transformations 重复计算&lt;/h4&gt;
&lt;p&gt;默认情况下，每一次在一个 RDD 上运行 action Spark 都可能会进行重新计算，这时候可以使用 &lt;em&gt;persist&lt;/em&gt; 缓存一个 RDD 到内存中。
下一次查询将会被加速，同时 Spark 支持存储到磁盘或者跨多节点复制（&lt;em&gt;replicated&lt;/em&gt;）。&lt;/p&gt;
&lt;h3 id=&#34;spark-共享变量&#34;&gt;Spark 共享变量&lt;/h3&gt;
&lt;p&gt;Spark 支持两种共享变量的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Broadcast Variables&lt;/li&gt;
&lt;li&gt;Accumulators&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设置-spark-python-版本&#34;&gt;设置 Spark Python 版本&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export PYSPARK_DRIVER_PYTHON&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;python &lt;span style=&#34;color:#75715e&#34;&gt;# Do not set in cluster modes.&lt;/span&gt;
export PYSPARK_PYTHON&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./environment/bin/python &lt;span style=&#34;color:#75715e&#34;&gt;# Executor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面 environment 是提交的时候需要在 &lt;code&gt;--archives&lt;/code&gt; 缀上的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;spark-submit --archives pyspark_conda_env.tar.gz#environment app.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;PYSPARK_DRIVER_PYTHON&lt;/code&gt; above should not be set for cluster modes in YARN or Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;spark-管理-python-依赖&#34;&gt;Spark 管理 Python 依赖&lt;/h2&gt;
&lt;h3 id=&#34;yarn&#34;&gt;YARN&lt;/h3&gt;
&lt;p&gt;支持 &lt;code&gt;--archives&lt;/code&gt; 参数上传打包好的环境信息，主要三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PySpark 原生特性， &lt;code&gt;--py-files&lt;/code&gt; 支持 zip 和 egg 格式，但是不支持 whl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200628133616-python/#python-vendor-package&#34;&gt;Python vendor package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See alos: &lt;a href=&#34;https://spark.apache.org/docs/latest/api/python/user%5Fguide/python%5Fpackaging.html&#34;&gt;Python Package Management&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;standalone-cluster&#34;&gt;Standalone cluster&lt;/h3&gt;
&lt;p&gt;可以借助上面的 Python 包管理机制，将打包好的环境在各个节点进行同步。假设将 conda-pack 解压到 &lt;code&gt;/opt/conda-envs/test&lt;/code&gt;，可以通过在 Spark 任务脚本最上方通过 &lt;code&gt;PYSPARK_PYTHON&lt;/code&gt; 指定解释器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PYSPARK_PYTHON&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/opt/conda-envs/test&amp;#39;&lt;/span&gt;

conf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SparkContext(conf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;conf)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;spark-hive-表问题汇总&#34;&gt;Spark Hive 表问题汇总&lt;/h2&gt;
&lt;h3 id=&#34;spark-2-dot-3-之后读取-hive-orc-字段全是-null-或者无法过滤&#34;&gt;Spark 2.3 之后读取 Hive Orc 字段全是 null 或者无法过滤&lt;/h3&gt;
&lt;p&gt;主要是因为 Orc 文件在 Hive 中存储的时候是大小写敏感的 Schema。
通过如下配置关闭 2.3 之后启用的选项：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-prog&#34; data-lang=&#34;prog&#34;&gt;spark.sql.hive.convertMetastoreOrc=false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是启用这个会导致写 Hive Orc 表的时候报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-prog&#34; data-lang=&#34;prog&#34;&gt;[2021-11-20 08:22:26,500] {spark_submit.py:523} INFO - : java.lang.NoSuchMethodException: org.apache.hadoop.hive.ql.metadata.Hive.loadPartition(org.apache.hadoop.fs.Path, java.lang.String, java.util.Map, boolean, boolean, boolean, boolean, boolean, boolean)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只能在读指定表的时候动态设置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;spark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;conf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spark.sql.hive.convertMetastoreOrc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;更多坑可以看-upgrading-guide&#34;&gt;更多坑可以看 Upgrading Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://spark.apache.org/docs/2.4.2/sql-migration-guide-upgrade.html&#34;&gt;Upgrading Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;spark-写入的-hive-orc-表但是旧版-hive-无法读取&#34;&gt;Spark 写入的 Hive Orc 表但是旧版 Hive 无法读取&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-prog&#34; data-lang=&#34;prog&#34;&gt;# 解决写入 Orc 表但是 Hive 无法读取的问题
spark.sql.orc.impl=hive
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Scala</title>
      <link>https://www.linuxzen.com/notes/notes/20210827073626-scala/</link>
      <pubDate>Fri, 27 Aug 2021 07:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210827073626-scala/</guid>
      <description>tags: Programming Language  Scala 学习资源  Scala Book  Scala 这么好的语言为什么不流行  HN：Scala 为什么不流行 Reddit：Scala 为什么不流行  结论：Java 人才更多且成本更低。
Scala 工具 sbt sbt new 无法处理替换过的 SSH 会导致 Auth fail，一个 workaround 就是手动 clone 项目然后：
sbt new file:///path/to/template.g8 sbt 国内加速 ~/.sbt/repositories:
[repositories] local nexus-aliyun:https://maven.aliyun.com/nexus/content/groups/public nexus-aliyun-ivy:https://maven.aliyun.com/nexus/content/groups/public/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext] typesafe: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly Unique Scala Rust from Scala Rust 和 Scala 有很多想通的地方，Rust 应该从 Scala 借鉴了很多：
 可变量和不可变量 模式匹配 Trait  内置类型 val b: Byte = 1 val x: Int = 1 val l: Long = 1 val s: Short = 1 val d: Double = 2.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scala-学习资源&#34;&gt;Scala 学习资源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/overviews/scala-book/introduction.html&#34;&gt;Scala Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scala-这么好的语言为什么不流行&#34;&gt;Scala 这么好的语言为什么不流行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=20154012&#34;&gt;HN：Scala 为什么不流行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/scala/comments/l4pggx/why%5Fdo%5Fyou%5Fthink%5Fscala%5Fisnt%5Fmore%5Fpopular/&#34;&gt;Reddit：Scala 为什么不流行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结论：Java 人才更多且成本更低。&lt;/p&gt;
&lt;h2 id=&#34;scala-工具&#34;&gt;Scala 工具&lt;/h2&gt;
&lt;h3 id=&#34;sbt&#34;&gt;sbt&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sbt new&lt;/code&gt; 无法处理替换过的 SSH 会导致 Auth fail，一个 workaround 就是手动 clone 项目然后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sbt new file:///path/to/template.g8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sbt-国内加速&#34;&gt;sbt 国内加速&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~/.sbt/repositories&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[repositories]
local
nexus-aliyun:https://maven.aliyun.com/nexus/content/groups/public
nexus-aliyun-ivy:https://maven.aliyun.com/nexus/content/groups/public/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
typesafe: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;unique-scala&#34;&gt;Unique Scala&lt;/h2&gt;
&lt;h3 id=&#34;rust-from-scala&#34;&gt;Rust from Scala&lt;/h3&gt;
&lt;p&gt;Rust 和 Scala 有很多想通的地方，Rust 应该从 Scala 借鉴了很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可变量和不可变量&lt;/li&gt;
&lt;li&gt;模式匹配&lt;/li&gt;
&lt;li&gt;Trait&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内置类型&#34;&gt;内置类型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; b&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Byte&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; l&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; s&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Short&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; d&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; f&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字符串拼接&#34;&gt;字符串拼接&lt;/h3&gt;
&lt;p&gt;Python 也支持类似的 &lt;code&gt;f-string&lt;/code&gt; 语法，在 Scala 中是 &lt;code&gt;s-string&lt;/code&gt; 语法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; firstName &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mi &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lastName &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doe&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; firstName &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mi &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lastName
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$firstName&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$mi&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$lastName&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;Name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$firstName&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$mi&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$lastName&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;Name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;firstName&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;mi&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;lastName&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;1+1 = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;多行字符串&#34;&gt;多行字符串&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.scala-lang.org/overviews/scala-book/two-notes-about-strings.html#multiline-strings&#34;&gt;Multiline strings&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;for-循环&#34;&gt;for 循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nums &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; nums&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; people &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Candy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Karen&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Leo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Regina&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; people&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// foreach
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;people&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;// map foreach
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; ratings &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lady in the Water&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Snakes on a Plane&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You, Me and Dupree&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;rating&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; ratings&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;Movie: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, Rating: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$rating&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

ratings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;movie&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; rating&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;key: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$movie&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, value: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$rating&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for-表达式&#34;&gt;for 表达式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nums &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; doubledNums &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;lt;-&lt;/span&gt; nums&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;----- 注意 yield
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;see also: &lt;a href=&#34;https://docs.scala-lang.org/overviews/scala-book/for-expressions.html#the-yield-keyword&#34;&gt;yield&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;模式匹配&#34;&gt;模式匹配&lt;/h3&gt;
&lt;p&gt;Rust 和 Scala 很像，但是 Scala 依然有很多独特的地方：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 模式匹配作为方法体
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; convertBooleanToStringMessage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bool&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Boolean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bool &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you said true&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you said false&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// alternate cases
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; isTrue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 支持 if
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;count &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one, a lonely number&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#39;s company, three&amp;#39;s a crowd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4+, that&amp;#39;s a party&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#39;m guessing your number is zero or less&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;异常捕获&#34;&gt;异常捕获&lt;/h3&gt;
&lt;p&gt;异常捕获结合了模式匹配：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; text &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	text &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; openAndReadAFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; e&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FileNotFoundException&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Couldn&amp;#39;t find that file.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; e&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IOException&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Had an IOException trying to read that file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;方法定义&#34;&gt;方法定义&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 函数定义的基本语法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; concatenate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s1&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; s2&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s2

&lt;span style=&#34;color:#75715e&#34;&gt;// 返回参数可以省略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; concatenate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s1&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; s2&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s2

&lt;span style=&#34;color:#75715e&#34;&gt;// 代码块用 {} 包围，但是 = 不能省略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; long&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类构造&#34;&gt;类构造&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; firstName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; lastName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Panner&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// val 只读
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; firstName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lastName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 构造方法直接写在类体里
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; firstName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; lastName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the constructor begins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;public&amp;#39; access by default
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; age &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// some class fields
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HOME&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getProperty&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user.home&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// some methods
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; toString&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$firstName&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$lastName&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$age&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; years old&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; printHome&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;HOME = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; printFullName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

	printHome&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
	printFullName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
	println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you&amp;#39;ve reached the end of the constructor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 其他一些例子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; crustSize&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; crustType&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// a stock, like AAPL or GOOG
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; symbol&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; price&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BigDecimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// a network socket
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Socket&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; timeout&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; linger&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; toString &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;timeout: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$timeout&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, linger: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$linger&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; street1&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; street2&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; city&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; state&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构造方法重载&#34;&gt;构造方法重载&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCrustSize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCrustType&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THIN&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// the primary constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; crustSize&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; crustType&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// one-arg auxiliary constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;crustSize&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;crustSize&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCrustType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// one-arg auxiliary constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;crustType&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCrustSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; crustType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// zero-arg auxiliary constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCrustSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultCrustType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; toString &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s&amp;#34;A &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$crustSize&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; inch pizza with a &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$crustType&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; crust&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Airflow powers AI</title>
      <link>https://www.linuxzen.com/notes/articles/20210826074053-airflow_powers_ai/</link>
      <pubDate>Thu, 26 Aug 2021 07:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20210826074053-airflow_powers_ai/</guid>
      <description>背景介绍 最近接手了一个项目，经过需求调研决定尝试使用 Airflow 调度数据生产，过程涉及：
 从大数据 Hive 数据库整合数据宽表； 在 Spark 上运行 IRT 算法模型汇总 ADS 表。  从中学习了很多关于大数据的知识，同时也积累了如何通过 Airflow 提交 Spark 任务的经验，应当抽时间总结一下。
冰山之下 如「冰山理论」所描述，我们所做的只是冰山露在水面的一角，隐藏在冰山之下更大的一部份是：
 Airflow + Celery Docker Hadoop(Hive) 集群 YARN 集群（Spark over YARN）  接下来我们将关注在「冰山水面上的一角」来阐述我们如何利用这些已有的技术连结了整个系统。
Make DAG great again 之前部门里有位算法大佬用 DAG（大佬念做「戴格」）实现了一套非常牛逼的文本和识别处理算法，然后每次讨论方案必谈 DAG， 所以 DAG 成了部门里都知道的一个梗，虽然大佬走了之后很少再有人提起 DAG，但是接下来我们会进行文艺复兴，让 DAG 再次出现在我们的日常技术讨论中。
Make DAG Great Again!
Airflow 介绍 架构  概念  DAG Operator Connection  Providers packages See also: Provider packages.
Spark 介绍 架构  Spark 编程  Spark SQL Hive Table 示例 Airflow + Spark 平台化 Celery Worker as a Spark Driver Celery Worker running on specific platform Windows Bigdata Hive client DAGs 分发 提交 DAG Python 依赖解决  Spark Airflow  外部依赖？ 未来  承接更多的报告需求 对内承接分析任务 可编程、平台化的分析  </description>
      <content>&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h2&gt;
&lt;p&gt;最近接手了一个项目，经过需求调研决定尝试使用 Airflow 调度数据生产，过程涉及：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从大数据 Hive 数据库整合数据宽表；&lt;/li&gt;
&lt;li&gt;在 Spark 上运行 IRT 算法模型汇总 ADS 表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从中学习了很多关于大数据的知识，同时也积累了如何通过 Airflow 提交 Spark 任务的经验，应当抽时间总结一下。&lt;/p&gt;
&lt;h3 id=&#34;冰山之下&#34;&gt;冰山之下&lt;/h3&gt;
&lt;p&gt;如「冰山理论」所描述，我们所做的只是冰山露在水面的一角，隐藏在冰山之下更大的一部份是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Airflow + Celery&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Hadoop(Hive) 集群&lt;/li&gt;
&lt;li&gt;YARN 集群（Spark over YARN）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们将关注在「冰山水面上的一角」来阐述我们如何利用这些已有的技术连结了整个系统。&lt;/p&gt;
&lt;h3 id=&#34;make-dag-great-again&#34;&gt;Make DAG great again&lt;/h3&gt;
&lt;p&gt;之前部门里有位算法大佬用 DAG（大佬念做「戴格」）实现了一套非常牛逼的文本和识别处理算法，然后每次讨论方案必谈 DAG，
所以 DAG 成了部门里都知道的一个梗，虽然大佬走了之后很少再有人提起 DAG，但是接下来我们会进行文艺复兴，让 DAG 再次出现在我们的日常技术讨论中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make DAG Great Again&lt;/strong&gt;!&lt;/p&gt;
&lt;h2 id=&#34;airflow-介绍&#34;&gt;Airflow 介绍&lt;/h2&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2021-08-30_11-37-00_arch-diag-basic.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DAG&lt;/li&gt;
&lt;li&gt;Operator&lt;/li&gt;
&lt;li&gt;Connection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;providers-packages&#34;&gt;Providers packages&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2021-08-30_11-34-20_screenshot.png&#34; alt=&#34;&#34;&gt;
See also: &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow-providers/index.html&#34;&gt;Provider packages&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;spark-介绍&#34;&gt;Spark 介绍&lt;/h2&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2021-08-30_08-04-43_cluster-overview.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h3 id=&#34;spark-编程&#34;&gt;Spark 编程&lt;/h3&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2021-08-30_08-06-05_Spark%20RDD.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h3 id=&#34;spark-sql-hive-table-示例&#34;&gt;Spark SQL Hive Table 示例&lt;/h3&gt;
&lt;h2 id=&#34;airflow-plus-spark-平台化&#34;&gt;Airflow + Spark 平台化&lt;/h2&gt;
&lt;h3 id=&#34;celery-worker-as-a-spark-driver&#34;&gt;Celery Worker as a Spark Driver&lt;/h3&gt;
&lt;h3 id=&#34;celery-worker-running-on-specific-platform&#34;&gt;Celery Worker running on specific platform&lt;/h3&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;h4 id=&#34;bigdata-hive-client&#34;&gt;Bigdata Hive client&lt;/h4&gt;
&lt;h3 id=&#34;dags-分发&#34;&gt;DAGs 分发&lt;/h3&gt;
&lt;h3 id=&#34;提交-dag&#34;&gt;提交 DAG&lt;/h3&gt;
&lt;h3 id=&#34;python-依赖解决&#34;&gt;Python 依赖解决&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Spark&lt;/li&gt;
&lt;li&gt;Airflow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;外部依赖&#34;&gt;外部依赖？&lt;/h2&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;承接更多的报告需求&lt;/li&gt;
&lt;li&gt;对内承接分析任务&lt;/li&gt;
&lt;li&gt;可编程、平台化的分析&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>SVG 绘制工具</title>
      <link>https://www.linuxzen.com/notes/notes/20210825081520-svg_%E7%BB%98%E5%88%B6%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 25 Aug 2021 08:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210825081520-svg_%E7%BB%98%E5%88%B6%E5%B7%A5%E5%85%B7/</guid>
      <description> https://inkscape.org/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://inkscape.org/&#34;&gt;https://inkscape.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>设计</title>
      <link>https://www.linuxzen.com/notes/notes/20210825081459-%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 25 Aug 2021 08:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210825081459-%E8%AE%BE%E8%AE%A1/</guid>
      <description>SVG SVG 绘制工具</description>
      <content>&lt;h2 id=&#34;svg&#34;&gt;SVG&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210825081520-svg_%E7%BB%98%E5%88%B6%E5%B7%A5%E5%85%B7/&#34;&gt;SVG 绘制工具&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Graphviz</title>
      <link>https://www.linuxzen.com/notes/notes/20210824065326-graphviz/</link>
      <pubDate>Tue, 24 Aug 2021 06:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210824065326-graphviz/</guid>
      <description>Graphviz 教程  https://www2.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-176.pdf  Graphviz Examples  https://graphviz.org/gallery/  Graphviz 绘制思维导图  Graphviz Online Tools  一个手绘风格的在线绘图工具：https://sketchviz.com/new Gaphviz Playground：http://magjac.com/graphviz-visual-editor/  </description>
      <content>&lt;h2 id=&#34;graphviz-教程&#34;&gt;Graphviz 教程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-176.pdf&#34;&gt;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-176.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphviz-examples&#34;&gt;Graphviz Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://graphviz.org/gallery/&#34;&gt;https://graphviz.org/gallery/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;graphviz-绘制思维导图&#34;&gt;Graphviz 绘制思维导图&lt;/h3&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/graphviz-example-mind.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;graphviz-online-tools&#34;&gt;Graphviz Online Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个手绘风格的在线绘图工具：&lt;a href=&#34;https://sketchviz.com/new&#34;&gt;https://sketchviz.com/new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gaphviz Playground：&lt;a href=&#34;http://magjac.com/graphviz-visual-editor/&#34;&gt;http://magjac.com/graphviz-visual-editor/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>《禅与摩托车维修艺术》</title>
      <link>https://www.linuxzen.com/notes/projects/20210821095110-%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF/</link>
      <pubDate>Sat, 21 Aug 2021 09:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20210821095110-%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF/</guid>
      <description>tags: 正在读的书,读书笔记  这是一本什么样书？ 忘记从哪里看到了这么一本书，很早之前就看到过相关推荐，但是第一次看还是因为在 2021 上半年 Kindle Unlimited 上有这本书的电子书， 因为可以免费阅读加上当时找不到相关书籍才开始阅读这本书。
读第一遍是我在上班通勤的路上完成的，给我的感受就是这是一本关于旅行和旅行中的一些思考的书。书中「我」描写了很多旅行中的见闻， 并通过「我」的思维来探寻良质，探讨禅与科技、科技与艺术、古典（哲学）主义与浪漫主义。随着主题的深入「我」开始在两个思想中来回切换， 并且开始探讨形而上学的一些东西（古典主义和浪漫主义）这本书也变的越来越难读。总体给我的感觉就是很好的一本书，但是我好像没读太懂。
基于上面我后面在 JD 买书的时候看到了重庆出版社重新出版的珍藏版《禅与摩托车维修艺术》，我被它的全黑的封面所吸引，毫不犹豫的下单买了这本书。
随书附赠的一本小册子让我更好的了解这本书和作者罗伯特.M.波西格，其真人确实患过精神分裂症，并接受过电击疗法。这让我想起了书中的「我」和「裴德洛」。 作业也同时说明为什么要用第一人称「我」来叙述本书，因为「我」在讲述的时候是希望倾听的人能够喜欢我。我太喜欢这句话了，同时这也是为什么在笔记里把「我」都引了起来。
这本小册子和第一遍留给我的困惑让我决定重读这本书，我现在一有空或者感到无聊，我就会捧起这本书来阅读。第二遍阅读我无法从第一部分跳出去，因为书中的内容太多引起了我的共鸣， 这是我在第一遍阅读所没有发现的。我总是反复的阅读，反复的去思考那些带给我共鸣的内容。同时我发现我在日常聊天的时候已经在不知不觉的引用书中的一些内容。 这也是这篇文章的来源，我觉得如果我不写点什么东西，我感觉我会永远“困”在这本书的第一部分。
如何记录思考？ 这是一本能够让人思考的书，该如何记录这些思考？通过一些尝试，我决定在没读完一小节之后记录我的想法，然后再阅读一遍来修正我的想法。 或许后面的日子我会回来更新我的想法。
第一部分 01 疏通思想的河道 首先我们应该慢来下，去更好的感受过程而非结果：旅行的意义不仅仅在于到达目的地，更多的是感受旅行的过程（沿途的风景、遇到的人和事）。 不要等到「真理已经再敲你的门，而你却说：“走开，我正在寻找真理”」。
在全美思想交流更加快速的时代背景之下，原先的河流无法承载大量的思想造成了两岸的灾难，过多的「新鲜事」构成了河道中的污泥， 「最好的」把思想的河道挖凿的太深以至于无法改动。通过一次摩托车的旅行（Chautauqua）来疏通（并非拓宽）思想的河道。 探讨「我」和朋友之间对待摩托车维修（大部分指科技）不同的态度。
虽然约翰夫妇同样喜欢骑摩托车旅行，但是对待应该多大程度自己维修摩托车方面有很大的不同：
 比如约翰启动不了摩托车，「我」不会主动去帮忙：「除非他真正的需要别人的帮忙，否则别人介入只会引起他的厌烦」。  其实这些不是对待维修摩托车的态度不同，而是对待科技（至少大部分）的态度。「我认为约翰他们的逃避和厌恶只是一种自欺的行为。」
主题：「佛陀或者耶稣坐在电脑和变速器的齿轮旁修行，会像坐在山顶或者莲花座上修行一样自在。如果你认为不是如此，那无异与亵渎了佛陀 &amp;ndash; 也就是亵渎了你自己。」
02 放慢脚步认真思考 从前的「我」就像现在的约翰一样，不关心摩托车维修，从修理我摩托车的「专业人士」身上看到了：
 「如果你不放慢脚步认真思考，往往会花费更多的时间得到更差的结果。」 「像旁观者一样对待自己的工作，看起来随和、友善和轻松自在，但并没有投入工作，对工作没有认同感。」 「当你做某件事，一旦想要求快，就表示你再也不关心它，只想去做别的事。」  03 鬼魂裴德洛 「上帝，他来过这里」：暴风雨的闪电和躲避它的摩托车的速度让“我”闪现出鬼魂裴德洛，“我”降低了摩托车的车速：时速从 95 英里降到 55 英里。 儿子克里斯确认为刚才很棒一点也不快，是不是也预示着克里斯喜欢鬼魂裴德洛？指点汽车旅馆也让约翰惊讶于“我”为什么知道，而“我”选择回避。
思薇娅引出了鬼魂话题：「你好像见鬼了」。
“我”开始谈论科学的鬼魂，但是这些论调好像属于“我”，而是属于鬼魂裴德洛。科学的鬼魂：只存在于人的心中，比如「万有引力定律」：
 牛顿发现它之前它存在吗？ 地球毁灭，人类消失了它还存在吗？  它只存在于人的心中，所以是科学的鬼魂。人们之所以相信它是因为人们被催眠了，正统的说是受教育了。古代世界由鬼魂控制：神或人，牛顿是最好的一位。我们的常识由鬼魂的声音构成。
在克里斯的追问下，“我”声称自己出发寻找鬼魂，并将鬼魂痛打了一顿，这个鬼魂就是：裴德洛。
04 不要在你需要的情况下诅咒科技 在天气好的早晨中前进，寒风造成了生理上的不适，就像对科技的不满一样。 「他们一面需要科技，一面又要诅咒它。我相信他们很明白这一点，而这正是他们对整个环境不满的原因」。 这一部分更多的是对沿途美丽风景的描写，让人心向往之。 「我不想拥有这些草原，或是把他们拍下来，我也不想改变它们，甚至不想停下来或是继续走下去。」</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;正在读的书&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;这是一本什么样书&#34;&gt;这是一本什么样书？&lt;/h2&gt;
&lt;p&gt;忘记从哪里看到了这么一本书，很早之前就看到过相关推荐，但是第一次看还是因为在 2021 上半年 Kindle Unlimited 上有这本书的电子书，
因为可以免费阅读加上当时找不到相关书籍才开始阅读这本书。&lt;/p&gt;
&lt;p&gt;读第一遍是我在上班通勤的路上完成的，给我的感受就是这是一本关于旅行和旅行中的一些思考的书。书中「我」描写了很多旅行中的见闻，
并通过「我」的思维来探寻良质，探讨禅与科技、科技与艺术、古典（哲学）主义与浪漫主义。随着主题的深入「我」开始在两个思想中来回切换，
并且开始探讨形而上学的一些东西（古典主义和浪漫主义）这本书也变的越来越难读。总体给我的感觉就是很好的一本书，但是我好像没读太懂。&lt;/p&gt;
&lt;p&gt;基于上面我后面在 JD 买书的时候看到了重庆出版社重新出版的珍藏版《禅与摩托车维修艺术》，我被它的全黑的封面所吸引，毫不犹豫的下单买了这本书。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/%E8%BF%99%E6%98%AF%E4%B8%80%E6%9C%AC%E4%BB%80%E4%B9%88%E6%A0%B7%E4%B9%A6%EF%BC%9F/2021-09-27_16-04-02_s29831183.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2021-09-27_16-25-44_s29831183.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;随书附赠的一本小册子让我更好的了解这本书和作者罗伯特.M.波西格，其真人确实患过精神分裂症，并接受过电击疗法。这让我想起了书中的「我」和「裴德洛」。
作业也同时说明为什么要用第一人称「我」来叙述本书，因为「我」在讲述的时候是希望倾听的人能够喜欢我。我太喜欢这句话了，同时这也是为什么在笔记里把「我」都引了起来。&lt;/p&gt;
&lt;p&gt;这本小册子和第一遍留给我的困惑让我决定重读这本书，我现在一有空或者感到无聊，我就会捧起这本书来阅读。第二遍阅读我无法从第一部分跳出去，因为书中的内容太多引起了我的共鸣，
这是我在第一遍阅读所没有发现的。我总是反复的阅读，反复的去思考那些带给我共鸣的内容。同时我发现我在日常聊天的时候已经在不知不觉的引用书中的一些内容。
这也是这篇文章的来源，我觉得如果我不写点什么东西，我感觉我会永远“困”在这本书的第一部分。&lt;/p&gt;
&lt;h2 id=&#34;如何记录思考&#34;&gt;如何记录思考？&lt;/h2&gt;
&lt;p&gt;这是一本能够让人思考的书，该如何记录这些思考？通过一些尝试，我决定在没读完一小节之后记录我的想法，然后再阅读一遍来修正我的想法。
或许后面的日子我会回来更新我的想法。&lt;/p&gt;
&lt;h2 id=&#34;第一部分&#34;&gt;第一部分&lt;/h2&gt;
&lt;h3 id=&#34;01-疏通思想的河道&#34;&gt;01 疏通思想的河道&lt;/h3&gt;
&lt;p&gt;首先我们应该慢来下，去更好的感受过程而非结果：旅行的意义不仅仅在于到达目的地，更多的是感受旅行的过程（沿途的风景、遇到的人和事）。
不要等到「真理已经再敲你的门，而你却说：“走开，我正在寻找真理”」。&lt;/p&gt;
&lt;p&gt;在全美思想交流更加快速的时代背景之下，原先的河流无法承载大量的思想造成了两岸的灾难，过多的「新鲜事」构成了河道中的污泥，
「最好的」把思想的河道挖凿的太深以至于无法改动。通过一次摩托车的旅行（Chautauqua）来疏通（并非拓宽）思想的河道。
探讨「我」和朋友之间对待摩托车维修（大部分指科技）不同的态度。&lt;/p&gt;
&lt;p&gt;虽然约翰夫妇同样喜欢骑摩托车旅行，但是对待应该多大程度自己维修摩托车方面有很大的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如约翰启动不了摩托车，「我」不会主动去帮忙：「除非他真正的需要别人的帮忙，否则别人介入只会引起他的厌烦」。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实这些不是对待维修摩托车的态度不同，而是对待科技（至少大部分）的态度。「我认为约翰他们的逃避和厌恶只是一种自欺的行为。」&lt;/p&gt;
&lt;p&gt;主题：「佛陀或者耶稣坐在电脑和变速器的齿轮旁修行，会像坐在山顶或者莲花座上修行一样自在。如果你认为不是如此，那无异与亵渎了佛陀 &amp;ndash; 也就是亵渎了你自己。」&lt;/p&gt;
&lt;h3 id=&#34;02-放慢脚步认真思考&#34;&gt;02 放慢脚步认真思考&lt;/h3&gt;
&lt;p&gt;从前的「我」就像现在的约翰一样，不关心摩托车维修，从修理我摩托车的「专业人士」身上看到了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「如果你不放慢脚步认真思考，往往会花费更多的时间得到更差的结果。」&lt;/li&gt;
&lt;li&gt;「像旁观者一样对待自己的工作，看起来随和、友善和轻松自在，但并没有投入工作，对工作没有认同感。」&lt;/li&gt;
&lt;li&gt;「当你做某件事，一旦想要求快，就表示你再也不关心它，只想去做别的事。」&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;03-鬼魂裴德洛&#34;&gt;03 鬼魂裴德洛&lt;/h3&gt;
&lt;p&gt;「上帝，他来过这里」：暴风雨的闪电和躲避它的摩托车的速度让“我”闪现出鬼魂裴德洛，“我”降低了摩托车的车速：时速从 95 英里降到 55 英里。
儿子克里斯确认为刚才很棒一点也不快，是不是也预示着克里斯喜欢鬼魂裴德洛？指点汽车旅馆也让约翰惊讶于“我”为什么知道，而“我”选择回避。&lt;/p&gt;
&lt;p&gt;思薇娅引出了鬼魂话题：「你好像见鬼了」。&lt;/p&gt;
&lt;p&gt;“我”开始谈论科学的鬼魂，但是这些论调好像属于“我”，而是属于鬼魂裴德洛。科学的鬼魂：只存在于人的心中，比如「万有引力定律」：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;牛顿发现它之前它存在吗？&lt;/li&gt;
&lt;li&gt;地球毁灭，人类消失了它还存在吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它只存在于人的心中，所以是科学的鬼魂。人们之所以相信它是因为人们被催眠了，正统的说是受教育了。古代世界由鬼魂控制：神或人，牛顿是最好的一位。我们的常识由鬼魂的声音构成。&lt;/p&gt;
&lt;p&gt;在克里斯的追问下，“我”声称自己出发寻找鬼魂，并将鬼魂痛打了一顿，这个鬼魂就是：裴德洛。&lt;/p&gt;
&lt;h3 id=&#34;04-不要在你需要的情况下诅咒科技&#34;&gt;04 不要在你需要的情况下诅咒科技&lt;/h3&gt;
&lt;p&gt;在天气好的早晨中前进，寒风造成了生理上的不适，就像对科技的不满一样。
「他们一面需要科技，一面又要诅咒它。我相信他们很明白这一点，而这正是他们对整个环境不满的原因」。
这一部分更多的是对沿途美丽风景的描写，让人心向往之。
「我不想拥有这些草原，或是把他们拍下来，我也不想改变它们，甚至不想停下来或是继续走下去。」&lt;/p&gt;
&lt;h3 id=&#34;05-藝術與科學的視角決定了思考問題的方式&#34;&gt;05 藝術與科學的視角決定了思考問題的方式&lt;/h3&gt;
&lt;p&gt;約翰對表象比較感興趣，但是對內涵則不然，通過用易拉罐作爲墊片修理摩托車反映了兩種態度。
那麼我們爲什麼會常常忽略這種差異呢？書中給出了答案「有些東西你忽略是因爲它們非常細微，但有些卻是因爲它們過於龐大」。
思考相同的事情，出發點不一樣就可能會導致完全不同的結論。約翰站在藝術的視角而非用邏輯去思考科學，所以四處碰壁。然後科學（摩托車）沒有按照約翰所想的那樣工作，所以約翰被激怒了，發動不了的摩托車彷彿在約翰看待問題的方式上鑿了一個洞。&lt;/p&gt;
&lt;p&gt;隨着「我」思考的深入，也越來越接近鬼魂裴德洛，越來越能感受到他的存在。&lt;/p&gt;
&lt;h2 id=&#34;故事开始&#34;&gt;故事开始&lt;/h2&gt;
&lt;h3 id=&#34;一些片段&#34;&gt;一些片段&lt;/h3&gt;
&lt;h4 id=&#34;p12&#34;&gt;p12&lt;/h4&gt;
&lt;p&gt;对周遭美好视而不见，你在寻找真理，但是真理敲你门的时候你却不认识真理，所以真理走开了。&lt;/p&gt;
&lt;h4 id=&#34;p21&#34;&gt;p21&lt;/h4&gt;
&lt;p&gt;帮助一个不希望别人帮助的人只会遭来对方的厌烦：「除非他真的需要别人的帮助，否则别人的介入只会引起他的厌烦」&lt;/p&gt;
&lt;h4 id=&#34;p23&#34;&gt;p23&lt;/h4&gt;
&lt;p&gt;忍受水滴滴答声。一点小毛病，萦绕在你心头，要不要解决它？如果仅仅是水龙头的滴答声，要不要修理？
如果是和其他人的理念不同呢，每次谈话都是一阵沉默，然后各自缭绕心头，盘旋不去，要不要解决，怎么解决？&lt;/p&gt;
&lt;h4 id=&#34;p59&#34;&gt;p59&lt;/h4&gt;
&lt;p&gt;如果有人不懂心存感激，而你当面告诉他，那么就等于是在骂他，这样你什么事都解决不了。&lt;/p&gt;
&lt;h3 id=&#34;一些想法&#34;&gt;一些想法&lt;/h3&gt;
&lt;h4 id=&#34;p23&#34;&gt;p23&lt;/h4&gt;
&lt;p&gt;「我」和约翰就像两个价值观（我在说什么！！）不同的两个同事（技术层面），对待技术有不同的看法。
「我」坚持做一些力所能及探索和学习，争取自己解决问题，而约翰则认为应该让专业的人（修车师傅）来处理问题，
「我」无法容忍一些很小但是总是萦绕心头的小问题，而约翰则认为那不会真正影响什么，而不去进行修理。&lt;/p&gt;
&lt;p&gt;当然，最大的分歧在于我们对新鲜事物（科技）的看法的不同，「我」会积极尝试和学习，约翰则报以敌意，认为新鲜事物（科技）是引起所有这些问题的根源。&lt;/p&gt;
&lt;h4 id=&#34;p64&#34;&gt;p64&lt;/h4&gt;
&lt;p&gt;目前为止，这本书都可以当作一本关于骑车旅行的书愉快的去读，沿途有美丽的风景，在不同的地方休息，通过地图研究路线，这些都给人以无限的遐想。这时候我就在想，科技给了人便利，同时也让另外一些东西消失，比如研究地图。现在出门几乎旅行不用做任何研究：有成熟的旅游规划、GPS 导航、大众点评，只要跟着热度就行。便利的同时也在失去获得很多不一样的体验的机会。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 98. Validate Binary Search Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20210818070934-leetcode_98_validate_binary_search_tree/</link>
      <pubDate>Wed, 18 Aug 2021 07:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210818070934-leetcode_98_validate_binary_search_tree/</guid>
      <description>tags: LeetCode  https://leetcode.com/problems/validate-binary-search-tree/
/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool isValidBST(TreeNode* root) { if (root == nullptr || (root-&amp;gt;left == nullptr &amp;amp;&amp;amp; root-&amp;gt;right == nullptr)) { return true; } if (root-&amp;gt;left !</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/validate-binary-search-tree/&#34;&gt;https://leetcode.com/problems/validate-binary-search-tree/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isValidBST(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;)) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isValidBST&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isValidBST(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isValidBST&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isValidBST&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right)            ;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无法处理子树元素大于上一层的问题。中序遍历排序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isValidBST(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ret;
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; st;
		TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cur;
		cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
				st.push(cur);
				cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left;
			}
			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
			st.pop();
			ret.push_back(cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ret.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret[i];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; prev) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
			}
			prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以去掉中间结果存数组：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isValidBST(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root) {
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; st;
		TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
		TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
		cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
				st.push(cur);
				cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left;
			}
			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
			st.pop();
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prev &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
			}
			prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur;

			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[2,1,3]
[5,1,4,null,null,3,6]
[2,2,2]
[5,4,6,null,null,3,7]
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 113. Path Sum II</title>
      <link>https://www.linuxzen.com/notes/notes/20210816083017-leetcode_113_path_sum_ii/</link>
      <pubDate>Mon, 16 Aug 2021 08:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210816083017-leetcode_113_path_sum_ii/</guid>
      <description>tags: LeetCode  https://leetcode.com/problems/path-sum-ii/
/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; pathSum(TreeNode* root, int targetSum) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; r; if (root == nullptr) { return r; } if (root-&amp;gt;left !</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/path-sum-ii/&#34;&gt;https://leetcode.com/problems/path-sum-ii/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pathSum(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pathSumSide(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; left, root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val, targetSum);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (left.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				left.insert(left.begin(), root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
				r.push_back(left);
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pathSumSide(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val, targetSum);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (right.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				right.insert(right.begin(), root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
				r.push_back(right);
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pathSumSide(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; node, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum) {
				r.push_back(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pathSumSide(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, sum, targetSum);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				ret.insert(ret.begin(), node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pathSumSide(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, sum, targetSum);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				ret.insert(ret.begin(), node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;失败的错误用例:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[1]
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;增加只有一个节点的判断：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t;
		t.push_back(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
		r.push_back(t);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前只考虑了两种情况，实际应该有很多种情况，参见用例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[1,0,1,1,2,0,-1,0,1,-1,0,-1,0,1,0]
2
&lt;/code&gt;&lt;/pre&gt;
  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/leetcode-tree.svg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;通过 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/&#34;&gt;backtracking&lt;/a&gt; + DFS 解决&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pathSum(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
		}
		backtracking(root, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, targetSum);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; node, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; leaf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (leaf) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum) {
				track.push_back(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
				res.push_back(track);
				track.pop_back();
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			track.push_back(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
			backtracking(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val, targetSum);
			track.pop_back();
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			track.push_back(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
			backtracking(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val, targetSum);
			track.pop_back();
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试用例:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[5,4,8,11,null,13,4,7,2,null,null,5,1]
22
[]
0
[1,0,1,1,2,0,-1,0,1,-1,0,-1,0,1,0]
2
[1,2]
1
[0,1,1]
1
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 112. Path Sum</title>
      <link>https://www.linuxzen.com/notes/notes/20210816074540-leetcode_112_path_sum/</link>
      <pubDate>Mon, 16 Aug 2021 07:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210816074540-leetcode_112_path_sum/</guid>
      <description>tags: LeetCode  https://leetcode.com/problems/path-sum/
递归版
/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool hasPathSum(TreeNode* root, int targetSum) { if (root == nullptr) { return false; } return pathSum(root, 0, targetSum); } bool pathSum(TreeNode* node, int sum, int targetSum) { sum += node-&amp;gt;val; if (node-&amp;gt;left == nullptr &amp;amp;&amp;amp; node-&amp;gt;right == nullptr) { if (sum == targetSum) { return true; } } if (node-&amp;gt;left !</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/path-sum/&#34;&gt;https://leetcode.com/problems/path-sum/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;递归版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; hasPathSum(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(root, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, targetSum);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; node, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pathSum(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, sum, targetSum)) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pathSum(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, sum, targetSum)) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试用例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[5,4,8,11,null,13,4,7,2,null,null,null,1]
22
[1,2]
1
[1,2]
0
[1,2,3]
5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简化版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; hasPathSum(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(root, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, targetSum);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pathSum&lt;/span&gt;(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; node, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; targetSum) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum;
		}
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pathSum(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, sum, targetSum) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; pathSum(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, sum, targetSum);
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 79. Word Search</title>
      <link>https://www.linuxzen.com/notes/notes/20210815081516-leetcode_79_word_search/</link>
      <pubDate>Sun, 15 Aug 2021 08:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210815081516-leetcode_79_word_search/</guid>
      <description>tags: LeetCode  79. Word Search
class Solution { public: bool exist(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board, string word, int row, int col) { if (track == word || res) { res = true; return; } for (int i = row; i &amp;lt; board.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/word-search/&#34;&gt;79. Word Search&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; exist(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word) {
		backtracking(board, word, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string track;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Direction&lt;/span&gt; {
		right,
		down,
		up,
		left,
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param dir: 0: right, 1: down, 2: up, 3: left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res) {
			res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[i].size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_directions(board, i, j);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (directions.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; d: directions) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, c;
					track.push_back(board[i][j]);
					std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tie(r, c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_char_pos(board, row, col, d);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (word.find(track) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
						backtracking(board, word, r, c);
					}
					track.pop_back();
				}

			}
		}
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; get_next_directions(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[row].size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(down);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(up);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; next_char_pos(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col, Direction dir) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(dir) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; right:
				col&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; left:
				col&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; up:
				row&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; down:
				row&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;r(row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;失败的用例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;E&amp;quot;],[&amp;quot;S&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;S&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;E&amp;quot;,&amp;quot;E&amp;quot;]]
&amp;quot;ABCB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为方向往回走导致，应该规避方向往回走。通过一个 set 来跟踪位置，防止进入前面的位置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; exist(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word) {
		backtracking(board, word, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string track;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pos;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Direction&lt;/span&gt; {
		right,
		down,
		up,
		left,
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param dir: 0: right, 1: down, 2: up, 3: left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res) {
			res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[i].size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_directions(board, i, j);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (directions.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; d: directions) {
					tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p (i, j);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pos.find(p) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pos.end()) {
						&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
					}
					pos.insert(p);
					track.push_back(board[i][j]);

					&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, c;
					std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tie(r, c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_char_pos(board, row, col, d);


					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (word.find(track) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
						backtracking(board, word, r, c);
					}
					track.pop_back();
					pos.erase(p);
				}

			}
		}
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; get_next_directions(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[row].size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(down);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(up);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; next_char_pos(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col, Direction dir) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(dir) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; right:
				col&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; left:
				col&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; up:
				row&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; down:
				row&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;r(row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;失败的用例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;a&amp;quot;]]
&amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码逻辑有问题，修正后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; exist(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word) {
		backtracking(board, word, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string track;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pos;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Direction&lt;/span&gt; {
		right,
		down,
		up,
		left,
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param dir: 0: right, 1: down, 2: up, 3: left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res) {
			res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[i].size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p (i, j);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pos.find(p) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pos.end()) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
				}
				pos.insert(p);
				track.push_back(board[i][j]);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res) {
					res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (word.find(track) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_directions(board, i, j);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; d: directions) {
						&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, c;
						std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tie(r, c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_char_pos(board, row, col, d);
						backtracking(board, word, r, c);
					}
				}

				track.pop_back();
				pos.erase(p);

			}
		}
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; get_next_directions(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[row].size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(down);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(up);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; next_char_pos(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col, Direction dir) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(dir) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; right:
				col&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; left:
				col&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; up:
				row&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; down:
				row&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;r(row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下测试用例无法通过：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]]
&amp;quot;ba&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调整代码后（进入下一个节点的 row/col 没用 i/j）:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; exist(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word) {
		backtracking(board, word, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string track;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pos;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Direction&lt;/span&gt; {
		right,
		down,
		up,
		left,
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param dir: 0: right, 1: down, 2: up, 3: left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; track &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res) {
			res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[i].size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p (i, j);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pos.find(p) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pos.end()) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
				}
				pos.insert(p);
				track.push_back(board[i][j]);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word) {
					res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (word.find(track) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_directions(board, i, j);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; d: directions) {
						&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, c;
						std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tie(r, c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_char_pos(board, i, j, d);
						backtracking(board, word, r, c);
					}
				}

				track.pop_back();
				pos.erase(p);
			}
		}
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; get_next_directions(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[row].size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(down);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(up);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; next_char_pos(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col, Direction dir) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(dir) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; right:
				col&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; left:
				col&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; up:
				row&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; down:
				row&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;r(row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时的失败用例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;]]
&amp;quot;abcd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改成如果位置已经存在则返回可以通过:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; exist(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word) {
		backtracking(board, word, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string track;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pos;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Direction&lt;/span&gt; {
		right,
		down,
		up,
		left,
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param dir: 0: right, 1: down, 2: up, 3: left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; res) {
			res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[i].size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p (i, j);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pos.find(p) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pos.end()) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;--------- here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				}
				pos.insert(p);
				track.push_back(board[i][j]);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (word.find(track) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_directions(board, i, j);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word) {
						res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
						&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
					}
					&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; d: directions) {
						&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, c;
						std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tie(r, c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_char_pos(board, i, j, d);
						backtracking(board, word, r, c);
					}
				}

				track.pop_back();
				pos.erase(p);
			}
		}
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; get_next_directions(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[row].size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(down);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(up);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; next_char_pos(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col, Direction dir) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(dir) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; right:
				col&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; left:
				col&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; up:
				row&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; down:
				row&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;r(row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是在下面测试用例失败了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;],[&amp;quot;b&amp;quot;],[&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;]]
&amp;quot;baa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的过滤掉：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (board.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
	string s;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		s.push_back(board[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s.find(word) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;npos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在下面失败了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]]
&amp;quot;bbbaabbbbbab&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过仔细推敲后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; exist(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[i].size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				backtracking(board, word, i, j);
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	string track;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pos;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Direction&lt;/span&gt; {
		right,
		down,
		up,
		left,
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param dir: 0: right, 1: down, 2: up, 3: left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, string word, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p (row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pos.find(p) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pos.end()) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;--------- here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}
		pos.insert(p);
		track.push_back(board[row][col]);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; word) {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; track &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
			res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (res) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (word.find(track) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_directions(board, row, col);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; d: directions) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, c;
				std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tie(r, c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_char_pos(board, row, col, d);
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
				backtracking(board, word, r, c);
			}
		}
		track.pop_back();
		pos.erase(p);
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; get_next_directions(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board[row].size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(right);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; board.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			r.push_back(down);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(up);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			r.push_back(left);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}

	tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; next_char_pos(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col, Direction dir) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(dir) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; right:
				col&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; left:
				col&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; up:
				row&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; down:
				row&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		tuple&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;r(row, col);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面用例会导致处理事件过长：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;]]
&amp;quot;AAAAAAAAAAAAAAB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试用例快照:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;E&amp;quot;],[&amp;quot;S&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;S&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;E&amp;quot;,&amp;quot;E&amp;quot;]]
&amp;quot;ABCCED&amp;quot;
[[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;E&amp;quot;],[&amp;quot;S&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;S&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;E&amp;quot;,&amp;quot;E&amp;quot;]]
&amp;quot;SEE&amp;quot;
[[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;E&amp;quot;],[&amp;quot;S&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;S&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;E&amp;quot;,&amp;quot;E&amp;quot;]]
&amp;quot;ABCB&amp;quot;
[[&amp;quot;a&amp;quot;]]
&amp;quot;a&amp;quot;
[[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]]
&amp;quot;ba&amp;quot;
[[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;]]
&amp;quot;dbac&amp;quot;
[[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;]]
&amp;quot;abcd&amp;quot;
[[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;]]
&amp;quot;aaaaaaaaaaaaa&amp;quot;
[[&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;],[&amp;quot;b&amp;quot;],[&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;]]
&amp;quot;baa&amp;quot;
[[&amp;quot;a&amp;quot;]]
&amp;quot;ab&amp;quot;
[[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;],[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;],[&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]]
&amp;quot;bbbaabbbbbab&amp;quot;
[[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;],[&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;A&amp;quot;]]
&amp;quot;AAAAAAAAAAAAAAB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Event Store</title>
      <link>https://www.linuxzen.com/notes/notes/20210814072447-event_store/</link>
      <pubDate>Sat, 14 Aug 2021 07:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210814072447-event_store/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>领域驱动设计</title>
      <link>https://www.linuxzen.com/notes/notes/20210814071825-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 Aug 2021 07:18:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210814071825-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description> 《领域驱动设计》读书笔记  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320171301_%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/&#34;&gt;《领域驱动设计》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>High Performance Browser Networking</title>
      <link>https://www.linuxzen.com/notes/notes/20210813080226-high_performance_browser_networking/</link>
      <pubDate>Fri, 13 Aug 2021 08:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813080226-high_performance_browser_networking/</guid>
      <description> tags: 计划读的书,HTTP,High Performance,Network 在线： https://hpbn.co/ source: Grigorik, Ilya. High-Performance Browser Networking. Beijing ; Sebastopol, CA: O’Reilly, 2013.   “Good developers know how things work. Great developers know why things work.”
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231171333-%E8%AE%A1%E5%88%92%E8%AF%BB%E7%9A%84%E4%B9%A6/&#34;&gt;计划读的书&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220110082953-http/&#34;&gt;HTTP&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110112848-high_performance/&#34;&gt;High Performance&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线： &lt;a href=&#34;https://hpbn.co/&#34;&gt;https://hpbn.co/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;//select/items/1_8C9QJED4&#34;&gt;Grigorik, Ilya. High-Performance Browser Networking. Beijing ; Sebastopol, CA: O’Reilly, 2013.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“Good developers know how things work. Great developers know why things work.”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>预写日志</title>
      <link>https://www.linuxzen.com/notes/notes/20210813074328-%E9%A2%84%E5%86%99%E6%97%A5%E5%BF%97/</link>
      <pubDate>Fri, 13 Aug 2021 07:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813074328-%E9%A2%84%E5%86%99%E6%97%A5%E5%BF%97/</guid>
      <description>预写日志（write-ahead log，WAL），也称为重做日志。
一个仅支持追加修改的文件，每个 B-tree 的修改必须先更新 WAL 然后再修改数本身的页。 当数据库在崩溃后恢复时，该日志用于将 B-tree 恢复到最近一致的状态。</description>
      <content>&lt;p&gt;预写日志（write-ahead log，WAL），也称为重做日志。&lt;/p&gt;
&lt;p&gt;一个仅支持追加修改的文件，每个 B-tree 的修改必须先更新 WAL 然后再修改数本身的页。
当数据库在崩溃后恢复时，该日志用于将 B-tree 恢复到最近一致的状态。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>https://www.linuxzen.com/notes/notes/20210813073438-rabbitmq/</link>
      <pubDate>Fri, 13 Aug 2021 07:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813073438-rabbitmq/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Twitter DistributedLog</title>
      <link>https://www.linuxzen.com/notes/notes/20210813073412-twitter_distributedlog/</link>
      <pubDate>Fri, 13 Aug 2021 07:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813073412-twitter_distributedlog/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Amazon Kinesis Streams</title>
      <link>https://www.linuxzen.com/notes/notes/20210813073357-amazon_kinesis_streams/</link>
      <pubDate>Fri, 13 Aug 2021 07:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813073357-amazon_kinesis_streams/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>消息队列</title>
      <link>https://www.linuxzen.com/notes/notes/20210813072847-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 13 Aug 2021 07:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813072847-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>AMQP/JMS 风格的消息代理 将单个消息分配给消费者，消费者在成功处理后确认每条消息。消息被确认后从代理中删除。 适合作为一种异步 RPC。
 RabbitMQ ActiveMQ HornetQ Qpid TIBCO Enterprise MEssage Service IBM MQ Azure Service Bus Google Cloud Pub/Sub  多个消费者 负载均衡式 每一条消息都只被传递给其中一个消费者。
扇出式 每条消息都被传递给所有消费者。
确认和重新传递 为了确保消息不会丢失，消息代理使用确认：客户端必须在处理完消息后显式的告诉代理，以便代理可以将其从队列中移除。
如果客户端的连接关闭或超时，而代理没有收到确认，则认为消息未处理，因此它将消息重新传递给另一个消费者。
消息顺序性 即使消息代理试图保留消息顺序（标准要求），负载均衡与重新传递的组合也不可避免地导致消息被重新排序。
基于日志的消息代理  代理将分区中的所有消息分配给相同的消费者节点，并始终以相同的顺序发送消息。 通过分区机制来实现并行（写在多个磁盘上突破磁盘带宽），消费者通过检查他们处理的最后一条消息的偏移量来跟踪进度。 代理将消息保存在磁盘上，因此如果有必要，可以回退并重新读取旧消息。  代表性的有：
 Kafka Amazon Kinesis Streams Twitter DistributedLog  基于日志的消息存储 参照 LSM-Tree 和 B-tree 的 WAL，可以使用相同的结构来实现消息代理： 生产者通过将消息追加到日志的末尾来发送消息，消费者通过依次读取日志来接收消息。 如果消费者读到日志的末尾，它就开始等待新消息被追加的通知。
通过对日志进行分区突破单个磁盘所能体能的带宽吞吐上线。
代理为每个消息分区分配了一个单调递增的序列号或偏移量，保证了分区内的消息完全有序。
消费者偏移量：记录哪些消息已经被处理，减少 ACK 开销 磁盘空间：分段，定期删除 消费者跟不上生产者：增加 LAG 报警 重新处理消息：重置偏移量 </description>
      <content>&lt;h2 id=&#34;amqp-jms-风格的消息代理&#34;&gt;AMQP/JMS 风格的消息代理&lt;/h2&gt;
&lt;p&gt;将单个消息分配给消费者，消费者在成功处理后确认每条消息。消息被确认后从代理中删除。
适合作为一种异步 RPC。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813073438-rabbitmq/&#34;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ActiveMQ&lt;/li&gt;
&lt;li&gt;HornetQ&lt;/li&gt;
&lt;li&gt;Qpid&lt;/li&gt;
&lt;li&gt;TIBCO Enterprise MEssage Service&lt;/li&gt;
&lt;li&gt;IBM MQ&lt;/li&gt;
&lt;li&gt;Azure Service Bus&lt;/li&gt;
&lt;li&gt;Google Cloud Pub/Sub&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多个消费者&#34;&gt;多个消费者&lt;/h3&gt;
&lt;h4 id=&#34;负载均衡式&#34;&gt;负载均衡式&lt;/h4&gt;
&lt;p&gt;每一条消息都只被传递给其中一个消费者。&lt;/p&gt;
&lt;h4 id=&#34;扇出式&#34;&gt;扇出式&lt;/h4&gt;
&lt;p&gt;每条消息都被传递给所有消费者。&lt;/p&gt;
&lt;h3 id=&#34;确认和重新传递&#34;&gt;确认和重新传递&lt;/h3&gt;
&lt;p&gt;为了确保消息不会丢失，消息代理使用确认：客户端必须在处理完消息后显式的告诉代理，以便代理可以将其从队列中移除。&lt;/p&gt;
&lt;p&gt;如果客户端的连接关闭或超时，而代理没有收到确认，则认为消息未处理，因此它将消息重新传递给另一个消费者。&lt;/p&gt;
&lt;h3 id=&#34;消息顺序性&#34;&gt;消息顺序性&lt;/h3&gt;
&lt;p&gt;即使消息代理试图保留消息顺序（标准要求），负载均衡与重新传递的组合也不可避免地导致消息被重新排序。&lt;/p&gt;
&lt;h2 id=&#34;基于日志的消息代理&#34;&gt;基于日志的消息代理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代理将分区中的所有消息分配给相同的消费者节点，并始终以相同的顺序发送消息。&lt;/li&gt;
&lt;li&gt;通过分区机制来实现并行（写在多个磁盘上突破磁盘带宽），消费者通过检查他们处理的最后一条消息的偏移量来跟踪进度。&lt;/li&gt;
&lt;li&gt;代理将消息保存在磁盘上，因此如果有必要，可以回退并重新读取旧消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代表性的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172022_kafka/&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813073357-amazon_kinesis_streams/&#34;&gt;Amazon Kinesis Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813073412-twitter_distributedlog/&#34;&gt;Twitter DistributedLog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于日志的消息存储&#34;&gt;基于日志的消息存储&lt;/h3&gt;
&lt;p&gt;参照 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606100317-lsm_tree/&#34;&gt;LSM-Tree &lt;/a&gt;和 B-tree 的 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813074328-%E9%A2%84%E5%86%99%E6%97%A5%E5%BF%97/&#34;&gt;WAL&lt;/a&gt;，可以使用相同的结构来实现消息代理：
生产者通过将消息追加到日志的末尾来发送消息，消费者通过依次读取日志来接收消息。
如果消费者读到日志的末尾，它就开始等待新消息被追加的通知。&lt;/p&gt;
&lt;p&gt;通过对日志进行分区突破单个磁盘所能体能的带宽吞吐上线。&lt;/p&gt;
&lt;p&gt;代理为每个消息分区分配了一个单调递增的序列号或偏移量，保证了分区内的消息完全有序。&lt;/p&gt;
&lt;h3 id=&#34;消费者偏移量-记录哪些消息已经被处理-减少-ack-开销&#34;&gt;消费者偏移量：记录哪些消息已经被处理，减少 ACK 开销&lt;/h3&gt;
&lt;h3 id=&#34;磁盘空间-分段-定期删除&#34;&gt;磁盘空间：分段，定期删除&lt;/h3&gt;
&lt;h3 id=&#34;消费者跟不上生产者-增加-lag-报警&#34;&gt;消费者跟不上生产者：增加 LAG 报警&lt;/h3&gt;
&lt;h3 id=&#34;重新处理消息-重置偏移量&#34;&gt;重新处理消息：重置偏移量&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>Networking 101: Building Blocks of TCP</title>
      <link>https://www.linuxzen.com/notes/notes/20210813071739-networking_101_building_blocks_of_tcp/</link>
      <pubDate>Fri, 13 Aug 2021 07:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813071739-networking_101_building_blocks_of_tcp/</guid>
      <description>tags: TCP,High Performance Browser Networking 原文链接：https://hpbn.co/building-blocks-of-tcp/。  Overview The 4th version of RFC 675, and final two seperate RFCs:
 RFC 791 - Internet Protocol(IPv4) RFC 793 - Transmission Control Protocol  TCP provides:
 Effective abstraction. A reliable network running over unreliable channel. Hiding most the complexity of network communication:  retransmission of lost data, in-order delivery, congestion control and avoidance, data integrity, and more.    Three-Way Handhsake Sequence numbers are important for keep in-order delivery, and they are picked randomly from both sides for security reasons.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813071635-tcp/&#34;&gt;TCP&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813080226-high_performance_browser_networking/&#34;&gt;High Performance Browser Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文链接：&lt;a href=&#34;https://hpbn.co/building-blocks-of-tcp/&#34;&gt;https://hpbn.co/building-blocks-of-tcp/&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The 4th version of RFC 675, and final two seperate RFCs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RFC 791 - Internet Protocol(IPv4)&lt;/li&gt;
&lt;li&gt;RFC 793 - Transmission Control Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Effective abstraction.&lt;/li&gt;
&lt;li&gt;A reliable network running over unreliable channel.&lt;/li&gt;
&lt;li&gt;Hiding most the complexity of network communication:
&lt;ul&gt;
&lt;li&gt;retransmission of lost data,&lt;/li&gt;
&lt;li&gt;in-order delivery,&lt;/li&gt;
&lt;li&gt;congestion control and avoidance,&lt;/li&gt;
&lt;li&gt;data integrity,&lt;/li&gt;
&lt;li&gt;and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;three-way-handhsake&#34;&gt;Three-Way Handhsake&lt;/h2&gt;
&lt;p&gt;Sequence numbers are important for keep in-order delivery, and they are picked randomly from both sides for security reasons.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SYN&lt;/em&gt; - &lt;strong&gt;CLIENT&lt;/strong&gt; picks a random sequence number &lt;em&gt;X&lt;/em&gt; and sends a &lt;em&gt;SYN&lt;/em&gt; packet, which may also include addition TCP flags and options.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SYN ACK&lt;/em&gt; - &lt;strong&gt;SERVER&lt;/strong&gt; increments &lt;em&gt;X&lt;/em&gt; by one, picks own random sequence number &lt;em&gt;Y&lt;/em&gt;, appends its own set of flags and options, and dispatches the response.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ACK&lt;/em&gt; - &lt;strong&gt;CLIENT&lt;/strong&gt; increments both &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; by one and completes the handhsake by dispatching the last &lt;em&gt;ACK&lt;/em&gt; packet in the handshake.&lt;/li&gt;
&lt;/ul&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/2022-01-12_06-56-52_eefa1170a673da0140efe1ece7a2884b.svg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Implications of Performance&lt;/strong&gt;:
&lt;em&gt;Expensive to Create&lt;/em&gt; - Every new TCP connection will have a full roundtrip of latency before any application data can be transferred. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;congestion-avoidance-and-control&#34;&gt;Congestion Avoidance and Control&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220112070151-tcp_fast_open/&#34;&gt;TCP Fast Open&lt;/a&gt; aims to solve the &lt;em&gt;Expensive to Create&lt;/em&gt; problem.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://www.linuxzen.com/notes/notes/20210813071635-tcp/</link>
      <pubDate>Fri, 13 Aug 2021 07:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813071635-tcp/</guid>
      <description> tags: Network  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>背压</title>
      <link>https://www.linuxzen.com/notes/notes/20210813071452-%E8%83%8C%E5%8E%8B/</link>
      <pubDate>Fri, 13 Aug 2021 07:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813071452-%E8%83%8C%E5%8E%8B/</guid>
      <description>阻止生产者发送更多的消息。使用背压的场景：
 Unix 管道 TCP  </description>
      <content>&lt;p&gt;阻止生产者发送更多的消息。使用背压的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unix 管道&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813071635-tcp/&#34;&gt;TCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>流处理系统</title>
      <link>https://www.linuxzen.com/notes/notes/20210813065446-%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 13 Aug 2021 06:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210813065446-%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
      <description>发送事件流 消息系统  生产者速度比消费者快：丢弃消息、将消息缓存在队列、激活背压。 节点崩溃或者暂时历险，是否会有消息丢失？  生产者与消息系统之间的直接消息传递  UDP 组播：广泛应用于金融股票 无代理消息库：ZerroMQ 和 nanomsg StatsD 和 Brubeck 使用 UDP 传递消息 HTTP、RPC 接口  消息代理 参见：AMQP/JMS 风格的消息代理。 也称消息队列。
 消息对比与数据库对比   多个消费者   确认和重传机制  分区日志 参见： 基于日志的消息代理。
数据库与流 保持系统同步 变更数据捕获 变更数据捕获（Change Data Capture，CDC）记录了写入数据库的所有更改，并以可复制到其他系统的形式来提取数据。 如果在写入时立即将更改作为一种流来发布，那么 CDC 就更有趣来。
实现变更数据捕获 解析复制日志，并将解析的内容发送到事件流中进行 replay。
初始快照 replay 日志占用空间过大，需要进行截断，截断之前的进行初始快照保存。
日志压缩 参考哈希索引。
对变更流的 API 支持 数据库开始支持将变更流作为标准接口。
事件溯源 一种在领域驱动设计社区中开发的技术，与 CDC 最大的区别在于事件溯源在不同抽象层次上应用了将所有对应用程序状态的更改保存为更改事件日志：
 CDC 中：应用程序以数据可变方式来操纵数据库，从数据库中提取较低级的变更日志，从而确保从数据库提取写入顺序与实际写入顺序相匹配。写入数据库的程序不需要知道 CDC 正在发生。 事件溯源中：应用程序的写入逻辑是基于写入事件日志的不可变事件构建的。事件存储仅支持追加，不鼓励甚至禁止更新或删除操作。事件旨在反映在应用程序级别所发生的事情，而不是低级别的状态改变。  专门的数据库 Event Store 来支持使用事件溯源的应用程序。</description>
      <content>&lt;h2 id=&#34;发送事件流&#34;&gt;发送事件流&lt;/h2&gt;
&lt;h3 id=&#34;消息系统&#34;&gt;消息系统&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;生产者速度比消费者快：丢弃消息、将消息缓存在队列、激活&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813071452-%E8%83%8C%E5%8E%8B/&#34;&gt;背压&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;节点崩溃或者暂时历险，是否会有消息丢失？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;生产者与消息系统之间的直接消息传递&#34;&gt;生产者与消息系统之间的直接消息传递&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;UDP 组播：广泛应用于金融股票&lt;/li&gt;
&lt;li&gt;无代理消息库：ZerroMQ 和 nanomsg&lt;/li&gt;
&lt;li&gt;StatsD 和 Brubeck 使用 UDP 传递消息&lt;/li&gt;
&lt;li&gt;HTTP、RPC 接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消息代理&#34;&gt;消息代理&lt;/h4&gt;
&lt;p&gt;参见：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813072847-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#amqp-jms-风格的消息代理&#34;&gt;AMQP/JMS 风格的消息代理&lt;/a&gt;。
也称消息队列。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;消息对比与数据库对比&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;多个消费者&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;确认和重传机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分区日志&#34;&gt;分区日志&lt;/h4&gt;
&lt;p&gt;参见： &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813072847-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#基于日志的消息代理&#34;&gt;基于日志的消息代理&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;数据库与流&#34;&gt;数据库与流&lt;/h2&gt;
&lt;h3 id=&#34;保持系统同步&#34;&gt;保持系统同步&lt;/h3&gt;
&lt;h3 id=&#34;变更数据捕获&#34;&gt;变更数据捕获&lt;/h3&gt;
&lt;p&gt;变更数据捕获（Change Data Capture，CDC）记录了写入数据库的所有更改，并以可复制到其他系统的形式来提取数据。
如果在写入时立即将更改作为一种流来发布，那么 CDC 就更有趣来。&lt;/p&gt;
&lt;h4 id=&#34;实现变更数据捕获&#34;&gt;实现变更数据捕获&lt;/h4&gt;
&lt;p&gt;解析复制日志，并将解析的内容发送到事件流中进行 replay。&lt;/p&gt;
&lt;h4 id=&#34;初始快照&#34;&gt;初始快照&lt;/h4&gt;
&lt;p&gt;replay 日志占用空间过大，需要进行截断，截断之前的进行初始快照保存。&lt;/p&gt;
&lt;h4 id=&#34;日志压缩&#34;&gt;日志压缩&lt;/h4&gt;
&lt;p&gt;参考&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/&#34;&gt;哈希索引&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;对变更流的-api-支持&#34;&gt;对变更流的 API 支持&lt;/h4&gt;
&lt;p&gt;数据库开始支持将变更流作为标准接口。&lt;/p&gt;
&lt;h3 id=&#34;事件溯源&#34;&gt;事件溯源&lt;/h3&gt;
&lt;p&gt;一种在&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210814071825-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/&#34;&gt;领域驱动设计&lt;/a&gt;社区中开发的技术，与 &lt;a href=&#34;#%E5%8F%98%E6%9B%B4%E6%95%B0%E6%8D%AE%E6%8D%95%E8%8E%B7&#34;&gt;CDC&lt;/a&gt; 最大的区别在于事件溯源在不同抽象层次上应用了将所有对应用程序状态的更改保存为更改事件日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8F%98%E6%9B%B4%E6%95%B0%E6%8D%AE%E6%8D%95%E8%8E%B7&#34;&gt;CDC&lt;/a&gt; 中：应用程序以数据可变方式来操纵数据库，从数据库中提取较低级的变更日志，从而确保从数据库提取写入顺序与实际写入顺序相匹配。写入数据库的程序不需要知道 CDC 正在发生。&lt;/li&gt;
&lt;li&gt;事件溯源中：应用程序的写入逻辑是基于写入事件日志的不可变事件构建的。事件存储仅支持追加，不鼓励甚至禁止更新或删除操作。事件旨在反映在应用程序级别所发生的事情，而不是低级别的状态改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;专门的数据库 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210814072447-event_store/&#34;&gt;Event Store&lt;/a&gt; 来支持使用事件溯源的应用程序。&lt;/p&gt;
&lt;h4 id=&#34;从事件中导出当前状态-真正对用户有意义&#34;&gt;从事件中导出当前状态：真正对用户有意义&lt;/h4&gt;
&lt;h4 id=&#34;命令和事件&#34;&gt;命令和事件&lt;/h4&gt;
&lt;p&gt;命令经过校验后转化为事件。&lt;/p&gt;
&lt;h3 id=&#34;状态-流与不可变性&#34;&gt;状态，流与不可变性&lt;/h3&gt;
&lt;h2 id=&#34;流处理&#34;&gt;流处理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;事件中的数据写入数据库、缓存、搜索索引或类似的存储系统，提供给客户端查询。&lt;/li&gt;
&lt;li&gt;通过某种方式将事件推送给用户，如电子邮件、短信等。&lt;/li&gt;
&lt;li&gt;处理一个或多个输入流产生过一个或多个输出流。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;流处理适用场景&#34;&gt;流处理适用场景&lt;/h3&gt;
&lt;h4 id=&#34;复杂事件处理&#34;&gt;复杂事件处理&lt;/h4&gt;
&lt;p&gt;复杂事件处理（Complex Event Processing，CEP）尤其适用需要搜索特定的事件模式。
实现：Esper、IBM Info Sphere Streams、Apama、TIBCO StreamBase 和 SQLstream。&lt;/p&gt;
&lt;h4 id=&#34;流分析&#34;&gt;流分析&lt;/h4&gt;
&lt;p&gt;Apache Storm、Spark Streaming、Flink、Concord、Samza 和 Kafka Streams。&lt;/p&gt;
&lt;h4 id=&#34;维护物化视图&#34;&gt;维护物化视图&lt;/h4&gt;
&lt;h4 id=&#34;在流上搜索&#34;&gt;在流上搜索&lt;/h4&gt;
&lt;h4 id=&#34;消息传递和-rpc&#34;&gt;消息传递和 RPC&lt;/h4&gt;
&lt;h3 id=&#34;流的时间问题&#34;&gt;流的时间问题&lt;/h3&gt;
&lt;p&gt;需记录三个时间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件发生时间，设备的时钟&lt;/li&gt;
&lt;li&gt;事件发送时间，设备的时钟&lt;/li&gt;
&lt;li&gt;事件接收时间，福奇的时钟&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;窗口类型&#34;&gt;窗口类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;轮转窗口：长度固定，相互之间不重叠。&lt;/li&gt;
&lt;li&gt;跳跃窗口：长度固定，可以允许相互之间重叠。&lt;/li&gt;
&lt;li&gt;滑动窗口：通过保留事件排序的事件缓冲区并且从窗口过期时移除旧事件来实现。&lt;/li&gt;
&lt;li&gt;会话窗口：没有固定持续事件，通过将同一用户在时间上紧密相关的所有事件分组在一起。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流式-join&#34;&gt;流式 join&lt;/h3&gt;
&lt;h4 id=&#34;流和流-join-窗口-join&#34;&gt;流和流 join（窗口 join）&lt;/h4&gt;
&lt;h4 id=&#34;流和表-join&#34;&gt;流和表 join&lt;/h4&gt;
&lt;h4 id=&#34;表和表-join&#34;&gt;表和表 join&lt;/h4&gt;
&lt;h4 id=&#34;join-和事件依赖性&#34;&gt;join 和事件依赖性&lt;/h4&gt;
&lt;h3 id=&#34;流处理容错&#34;&gt;流处理容错&lt;/h3&gt;
&lt;h4 id=&#34;微处理和校验点&#34;&gt;微处理和校验点&lt;/h4&gt;
&lt;h4 id=&#34;重新审视原子提交&#34;&gt;重新审视原子提交&lt;/h4&gt;
&lt;h4 id=&#34;幂等性&#34;&gt;幂等性&lt;/h4&gt;
&lt;h4 id=&#34;故障后重建状态&#34;&gt;故障后重建状态&lt;/h4&gt;
</content>
    </item>
    
    <item>
      <title>Why MapReduce is making a comeback</title>
      <link>https://www.linuxzen.com/notes/notes/20210811111926-why_mapreduce_is_making_a_comeback/</link>
      <pubDate>Wed, 11 Aug 2021 11:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210811111926-why_mapreduce_is_making_a_comeback/</guid>
      <description>原文链接：Why MapReduce is making a comeback。</description>
      <content>&lt;p&gt;原文链接：&lt;a href=&#34;https://www.estuary.dev/blog/why-mapreduce-is-making-a-comeback&#34;&gt;Why MapReduce is making a comeback&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>When Zero Cost Abstractions Aren&#39;t Zero Cost</title>
      <link>https://www.linuxzen.com/notes/notes/20210810151736-when_zero_cost_abstractions_aren_t_zero_cost/</link>
      <pubDate>Tue, 10 Aug 2021 15:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210810151736-when_zero_cost_abstractions_aren_t_zero_cost/</guid>
      <description> tags: Rust 原文：When Zero Cost Abstractions Aren&amp;rsquo;t Zero Cost  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文：&lt;a href=&#34;https://blog.polybdenum.com/2021/08/09/when-zero-cost-abstractions-aren-t-zero-cost.html&#34;&gt;When Zero Cost Abstractions Aren&amp;rsquo;t Zero Cost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>弹性分布式数据集</title>
      <link>https://www.linuxzen.com/notes/notes/20210810072604-%E5%BC%B9%E6%80%A7%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86/</link>
      <pubDate>Tue, 10 Aug 2021 07:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210810072604-%E5%BC%B9%E6%80%A7%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>HBase</title>
      <link>https://www.linuxzen.com/notes/notes/20210810071455-hbase/</link>
      <pubDate>Tue, 10 Aug 2021 07:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210810071455-hbase/</guid>
      <description>基于 Hadoop 分布式文件系统使用 SSTables 和 LSM-Tree 实现随机访问的 OLTP 数据库。</description>
      <content>&lt;p&gt;基于 Hadoop 分布式文件系统使用 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/&#34;&gt;SSTables&lt;/a&gt; 和 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606100317-lsm_tree/&#34;&gt;LSM-Tree&lt;/a&gt; 实现随机访问的 OLTP 数据库。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>大规模并行处理</title>
      <link>https://www.linuxzen.com/notes/notes/20210810070530-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 10 Aug 2021 07:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210810070530-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/</guid>
      <description>MPP 数据库  Gamma 数据库机器 Teradata Tandem NonStop SQL  </description>
      <content>&lt;h2 id=&#34;mpp-数据库&#34;&gt;MPP 数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gamma 数据库机器&lt;/li&gt;
&lt;li&gt;Teradata&lt;/li&gt;
&lt;li&gt;Tandem NonStop SQL&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Clock Synchronization with Chris Perl</title>
      <link>https://www.linuxzen.com/notes/notes/20210809103849-clock_synchronization_with_chris_perl/</link>
      <pubDate>Mon, 09 Aug 2021 10:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210809103849-clock_synchronization_with_chris_perl/</guid>
      <description> tags: 分布式,一致性 source: https://signalsandthreads.com/clock-synchronization/  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://signalsandthreads.com/clock-synchronization/&#34;&gt;https://signalsandthreads.com/clock-synchronization/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Hive</title>
      <link>https://www.linuxzen.com/notes/notes/20210809080723-hive/</link>
      <pubDate>Mon, 09 Aug 2021 08:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210809080723-hive/</guid>
      <description> tags: Bigdata  bucketed map join </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bucketed-map-join&#34;&gt;bucketed map join&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Hadoop</title>
      <link>https://www.linuxzen.com/notes/notes/20210809073407-hadoop/</link>
      <pubDate>Mon, 09 Aug 2021 07:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210809073407-hadoop/</guid>
      <description>tags: Bigdata  Hadoop Distributed File System MapReduce MapReduce shuffle 按照 reducer 分区，排序和将数据分区从 mapper 复制到 reducer。（令人困惑的术语，并不完全与洗牌一样，在 MapReduce 中其实没有随机性）。
MapReduce 的分布式执行 Hadoop MapReduce 并行化基于数据分区实现：
 输入：通常是 HDFS 中的一个目录。 分区：每个文件或文件块都被视为一个单独的分区。 处理：每个分区由单独的 map 任务来处理。 每个 mapper 都会尽量实现计算靠近数据。 代码复制：JAR 文件。 Reduce 任务的计算也被分隔成块，可以不必与 mapper 任务数量相同，MapReduce 框架使用关键字的哈希值来确保具有相同关键字的键值对都在相同的 reduce 任务中处理。 键值对必须进行排序，排序是分阶段进行的：  每个 map 任务都基于关键字哈希值，按照 reducer 对输出进行分块。 每个分区都被写入 mapper 程序所在的本地磁盘上的已排序文件，参见 SSTables 和 LSM-Tree。   reducer 与每个 mapper 相连接：MapReduce 调度器会在 mapper 写入经过排序的输出文件后，通知 reducer 开始从 mapper 中获取输出文件，框架进行 MapReduce shuffle。 reducer 任务从 mapper 中获取文件并将它们合并在一起，同时保持数据的排序。不同 mapper 使用相同的关键字生成记录，会在合并后的 reducer 输入中位于相邻的位置。 reducer 可以使用任意逻辑来处理这些记录，并且生成任意数量的输出记录。记录被写入分布式文件系统中的文件。  MapReduce 工作流调度器  Oozie Azkaban Luigi Airflow Pinball  对比分布式数据库 MapReduce 中的并行处理和并行 join 算法已经在十多年前所谓的大规模并行处理（MPP）数据库中实现了。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hadoop-distributed-file-system--20210808075530-hadoop-distributed-file-system-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808075530-hadoop_distributed_file_system/&#34;&gt;Hadoop Distributed File System&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;mapreduce--20210805074336-批处理系统-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/#mapreduce&#34;&gt;MapReduce&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;mapreduce-shuffle&#34;&gt;MapReduce shuffle&lt;/h3&gt;
&lt;p&gt;按照 reducer 分区，排序和将数据分区从 mapper 复制到 reducer。（令人困惑的术语，并不完全与洗牌一样，在 MapReduce 中其实没有随机性）。&lt;/p&gt;
&lt;h3 id=&#34;mapreduce-的分布式执行&#34;&gt;MapReduce 的分布式执行&lt;/h3&gt;
&lt;p&gt;Hadoop MapReduce 并行化基于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/&#34;&gt;数据分区&lt;/a&gt;实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：通常是 HDFS 中的一个目录。&lt;/li&gt;
&lt;li&gt;分区：每个文件或文件块都被视为一个单独的分区。&lt;/li&gt;
&lt;li&gt;处理：每个分区由单独的 map 任务来处理。&lt;/li&gt;
&lt;li&gt;每个 mapper 都会尽量实现&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808075530-hadoop_distributed_file_system/#计算靠近数据&#34;&gt;计算靠近数据&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;代码复制：JAR 文件。&lt;/li&gt;
&lt;li&gt;Reduce 任务的计算也被分隔成块，可以不必与 mapper 任务数量相同，MapReduce 框架使用关键字的哈希值来确保具有相同关键字的键值对都在相同的 reduce 任务中处理。&lt;/li&gt;
&lt;li&gt;键值对必须进行排序，排序是分阶段进行的：
&lt;ol&gt;
&lt;li&gt;每个 map 任务都基于关键字哈希值，按照 reducer 对输出进行分块。&lt;/li&gt;
&lt;li&gt;每个分区都被写入 mapper 程序所在的本地磁盘上的已排序文件，参见 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/&#34;&gt;SSTables&lt;/a&gt; 和 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606100317-lsm_tree/&#34;&gt;LSM-Tree&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;reducer 与每个 mapper 相连接：MapReduce 调度器会在 mapper 写入经过排序的输出文件后，通知 reducer 开始从 mapper 中获取输出文件，框架进行 &lt;a href=&#34;#mapreduce-shuffle&#34;&gt;MapReduce shuffle&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;reducer 任务从 mapper 中获取文件并将它们合并在一起，同时保持数据的排序。不同 mapper 使用相同的关键字生成记录，会在合并后的 reducer 输入中位于相邻的位置。&lt;/li&gt;
&lt;li&gt;reducer 可以使用任意逻辑来处理这些记录，并且生成任意数量的输出记录。记录被写入分布式文件系统中的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mapreduce-工作流调度器&#34;&gt;MapReduce 工作流调度器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Oozie&lt;/li&gt;
&lt;li&gt;Azkaban&lt;/li&gt;
&lt;li&gt;Luigi&lt;/li&gt;
&lt;li&gt;Airflow&lt;/li&gt;
&lt;li&gt;Pinball&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对比分布式数据库&#34;&gt;对比分布式数据库&lt;/h2&gt;
&lt;p&gt;MapReduce 中的并行处理和并行 join 算法已经在十多年前所谓的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210810070530-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/&#34;&gt;大规模并行处理&lt;/a&gt;（MPP）数据库中实现了。&lt;/p&gt;
&lt;h3 id=&#34;存储多样性&#34;&gt;存储多样性&lt;/h3&gt;
&lt;p&gt;分布式文件系统中的文件只是字节序列，可以使用任何数据模型和编码来编写。可以是数据库记录，也可以是文本、图像、视频、传感器读数、稀疏矩阵、特征向量、基因组序列或任何其他类型的数据。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210810070530-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/#mpp-数据库&#34;&gt;MPP 数据库&lt;/a&gt; 通常需要对数据和查询模式进行仔细的提前建模。&lt;/p&gt;
&lt;p&gt;Hadoop 经常被用于实现 ETL 过程：来自事务处理系统的数据以某种原始形式转储到分布式文件系统，然后编写 MapReduce 作业进行数据清理，将其转换为关系表单，并将其导入 MPP 数据仓库以进行分析。&lt;/p&gt;
&lt;h3 id=&#34;处理模型多样性&#34;&gt;处理模型多样性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MPP 数据库属于一体化、紧密集成的软件系统。&lt;/li&gt;
&lt;li&gt;SQL、MapReduce、&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210810071455-hbase/&#34;&gt;HBase&lt;/a&gt;（随机访问的 OLTP 数据库）Impala 等不同的组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;针对频繁故障设计&#34;&gt;针对频繁故障设计&lt;/h3&gt;
&lt;h2 id=&#34;yarn&#34;&gt;YARN&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/qfdy123/p/13500859.html&#34;&gt;Yarn参数优化(Fair Scheduler版本)&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Tokio</title>
      <link>https://www.linuxzen.com/notes/notes/20210808083146-tokio/</link>
      <pubDate>Sun, 08 Aug 2021 08:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210808083146-tokio/</guid>
      <description> tags: Rust  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>分布式文件系统</title>
      <link>https://www.linuxzen.com/notes/notes/20210808080733-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 08 Aug 2021 08:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210808080733-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description> tags: 分布式  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>网络连接存储</title>
      <link>https://www.linuxzen.com/notes/notes/20210808075738-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sun, 08 Aug 2021 07:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210808075738-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Hadoop Distributed File System</title>
      <link>https://www.linuxzen.com/notes/notes/20210808075530-hadoop_distributed_file_system/</link>
      <pubDate>Sun, 08 Aug 2021 07:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210808075530-hadoop_distributed_file_system/</guid>
      <description>tags: Bigdata,分布式文件系统  与网络连接存储（NAS）和 存储区域网络（SAN）架构相比，HDFS 基于无共享原则，无需定制硬件和特殊网络基础设施（光纤）。
HDFS 创建了一个庞大的文件系统，来充分利用每个守护进程机器上的磁盘资源。
 HDFS 包含一个在每台机器上运行的守护进程，并会开放一个网络服务以允许其他节点访问存储在该机器上的文件。 名为 NameNode 的中央服务器会跟踪哪个文件块存储在哪个服务器上。 考虑容错，文件快块复制到多台机器上，或者像 Reed-Solomon 代码中这样的纠删码方案（类似 RAID，但无需特殊硬件）。 提供很好的扩展性，配合商业硬件和开源软件，可以运行在上万台机器，容量达几百 PB。  计算靠近数据 只要有足够的空闲内存和 CPU 资源，MapReduce 调度器会尝试在输入文件的副本的某台机器上运行 mapper 任务。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808080733-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&#34;&gt;分布式文件系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808075738-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/&#34;&gt;网络连接存储&lt;/a&gt;（NAS）和 存储区域网络（SAN）架构相比，HDFS 基于无共享原则，无需定制硬件和特殊网络基础设施（光纤）。&lt;/p&gt;
&lt;p&gt;HDFS 创建了一个庞大的文件系统，来充分利用每个守护进程机器上的磁盘资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDFS 包含一个在每台机器上运行的守护进程，并会开放一个网络服务以允许其他节点访问存储在该机器上的文件。&lt;/li&gt;
&lt;li&gt;名为 NameNode 的中央服务器会跟踪哪个文件块存储在哪个服务器上。&lt;/li&gt;
&lt;li&gt;考虑容错，文件快块复制到多台机器上，或者像 Reed-Solomon 代码中这样的纠删码方案（类似 RAID，但无需特殊硬件）。&lt;/li&gt;
&lt;li&gt;提供很好的扩展性，配合商业硬件和开源软件，可以运行在上万台机器，容量达几百 PB。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算靠近数据&#34;&gt;计算靠近数据&lt;/h2&gt;
&lt;p&gt;只要有足够的空闲内存和 CPU 资源，MapReduce 调度器会尝试在输入文件的副本的某台机器上运行 mapper 任务。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Emacs Easter egg</title>
      <link>https://www.linuxzen.com/notes/notes/20210808075104-emacs_easter_egg/</link>
      <pubDate>Sun, 08 Aug 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210808075104-emacs_easter_egg/</guid>
      <description>tags: Emacs  M-x life RET 康威生命游戏（Conway&amp;rsquo;s Game of Life）</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;m-x-life-ret&#34;&gt;&lt;code&gt;M-x life RET&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F&#34;&gt;康威生命游戏（Conway&amp;rsquo;s Game of Life）&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>数据库</title>
      <link>https://www.linuxzen.com/notes/notes/20210805082720-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Thu, 05 Aug 2021 08:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805082720-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description> tags: 技术  数据库作为一个长期发展的技术，但是在中国相对处于一个起步阶段，相关人才比较少。近年能够看得到的技术：
 TiDB 分布式关系型数据库 TDengine 面向 IoT 的 OLAP 数据库  相关创业公司：
 神策 https://zhuanlan.zhihu.com/p/396433354  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库作为一个长期发展的技术，但是在中国相对处于一个起步阶段，相关人才比较少。近年能够看得到的技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pingcap.com/&#34;&gt;TiDB&lt;/a&gt; 分布式关系型数据库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/taosdata/TDengine&#34;&gt;TDengine&lt;/a&gt; 面向 IoT 的 OLAP 数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关创业公司：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sensorsdata.cn/auto&#34;&gt;神策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/396433354&#34;&gt;https://zhuanlan.zhihu.com/p/396433354&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>批处理系统</title>
      <link>https://www.linuxzen.com/notes/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 05 Aug 2021 07:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
      <description>MapReduce MapReduce 与分布式文件系统 MapReduce 就像分布在上千台机器上的 Unix 工具。
 MapReduce 作业通常不会修改输入，除了输出外没有任何副作用。 MapReduce 作业在分布式文件系统上读写。（Unix 工具 stdin、stdout），如 HDFS（Hadoop Distributed File System)等（GlusterFS、QFS、Amazon S3、Azure Blob 和 OpenStack Swift）。  MapReduce 作业执行 MapReduce 是一个编程框架，可以使用它编写代码处理 HDFS 等分布式文件系统中的大型数据集。
要创建 MapReduce 作业需要实现两个回调函数： mapper 和 reducer （另请参阅 MapReduce 查询）:
 Mapper: 每个输入记录都会调用一次，从输入记录提取任意数量的关键字和值（可以为空），不保留任何状态，可以独立处理。 Reducer: MapReduce 框架使用 Mapper 生成的键值对，收集同一个关键字的所有值，并使用迭代器调用 reducer 以使用该值的集合。 Reducer 可以生成输出记录。  MapReduce 分布式执行 参见 Hadoop 的 MapReduce 的分布式执行。
MapReduce 工作流 将 MapReduce 作业链接到工作流是非常普遍的，作业的输出作为下一个作业的输入。通过目录名隐式的完成：
 第一个作业必须配置将其输出写入 HDFS 中指定目录； 第二个作业必须配置读取相同的目录名作为输入。  目前已经开发了处理依赖管理的 MapReduce 工作流调度器。</description>
      <content>&lt;h2 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h2&gt;
&lt;h3 id=&#34;mapreduce-与分布式文件系统&#34;&gt;MapReduce 与分布式文件系统&lt;/h3&gt;
&lt;p&gt;MapReduce 就像分布在上千台机器上的 Unix 工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MapReduce 作业通常不会修改输入，除了输出外没有任何副作用。&lt;/li&gt;
&lt;li&gt;MapReduce 作业在分布式文件系统上读写。（Unix 工具 stdin、stdout），如 HDFS（&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808075530-hadoop_distributed_file_system/&#34;&gt;Hadoop Distributed File System&lt;/a&gt;)等（GlusterFS、QFS、Amazon S3、Azure Blob 和 OpenStack Swift）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mapreduce-作业执行&#34;&gt;MapReduce 作业执行&lt;/h3&gt;
&lt;p&gt;MapReduce 是一个编程框架，可以使用它编写代码处理 HDFS 等分布式文件系统中的大型数据集。&lt;/p&gt;
&lt;p&gt;要创建 MapReduce 作业需要实现两个回调函数： &lt;code&gt;mapper&lt;/code&gt; 和 &lt;code&gt;reducer&lt;/code&gt; （另请参阅 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/#数据查询语言&#34;&gt;MapReduce 查询&lt;/a&gt;）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mapper&lt;/code&gt;: 每个输入记录都会调用一次，从输入记录提取任意数量的关键字和值（可以为空），不保留任何状态，可以独立处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reducer&lt;/code&gt;: MapReduce 框架使用 &lt;code&gt;Mapper&lt;/code&gt; 生成的键值对，收集同一个关键字的所有值，并使用迭代器调用 reducer 以使用该值的集合。
Reducer 可以生成输出记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mapreduce-分布式执行&#34;&gt;MapReduce 分布式执行&lt;/h4&gt;
&lt;p&gt;参见 Hadoop 的 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210809073407-hadoop/#id-7ce0e649-d25b-4d30-9c25-22caf92cbf2b-mapreduce&#34;&gt;MapReduce 的分布式执行&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;mapreduce-工作流&#34;&gt;MapReduce 工作流&lt;/h4&gt;
&lt;p&gt;将 MapReduce 作业链接到工作流是非常普遍的，作业的输出作为下一个作业的输入。通过目录名隐式的完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个作业必须配置将其输出写入 HDFS 中指定目录；&lt;/li&gt;
&lt;li&gt;第二个作业必须配置读取相同的目录名作为输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前已经开发了处理依赖管理的 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210809073407-hadoop/#id-7ce0e649-d25b-4d30-9c25-22caf92cbf2b-mapreduce&#34;&gt;MapReduce 工作流调度器&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;reduce-端的-join-与分组&#34;&gt;Reduce 端的 join 与分组&lt;/h3&gt;
&lt;p&gt;批处理的背景下讨论 join，主要解决数据集内存在关联的所有事件。
假设 join 两张表：用户和活动事件。&lt;/p&gt;
&lt;h4 id=&#34;排序-合并-join&#34;&gt;排序-合并 join&lt;/h4&gt;
&lt;p&gt;次级排序：reducer 会首先看到用户数据库的记录，然后按照时间戳顺序查看活动事件。&lt;/p&gt;
&lt;p&gt;基于次级排序 reducer 可以很容易的执行 join：为每个用户 ID 调用一次 reducer 函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个值是来自用户数据库的出生日期记录，并存储在局部变量。&lt;/li&gt;
&lt;li&gt;然后使用相同的用户 ID 遍历活动事件。&lt;/li&gt;
&lt;li&gt;进行聚类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reducer 每次处理一个特定用户 ID 的所有记录。&lt;/p&gt;
&lt;h4 id=&#34;将相关数据放在一起&#34;&gt;将相关数据放在一起&lt;/h4&gt;
&lt;h4 id=&#34;分组&#34;&gt;分组&lt;/h4&gt;
&lt;h4 id=&#34;处理数据倾斜&#34;&gt;处理数据倾斜&lt;/h4&gt;
&lt;p&gt;数据抽样探测热键，使用算法进行补偿。缺点是需要进行数据复制。&lt;/p&gt;
&lt;p&gt;Hive 需要在表格元数据中明确指定热键，并将与这些键相关记录与其余文件分开存放。&lt;/p&gt;
&lt;h3 id=&#34;map-端-join-操作&#34;&gt;Map 端 join 操作&lt;/h3&gt;
&lt;h4 id=&#34;广播哈希-join&#34;&gt;广播哈希 join&lt;/h4&gt;
&lt;p&gt;把小数据集加载到内存哈希表中，mapper 的时候直接读取哈希表进行数据补全。&lt;/p&gt;
&lt;p&gt;“广播”：每个分区的 mapper 读取整个小数据集到内存哈希表。&lt;/p&gt;
&lt;h4 id=&#34;分区哈希-join&#34;&gt;分区哈希 join&lt;/h4&gt;
&lt;p&gt;将加载到内存哈希表的数据缩小独立作用于每个分区。&lt;/p&gt;
&lt;p&gt;Hive 中称为 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210809080723-hive/#bucketed-map-join&#34;&gt;bucketed map join&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;map-端合并-join&#34;&gt;map 端合并 join&lt;/h4&gt;
&lt;p&gt;按关键字升序增量读取两个输入文件，并且匹配具有相同关键字的记录。&lt;/p&gt;
&lt;h4 id=&#34;具有-map-端-join-的-mapreduce-工作流&#34;&gt;具有 map 端 join 的 MapReduce 工作流&lt;/h4&gt;
&lt;h3 id=&#34;批处理工作流的输出&#34;&gt;批处理工作流的输出&lt;/h3&gt;
&lt;h4 id=&#34;生成搜索索引&#34;&gt;生成搜索索引&lt;/h4&gt;
&lt;h4 id=&#34;批处理输出键值&#34;&gt;批处理输出键值&lt;/h4&gt;
&lt;h4 id=&#34;批处理输出的哲学&#34;&gt;批处理输出的哲学&lt;/h4&gt;
&lt;h3 id=&#34;对比-hadoop-与分布式数据库&#34;&gt;对比 Hadoop 与分布式数据库&lt;/h3&gt;
&lt;p&gt;参见 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210809073407-hadoop/#对比分布式数据库&#34;&gt;对比分布式数据库&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;相关文章&#34;&gt;相关文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210811111926-why_mapreduce_is_making_a_comeback/&#34;&gt;Why MapReduce is making a comeback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;超越-mapreduce&#34;&gt;超越 MapReduce&lt;/h2&gt;
&lt;h3 id=&#34;中间状态实体化&#34;&gt;中间状态实体化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据流引擎：Spark、Flink、Tez&lt;/li&gt;
&lt;li&gt;容错：Spark 使用 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210810072604-%E5%BC%B9%E6%80%A7%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86/&#34;&gt;弹性分布式数据集&lt;/a&gt; 跟踪数据的祖先，Flink 对运算符状态建立检查点来从故障中恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据流对 MapReduce 的改进是：不需要自己将所有中间状态写入文件系统。&lt;/p&gt;
&lt;h3 id=&#34;图与迭代处理&#34;&gt;图与迭代处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pregel 处理模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高级-api-和语言&#34;&gt;高级 API 和语言&lt;/h3&gt;
&lt;p&gt;Hive、Pig、Cascading 和 Crunch。Tez 可以将这些高级语言移植到新的数据流执行引擎。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 37. Sudoku Solver</title>
      <link>https://www.linuxzen.com/notes/notes/20210805073600-leetcode_37_sudoku_solver/</link>
      <pubDate>Thu, 05 Aug 2021 07:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805073600-leetcode_37_sudoku_solver/</guid>
      <description> tags: LeetCode  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 36. Valid Sudoku</title>
      <link>https://www.linuxzen.com/notes/notes/20210805070351-leetcode_36_valid_sudoku/</link>
      <pubDate>Thu, 05 Aug 2021 07:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210805070351-leetcode_36_valid_sudoku/</guid>
      <description>tags: LeetCode  https://leetcode.com/problems/valid-sudoku/
&amp;lt;- high -- low -&amp;gt; +------------------- wow(row(i):0,col(j):0) 0 -&amp;gt; [ 0010, 0010 ] | 1 -&amp;gt; [ 0000, 0000 ] | 2 -&amp;gt; [ 0000, 0000 ] | | +--------------- wow(row(i):0,col(j):1) 0 -&amp;gt; [ 0010 | 1 = 0011, 0010 ] | | 1 -&amp;gt; [ 0000, 0000 | 1 = 0001 ] | | 2 -&amp;gt; [ 0000, 0000 ] | | | | +----------- wow(row(i):0,col(j):2) 0 -&amp;gt; [ 0011 | 3 = 0100, 0010 ] | | | 1 -&amp;gt; [ 0000, 0001 ] | | | 2 -&amp;gt; [ 0000, 0000 | 3 = 0100 ] +---+---+---+ | 2 | 1 | 3 | +---+---+---+ ----| 3 | 2 | 1 | | +---+---+---+ | | 1 | 3 | 2 | | +---+---+---+ |- wow(row(i):1,col(j):0) 0 -&amp;gt; [0010 | 3 = 0110, 0010] +---------------------+ 1 -&amp;gt; [0000, 0001 | 3 = 0101] 2 -&amp;gt; [0000, 0100] class Solution { public: bool isValidSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { vector&amp;lt;int&amp;gt; wow(9,0); int mux1; int mux2; int mux3; int box_index; for(int i=0;i&amp;lt;9;i++){ for(int j=0;j&amp;lt;9;j++){ if(board[i][j] == &amp;#39;.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-sudoku/&#34;&gt;https://leetcode.com/problems/valid-sudoku/&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;												  &amp;lt;- high -- low -&amp;gt;
	  +------------------- wow(row(i):0,col(j):0) 0 -&amp;gt; [ 0010, 0010 ]
	  |                                           1 -&amp;gt; [ 0000, 0000 ]
	  |                                           2 -&amp;gt; [ 0000, 0000 ]
	  |
	  |   +--------------- wow(row(i):0,col(j):1) 0 -&amp;gt; [ 0010 | 1 = 0011, 0010 ]
	  |   |                                       1 -&amp;gt; [ 0000, 0000 | 1 = 0001 ]
	  |   |                                       2 -&amp;gt; [ 0000, 0000 ]
	  |   |
	  |   |   +----------- wow(row(i):0,col(j):2) 0 -&amp;gt; [ 0011 | 3 = 0100, 0010 ]
	  |   |   |                                   1 -&amp;gt; [ 0000, 0001 ]
	  |   |   |                                   2 -&amp;gt; [ 0000, 0000 | 3 = 0100 ]
	+---+---+---+
	| 2 | 1 | 3 |
	+---+---+---+
----| 3 | 2 | 1 |
|   +---+---+---+
|   | 1 | 3 | 2 |
|   +---+---+---+     |- wow(row(i):1,col(j):0) 0 -&amp;gt; [0010 | 3 = 0110, 0010]
+---------------------+                         1 -&amp;gt; [0000, 0001 | 3 = 0101]                                                 2 -&amp;gt; [0000, 0100]

&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isValidSudoku(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; board) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; wow(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mux1;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mux2;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mux3;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; box_index;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(board[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;){
					&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
				}
				mux1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (board[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;);
				mux2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (board[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;);
				mux3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (board[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;);
				box_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((wow[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;mux1) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; mux1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (wow[j]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;mux2) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; mux2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (wow[box_index]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;mux3) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; mux3){
					wow[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wow[i]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;mux1;
					wow[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wow[j]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;mux2;
					wow[box_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wow[box_index]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;mux3;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
				}
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>分布式共识</title>
      <link>https://www.linuxzen.com/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/</link>
      <pubDate>Wed, 04 Aug 2021 11:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/</guid>
      <description> tags: 分布式  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>区块链</title>
      <link>https://www.linuxzen.com/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
      <pubDate>Wed, 04 Aug 2021 11:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/</guid>
      <description> tags: 分布式共识,技术概念  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 40. Combination Sum II</title>
      <link>https://www.linuxzen.com/notes/notes/20210804071039-leetcode_40_combination_sum_ii/</link>
      <pubDate>Wed, 04 Aug 2021 07:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804071039-leetcode_40_combination_sum_ii/</guid>
      <description>tags: LeetCode source: https://leetcode.com/problems/combination-sum-ii/  LeetCode: 39. Combination Sum 的进阶。元素不在唯一且每一个元素只能出现一次。对结果进行排序然后通过 set 对结果进行去重：
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum2(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { sort(candidates.begin(), candidates.end()); backtracking(candidates, 0, 0, target); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; r; for (auto t : res) { r.push_back(t); } return r; } private: set&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; track; map&amp;lt;int, bool&amp;gt; visited; void backtracking(vector&amp;lt;int&amp;gt;&amp;amp; condidates, int start, int n, int target) { if (n == target) { res.insert(track); return; } if (n &amp;gt; target) { return; } int c = 0; int sz = condidates.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode.com/problems/combination-sum-ii/&#34;&gt;https://leetcode.com/problems/combination-sum-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210804064757-leetcode_39_combination_sum/&#34;&gt;LeetCode: 39. Combination Sum&lt;/a&gt; 的进阶。元素不在唯一且每一个元素只能出现一次。对结果进行排序然后通过 set 对结果进行去重：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; combinationSum2(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; candidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		sort(candidates.begin(), candidates.end());
		backtracking(candidates, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, target);
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; t : res) {
			r.push_back(t);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  r;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;
	map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; visited;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; condidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target) {
			res.insert(track);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; target) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; condidates.size();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; sz; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; condidates[i];
			track.push_back(c);
			backtracking(condidates, i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c, target);
			track.pop_back();
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下测试用例无法通过：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
30
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; combinationSum2(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; candidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		sort(candidates.begin(), candidates.end());
		backtracking(candidates, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, target);
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; r;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; t : res) {
			r.push_back(t);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  r;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;
	map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; visited;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; condidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; target) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target) {
				res.insert(track);
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; condidates.size();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; sz; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 避免全是一样的陷入无限的循环。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; condidates[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; condidates[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
			}
			c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; condidates[i];
			track.push_back(c);
			backtracking(condidates, i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c, target);
			track.pop_back();
		}
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sz &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 39. Combination Sum</title>
      <link>https://www.linuxzen.com/notes/notes/20210804064757-leetcode_39_combination_sum/</link>
      <pubDate>Wed, 04 Aug 2021 06:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210804064757-leetcode_39_combination_sum/</guid>
      <description>tags: LeetCode source: https://leetcode.com/problems/combination-sum/  class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { backtracking(candidates, 0, target); return res; } private: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; track; void backtracking(vector&amp;lt;int&amp;gt; &amp;amp; candidates, int n, int target) { if (n == target) { res.push_back(track); return; } // this is new 	if (n &amp;gt; target) { return; } for (auto c : candidates) { track.push_back(c); backtracking(candidates, n + c, target); track.pop_back(); } } }; 问题：会有不同顺序但是元素相同的数组，如何快速高效的进行过滤？</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode.com/problems/combination-sum/&#34;&gt;https://leetcode.com/problems/combination-sum/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; combinationSum(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; candidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		backtracking(candidates, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, target);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; candidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target) {
			res.push_back(track);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// this is new
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; target) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c : candidates) {
			track.push_back(c);
			backtracking(candidates, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c, target);
			track.pop_back();
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;问题：会有不同顺序但是元素相同的数组，如何快速高效的进行过滤？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;- [[2,2,3],[2,3,2],[3,2,2],[7]]
+ [[2,2,3],[7]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个比较 tricky 的技巧，就是判断最终结果是不是升序的，不是就放弃，居然可以通过：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; combinationSum(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; candidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		backtracking(candidates, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, target);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; candidates, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; t : track) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (t &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p) {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
				p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t;
			}
			res.push_back(track);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// this is new
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; target) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c : candidates) {
			track.push_back(c);
			backtracking(candidates, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c, target);
			track.pop_back();
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 52. N-Queens II</title>
      <link>https://www.linuxzen.com/notes/notes/20210803074630-leetcode_52_n_queens_ii/</link>
      <pubDate>Tue, 03 Aug 2021 07:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210803074630-leetcode_52_n_queens_ii/</guid>
      <description>tags: LeetCode source: https://leetcode.com/problems/n-queens-ii/  参见：LeetCode: 51. N-Queens</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode.com/problems/n-queens-ii/&#34;&gt;https://leetcode.com/problems/n-queens-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参见：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802073234-leetcode_51_n_queues/&#34;&gt;LeetCode: 51. N-Queens&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>回溯算法</title>
      <link>https://www.linuxzen.com/notes/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 03 Aug 2021 06:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <description>相关 LeetCode：
 LeetCode: 46. Permutations LeetCode: 47. Permutations II LeetCode: 51. N-Queens LeetCode: 52. N-Queens II LeetCode: 113. Path Sum II  </description>
      <content>&lt;p&gt;相关 LeetCode：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210719073125-leetcode_46_permutations/&#34;&gt;LeetCode: 46. Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210721073657-leetcode_47_permutations_ii/&#34;&gt;LeetCode: 47. Permutations II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802073234-leetcode_51_n_queues/&#34;&gt;LeetCode: 51. N-Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210803074630-leetcode_52_n_queens_ii/&#34;&gt;LeetCode: 52. N-Queens II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210816083017-leetcode_113_path_sum_ii/&#34;&gt;LeetCode: 113. Path Sum II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>工业云</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193422-%E5%B7%A5%E4%B8%9A%E4%BA%91/</link>
      <pubDate>Mon, 02 Aug 2021 19:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193422-%E5%B7%A5%E4%B8%9A%E4%BA%91/</guid>
      <description>tags: 技术概念  创业公司有：积梦智能。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创业公司有：&lt;a href=&#34;https://jimengio.com/&#34;&gt;积梦智能&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>云原生</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193059-%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193059-%E4%BA%91%E5%8E%9F%E7%94%9F/</guid>
      <description> tags: 技术概念  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>云计算</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193038-%E4%BA%91%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193038-%E4%BA%91%E8%AE%A1%E7%AE%97/</guid>
      <description> tags: 技术概念  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>技术概念</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/</guid>
      <description>tags: 技术  目前互联网领域里比较热门的概念和方向。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前互联网领域里比较热门的概念和方向。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>边缘计算</title>
      <link>https://www.linuxzen.com/notes/notes/20210802193049-%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 02 Aug 2021 19:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802193049-%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</guid>
      <description> tags: 技术概念  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 51. N-Queens</title>
      <link>https://www.linuxzen.com/notes/notes/20210802073234-leetcode_51_n_queues/</link>
      <pubDate>Mon, 02 Aug 2021 07:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210802073234-leetcode_51_n_queues/</guid>
      <description>tags: LeetCode source: https://leetcode.com/problems/n-queens/  一旦一个 Queue 被放置，那么横轴、纵轴、对角线。我们按行进行便利，所以我们需要跟踪以下位置是否已经放置 Queue：
 纵轴（Column）：cols 主对角线（Positive Diagonal）：posDiag 次对角线（Negative Diagonal）：negDiag  纵轴很好记录，但是对角线比较困难，我们先来看一下对角线的特征，假设横轴为 r 纵轴为 c ，
r - c 在正对角线是一致的：
 斜对角线 r + c 是一致的:
 class Solution { public: vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; solveNQueens(int n) { for (int r = 0; r &amp;lt; n; r++) { string col = string(n, &amp;#39;.&amp;#39;); track.push_back(col); } backtracking(0, n); return res; } private: set&amp;lt;int&amp;gt; cols; // c 	set&amp;lt;int&amp;gt; posDiag; // r - c 	set&amp;lt;int&amp;gt; negDiag; // r + c 	vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; res; vector&amp;lt;string&amp;gt; track; void backtracking(int r, int n) { if (r == n) { res.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode.com/problems/n-queens/&#34;&gt;https://leetcode.com/problems/n-queens/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦一个 Queue 被放置，那么横轴、纵轴、对角线。我们按行进行便利，所以我们需要跟踪以下位置是否已经放置 Queue：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纵轴（Column）：cols&lt;/li&gt;
&lt;li&gt;主对角线（Positive Diagonal）：posDiag&lt;/li&gt;
&lt;li&gt;次对角线（Negative Diagonal）：negDiag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;纵轴很好记录，但是对角线比较困难，我们先来看一下对角线的特征，假设横轴为 &lt;code&gt;r&lt;/code&gt; 纵轴为 &lt;code&gt;c&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;r - c&lt;/code&gt; 在正对角线是一致的：&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/n-queues-pos-diag.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;斜对角线 &lt;code&gt;r + c&lt;/code&gt; 是一致的:&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/n-queues-neg-diag.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; solveNQueens(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; r&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			string col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string(n, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);
			track.push_back(col);
		}
		backtracking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cols;     &lt;span style=&#34;color:#75715e&#34;&gt;// c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; posDiag;  &lt;span style=&#34;color:#75715e&#34;&gt;// r - c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; negDiag;  &lt;span style=&#34;color:#75715e&#34;&gt;// r + c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtracking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n) {
			res.push_back(track);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cols.find(c) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; cols.end() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; posDiag.find(r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; posDiag.end() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negDiag.find(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; negDiag.end()) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
			}
			cols.insert(c);
			posDiag.insert(r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c);
			negDiag.insert(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c);
			track[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;;
			backtracking(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n);
			track[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;
			cols.erase(c);
			posDiag.erase(r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c);
			negDiag.erase(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c);
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[[&amp;quot;.Q..&amp;quot;,&amp;quot;...Q&amp;quot;,&amp;quot;Q...&amp;quot;,&amp;quot;..Q.&amp;quot;],[&amp;quot;..Q.&amp;quot;,&amp;quot;Q...&amp;quot;,&amp;quot;...Q&amp;quot;,&amp;quot;.Q..&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一些想明白的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么没有 Q 出现在第一行第一列的情况？因为没有走到最后一行（r == n）&lt;/li&gt;
&lt;li&gt;怎么出现的两个结果？这个要看回溯过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回溯过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在每一列放置 Q 之后都会陷入下一行的递归中。&lt;/li&gt;
&lt;li&gt;相当于以第一行的每一列进行遍历，依次穷举剩下行的每一列的可能性。&lt;/li&gt;
&lt;li&gt;一旦一条路径走到头（r == n）说明有结果，还是回溯过程，接着进行下一列的可能回到 1. 继续&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Multi-Paxios</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075851-multi_paxios/</link>
      <pubDate>Sat, 31 Jul 2021 07:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075851-multi_paxios/</guid>
      <description> tags: 分布式共识,Paxos  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075140-paxos/&#34;&gt;Paxos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Zab</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075206-zab/</link>
      <pubDate>Sat, 31 Jul 2021 07:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075206-zab/</guid>
      <description> tags: 分布式共识  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Paxos</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075140-paxos/</link>
      <pubDate>Sat, 31 Jul 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075140-paxos/</guid>
      <description> tags: 分布式共识,分布式  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Raft</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075154-raft/</link>
      <pubDate>Sat, 31 Jul 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075154-raft/</guid>
      <description> tags: 共识算法，分布式共识  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/#分布式事务与共识&#34;&gt;共识算法&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>VSR</title>
      <link>https://www.linuxzen.com/notes/notes/20210731075128-vsr/</link>
      <pubDate>Sat, 31 Jul 2021 07:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210731075128-vsr/</guid>
      <description> tags: Incomplete，分布式，共识算法  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231172037-incomplete/&#34;&gt;Incomplete&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/#分布式事务与共识&#34;&gt;共识算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>链式复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210728071508-%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Wed, 28 Jul 2021 07:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210728071508-%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6/</guid>
      <description> tags: 分布式,Incomplete  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231172037-incomplete/&#34;&gt;Incomplete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>比较-设置</title>
      <link>https://www.linuxzen.com/notes/notes/20210728070407-%E6%AF%94%E8%BE%83_%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Wed, 28 Jul 2021 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210728070407-%E6%AF%94%E8%BE%83_%E8%AE%BE%E7%BD%AE/</guid>
      <description>利用底层指令集实现比较设置等原子操作。
See also：https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2</description>
      <content>&lt;p&gt;利用底层指令集实现比较设置等原子操作。&lt;/p&gt;
&lt;p&gt;See also：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2&#34;&gt;https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>全序</title>
      <link>https://www.linuxzen.com/notes/notes/20210727073548-%E5%85%A8%E5%BA%8F/</link>
      <pubDate>Tue, 27 Jul 2021 07:35:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210727073548-%E5%85%A8%E5%BA%8F/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>macOS 签名 GDB</title>
      <link>https://www.linuxzen.com/notes/notes/20210726181021-macos_%E7%AD%BE%E5%90%8D_gdb/</link>
      <pubDate>Mon, 26 Jul 2021 18:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210726181021-macos_%E7%AD%BE%E5%90%8D_gdb/</guid>
      <description>tags: GDB,macOS  macOS 下通过 GDB 调试程序会出现：
Unable to find Mach task port for process-id 1375: (os/kern) failure (0x5). (please check gdb is codesigned - see taskgated(8))   需要通过 Keychain Access Application 创建证书： code-sign-cert
  需要对 gdb 进行签名，首先创建 gdb-entitlement.xml ：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;com.apple.security.cs.debugger&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;/dict&amp;gt;   运行签名
codesign --entitlements gdb-entitlement.xml -fs code-sign-cert $(which gdb)   See also: PermissionsDarwin。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210118114626-gdb/&#34;&gt;GDB&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074038-macos/&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;macOS 下通过 GDB 调试程序会出现：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Unable to find Mach task port for process-id 1375: (os/kern) failure (0x5).
 (please check gdb is codesigned - see taskgated(8))
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要通过 Keychain Access Application 创建证书： &lt;code&gt;code-sign-cert&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要对 gdb 进行签名，首先创建 &lt;code&gt;gdb-entitlement.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plist&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;com.apple.security.cs.debugger&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行签名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;codesign --entitlements gdb-entitlement.xml -fs code-sign-cert &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which gdb&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also: &lt;a href=&#34;https://sourceware.org/gdb/wiki/PermissionsDarwin&#34;&gt;PermissionsDarwin&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Understanding Rust futures by going way too deep</title>
      <link>https://www.linuxzen.com/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/</link>
      <pubDate>Mon, 26 Jul 2021 10:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/</guid>
      <description>tags: Translate,Rust,Tokio  原文链接：Understanding Rust futures by going way too deep。
译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。
深入理解 Rust future 用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。
起步  Choo choo here comes the easy part 🚂💨
 我们创建一个新的项目：
$ cargo new waytoodeep Created binary (application) `waytoodeep` package 我们需要安装 cargo-edit 如果之前没有安装过的话，接下来就可以直接 cargo add ：
$ cargo install cargo-edit Updating crates.io index Downloaded cargo-edit v0.7.0 Downloaded 1 crate (57.6 KB) in 0.47s Ignored package `cargo-edit v0.7.0` is already installed, use --force to override  因为 cargo-edit 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像 cargo new, cargo build, cargo test, cargo run 等子命令都内置在 cargo 中， 但是 cargo add 没有。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210808083146-tokio/&#34;&gt;Tokio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;https://fasterthanli.me/articles/understanding-rust-futures-by-going-way-too-deep&#34;&gt;Understanding Rust futures by going way too deep&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。&lt;/p&gt;
&lt;h2 id=&#34;深入理解-rust-future&#34;&gt;深入理解 Rust future&lt;/h2&gt;
&lt;p&gt;用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。&lt;/p&gt;
&lt;h2 id=&#34;起步&#34;&gt;起步&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Choo choo here comes the easy part 🚂💨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们创建一个新的项目：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo new waytoodeep
	 Created binary (application) `waytoodeep` package
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们需要安装 &lt;code&gt;cargo-edit&lt;/code&gt; 如果之前没有安装过的话，接下来就可以直接 &lt;code&gt;cargo add&lt;/code&gt; ：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo install cargo-edit
	Updating crates.io index
  Downloaded cargo-edit v0.7.0
  Downloaded 1 crate (57.6 KB) in 0.47s
	 Ignored package `cargo-edit v0.7.0` is already installed, use --force to override
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;因为 &lt;code&gt;cargo-edit&lt;/code&gt; 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像
&lt;code&gt;cargo new&lt;/code&gt;, &lt;code&gt;cargo build&lt;/code&gt;, &lt;code&gt;cargo test&lt;/code&gt;, &lt;code&gt;cargo run&lt;/code&gt; 等子命令都内置在 cargo 中，
但是 &lt;code&gt;cargo add&lt;/code&gt; 没有。&lt;/p&gt;
&lt;p&gt;实际上，有一大堆像这样的包，如 &lt;a href=&#34;https://lib.rs/crates/cargo-hack&#34;&gt;cargo-hack&lt;/a&gt;,&lt;a href=&#34;https://lib.rs/crates/cargo-udeps&#34;&gt;cargo-udeps&lt;/a&gt;,&lt;a href=&#34;https://lib.rs/crates/cargo-expand&#34;&gt;cargo-expand&lt;/a&gt;&amp;hellip;&lt;a href=&#34;https://lib.rs/keywords/cargo&#34;&gt;等等&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后我们需要选择一个「异步运行时」（async runtime），因为这些 future 对象不会轮询（poll）自己。。。
我们毫无理由的选择 tokio，唯一的原因是：过去几个月我一直在用它。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add tokio@1.9.0 --features full
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding tokio v1.9.0 to dependencies with features: [&amp;quot;full&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们修改 &lt;code&gt;main&lt;/code&gt; 函数使用 tokio 默认执行器（executor）（ &lt;code&gt;cargo new&lt;/code&gt; 为我们生成了一个 &lt;code&gt;main&lt;/code&gt; 函数，但是这里并不能满足我们的需求）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a (so far completely unnecessary) async runtime&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run                                                                                                                                                                                          3s 209ms
   Compiling waytoodeep v0.1.0 (/Users/wh/codes/rust/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 3.47s
	 Running `target/debug/waytoodeep`
Hello from a (so far completely unnecessary) async runtime
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;酷！&lt;/p&gt;
&lt;p&gt;接下来让我们添加其他一些我喜欢在我的项目中使用的好东西。&lt;/p&gt;
&lt;p&gt;首先，对于错误处理 - 我们编写程序就需要处理一堆不同库里不同的错误类型，如果能通过一个类型统一它们就会非常整洁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lib.rs/crates/eyre&#34;&gt;eyre&lt;/a&gt; 可以赋予我们这些（就像 &lt;code&gt;anyhow&lt;/code&gt; ）！&lt;/p&gt;
&lt;p&gt;并且因为我喜欢漂亮的颜色我将使用 &lt;a href=&#34;https://lib.rs/crates/color-eyre&#34;&gt;color-eyre&lt;/a&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add color-eyre@0.5.11
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding color-eyre v0.5.11 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们需要安装 &lt;code&gt;color-eyre&lt;/code&gt; 作为默认的崩溃（panic）处理器，我悄悄修改了一些环境变量来默认输出调用堆栈（backtracks）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a (so far completely unnecessary) async runtime&amp;#34;&lt;/span&gt;);

	Ok(())
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
	}
	color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
	Finished dev [unoptimized + debuginfo] target(s) in 0.02s
	 Running `target/debug/waytoodeep`
Hello from a (so far completely unnecessary) async runtime
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很好！现在如果我们某处出现了一个错误，我们将看到完整的堆栈跟踪，就像下面这样：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/color-eyre.78931d5fc80841f6.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后，因为我喜欢结构化日志，让我们添加 &lt;a href=&#34;https://lib.rs/crates/tracing&#34;&gt;tracing&lt;/a&gt; 然后通过漂亮的颜色打印它们，让我们添加 &lt;a href=&#34;https://lib.rs/crates/tracing-subscriber&#34;&gt;tracing-subscriber&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add tracing@0.1.26 tracing-subscriber@0.2.19
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding tracing v0.1.26 to dependencies
	  Adding tracing-subscriber v0.2.19 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们已经有一个 &lt;code&gt;setup&lt;/code&gt; 函数，所以直接在那里安装 &lt;code&gt;tracing-subscriber&lt;/code&gt;.. 然后我们将 &lt;code&gt;println!&lt;/code&gt; 改成 &lt;code&gt;info!&lt;/code&gt; ！
然后，为了演示如何设置让我们再次修改一些环境变量：对所有包（crates）默认 &lt;code&gt;info&lt;/code&gt; 日志级别。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing_subscriber::EnvFilter;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a comfy nest we&amp;#39;ve made for ourselves&amp;#34;&lt;/span&gt;);

	Ok(())
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
	}
	color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
	}
	tracing_subscriber::fmt::fmt()
		.with_env_filter(EnvFilter::from_default_env())
		.init();

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
	Finished dev [unoptimized + debuginfo] target(s) in 0.02s
	 Running `target/debug/waytoodeep`
Jul 25 17:03:46.993  INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，我们准备好做一些有用的事情了。&lt;/p&gt;
&lt;h3 id=&#34;做一些有用的事情&#34;&gt;做一些有用的事情&lt;/h3&gt;
&lt;p&gt;当决定在咖啡间隙阅读哪一篇文章的时候，人们通常同时打开几个网站，然后读最先加载出来的那一篇。&lt;/p&gt;
&lt;p&gt;事实如此。你可以引用我的话，谁会去验证呢？毕竟这听起来需要很多工作。&lt;/p&gt;
&lt;p&gt;所以让我们来编写一个程序做相同的事情。&lt;/p&gt;
&lt;p&gt;让我们引入 &lt;a href=&#34;https://lib.rs/crates/reqwest&#34;&gt;reqwest&lt;/a&gt; &amp;ndash; 尽管我不喜欢它的 API，但它会很好的完成接下来的工作。&lt;/p&gt;
&lt;p&gt;同时，因为 &lt;a href=&#34;https://www.openssl.org/news/vulnerabilities.html&#34;&gt;screw OpenSSL&lt;/a&gt; 我们将标记 reqwest 使用 &lt;a href=&#34;https://lib.rs/crates/rustls&#34;&gt;rustls&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add reqwest@0.11.4 --no-default-features --features rustls-tls
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding reqwest v0.11.4 to dependencies with features: [&amp;quot;rustls-tls&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们准备好发送一个请求了！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing_subscriber::EnvFilter;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; reqwest::Client;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a comfy nest we&amp;#39;ve made for ourselves&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#75715e&#34;&gt;// this will turn non-200 HTTP status codes into rust errors,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// so the first `?` propagates &amp;#34;we had a connection problem&amp;#34; and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// the second `?` propagates &amp;#34;we had a chat with the server and they
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// were not pleased&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);


	Ok(())
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
	}
	color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
	}
	tracing_subscriber::fmt::fmt()
		.with_env_filter(EnvFilter::from_default_env())
		.init();

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出发了！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;cargo run
   Compiling waytoodeep v0.1.0 (/Users/wh/codes/rust/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 7.16s
	 Running `target/debug/waytoodeep`
Jul 26 16:50:57.778  INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves
Jul 26 16:50:59.090  INFO waytoodeep: Got a response! url=https://fasterthanli.me content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是我所说的「结构化日志」。嗯，其中的一部分。让我们看下这行代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们输出来一个消息： &lt;code&gt;Got a response!&lt;/code&gt; ，一个名为 &lt;code&gt;url&lt;/code&gt; 的标签：值为变量 &lt;code&gt;url&lt;/code&gt; 的 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/fmt/trait.Display.html&#34;&gt;Display&lt;/a&gt; 格式，
一个名为 &lt;code&gt;content_type&lt;/code&gt; 的标签：值为表达式的 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/fmt/trait.Debug.html&#34;&gt;Debug&lt;/a&gt; 格式。&lt;/p&gt;
&lt;p&gt;就是这么简单！ &lt;code&gt;name = %value&lt;/code&gt; 输出 &lt;code&gt;Display&lt;/code&gt; ， &lt;code&gt;name = ?value&lt;/code&gt; 输出 &lt;code&gt;Debug&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当然，还有非常棒的跨度（spans），重点是你可以将它们发送到 APM（Appliation Performance Monitoring），比如 Datadog 或者 Honeycomb 等，但是这不是一篇关于跟踪的文章。&lt;/p&gt;
&lt;p&gt;为了举例说明，如果我们安装一个 JSON 的 tracing subscriber，我们将获得如下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 3.09s
	 Running `target/debug/waytoodeep`
{&amp;quot;timestamp&amp;quot;:&amp;quot;Jul 25 17:17:21.531&amp;quot;,&amp;quot;level&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;fields&amp;quot;:{&amp;quot;message&amp;quot;:&amp;quot;Hello from a comfy nest we&#39;ve made for ourselves&amp;quot;},&amp;quot;target&amp;quot;:&amp;quot;waytoodeep&amp;quot;}
{&amp;quot;timestamp&amp;quot;:&amp;quot;Jul 25 17:17:21.709&amp;quot;,&amp;quot;level&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;fields&amp;quot;:{&amp;quot;message&amp;quot;:&amp;quot;Got a response!&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://fasterthanli.me&amp;quot;,&amp;quot;content_type&amp;quot;:&amp;quot;Some(\&amp;quot;text/html; charset=utf-8\&amp;quot;)&amp;quot;},&amp;quot;target&amp;quot;:&amp;quot;waytoodeep&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这应该足以激起你的兴趣。&lt;/p&gt;
&lt;h3 id=&#34;同时获取两个地址&#34;&gt;同时获取两个地址&lt;/h3&gt;
&lt;p&gt;现在让我们获取两个地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_1: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/articles/whats-in-the-box&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/series/advent-of-code-2020/part-13&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;。。。这是一个公平的比较。 这两篇文章都托管在我自己的网站上，绝对不是为了推广，而是为了使获取时间具有可比性，并且任一都有可能先加载完成（并且会随着时间的推移随机变化）。&lt;/p&gt;
&lt;p&gt;我们将创建一个函数来获取内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;, url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并使用它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a comfy nest we&amp;#39;ve made for ourselves&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
	fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行它:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$&lt;/span&gt; cargo run
   Compiling waytoodeep v0.&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;amos&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ftl&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;waytoodeep)
warning: &lt;span style=&#34;color:#a6e22e&#34;&gt;unused&lt;/span&gt; implementer of &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;Future&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; that must be used
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main.rs:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[warn(unused_must_use)]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; on by default
   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note: &lt;span style=&#34;color:#a6e22e&#34;&gt;futures&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; nothing unless you &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; or poll them

warning: &lt;span style=&#34;color:#a6e22e&#34;&gt;unused&lt;/span&gt; implementer of &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;Future&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; that must be used
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main.rs:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note: &lt;span style=&#34;color:#a6e22e&#34;&gt;futures&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; nothing unless you &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; or poll them

warning: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; warnings emitted

	Finished dev [unoptimized &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; debuginfo] target(s) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.01&lt;/span&gt;s
	 Running &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;debug&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;waytoodeep&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31.571&lt;/span&gt;  INFO waytoodeep: &lt;span style=&#34;color:#a6e22e&#34;&gt;Hello&lt;/span&gt; from a comfy nest we&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ve&lt;/span&gt; made &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ourselves
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;奇怪的是，没有任何事情发生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;黄色的波浪线和恼人的 Rust 警告已经给出了提示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们来修复它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 3.17s
	 Running `target/debug/waytoodeep`
Jul 25 17:27:29.768  INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves
Jul 25 17:27:29.891  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 17:27:29.974  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，第零课：future 对象不做任何事情直到它们被轮询（polled）。&lt;/p&gt;
&lt;p&gt;这是因为 future 对象几乎就是状态。让我们来创建一个：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; dumb;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/dumb.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{
	future::Future,
	pin::Pin,
	task::{Context, Poll},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DumbFuture&lt;/span&gt; {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; DumbFuture {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, _cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
		info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a dumb future!&amp;#34;&lt;/span&gt;);
		Poll::Ready(())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// back in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dumb::DumbFuture {};

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上！我们几乎就完成了，除了我们没有进行 &lt;code&gt;.await&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;运行它除了打印警告不会有任何效果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
warning: unused variable: `fut`
  --&amp;gt; src/main.rs:14:9
   |
14 |     let fut = dumb::DumbFuture {};
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_fut`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: 1 warning emitted

	Finished dev [unoptimized + debuginfo] target(s) in 2.11s
	 Running `target/debug/waytoodeep`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为怎么可能？我们字面上仅仅构建了一个结构体。一个零大小的结构体。&lt;/p&gt;
&lt;p&gt;如果我们调用它的 &lt;code&gt;.await&lt;/code&gt; 。。 然后当我们要求运行时运行它的事件循环直到 future 对象被轮询（polled）并且最终返回 &lt;code&gt;Poll::Ready&lt;/code&gt; （我们的代码立即返回）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that dumb future...&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dumb::DumbFuture {};
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that dumb future...&amp;#34;&lt;/span&gt;);
	fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that dumb future&amp;#34;&lt;/span&gt;);

	Ok(())
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 2.34s
	 Running `target/debug/waytoodeep`
Jul 25 17:37:09.261  INFO waytoodeep: Building that dumb future...
Jul 25 17:37:09.261  INFO waytoodeep: Awaiting that dumb future...
Jul 25 17:37:09.261  INFO waytoodeep::dumb: Hello from a dumb future!
Jul 25 17:37:09.262  INFO waytoodeep: Done awaiting that dumb future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里与 ECMAScript 的 &lt;code&gt;promise&lt;/code&gt; 有一些略微的区别：即使它们压根没有被 await 其中包含的工作依然会被执行。&lt;/p&gt;
&lt;p&gt;但是 Rust 的 future 对象仅仅是无聊的状态机，如果你故意制造麻烦就可以理解这个机制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/dumb.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; DumbFuture {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, _cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
		panic!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh heck no&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_BACKTRACE=1 cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 2.28s
	 Running `target/debug/waytoodeep`
Jul 25 17:41:18.956  INFO waytoodeep: Building that dumb future...
Jul 25 17:41:18.956  INFO waytoodeep: Awaiting that dumb future...
The application panicked (crashed).
Message:  Oh heck no
Location: src/dumb.rs:14

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ BACKTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
								⋮ 6 frames hidden ⋮
   7: &amp;lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&amp;gt;::poll::h4a44780628f4c5f0
	  at /home/amos/ftl/waytoodeep/src/dumb.rs:14
   8: waytoodeep::main::{{closure}}::h36de5a1f1f2a5c5b
	  at /home/amos/ftl/waytoodeep/src/main.rs:17
   9: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll::h20a96e082c7a581e
	  at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80
  10: tokio::park::thread::CachedParkThread::block_on::{{closure}}::hdf98cb3c7fdf3de4
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
  11: tokio::coop::with_budget::{{closure}}::h6a86a24a246e220f
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106
  12: std::thread::local::LocalKey&amp;lt;T&amp;gt;::try_with::h2ce0ac27c85965b6
	  at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376
  13: std::thread::local::LocalKey&amp;lt;T&amp;gt;::with::hc449f38c9f65fb53
	  at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352
  14: tokio::coop::with_budget::h5db157bd1e95e0e8
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99
  15: tokio::coop::budget::h7b57383f1255ac24
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76
  16: tokio::park::thread::CachedParkThread::block_on::hece399485213b91c
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
  17: tokio::runtime::enter::Enter::block_on::h89e9882e539e82d3
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151
  18: tokio::runtime::thread_pool::ThreadPool::block_on::h1a0186470c00ba70
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71
  19: tokio::runtime::Runtime::block_on::h7c21d6989b86d606
	  at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452
  20: waytoodeep::main::hb4dd5ffd46a5c032
	  at /home/amos/ftl/waytoodeep/src/main.rs:20
  21: core::ops::function::FnOnce::call_once::hc1fcc87431f77d25
	  at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227
								⋮ 11 frames hidden ⋮

Run with COLORBT_SHOW_HIDDEN=1 environment variable to disable frame filtering.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面堆栈跟踪如果加上颜色效果会更好，所以我希望你在本地做了相同的尝试，即使如此我们依然可以看到我们真正的 main 函数在 20 帧，然后往上，我们可以看到 &lt;code&gt;Runtime::block_on&lt;/code&gt;  、一个线程池的东西、一些挂起（parked）的线程、thread-local（其他 TLS）、一个 &lt;strong&gt;&lt;strong&gt;生成的&lt;/strong&gt;&lt;/strong&gt; future（帧 9 和 8，也就是我们的 &lt;code&gt;async fn main&lt;/code&gt; 的最终结果），最后是我们的 &lt;code&gt;DumbFuture&lt;/code&gt; poll 方法（帧 7）。&lt;/p&gt;
&lt;p&gt;帧 6 到 1 就是 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/panic/index.html&#34;&gt;panic&lt;/a&gt; 机制，再次完全超出本文讨论的范围。&lt;/p&gt;
&lt;p&gt;但是请站起来，亲爱的观众，用你的手臂绕过这个装置，以确保没有障眼法，没有隐藏的线，没有。。。&lt;/p&gt;
&lt;p&gt;。。。我要说的是对于异步堆栈跟踪没有“特殊处理”（special handling）。当然，这里我们崩溃了，但是仅仅是 Rust，操作系统甚至不知道我几乎避免了一场灾难。&lt;/p&gt;
&lt;p&gt;但是我们可以制造更大的混乱，如果我们愿意使用 &lt;code&gt;unsafe&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; DumbFuture {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, _cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; {
			&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xF00D&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;;
		}
		unreachable!(); &lt;span style=&#34;color:#75715e&#34;&gt;// pinky promise
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就不会有一些列的崩溃处理来拯救我们：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_BACKTRACE=1 cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 2.18s
	 Running `target/debug/waytoodeep`
Jul 25 17:46:53.926  INFO waytoodeep: Building that dumb future...
Jul 25 17:46:53.926  INFO waytoodeep: Awaiting that dumb future...
zsh: segmentation fault (core dumped)  RUST_BACKTRACE=1 cargo run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 GDB 可以：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build &amp;amp;&amp;amp; gdb --quiet --args ./target/debug/waytoodeep
	Finished dev [unoptimized + debuginfo] target(s) in 0.04s
Reading symbols from ./target/debug/waytoodeep...
warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
of file /home/amos/ftl/waytoodeep/target/debug/waytoodeep.
Use `info auto-load python-scripts [REGEXP]&#39; to list them.
(gdb) r
Starting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;quot;.
[New Thread 0x7ffff7c28700 (LWP 129418)]
[New Thread 0x7ffff7a27700 (LWP 129419)]
[New Thread 0x7ffff7826700 (LWP 129420)]
[New Thread 0x7ffff7625700 (LWP 129421)]
[New Thread 0x7ffff7424700 (LWP 129422)]
[New Thread 0x7ffff7223700 (LWP 129423)]
[New Thread 0x7ffff7022700 (LWP 129424)]
[New Thread 0x7ffff6e1e700 (LWP 129425)]
[New Thread 0x7ffff6c1a700 (LWP 129426)]
[New Thread 0x7ffff6a16700 (LWP 129427)]
[New Thread 0x7ffff6812700 (LWP 129428)]
[New Thread 0x7ffff660e700 (LWP 129429)]
[New Thread 0x7ffff640a700 (LWP 129430)]
[New Thread 0x7ffff6206700 (LWP 129431)]
[New Thread 0x7ffff6002700 (LWP 129432)]
Jul 25 17:47:13.278  INFO waytoodeep: Building that dumb future...
Jul 25 17:47:13.279  INFO waytoodeep: Awaiting that dumb future...

Thread 1 &amp;quot;waytoodeep&amp;quot; received signal SIGSEGV, Segmentation fault.
&amp;lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&amp;gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15
15                  *(0xF00D as *mut u64) = 0x0;
(gdb) bt
#0  &amp;lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&amp;gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15
#1  0x00005555555ab3a3 in waytoodeep::main::{{closure}} () at src/main.rs:17
#2  0x00005555555adb29 in &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll (self=..., cx=0x7fffffffd690)
	at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80
#3  0x00005555555adaa0 in tokio::park::thread::CachedParkThread::block_on::{{closure}} ()
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
#4  0x00005555555b1742 in tokio::coop::with_budget::{{closure}} (cell=0x7ffff7c2c412)
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106
#5  0x00005555555a9f58 in std::thread::local::LocalKey&amp;lt;T&amp;gt;::try_with (self=0x555555925fc0, f=...)
	at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376
#6  0x00005555555a9e3d in std::thread::local::LocalKey&amp;lt;T&amp;gt;::with (self=0x555555925fc0, f=...)
	at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352
#7  0x00005555555ad7c8 in tokio::coop::with_budget (budget=..., f=...)
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99
#8  tokio::coop::budget (f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76
#9  tokio::park::thread::CachedParkThread::block_on (self=0x7fffffffd7a0, f=...)
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
#10 0x00005555555abcc9 in tokio::runtime::enter::Enter::block_on (self=0x7fffffffd7f0, f=...)
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151
#11 0x00005555555acf2e in tokio::runtime::thread_pool::ThreadPool::block_on (self=0x7fffffffd908, future=...)
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71
#12 0x00005555555b0dfd in tokio::runtime::Runtime::block_on (self=0x7fffffffd900, future=...)
	at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452
#13 0x00005555555aa807 in waytoodeep::main () at src/main.rs:20
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们再次丢失了高亮颜色，这里可以看一下：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/gdb-colors.b45af429c46a37d9.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译注：我在本地环境并没有通过 GDB 复现带高亮的堆栈跟踪，反而是通过 LLDB 可以看到高亮的堆栈跟踪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是不是很漂亮？&lt;/p&gt;
&lt;p&gt;现在让我们回到正常有用的代码，移除所有关于自己实现的 future 代码： &lt;code&gt;src/dumb.rs&lt;/code&gt; 和 &lt;code&gt;mod dumb&lt;/code&gt; 。并使用一个获取 future 替代：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that fetch future...&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that fetch future...&amp;#34;&lt;/span&gt;);
	fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that fetch future&amp;#34;&lt;/span&gt;);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_BACKTRACE=1 cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 2.99s
	 Running `target/debug/waytoodeep`
Jul 25 17:51:49.281  INFO waytoodeep: Building that fetch future...
Jul 25 17:51:49.282  INFO waytoodeep: Awaiting that fetch future...
Jul 25 17:51:49.437  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 17:51:49.438  INFO waytoodeep: Done awaiting that fetch future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有两种方式考虑我们的函数，一个是语法糖层：也就是 &lt;code&gt;async fn&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;, url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后是核心实现层：一个普通的 &lt;code&gt;fn&lt;/code&gt; 仅用来返回一个 future 对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::future::Future;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
	client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
		info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
		Ok(())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于借用 &lt;code&gt;client&lt;/code&gt; 和 &lt;code&gt;url&lt;/code&gt; ，所以 &lt;code&gt;Future&lt;/code&gt; 对象的存活时间不能超过两者，这也是为什么我会将上面两个生命周期命名为 &lt;code&gt;&#39;a&lt;/code&gt; ，
并且返回的值也是任意实现了 &lt;code&gt;Future&lt;/code&gt; （通过 &lt;code&gt;Output&lt;/code&gt; ）同时生命周期也是 &lt;code&gt;&#39;a&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;整个 &lt;code&gt;async move {}&lt;/code&gt; 快也仅仅是“构建状态” &amp;ndash; 等于一个实现了 &lt;code&gt;Future&lt;/code&gt; 的类型。&lt;/p&gt;
&lt;p&gt;我们只是无法命名它。&lt;/p&gt;
&lt;p&gt;我们只能尽量获取它的描述：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type_name_of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(_: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
	std::any::type_name::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()
}

&lt;span style=&#34;color:#75715e&#34;&gt;// in main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that fetch future...&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(
		type_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type_name_of(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;fut),
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;That fetch future has a type..&amp;#34;&lt;/span&gt;
	);
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that fetch future...&amp;#34;&lt;/span&gt;);
	fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that fetch future&amp;#34;&lt;/span&gt;);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
	Finished dev [unoptimized + debuginfo] target(s) in 0.05s
	 Running `target/debug/waytoodeep`
Jul 25 18:00:39.774  INFO waytoodeep: Building that fetch future...
Jul 25 18:00:39.775  INFO waytoodeep: That fetch future has a type.. type_name=&amp;quot;core::future::from_generator::GenFuture&amp;lt;waytoodeep::fetch_thing::{{closure}}&amp;gt;&amp;quot;
Jul 25 18:00:39.775  INFO waytoodeep: Awaiting that fetch future...
Jul 25 18:00:39.882  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:00:39.882  INFO waytoodeep: Done awaiting that fetch future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。但是等等，由于我们使用了 &lt;code&gt;async&lt;/code&gt; 语法所以它是一个编译器生成的类型。某种意义上我们无法命名它也就意味这我们无法绑定这个对象，或者编写一个函数仅仅接受该类型。&lt;/p&gt;
&lt;p&gt;为了让我们自己相信 future 对象在我们真正轮询它之前它不会做任何工作，我们可以打开 &lt;code&gt;reqwest&lt;/code&gt; 的调试日志：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 3.07s
	 Running `target/debug/waytoodeep`
Jul 25 18:05:07.384  INFO waytoodeep: Building that fetch future...
Jul 25 18:05:07.385  INFO waytoodeep: That fetch future has a type.. type_name=&amp;quot;core::future::from_generator::GenFuture&amp;lt;waytoodeep::fetch_thing::{{closure}}&amp;gt;&amp;quot;
Jul 25 18:05:07.385  INFO waytoodeep: Awaiting that fetch future...
Jul 25 18:05:07.385 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:05:07.503 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:05:07.503  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:05:07.503  INFO waytoodeep: Done awaiting that fetch future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;甚至对于每一个包（crate），我们都可以通过监听 &lt;a href=&#34;https://lib.rs/crates/hyper&#34;&gt;hyper&lt;/a&gt; 和 &lt;a href=&#34;https://lib.rs/crates/h2&#34;&gt;h2&lt;/a&gt; 来观察：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=debug cargo run
	Finished dev [unoptimized + debuginfo] target(s) in 0.04s
	 Running `target/debug/waytoodeep`
Jul 25 18:05:59.973  INFO waytoodeep: Building that fetch future...
Jul 25 18:05:59.973  INFO waytoodeep: That fetch future has a type.. type_name=&amp;quot;core::future::from_generator::GenFuture&amp;lt;waytoodeep::fetch_thing::{{closure}}&amp;gt;&amp;quot;
Jul 25 18:05:59.973  INFO waytoodeep: Awaiting that fetch future...
Jul 25 18:05:59.974 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:05:59.974 DEBUG hyper::client::connect::dns: resolving host=&amp;quot;fasterthanli.me&amp;quot;
Jul 25 18:05:59.989 DEBUG hyper::client::connect::http: connecting to 172.67.196.144:443
Jul 25 18:06:00.000 DEBUG hyper::client::connect::http: connected to 172.67.196.144:443
Jul 25 18:06:00.000 DEBUG rustls::client::hs: No cached session for DNSNameRef(&amp;quot;fasterthanli.me&amp;quot;)
Jul 25 18:06:00.000 DEBUG rustls::client::hs: Not resuming any session
Jul 25 18:06:00.016 DEBUG rustls::client::hs: Using ciphersuite TLS13_CHACHA20_POLY1305_SHA256
Jul 25 18:06:00.016 DEBUG rustls::client::tls13: Not resuming
Jul 25 18:06:00.017 DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: [ServerNameAck, Protocols([PayloadU8([104, 50])])]
Jul 25 18:06:00.017 DEBUG rustls::client::hs: ALPN protocol is Some(b&amp;quot;h2&amp;quot;)
Jul 25 18:06:00.018 DEBUG h2::client: binding client connection
Jul 25 18:06:00.018 DEBUG h2::client: client connection bound
Jul 25 18:06:00.018 DEBUG h2::codec::framed_write: send frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 }
Jul 25 18:06:00.019 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 }
Jul 25 18:06:00.019 DEBUG hyper::client::pool: pooling idle connection for (&amp;quot;https&amp;quot;, fasterthanli.me)
Jul 25 18:06:00.020 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) }
Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: rustls::client::tls13: Ticket saved
Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: rustls::client::tls13: Ticket saved
Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Settings { flags: (0x0), max_concurrent_streams: 256, initial_window_size: 65536, max_frame_size: 16777215 }
Jul 25 18:06:00.030 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Settings { flags: (0x1: ACK) }
Jul 25 18:06:00.030 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 2147418112 }
Jul 25 18:06:00.041 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Settings { flags: (0x1: ACK) }
Jul 25 18:06:00.041 DEBUG Connection{peer=Client}: h2::proto::settings: received settings ACK; applying Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 }
Jul 25 18:06:00.120 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) }
Jul 25 18:06:00.120 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Data { stream_id: StreamId(1) }
Jul 25 18:06:00.121 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:06:00.121  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:06:00.121  INFO waytoodeep: Done awaiting that fetch future
Jul 25 18:06:00.121 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Data { stream_id: StreamId(1) }
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Reset { stream_id: StreamId(1), error_code: CANCEL }
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=GoAway { error_code: NO_ERROR, last_stream_id: StreamId(0) }
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::proto::connection: Connection::poll; connection error error=NO_ERROR
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: rustls::session: Sending warning alert CloseNotify
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;上面出现了 rustls，并且使用了 TLS 1.3，作者做过&lt;a href=&#34;https://www.youtube.com/watch?v=YHIiVsFybLA&#34;&gt;一期视频&lt;/a&gt;介绍过 TLS 1.3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些应该足够说服你，除非你只相信内核所说的，所以让我们看看调用堆栈只为了更加确定。&lt;/p&gt;
&lt;p&gt;我们在 &lt;code&gt;await&lt;/code&gt; future 对象之前增加一秒钟的休眠：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::time::sleep;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::time::Duration;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that fetch future...&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sleeping for a bit...&amp;#34;&lt;/span&gt;);
	sleep(Duration::from_secs(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that fetch future...&amp;#34;&lt;/span&gt;);
	fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that fetch future&amp;#34;&lt;/span&gt;);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build &amp;amp;&amp;amp; strace -e &#39;connect&#39; ./target/debug/waytoodeep
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
	Finished dev [unoptimized + debuginfo] target(s) in 3.13s
Jul 25 18:09:36.595  INFO waytoodeep: Building that fetch future...
Jul 25 18:09:36.596  INFO waytoodeep: Sleeping for a bit...
Jul 25 18:09:37.599  INFO waytoodeep: Awaiting that fetch future...
connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
Jul 25 18:09:37.720  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:09:37.721  INFO waytoodeep: Done awaiting that fetch future
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次强调，附上会让显著提高上面信息的可读性，如果不让我选择它们的话我是非常喜欢高亮的。我本地看起来是这样的：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/strace-colors.a4163f4bda179c2b.webp&#34; alt=&#34;&#34;&gt;
由于 &lt;code&gt;tracing-subscriber&lt;/code&gt; 默认格式会输出时间戳，可以看到程序休眠了1分钟（外加3毫秒），而且只有我们真正调用 &lt;code&gt;await&lt;/code&gt; 时我们的程序才会开始连接到托管文章的 CDN 节点。&lt;/p&gt;
&lt;p&gt;好了！让我们再次尝试拉取两篇文章：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);

	fut1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	fut2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次检查日志：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet
Jul 25 18:31:47.396 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:31:47.536 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:31:47.537  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:31:47.627 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13
Jul 25 18:31:47.627  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非常有趣。从这里可以看到， &lt;code&gt;reqwest&lt;/code&gt; 为两个请求复用了相同的连接。我会这么说是因我只看到了一行 &lt;code&gt;reqwest::connect&lt;/code&gt; 日志。&lt;/p&gt;
&lt;p&gt;让我们快速通过 &lt;code&gt;strace&lt;/code&gt; 检查一下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet &amp;amp;&amp;amp; strace -e &#39;connect&#39; ./target/debug/waytoodeep &amp;gt; /dev/null
connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;172.67.196.144&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在可以确认了，只有一次连接。&lt;/p&gt;
&lt;p&gt;但是，第一个请求完成后才开始了第二个请求。第一个耗费了 &lt;code&gt;536-396 = 140&lt;/code&gt; 毫秒，但是第二个耗费了 &lt;code&gt;627-537 = 90&lt;/code&gt; 毫秒！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Emmm，现在我们运行构建的是 debug 版本不是吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是真的。我确信我们面临的是 IO 密集型，而不是 CPU 密集型。&lt;/p&gt;
&lt;p&gt;debug 版本的构建绝对有一些额外的开销，但是我怀疑这里它不会太影响延迟。无论如何，让我们检查一下：
（注意 &amp;ndash;release）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet --release
Jul 25 18:34:59.211 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:34:59.343 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:34:59.343  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:34:59.427 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13
Jul 25 18:34:59.427  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们计算一下延迟 &lt;code&gt;343-211 = 132ms&lt;/code&gt; ， &lt;code&gt;427-343 = 84ms&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;几毫秒的差异可能的解释是邻居打开了一个 YouTube 视频导致无线电波爆发，从而导致冲突（802.11 没有空中流量控制，全民自由（free-for-all））和重传。&lt;/p&gt;
&lt;p&gt;或者另外一百万个原因。这也是我们不继续分析的原因。&lt;/p&gt;
&lt;p&gt;让我们回到文章的主题。&lt;/p&gt;
&lt;h3 id=&#34;等待第一个完成&#34;&gt;等待第一个完成&lt;/h3&gt;
&lt;p&gt;是的！等待第一个完成。所以我们如何让程序同时请求两个？&lt;/p&gt;
&lt;p&gt;其实有一大堆方式！&lt;/p&gt;
&lt;p&gt;例如，我们可以在一个执行器上执行（ &lt;code&gt;spawn&lt;/code&gt; ）这些 future 对象，然后休眠一秒钟。1 秒钟足够了吧？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
	tokio::spawn(fut1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);
	tokio::spawn(fut2);

	tokio::time::sleep(Duration::from_secs(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet --release
error[E0597]: `client` does not live long enough
  --&amp;gt; src/main.rs:17:28
   |
17 |     let fut1 = fetch_thing(&amp;amp;client, URL_1);
   |                ------------^^^^^^^--------
   |                |           |
   |                |           borrowed value does not live long enough
   |                argument requires that `client` is borrowed for `&#39;static`
...
25 | }
   | - `client` dropped here while still borrowed

error: aborting due to previous error

For more information about this error, try `rustc --explain E0597`.
error: could not compile `waytoodeep`

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额，除非我们不可以。不可以是因为。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们将「future 对象交给执行器执行」并将 future 对象转交给执行器，对吧？我们转移了它和它的内容的所有权。&lt;/p&gt;
&lt;p&gt;然后即使我们不对其进行 &lt;code&gt;await&lt;/code&gt; ，future 对象因为是「执行器需要做」的一部分依然会被执行，所以即使我们从 &lt;code&gt;main&lt;/code&gt; 返回 future 对象也会被轮询（polled）。&lt;/p&gt;
&lt;p&gt;但是如果我们从 &lt;code&gt;main&lt;/code&gt; 返回，则整个程序都会退出。&lt;/p&gt;
&lt;p&gt;这里也可以是任何函数（这里是 &lt;code&gt;main&lt;/code&gt; ）。重要的是如果函数返回了但是 future 对象借用了部分数据将无法通过借用检查器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这让我很高兴，因为这意味着我们不会意外访问到一些被释放的资源：&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=use+after+free&#34;&gt;UAF&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里我们的例子没有完成。&lt;/p&gt;
&lt;p&gt;所以。。。我们需要解决这个问题。如果 &lt;code&gt;fetch_thing&lt;/code&gt; 返回的 future 对象是 &lt;code&gt;&#39;static&lt;/code&gt; 的呢？或者它不借用任何东西？&lt;/p&gt;
&lt;p&gt;程序现在看起来如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::future::Future;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
	client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
		info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
		Ok(())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好吧，之前我们用了 &lt;code&gt;async fn&lt;/code&gt; ，但是为了更加深入的理解，我们不得不放弃漂亮的语法。&lt;/p&gt;
&lt;p&gt;但是幸运的是，这正是我们想要的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
	client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
&lt;span style=&#34;color:#75715e&#34;&gt;//                                                 👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是我们借用了 &lt;code&gt;client&lt;/code&gt; 和 &lt;code&gt;url&lt;/code&gt; 我们必须避免这个问题。&lt;/p&gt;
&lt;p&gt;因为 &lt;code&gt;url&lt;/code&gt; 本身就是常量，所以很容易解决：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_1: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/articles/whats-in-the-box&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/series/advent-of-code-2020/part-13&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它们本身就是 &lt;code&gt;&#39;static&lt;/code&gt; 。所以我们只需要调整需要 &lt;code&gt;&#39;static&lt;/code&gt; 就行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
	client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//       👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常好！解决了一个生命周期，还剩下一个。&lt;/p&gt;
&lt;p&gt;我们可以要求 &lt;code&gt;client&lt;/code&gt; 的生命周期为 &lt;code&gt;&#39;static&lt;/code&gt; 。由于它是一个  &lt;code&gt;Client&lt;/code&gt; 的引用，意味着 &lt;code&gt;Cleint&lt;/code&gt; 本身也需要是 &lt;code&gt;&#39;static&lt;/code&gt; 生命周期。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(
	&lt;span style=&#34;color:#75715e&#34;&gt;//         👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于它被 &lt;code&gt;main&lt;/code&gt; 所有，额，我们可以，可以。。。可以泄漏它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; leaked_client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Box::leak(Box::new(client));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_2);

	tokio::spawn(fut1);
	tokio::spawn(fut2);

	tokio::time::sleep(Duration::from_secs(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完美！没有生命周期的问题了。&lt;/p&gt;
&lt;p&gt;仅仅将所有东西泄漏就行。看到没？你不需要 C！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet --release
Jul 25 18:54:53.614 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:54:53.614 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:54:53.708 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:54:53.708  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:54:53.733 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13
Jul 25 18:54:53.733  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非～～常有趣！&lt;/p&gt;
&lt;p&gt;我们的两个请求肯定是并发的发出去了，我们之所以知道是因为从我的笔记本上请求我的网站大概耗时 80ms 到 140ms 之间，但是在日志中我们看到两个响应之间只有 ~25ms 的间隔。&lt;/p&gt;
&lt;p&gt;我们还可以看到 &lt;code&gt;reqwest&lt;/code&gt; 有连接池机制：同时创建了两个连接。可能是因为我们开始第二个连接的时候第一个请求的连接还没有建立完成。&lt;/p&gt;
&lt;p&gt;也就意味着我们通过 &lt;code&gt;strace&lt;/code&gt; 可以看到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet --release &amp;amp;&amp;amp; strace -e &#39;connect&#39; ./target/release/waytoodeep
Jul 25 18:58:16.425  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:58:16.443  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。两个 &lt;code&gt;connect&lt;/code&gt; 调用！如我所料！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谬论：一个 &lt;code&gt;connect&lt;/code&gt; 调用都没看到？因为 Rust 构建 HTTP/2 请求的时候甚至都需要建立 TCP 连接。真是革命性的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这当然不是真的。可能在其他线程执行了？也许 &lt;code&gt;strace&lt;/code&gt; 默认仅跟踪了主线程？&lt;/p&gt;
&lt;p&gt;啊，对了， &lt;code&gt;-f&lt;/code&gt; 可以跟踪所有「子进程」，就像大家知道的那样 Linux 线程仅仅是披了件风衣的进程（或者其他方式）。所以，让我们看一下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet --release &amp;amp;&amp;amp; strace -f -e &#39;connect&#39; ./target/release/waytoodeep
strace: Process 154612 attached
strace: Process 154613 attached
strace: Process 154614 attached
strace: Process 154615 attached
strace: Process 154616 attached
strace: Process 154617 attached
strace: Process 154618 attached
strace: Process 154619 attached
strace: Process 154620 attached
strace: Process 154621 attached
strace: Process 154622 attached
strace: Process 154623 attached
strace: Process 154624 attached
strace: Process 154625 attached
strace: Process 154626 attached
strace: Process 154627 attached
strace: Process 154628 attached
[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
[pid 154628] connect(10, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
[pid 154628] connect(9, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
[pid 154627] connect(10, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3034::6815:5ca9&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3031::ac43:c490&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;172.67.196.144&amp;quot;)}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3034::6815:5ca9&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3031::ac43:c490&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;172.67.196.144&amp;quot;)}, 16) = 0
[pid 154625] connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
[pid 154626] connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
Jul 25 19:00:53.862  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:00:53.880  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
[pid 154628] +++ exited with 0 +++
[pid 154627] +++ exited with 0 +++
[pid 154618] +++ exited with 0 +++
[pid 154614] +++ exited with 0 +++
[pid 154612] +++ exited with 0 +++
[pid 154619] +++ exited with 0 +++
[pid 154617] +++ exited with 0 +++
[pid 154613] +++ exited with 0 +++
[pid 154615] +++ exited with 0 +++
[pid 154623] +++ exited with 0 +++
[pid 154616] +++ exited with 0 +++
[pid 154624] +++ exited with 0 +++
[pid 154621] +++ exited with 0 +++
[pid 154622] +++ exited with 0 +++
[pid 154626] +++ exited with 0 +++
[pid 154620] +++ exited with 0 +++
[pid 154625] +++ exited with 0 +++
+++ exited with 0 +++shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哇哦，一大堆 &lt;code&gt;connect&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以程序首先尝试连接 &lt;a href=&#34;https://jameshfisher.com/2018/02/05/dont-use-nscd/&#34;&gt;nscd&lt;/a&gt; 因为显然我们依然生活在 90 年代：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。幸好我的系统没有它，所以它继续通过 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 查询 DNS：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154628] connect(9, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后最终获得一些 &lt;a href=&#34;https://www.cloudflare.com/ips/&#34;&gt;Cloudflare 的 IP 地址&lt;/a&gt;，如 &lt;code&gt;172.67.196.144&lt;/code&gt; 和 &lt;code&gt;104.21.92.169&lt;/code&gt; 。还有一些 IPv6 相关的，由于我禁用了 IPv6 所以并没有工作：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3034::6815:5ca9&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后终于程序决定使用 IPv4 的地址 &lt;code&gt;104.21.92.169&lt;/code&gt; 去构建请求，同时我们能看到这些都是非阻塞的（non-blocking）连接，因为 &lt;code&gt;connect&lt;/code&gt; 返回 &lt;code&gt;-1&lt;/code&gt; 而不是 &lt;code&gt;0&lt;/code&gt; 表示「正在连接、正在连接、稍后回来检查」。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154625] connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
[pid 154626] connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了！所以忽略 &lt;a href=&#34;https://isitdns.com/&#34;&gt;DNS&lt;/a&gt; 的话我们看到了两个连接。&lt;/p&gt;
&lt;p&gt;同时我们看到了一些线程。&lt;/p&gt;
&lt;p&gt;这就是 Rust 异步的工作方式？我们只是用了一些线程？这也就是它能在「后台运行」的原因？&lt;/p&gt;
&lt;p&gt;在我们回答这些问题前，让我们先调整我们的代码真正的去等待 future 完成，而不是随意的休眠 1 秒钟。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; leaked_client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Box::leak(Box::new(client));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_2);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

	handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等等，我们这不又回到原点吗？等待第一个请求完成，然后才开始第二个请求。&lt;/p&gt;
&lt;p&gt;当然不是！我们运行几次就可以看到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:07.934  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:07.958  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:08.676  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:08.680  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:09.325  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:09.338  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:10.134  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:10.144  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。大部分情况下“whats-in-the-box”胜出了（它确实先开始），但是“advent-of-code-2020”也首先完成了几次。这也是我们希望看到的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谬论：也就是说因为有线程请求被并行（parallel）的执行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是的。但是不要相信我，让我们继续深入。&lt;/p&gt;
&lt;h3 id=&#34;不是因为线程&#34;&gt;不是因为线程&lt;/h3&gt;
&lt;p&gt;让我们通过 GDB 运行我们的小程序，大部分原因是我还没有对 LLDB 形成肌肉记忆，我相信这是水到渠成的事。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet &amp;amp;&amp;amp; gdb --quiet --args ./target/debug/waytoodeep
Reading symbols from ./target/debug/waytoodeep...
warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
of file /home/amos/ftl/waytoodeep/target/debug/waytoodeep.
Use `info auto-load python-scripts [REGEXP]&#39; to list them.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一切就绪！&lt;/p&gt;
&lt;p&gt;在我们开始之前先设置一下断点。我说了断点？应该是捕捉点（catchpoint）。我不知道参与构造 HTTP/2 请求的所有函数名，但是我知道 &lt;code&gt;connect&lt;/code&gt; 对应的系统调用（syscall），这也是我们需要打断点的地方，或者捕捉（catch）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(gdb) catch syscall connect
Catchpoint 1 (syscall &#39;connect&#39; [42])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们开始！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ Starting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;quot;.
[New Thread 0x7ffff7c28700 (LWP 158945)]
[New Thread 0x7ffff7a27700 (LWP 158946)]
[New Thread 0x7fffef826700 (LWP 158947)]
[New Thread 0x7ffff7826700 (LWP 158948)]
[New Thread 0x7ffff7625700 (LWP 158949)]
[New Thread 0x7ffff7424700 (LWP 158950)]
[New Thread 0x7ffff7223700 (LWP 158951)]
[New Thread 0x7ffff701f700 (LWP 158952)]
[New Thread 0x7ffff6e1e700 (LWP 158953)]
[New Thread 0x7ffff6c1a700 (LWP 158954)]
[New Thread 0x7ffff6a16700 (LWP 158955)]
[New Thread 0x7ffff680f700 (LWP 158956)]
[New Thread 0x7ffff660e700 (LWP 158957)]
[New Thread 0x7ffff640a700 (LWP 158958)]
[New Thread 0x7ffff6206700 (LWP 158959)]
[New Thread 0x7ffff5f4b700 (LWP 158960)]
[New Thread 0x7ffff5d4a700 (LWP 158961)]
[Switching to Thread 0x7ffff5f4b700 (LWP 158960)]

Thread 17 &amp;quot;tokio-runtime-w&amp;quot; hit Catchpoint 1 (call to syscall connect), 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=...,
	len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26
26      ../sysdeps/unix/sysv/linux/connect.c: No such file or directory.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不错不错，真快！我们停在了名为 &lt;code&gt;tokio-runtime-w&lt;/code&gt; 的 &lt;code&gt;Thread 17&lt;/code&gt; 中，因为我猜其他所有字母都被使用了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt; 意味这 &lt;code&gt;worker&lt;/code&gt; ，如果你不是第一天用 Unix 就会知道什么这么简写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的， &lt;code&gt;Thread 17&lt;/code&gt; ，那么其他线程在做什么呢？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(gdb) info threads
  Id   Target Id                                            Frame
  1    Thread 0x7ffff7c2c6c0 (LWP 158941) &amp;quot;waytoodeep&amp;quot;      syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  2    Thread 0x7ffff7c28700 (LWP 158945) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  3    Thread 0x7ffff7a27700 (LWP 158946) &amp;quot;tokio-runtime-w&amp;quot; 0x00007ffff7d4f5ce in epoll_wait (epfd=3, events=0x555556338b60, maxevents=1024, timeout=-1)
	at ../sysdeps/unix/sysv/linux/epoll_wait.c:30
  4    Thread 0x7fffef826700 (LWP 158947) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  5    Thread 0x7ffff7826700 (LWP 158948) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  6    Thread 0x7ffff7625700 (LWP 158949) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  7    Thread 0x7ffff7424700 (LWP 158950) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  8    Thread 0x7ffff7223700 (LWP 158951) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  9    Thread 0x7ffff701f700 (LWP 158952) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  10   Thread 0x7ffff6e1e700 (LWP 158953) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  11   Thread 0x7ffff6c1a700 (LWP 158954) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  12   Thread 0x7ffff6a16700 (LWP 158955) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  13   Thread 0x7ffff680f700 (LWP 158956) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  14   Thread 0x7ffff660e700 (LWP 158957) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  15   Thread 0x7ffff640a700 (LWP 158958) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  16   Thread 0x7ffff6206700 (LWP 158959) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
 *17   Thread 0x7ffff5f4b700 (LWP 158960) &amp;quot;tokio-runtime-w&amp;quot; 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110)
	at ../sysdeps/unix/sysv/linux/connect.c:26
  18   Thread 0x7ffff5d4a700 (LWP 158961) &amp;quot;tokio-runtime-w&amp;quot; 0x00007ffff7d48a46 in __GI___mmap64 (offset=0, fd=-1, flags=16418, prot=0, len=134217728, addr=0x0)
	at ../sysdeps/unix/sysv/linux/mmap64.c:59
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额。&lt;/p&gt;
&lt;p&gt;我们可以获得更多的栈帧？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(gdb) thread apply all backtrace 2

Thread 18 (Thread 0x7ffff5d4a700 (LWP 158961)):
#0  0x00007ffff7d48a46 in __GI___mmap64 (offset=0, fd=-1, flags=16418, prot=0, len=134217728, addr=0x0) at ../sysdeps/unix/sysv/linux/mmap64.c:59
#1  __GI___mmap64 (addr=addr@entry=0x0, len=len@entry=134217728, prot=prot@entry=0, flags=flags@entry=16418, fd=fd@entry=-1, offset=offset@entry=0) at ../sysdeps/unix/sysv/linux/mmap64.c:47
(More stack frames follow...)

Thread 17 (Thread 0x7ffff5f4b700 (LWP 158960)):
#0  0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26
#1  0x00007ffff7d8b713 in open_socket (type=type@entry=GETFDHST, key=key@entry=0x7ffff7de5ccb &amp;quot;hosts&amp;quot;, keylen=keylen@entry=6) at nscd_helper.c:185
(More stack frames follow...)

Thread 16 (Thread 0x7ffff6206700 (LWP 158959)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff6206498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)

Thread 15 (Thread 0x7ffff640a700 (LWP 158958)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff640a498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)

Thread 14 (Thread 0x7ffff660e700 (LWP 158957)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff660e498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)

Thread 13 (Thread 0x7ffff680f700 (LWP 158956)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff680f498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额。大部分都是挂起的。也就是空闲的。更准确的是它们在等待工作。&lt;/p&gt;
&lt;p&gt;我们也可以通过 htop 查看这些所有线程，我知道我们已经看到了，但是我仅仅是觉得 htop 很棒。感谢 &lt;a href=&#34;https://twitter.com/hisham%5Fhm&#34;&gt;Hisham&lt;/a&gt;！
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/htop-colors.571c5effbff8a0b3.webp&#34; alt=&#34;&#34;&gt;
所以，我们注意到一些线程，同时也有一些 CPU 核心。可能是一个 CPU 核心一个线程？
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/worker-threads.64dbe39e33ccfc4f.webp&#34; alt=&#34;&#34;&gt;
是的。然后还有一些阻塞的线程，正如我们从上面 &lt;code&gt;strace&lt;/code&gt; 输出看到的那样， 它会进行一些阻塞的 &lt;code&gt;connect&lt;/code&gt; 调用去查询 DNS（实际是 glibc 在执行），
所以它通过运行在工作线程之外避免阻塞其他任务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以多个线程，这就是为什么一次可以运行多个请求的原因？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上文档上表明这是一个单线程的执行器，我也不能确定，所以让我们试一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//                           👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// (same as before)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:50:15.977  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:50:15.994  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两个响应间隔 &lt;code&gt;17ms&lt;/code&gt; ，这个时间不够构造一个完整的请求，所以请求并行（parallel）的执行了。如果你依然坚持它内部使用了线程，让我们进一步确认我们只有一个线程：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/current-thread.cd7b619ed644899b.webp&#34; alt=&#34;&#34;&gt;
确实有多个线程，但是这些都是阻塞线程。仅仅是 DNS 查询。可以通过 htop 看到已经没有无数（15）的工作线程了：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/htop-current-thread.fe28174abc5d15fa.webp&#34; alt=&#34;&#34;&gt;
（顺便说一下 15 个工作线程的原因，这是因为我预留了一个 CPU 核心没有分配给虚拟机，这样即使虚拟机全速运行也不会导致宿主机停止响应）。&lt;/p&gt;
&lt;p&gt;如果我们将 DNS 查询排除在外，我们就可以看到实际上仅仅使用了一个线程，我们将继续下去，以防你依然存疑！&lt;/p&gt;
&lt;h3 id=&#34;插曲-让我们避免泄漏内存&#34;&gt;插曲：让我们避免泄漏内存&lt;/h3&gt;
&lt;p&gt;但是在那之前：正在泄漏 reqwest 的 &lt;code&gt;Client&lt;/code&gt; 让我很不爽。&lt;/p&gt;
&lt;p&gt;为了避免，我们可以创建一个原子引用计数（atomically-reference-counted），这样它就可以随着任务运行而存活。&lt;/p&gt;
&lt;p&gt;修改起来非常简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//             👇 Atomically Reference Counted = Arc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::sync::Arc;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;//           👇 there we go
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arc::new(Client::new());

	&lt;span style=&#34;color:#75715e&#34;&gt;//                              👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), URL_1);
	&lt;span style=&#34;color:#75715e&#34;&gt;// (cloning it only increases the reference count)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), URL_2);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

	handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	Ok(())
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[allow(clippy::manual_async_fn)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(
	&lt;span style=&#34;color:#75715e&#34;&gt;//       👇 now taking this, we have shared ownership of it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	client: &lt;span style=&#34;color:#a6e22e&#34;&gt;Arc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// luckily this  👇 only requires `&amp;amp;self`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
		info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
		Ok(())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，现在我感觉好多了。我们的程序不再泄漏一些字节即使它永远不会运行超过几秒钟。一切都还好。&lt;/p&gt;
&lt;p&gt;让我们看一下 &lt;code&gt;reqwest&lt;/code&gt; 的 &lt;code&gt;Client&lt;/code&gt; 定义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Clone)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; {
	inner: &lt;span style=&#34;color:#a6e22e&#34;&gt;Arc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ClientRef&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它已经是引用计数的了，所以我们可以直接接受一个 &lt;code&gt;Client&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;//             👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

	&lt;span style=&#34;color:#75715e&#34;&gt;//                              👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), URL_1);
	&lt;span style=&#34;color:#75715e&#34;&gt;// no need to clone a second time
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client, URL_2);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

	handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	Ok(())
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[allow(clippy::manual_async_fn)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(
	&lt;span style=&#34;color:#75715e&#34;&gt;//        👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	client: &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
	url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;static {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
		info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
		Ok(())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了。&lt;/p&gt;
&lt;p&gt;对了，仅供参考，更简单的 &lt;code&gt;async fn&lt;/code&gt; 也可以工作了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(client: &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;, url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们甚至不需要要求 &lt;code&gt;url&lt;/code&gt; 的借用生命周期是 &lt;code&gt;&#39;static&lt;/code&gt; 。如果 &lt;code&gt;url&lt;/code&gt; 是 &lt;code&gt;&#39;static&lt;/code&gt; 的则返回的 Future 也是，反之亦然。&lt;/p&gt;
&lt;p&gt;作为例子，下面代码无法通过编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

	&lt;span style=&#34;color:#75715e&#34;&gt;// this is a `String`, owned by main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(URL_1);

	&lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re borrowing from main           👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;url1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client, URL_2);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

	handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo check
	Checking waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)

error[E0597]: `url1` does not live long enough
  --&amp;gt; src/main.rs:18:44
   |
18 |     let fut1 = fetch_thing(client.clone(), &amp;amp;url1);
   |                ----------------------------^^^^^-
   |                |                           |
   |                |                           borrowed value does not live long enough
   |                argument requires that `url1` is borrowed for `&#39;static`
...
28 | }
   | - `url1` dropped here while still borrowed
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;你面对的考验就是：修改了一些代码，然后突然间整个 &lt;code&gt;Future&lt;/code&gt; 不再实现 &lt;code&gt;Send&lt;/code&gt; ，但是你需要它实现 &lt;code&gt;Send&lt;/code&gt; 。参考&lt;a href=&#34;https://fasterthanli.me/articles/getting-in-and-out-of-trouble-with-rust-futures&#34;&gt;Getting in and out of trouble with Rust futures&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我们进一步深入之前，我们还想提一下，除了通过 &lt;code&gt;tokio::spawn&lt;/code&gt; 可以同时运行两个 future 并且立即等待两个 future 完成，还是使用 &lt;code&gt;FuturesUnordered&lt;/code&gt; 实现相同目的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add futures@0.3.16
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding futures v0.3.16 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; futures::{stream::FuturesUnordered, StreamExt};


&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![
		fetch_thing(client.clone(), URL_1),
		fetch_thing(client, URL_2),
	]
	.into_iter()
	.collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FuturesUnordered&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(item) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group.next().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// propagate errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		item&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	}

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这个解决半啃啊，我们可以 await 任意数量的 future 对象，同时也是并发的被轮询（polled）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:12:37.208  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 20:12:37.227  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仅仅。。。19 毫秒的间隔 &amp;ndash; 可以确定是并发的。&lt;/p&gt;
&lt;h3 id=&#34;彻底摆脱-dns&#34;&gt;彻底摆脱 DNS&lt;/h3&gt;
&lt;p&gt;现在让我们暂时忘掉 &lt;code&gt;reqwest&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;HTTP &lt;a href=&#34;https://fasterthanli.me/articles/aiming-for-correctness-with-types&#34;&gt;并不难&lt;/a&gt; ，我们可以自己构建。只要 TCP 就行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::net::SocketAddr;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::{
	io::{AsyncReadExt, AsyncWriteExt},
	net::TcpStream,
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// look mom, no DNS!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addr: &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketAddr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;).into();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TcpStream::connect(addr).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re writing straight to the socket, there&amp;#39;s no buffering
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// so no need to flush
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Host: 1.1.1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;User-Agent: cool-bear&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Connection: close&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::with_capacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
	socket.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response.lines().next().unwrap_or_default();
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;status, , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got response!&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;// dropping the socket will close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以正常运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:24:05.158  INFO waytoodeep: Got response! status=HTTP/1.1 301 Moved Permanently name=second
Jul 25 20:24:05.159  INFO waytoodeep: Got response! status=HTTP/1.1 301 Moved Permanently name=first
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（看，第二个赢得了胜利）。&lt;/p&gt;
&lt;p&gt;同时再也没有 DNS 查询了。&lt;/p&gt;
&lt;p&gt;当然 &lt;code&gt;http://1.1.1.1&lt;/code&gt; 将我们重定向到 HTTPS 的页面，技术上实现 TLS 并不困难，但是我们的篇幅已经很长了，所以。。。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add tokio-rustls@0.22.0
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding tokio-rustls v0.22.0 to dependencies
$ cargo add webpki@0.21.4
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding webpki v0.21.4 to dependencies
$ cargo add webpki-roots@0.21.1
	Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
	  Adding webpki-roots v0.21.1 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后。。。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo rm reqwest
	Removing reqwest from dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::sync::Arc;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; webpki::DNSNameRef;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio_rustls::{rustls::ClientConfig, TlsConnector};

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// look out it&amp;#39;s port 443 now
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addr: &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketAddr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;).into();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TcpStream::connect(addr).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// establish a TLS session...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; connector: &lt;span style=&#34;color:#a6e22e&#34;&gt;TlsConnector&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClientConfig::new();
		config
			.root_store
			.add_server_trust_anchors(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;webpki_roots::TLS_SERVER_ROOTS);
		Arc::new(config).into()
	};
	&lt;span style=&#34;color:#75715e&#34;&gt;// we have to use the proper DNS name now      👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; dnsname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DNSNameRef::try_from_ascii_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one.one.one.one&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connector.connect(dnsname, socket).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re writing straight to the socket, there&amp;#39;s no buffering
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// so no need to flush
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	&lt;span style=&#34;color:#75715e&#34;&gt;//                        👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Host: one.one.one.one&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;User-Agent: cool-bear&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Connection: close&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::with_capacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
	socket.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response.lines().next().unwrap_or_default();
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;status, , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got response!&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;// dropping the socket will close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:31:32.627  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:31:32.658  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，现在返回状态码 200！&lt;/p&gt;
&lt;p&gt;我们的目标是了解 Rust 的 future，我们已经获得了不错的进展。&lt;/p&gt;
&lt;p&gt;但是让我们考虑以下场景：我们想并发的执行两个请求，一旦其中一个失败，另外一个也应该立即请求失败，或者两个一起成功。&lt;/p&gt;
&lt;h3 id=&#34;tokio-的-try-join-宏&#34;&gt;tokio 的 try_join 宏&lt;/h3&gt;
&lt;p&gt;实际上，又一个宏可以做这个！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::try_join&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;),)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是我们想要的！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:44:52.150  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:44:52.165  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:44:52.165  INFO waytoodeep: All done! res=((), ())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次快速检查以下：响应间隔在 15ms &amp;ndash; 也就是确定是并发的发送。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try_join!&lt;/code&gt; 帮我们进行了 &lt;code&gt;await&lt;/code&gt; ，同时帮我们处理了结果。如果一切正常，我们得到所有 future 对象的结果：内容为 &lt;code&gt;Ok&lt;/code&gt; 的空元组（有序的）。&lt;/p&gt;
&lt;p&gt;所以我们可以取到我们 future 返回的对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//                                          👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;, Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// (omitted)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//  👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Ok(name)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便我们自己，它们按照顺序返回，无论哪个先被执行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:47:56.967  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:47:56.967  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:47:56.967  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:47:57.933  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:47:57.935  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:47:57.935  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:47:58.942  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:47:58.946  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:47:58.946  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，现在我们没有 DNS 查询，我们就可以消除“同时”请求是由于多线程实现的。&lt;/p&gt;
&lt;p&gt;因为，如果我们在 &lt;code&gt;strace&lt;/code&gt; 下运行程序，并通过 &lt;code&gt;-f&lt;/code&gt; 请求跟踪子线程（ BTW &lt;code&gt;f&lt;/code&gt; 意思是跟踪（ &lt;code&gt;follow&lt;/code&gt; ）子线程）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet --release &amp;amp;&amp;amp; strace -f -e &#39;connect&#39; ./target/release/waytoodeep
connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;1.1.1.1&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;1.1.1.1&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
Jul 25 20:51:54.004  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:51:54.013  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:51:54.015  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。现在我们看到了预期的两次 &lt;code&gt;connect&lt;/code&gt; 调用，但是没有任何子线程。而且在这个运行中，响应之间的间隔时间是 9 毫秒！少于我直接 ping 1.1.1.1:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ ping -c 1 1.1.1.1
PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data.
64 bytes from 1.1.1.1: icmp_seq=1 ttl=57 time=13.7 ms

--- 1.1.1.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 13.748/13.748/13.748/0.000 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为执行器通过 Event Loop 构建非阻塞的系统调用，然后订阅 Event Loop 管理的资源相关的事件，
然后就可以知道一个 socket 什么时间可以进行读写。&lt;/p&gt;
&lt;p&gt;所以，future 对象只是一些状态，接下来就可以进行 await，那么在哪订阅的事件呢？&lt;/p&gt;
&lt;p&gt;让我们尝试创建一个我们自己的 &lt;code&gt;try_join&lt;/code&gt; &amp;ndash; 一个函数，并且只接受两个 future。然后我们就能看到发生了什么。&lt;/p&gt;
&lt;p&gt;我们已经实现了自己的 future，实现一个 &lt;code&gt;try_join&lt;/code&gt; 函数会有多麻烦？&lt;/p&gt;
&lt;h3 id=&#34;事实证明很麻烦&#34;&gt;事实证明很麻烦&lt;/h3&gt;
&lt;p&gt;我们先从简单的开始！我们想实现一个函数接受两个 future 对象然后返回一个 future 对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; tj;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/tj.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::future::Future;

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;,
{
	todo!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;implement me!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;额。函数不应该只返回一个空元组，它需要返回一个包含成功结果的元组。或者遇到的第一个错误。&lt;/p&gt;
&lt;p&gt;所以我们需要添加一些更多的范型参数：一个错误类型（我们假设两个 future 对象返回同样的错误类型），另一个是 future 对象返回的 &lt;code&gt;Ok&lt;/code&gt; 的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	todo!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;implement me!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了！这非常绕口，但是我相信我们已经实现了需求。&lt;/p&gt;
&lt;p&gt;需要注意的是我们使用了 &lt;code&gt;impl Trait&lt;/code&gt; 语法，让我们不用暴露我们自己的 &lt;code&gt;try join future&lt;/code&gt; 。这不重要，但是可以让我们用更少的 &lt;code&gt;pub&lt;/code&gt; 关键字，同时我们的手指已经码累了。非常累。&lt;/p&gt;
&lt;p&gt;所以，让我们来创建这个类型！&lt;/p&gt;
&lt;p&gt;类型需要持续 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; ，并注意 &lt;code&gt;AR&lt;/code&gt; 、 &lt;code&gt;BR&lt;/code&gt; 和 &lt;code&gt;E&lt;/code&gt; 类型。所以，希望您对这些范型参数沙拉有个好胃口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;,
	b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后可以在我们的 &lt;code&gt;try_join&lt;/code&gt; 函数中返回它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// so simple!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	TryJoin { a, b }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我认为这很好的说明一个事实：创建 future 对象仅仅是构建状态。不需要任何额外的工作。&lt;/p&gt;
&lt;p&gt;当然，这个不会通过编译，因为 &lt;code&gt;TryJoin&lt;/code&gt; 还没有实现 &lt;code&gt;Future&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是不要担心！ &lt;code&gt;rust-analyzer&lt;/code&gt; 可以帮助我们生成缺失的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{
	future::Future,
	pin::Pin,
	task::{Context, Poll},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TryJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
		todo!()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们真正的实现了，我们将按照下面方式使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，现在只是会崩溃：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release

The application panicked (crashed).
Message:  not yet implemented
Location: src/tj.rs:32

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，我猜我们需要实现它！&lt;/p&gt;
&lt;p&gt;好吧，让我们先尝试至少轮询（polling）一个 future 对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.a.poll(cx);

	todo!()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
error[E0599]: no method named `poll` found for type parameter `A` in the current scope
   --&amp;gt; src/tj.rs:32:24
	|
32  |         let a = self.a.poll(cx);
	|                        ^^^^ method not found in `A`
	|
   ::: /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/future.rs:100:8
	|
100 |     fn poll(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context&amp;lt;&#39;_&amp;gt;) -&amp;gt; Poll&amp;lt;Self::Output&amp;gt;;
	|        ---- the method is available for `Pin&amp;lt;&amp;amp;mut A&amp;gt;` here
	|
help: consider wrapping the receiver expression with the appropriate type
	|
32  |         let a = Pin::new(&amp;amp;mut self.a).poll(cx);
	|                 ^^^^^^^^^^^^^       ^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额！一个好的开始，好的开始。&lt;/p&gt;
&lt;p&gt;我已经在这里&lt;a href=&#34;https://fasterthanli.me/articles/pin-and-suffering&#34;&gt;详细的解释了&lt;/a&gt; Pin，所以这里我们就简单的介绍一下。&lt;/p&gt;
&lt;p&gt;方法通常通过如下方式定义接收者（receiver）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyType&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_thing&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) {
		println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my value is {}&amp;#34;&lt;/span&gt;, self.value)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是下面的简写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyType&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_thing&lt;/span&gt;(self: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;) {
		println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my value is {}&amp;#34;&lt;/span&gt;, self.value)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为我们在 &lt;code&gt;impl MyType&lt;/code&gt; 代码块中 &lt;code&gt;Self&lt;/code&gt; 就是 &lt;code&gt;MyType&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;很清晰吧？好了，还可以定义其他很多类型作为接收者， &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 就是其中之一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyType&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_thing&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// good luck!1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 &lt;code&gt;MyType&lt;/code&gt; 必须是固定的（pinned）是什么意思呢？比如，它保证不进行转移（move）。除非它实现了 &lt;code&gt;Unpin&lt;/code&gt; ，
然后它就可以是非固定的（unpinned），可移动，然后被再一次固定。&lt;/p&gt;
&lt;p&gt;对于剩下的文章，我们不会假设我们的 future &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 都是 &lt;code&gt;Unpin&lt;/code&gt; ，也就是说我们自己不会移动（move）它们（只销毁（drop）它们）。&lt;/p&gt;
&lt;p&gt;你可以说我们不需要 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 是 &lt;code&gt;Unpin&lt;/code&gt; 的，因为我们没有添加指定的 where clause 来标记需要它们是 &lt;code&gt;Unpin&lt;/code&gt; 。
因为如果我们需要，我们就要像下面这样添加额外的 &lt;code&gt;trait bound&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//                                    👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unpin,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unpin,
{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是我们没有，所以我们不能假设 &lt;code&gt;A&lt;/code&gt; 或 &lt;code&gt;B&lt;/code&gt; 是 &lt;code&gt;Unpin&lt;/code&gt; 的。&lt;/p&gt;
&lt;p&gt;所以！我们现在真的只是面临固定（pin）保护的问题。&lt;/p&gt;
&lt;p&gt;我们现在只持有一个 &lt;code&gt;Pin&amp;lt;&amp;amp;mut TryJoin&amp;lt;A, B, ...&amp;gt;&amp;gt;&lt;/code&gt; 但是我希望持续一个 &lt;code&gt;Pin&amp;lt;&amp;amp;mut A&amp;gt;&lt;/code&gt; （因为这就是我们因为需要轮询 &lt;code&gt;A&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;另外一个解决方法，我倾向于通过一些类似 &lt;a href=&#34;https://lib.rs/crates/pin-project&#34;&gt;pin-project&lt;/a&gt; 包，或者类似 &lt;a href=&#34;https://lib.rs/crates/pin-project-lite&#34;&gt;pin-project-lite&lt;/a&gt;，但是在我们前进的方向直接使用 &lt;code&gt;pin-project&lt;/code&gt; 真的很尴尬，
所以我们这里使用 &lt;code&gt;unsafe&lt;/code&gt; 作为替代：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.poll(cx);

	todo!()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过编译。但是我们在使用 &lt;code&gt;unsafe&lt;/code&gt; ，也就意味着编译器正式停止 &lt;del&gt;照顾&lt;/del&gt; 检查我们的代码。
我们自己必须强制执行一些不变量（invariants），并且非常非常小心，同时让其他人审查（review）我们的工作，
但是依然可能会出错，因为他们也会休息。&lt;/p&gt;
&lt;p&gt;现在，非常棒的是我们可以轮询 &lt;code&gt;a&lt;/code&gt; 。它如果完成会返回 &lt;code&gt;Poll::Ready(Result&amp;lt;AR, E&amp;gt;)&lt;/code&gt; ，
否则就是等会会完成则返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们可以观察到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
		Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
			info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is pending...&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
		}
		Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is ready!&amp;#34;&lt;/span&gt;),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
		},
	}

	todo!()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们通过打印日志“A is pending”知道准备完成。这可能需要几个回合：毕竟，我们正在做一些重要的事情。
我们建立一个 TCP 连接，接着在上面进行 TLS 会话，接着是一些分开的写，最后读到 EOF（end of file）。&lt;/p&gt;
&lt;p&gt;当然，如果我们运行它的话：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;aytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.514  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.523  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.523  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.530  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.530  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.530  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 22:54:14.530  INFO waytoodeep::tj: A is ready!
The application panicked (crashed).
Message:  not yet implemented
Location: src/tj.rs:46

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以看到它确实花费了几个回合。&lt;/p&gt;
&lt;p&gt;注意如果 &lt;code&gt;A&lt;/code&gt; 返回错误我们的代码也会返回 &lt;code&gt;Poll:Ready&lt;/code&gt; ，因为我们想收集 A 和 B 的结果。&lt;/p&gt;
&lt;p&gt;所以我们对 B 做相同的事情：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
		Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
			info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is pending...&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
		}
		Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is ready!&amp;#34;&lt;/span&gt;),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
		},
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b.poll(cx) {
		Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
			info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is pending...&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
		}
		Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is ready!&amp;#34;&lt;/span&gt;),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
		},
	}

	todo!()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后。。whoops：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;RUST_LOG=info cargo run --quiet --release
error[E0382]: use of moved value: `self`
   --&amp;gt; src/tj.rs:46:26
	|
33  |     fn poll(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context&amp;lt;&#39;_&amp;gt;) -&amp;gt; Poll&amp;lt;Self::Output&amp;gt; {
	|             ---- move occurs because `self` has type `Pin&amp;lt;&amp;amp;mut TryJoin&amp;lt;A, B, AR, BR, E&amp;gt;&amp;gt;`, which does not implement the `Copy` trait
34  |         let a = unsafe { self.map_unchecked_mut(|this| &amp;amp;mut this.a) };
	|                               ------------------------------------- `self` moved due to this method call
...
46  |         let b = unsafe { self.map_unchecked_mut(|this| &amp;amp;mut this.a) };
	|                          ^^^^ value used here after move
	|
note: this function takes ownership of the receiver `self`, which moves `self`
   --&amp;gt; /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/pin.rs:776:43
	|
776 |     pub unsafe fn map_unchecked_mut&amp;lt;U, F&amp;gt;(self, func: F) -&amp;gt; Pin&amp;lt;&amp;amp;&#39;a mut U&amp;gt;
	|                                           ^^^^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是的。 &lt;code&gt;map_unchecked_mut&lt;/code&gt; 占有了 &lt;code&gt;self&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;不用担心，我们可以使用 &lt;code&gt;.as_mut()&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//       👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;//                      👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.as_mut().map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
		Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
			info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is pending...&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
		}
		Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is ready!&amp;#34;&lt;/span&gt;),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
		},
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;//                      👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.as_mut().map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b.poll(cx) {
		Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
			info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is pending...&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
		}
		Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is ready!&amp;#34;&lt;/span&gt;),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
		},
	}

	todo!()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是依然无法通过编译：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
(cut)
Jul 25 22:57:07.913  INFO waytoodeep::tj: A is pending...
Jul 25 22:57:07.913  INFO waytoodeep::tj: A is pending...
Jul 25 22:57:07.913  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 22:57:07.913  INFO waytoodeep::tj: A is ready!
The application panicked (crashed).
Message:  `async fn` resumed after completion
Location: src/main.rs:24

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，一旦 &lt;code&gt;Future&lt;/code&gt; 返回 &lt;code&gt;Poll::Ready&lt;/code&gt; 我们就不能再次轮询它了。我们为什么会这样？因为 &lt;code&gt;Future&lt;/code&gt; 已经返回了结果。如果结果是非 &lt;code&gt;Copy&lt;/code&gt; 的，它可能只能返回一次。&lt;/p&gt;
&lt;p&gt;所以，我们需要 1）跟踪 &lt;code&gt;A&lt;/code&gt; 是否完成，然后 2）在某个地方存储它的返回结果。&lt;/p&gt;
&lt;p&gt;我们只需要在我们的结构体中添加一些字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;,
	b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;// 👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	a_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	b_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不要忘记初始化它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	TryJoin {
		a,
		b,
		&lt;span style=&#34;color:#75715e&#34;&gt;// 👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		a_res: None,
		b_res: None,
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在计划是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;a_res&lt;/code&gt; 是 &lt;code&gt;Some&lt;/code&gt; ，然后我们就不需要轮询 &lt;code&gt;a&lt;/code&gt; ,因为它已经完成了&lt;/li&gt;
&lt;li&gt;同样的逻辑处理 &lt;code&gt;b_res&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们实现它。同时，因为我们已经在使用了 &lt;code&gt;unsafe&lt;/code&gt; ，所以我们已经负责维护不变量（invariants），
所以我决定同时固定 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; ，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; {
		(
			Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a),
			Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.b),
		)
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.a_res.is_none() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
			Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending,
			Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
				Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
				Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
			},
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.b_res.is_none() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b.poll(cx) {
			Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending,
			Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
				Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.b_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
				Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
			},
		}
	}

	todo!()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，这个应该能让 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 有机会在我们崩溃之前完成：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:11:03.851  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:11:04.380  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
The application panicked (crashed).
Message:  not yet implemented
Location: src/tj.rs:69

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很好！现在我们需要做的就是解出两个结果并返回它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// instead of the `todo!()`:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (Some(_), Some(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.a_res, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.b_res) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.a_res.take().unwrap();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.b_res.take().unwrap();
	Poll::Ready(Ok((a, b)))
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	Poll::Pending
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以工作：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:13:32.497  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:13:32.829  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:13:32.829  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。但是这不是 &lt;code&gt;try_join&lt;/code&gt; 的实现。我们正在做的和这个完全一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// (pseudo-code, buncha things are missing)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.a.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.b.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	Ok((a, b))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是顺序的执行的。请记住，仅仅是因为 tokio 的执行器可能用了一堆线程并意味着同时运行是自动的。
前面我们不得不使用 &lt;code&gt;tokio::spwan&lt;/code&gt; 或 &lt;code&gt;UnorderedFutures&lt;/code&gt; 或 &lt;code&gt;try_join!&lt;/code&gt; 让其同时运行。&lt;/p&gt;
&lt;p&gt;所以让我们重新看一下。。。当我们轮询 &lt;code&gt;a&lt;/code&gt; 的是后发生了什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.a_res.is_none() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
		Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending,
		Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
		},
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;额，当轮询 &lt;code&gt;a&lt;/code&gt; 的时候返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 时我们也会返回 &lt;code&gt;Poll::Pending&lt;/code&gt;  。所以这就是问题。
如果 &lt;code&gt;a&lt;/code&gt; 正在等待（pending）我们不应该返回。因为如果这时候 &lt;code&gt;b&lt;/code&gt; 已经准备好或者有错误呢？&lt;/p&gt;
&lt;p&gt;或者如果，我们像这样调用 &lt;code&gt;try_join&lt;/code&gt; 呢：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joining...&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
		sleep(Duration::from_millis(&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
		Ok(())
	},
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
		sleep(Duration::from_millis(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
		Err::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(color_eyre::eyre::eyre&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uh oh&amp;#34;&lt;/span&gt;))
	},
)
.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;。。。然后 &lt;code&gt;a&lt;/code&gt; 花费了 2 秒钟才准备好，同时 &lt;code&gt;b&lt;/code&gt; 会在 10毫秒之后返回一个错误，如果我们轮询它！&lt;/p&gt;
&lt;p&gt;嗐，我们并没有：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:19:26.972  INFO waytoodeep: Joining...
Jul 25 23:19:28.990  INFO waytoodeep: All done! res=Err(
   0: uh oh

Location:
   src/main.rs:28
(cut)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（注意时间戳）&lt;/p&gt;
&lt;p&gt;重点是 &lt;code&gt;try_join&lt;/code&gt; 会提前失败：一旦 Future 返回 &lt;code&gt;Result::Err~&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以我们必须同时轮询 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 。好吧。。。不是严格意义的同时。我们必须每次我们的 &lt;code&gt;TryJoin&lt;/code&gt; future 对象被轮询时并发（concurrently）的轮询它们，
直到它们返回结果。&lt;/p&gt;
&lt;p&gt;有一个简单解决办法 &amp;ndash; 在任一 future 对象返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 时不返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;同时，我厌倦了输入 &lt;code&gt;Poll::Ready&lt;/code&gt; 并且 &lt;code&gt;Poll&amp;lt;T&amp;gt;&lt;/code&gt; 实现了 &lt;code&gt;From&amp;lt;T&amp;gt;&lt;/code&gt; ,所以我们可以使用 &lt;code&gt;.into()&lt;/code&gt; 了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; {
		(
			Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a),
			Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.b),
		)
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.a_res.is_none() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.poll(cx) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
				Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
				Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e).into(),
			}
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.b_res.is_none() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b.poll(cx) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
				Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.b_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
				Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e).into(),
			}
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (Some(_), Some(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.a_res, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.b_res) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.a_res.take().unwrap();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.b_res.take().unwrap();
		Ok((a, b)).into()
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		Poll::Pending
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们再次运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:22:40.238  INFO waytoodeep: Joining...
Jul 25 23:22:40.253  INFO waytoodeep: All done! res=Err(
   0: uh oh

Location:
   src/main.rs:28

(cut)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。可以了！我是说它按照预期的失败了。预期的失败就是成功。&lt;/p&gt;
&lt;p&gt;然后我们将这个方法应用到调用 &lt;code&gt;try_join&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joining...&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到竞争又回来了：有时 &lt;code&gt;first&lt;/code&gt; 先完成，有时则不是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:25.925  INFO waytoodeep: Joining...
Jul 25 23:25:26.224  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:26.236  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:26.236  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:26.937  INFO waytoodeep: Joining...
Jul 25 23:25:27.237  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:27.242  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:27.242  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:27.865  INFO waytoodeep: Joining...
Jul 25 23:25:28.164  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:28.818  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:28.818  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:30.153  INFO waytoodeep: Joining...
Jul 25 23:25:31.477  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:31.496  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:31.496  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。同时结果的顺序是正确的。&lt;/p&gt;
&lt;p&gt;非常好，我们实现了它！&lt;/p&gt;
&lt;p&gt;但是！&lt;/p&gt;
&lt;h3 id=&#34;我们可以做的更好&#34;&gt;我们可以做的更好&lt;/h3&gt;
&lt;p&gt;幸运的是，坏就是好。&lt;/p&gt;
&lt;p&gt;下面这个类型困扰着我：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;,
	b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;,
	a_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	b_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我其实只有在 &lt;code&gt;a&lt;/code&gt; 完成后才需要 &lt;code&gt;a_res&lt;/code&gt; 。一旦 &lt;code&gt;a&lt;/code&gt; 完成然后将结果存储到 &lt;code&gt;a_res&lt;/code&gt; ，我们就不再需要 &lt;code&gt;a&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;实际上，甚至我们不应该再碰 &lt;code&gt;a&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;这听起来更像我们要么持有 &lt;code&gt;A&lt;/code&gt; 要么持有 &lt;code&gt;AR&lt;/code&gt; ，但是永远不会同时持有。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SUM TYPES&lt;/code&gt; : Rust 的枚举就是一个汇总类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以！汇总类型。Rust 枚举。这就是我们想要的。让我们创建一个叫做 &lt;code&gt;State&lt;/code&gt; 的类型，然后它有两个变体：
一个用于它还是 future 对象，一个用于它是一个结果。非常简单！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	Future(F),
	Ok(T),
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将会非常棒！&lt;/p&gt;
&lt;p&gt;让我们赋给我们的 &lt;code&gt;TryJoin&lt;/code&gt; 结构体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（是不是非常漂亮）&lt;/p&gt;
&lt;p&gt;然后初始化它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	TryJoin {
		a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(a),
		b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(b),
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常酷。然后我们只需要稍微调整一下我们的 &lt;code&gt;poll&lt;/code&gt; 方法，我们需要将 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 转换为 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; 。。。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是可以的，因为我们承诺维护不变量，也就是说我们不会转移（move） &lt;code&gt;State::Future&lt;/code&gt; 内部。&lt;/p&gt;
&lt;p&gt;然后如果 &lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;State::Future&lt;/code&gt; 我们就轮询它，然后我们再传播错误或者保存它的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(a) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.poll(cx) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
			Ok(t) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(t),
			Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e).into(),
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后同样的修改 &lt;code&gt;b&lt;/code&gt; 。。。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// you can figure that one out, I believe in you
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们就完成了如果它们都是 &lt;code&gt;State::Ok&lt;/code&gt; ！否则我们就返回 &lt;code&gt;Poll::Pending&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (this.a, this.b) {
	(State::Ok(a), State::Ok(b)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok((a, b)).into(),
	_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常好。&lt;/p&gt;
&lt;p&gt;除了它无法通过编译：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
error[E0507]: cannot move out of `this.a` which is behind a mutable reference
  --&amp;gt; src/tj.rs:65:16
   |
65 |         match (this.a, this.b) {
   |                ^^^^^^ move occurs because `this.a` has type `State&amp;lt;A, AR, E&amp;gt;`, which does not implement the `Copy` trait

error[E0507]: cannot move out of `this.b` which is behind a mutable reference
  --&amp;gt; src/tj.rs:65:24
   |
65 |         match (this.a, this.b) {
   |                        ^^^^^^ move occurs because `this.b` has type `State&amp;lt;B, BR, E&amp;gt;`, which does not implement the `Copy` trait

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0507`.
error: could not compile `waytoodeep`

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为。。。我们只有 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; 而不是 &lt;code&gt;Self&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们没有自己的所有权，仅仅是借用我们自己。&lt;/p&gt;
&lt;p&gt;所以，我们不能将将我们的成员转移（move）出去，因为我们不能阻止其他人再次轮询 &lt;code&gt;TryJoin&lt;/code&gt; 。
所以这种情况，我们需要崩溃（panic）。&lt;/p&gt;
&lt;p&gt;当然，如果我们像 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 那样有一个 &lt;code&gt;.take()&lt;/code&gt; 方法事情就会大大简化。
它返回 Option 拥有的任何内容，或者 &lt;code&gt;None&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是我们没有 &lt;code&gt;None&lt;/code&gt; 。我们只有 &lt;code&gt;State::Future&lt;/code&gt; 和 &lt;code&gt;State::OK&lt;/code&gt; ，没有“中立”（neutral）状态。&lt;/p&gt;
&lt;p&gt;让我们创建一个：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	Future(F),
	Ok(T),
	Gone,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我们可以将 &lt;code&gt;this.a&lt;/code&gt; 和 &lt;code&gt;this.b&lt;/code&gt; 替换为 &lt;code&gt;State::Gone&lt;/code&gt; 。。。或者它的返回结果（我们拥有所有权）。
然后我们就可以将它们转移（move）出去。&lt;/p&gt;
&lt;p&gt;但是同时。。。我们需要再次对其进行模式匹配（pattern match）。&lt;/p&gt;
&lt;p&gt;就像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.b) {
	(State::Ok(_), State::Ok(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a, State::Gone) {
			State::Ok(t) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; t,
			_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable!(),
		};
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.b, State::Gone) {
			State::Ok(t) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; t,
			_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable!(),
		};
		Ok((a, b)).into()
	}
	_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实话说。。。我看过更糟的代码。它只是没那么&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t%5Frepeat%5Fyourself&#34;&gt;DRY&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;非常好的实现！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:52:24.097  INFO waytoodeep: Joining...
Jul 25 23:52:25.050  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:52:25.061  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:52:25.061  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看，只有 11ms 的间隔。&lt;/p&gt;
&lt;h3 id=&#34;更进一步&#34;&gt;更进一步？&lt;/h3&gt;
&lt;p&gt;这段代码再次困扰了我：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为现在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 是三态的（tri-state）： &lt;code&gt;Future&lt;/code&gt; 、 &lt;code&gt;Ok&lt;/code&gt; 或者 &lt;code&gt;Gone&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 都是 &lt;code&gt;Gone&lt;/code&gt; 呢？这个状态不合理！&lt;/p&gt;
&lt;p&gt;如果发生了这个状态，我们现在将会永远返回 &lt;code&gt;Poll::Pending&lt;/code&gt; &amp;ndash; 这不太好 &amp;ndash; 一个死锁。&lt;/p&gt;
&lt;p&gt;我们真正想要的是。。。两个枚举。实际上我们想要整个 &lt;code&gt;TryJoin&lt;/code&gt; 类型是一个 &lt;code&gt;enum&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	Polling {
		a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
		b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	},
	Done,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;像这样初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	TryJoin::Polling {
		a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(a),
		b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(b),
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，surprice！ &lt;code&gt;Poll&amp;lt;T&amp;gt;&lt;/code&gt; 实现了 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/ops/trait.Try.html&#34;&gt;Try&lt;/a&gt; trait。所以我们可以使用 &lt;code&gt;?&lt;/code&gt; 。
所以最终我们的代码实际上非常短小：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TryJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; this {
			Self::Polling { a, b } &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a, b),
			Self::Done &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TryJoin future polled after completion&amp;#34;&lt;/span&gt;),
		};

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
				&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
				&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (a, b) {
			(State::Ok(_), State::Ok(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(this, Self::Done) {
				Self::Polling {
					a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(a),
					b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(b),
				} &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok((a, b)).into(),
				_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable!(),
			},
			_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我知道你在想什么。 &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; 不是恰恰用来避免像 &lt;code&gt;std::mem::swap&lt;/code&gt; 和 &lt;code&gt;std::mem::replace&lt;/code&gt; 吗？
这些所有的转移（move）都是围绕着内存！这是被禁止的！是的，我们承诺了不去转移（move）它。
但是在这个情况下，我们只是在完成轮询两个 future 对象后转移了 &lt;code&gt;self&lt;/code&gt; / &lt;code&gt;this&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;然后我们就再也没有使用过两个 future 对象，无论固定还是非固定。同时我们从来也没保证过结果自身是否将要被固定（pinned）！&lt;/p&gt;
&lt;p&gt;我们只需要决定某些东西是“永远固定”还是“永不固定”，然后我们可能会编写结果正确的代码。&lt;/p&gt;
&lt;p&gt;在我们的场景下，只有 &lt;code&gt;TryJoin::Polling(State::Future(_))&lt;/code&gt; 就是“永远固定” 的，其他都不是。&lt;/p&gt;
&lt;p&gt;当然，我们快速的从 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 切换到 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; ，然后又回到 &lt;code&gt;Pin&amp;lt;&amp;amp;mut A&amp;gt;&lt;/code&gt; ，
但只要我们不要在中间移动就没有问题。&lt;/p&gt;
&lt;p&gt;如果我们在持有 future 对象的情况下使用 &lt;code&gt;std::mem:replace&lt;/code&gt; 或 &lt;code&gt;std::mem::swap&lt;/code&gt; 就会不妙。
所以，我们还好，我想，我不太确定。如果不是，有人应该会留言。&lt;/p&gt;
&lt;h3 id=&#34;就这样&#34;&gt;就这样&lt;/h3&gt;
&lt;p&gt;让我们回顾我们的工作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/tj.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{
	future::Future,
	pin::Pin,
	task::{Context, Poll},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	TryJoin::Polling {
		a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(a),
		b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(b),
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	Future(F),
	Ok(T),
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	Polling {
		a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
		b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
	},
	Done,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TryJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
	B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; this {
			Self::Polling { a, b } &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a, b),
			Self::Done &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TryJoin future polled after completion&amp;#34;&lt;/span&gt;),
		};

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
				&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
				&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (a, b) {
			(State::Ok(_), State::Ok(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(this, Self::Done) {
				Self::Polling {
					a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(a),
					b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(b),
				} &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok((a, b)).into(),
				_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable!(),
			},
			_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有我们小小的 HTTPS 客户端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{net::SocketAddr, sync::Arc};
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::{
	io::{AsyncReadExt, AsyncWriteExt},
	net::TcpStream,
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio_rustls::{rustls::ClientConfig, TlsConnector};
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing_subscriber::EnvFilter;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; webpki::DNSNameRef;

&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; tj;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joining...&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

	Ok(())
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[allow(dead_code)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;, Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// look out it&amp;#39;s port 443 now
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addr: &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketAddr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;).into();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TcpStream::connect(addr).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// establish a TLS session...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; connector: &lt;span style=&#34;color:#a6e22e&#34;&gt;TlsConnector&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClientConfig::new();
		config
			.root_store
			.add_server_trust_anchors(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;webpki_roots::TLS_SERVER_ROOTS);
		Arc::new(config).into()
	};
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; dnsname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DNSNameRef::try_from_ascii_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one.one.one.one&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connector.connect(dnsname, socket).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re writing straight to the socket, there&amp;#39;s no buffering
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// so no need to flush
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Host: one.one.one.one&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;User-Agent: cool-bear&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Connection: close&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::with_capacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
	socket.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response.lines().next().unwrap_or_default();
	info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;status, , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got response!&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;// dropping the socket will close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	Ok(name)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
	}
	color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;).is_err() {
		std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
	}
	tracing_subscriber::fmt::fmt()
		.with_env_filter(EnvFilter::from_default_env())
		.init();

	Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it works.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 26 00:08:13.399  INFO waytoodeep: Joining...
Jul 26 00:08:13.707  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 26 00:08:13.709  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 26 00:08:13.710  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2ms 间隔！这是一个新的记录。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>偏序</title>
      <link>https://www.linuxzen.com/notes/notes/20210726080332-%E5%81%8F%E5%BA%8F/</link>
      <pubDate>Mon, 26 Jul 2021 08:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210726080332-%E5%81%8F%E5%BA%8F/</guid>
      <description>偏序集合（英语：Partiallyordered set，简写poset）是数学中，特别是序理论中，指配备了部分排序关系的集合。 这
See also: 偏序关系</description>
      <content>&lt;p&gt;偏序集合（英语：Partiallyordered set，简写poset）是数学中，特别是序理论中，指配备了部分排序关系的集合。 这&lt;/p&gt;
&lt;p&gt;See also: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB&#34;&gt;偏序关系&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>CAP 理论</title>
      <link>https://www.linuxzen.com/notes/notes/20210726072940-cap_%E7%90%86%E8%AE%BA/</link>
      <pubDate>Mon, 26 Jul 2021 07:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210726072940-cap_%E7%90%86%E8%AE%BA/</guid>
      <description>CAP 最初作为一个经验法则提出（20 世纪 70 年代），并没有准确的定义，目的也只是帮助大家深入探讨数据库设计的权衡之道。它由 Eric Brewer 于 2000 年正式命名。
解释一 CAP 定理：不要求线性化的应用更能容忍网络故障。
只要不可靠才诶黄哦，都会发生违背线性化的风险。我们可以做如下权衡：
 如果应用要求线性化，一旦发生网络分区，则必须等待网络修复，或者直接返回错误。结果为服务不可用（保证一致性或者线性化）。 如果应用不要求线性化，且每个可副本独立处理请求。此时服务可用，但结果行为不符合线性化（保证高可用）。  解释二 一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。系统只能支持两个特性。
 这里的分区指网络分区（即网络故障）。
 不过，这种理解存在误导性，网络分区是一种故障，不管喜欢还是不喜欢，它都可能发生，所以无法选择或逃避分区问题。
网络正常的时候，系统可以同时保证一致性（线性化）和可用性。而一旦发生了网络故障，必须要么选择线性（一致性），要么可用性。 也就是“网络分区的情况下”是选择一致还是可用。</description>
      <content>&lt;p&gt;CAP 最初作为一个经验法则提出（20 世纪 70 年代），并没有准确的定义，目的也只是帮助大家深入探讨数据库设计的权衡之道。它由 Eric Brewer 于 2000 年正式命名。&lt;/p&gt;
&lt;h2 id=&#34;解释一&#34;&gt;解释一&lt;/h2&gt;
&lt;p&gt;CAP 定理：不要求线性化的应用更能容忍网络故障。&lt;/p&gt;
&lt;p&gt;只要不可靠才诶黄哦，都会发生违背线性化的风险。我们可以做如下权衡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果应用要求线性化，一旦发生网络分区，则必须等待网络修复，或者直接返回错误。结果为服务不可用（保证一致性或者线性化）。&lt;/li&gt;
&lt;li&gt;如果应用不要求线性化，且每个可副本独立处理请求。此时服务可用，但结果行为不符合线性化（保证高可用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解释二&#34;&gt;解释二&lt;/h2&gt;
&lt;p&gt;一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。系统只能支持两个特性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的分区指网络分区（即网络故障）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过，这种理解存在误导性，网络分区是一种故障，不管喜欢还是不喜欢，它都可能发生，所以无法选择或逃避分区问题。&lt;/p&gt;
&lt;p&gt;网络正常的时候，系统可以同时保证一致性（线性化）和可用性。而一旦发生了网络故障，必须要么选择线性（一致性），要么可用性。
也就是“网络分区的情况下”是选择一致还是可用。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>一致性与共识</title>
      <link>https://www.linuxzen.com/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/</link>
      <pubDate>Sun, 25 Jul 2021 07:26:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/</guid>
      <description>tags: 分布式共识,一致性  一致性保证 分布式一致性主要针对延迟和故障等问题来协调副本之间的状态。
 线性化：最强一致性模型 顺序保证：保证时间顺序，特别是因果关系和全局顺序 最终一致性：一种非常弱的保证，参见最终一致性效应  可线性化 分布式语义下对寄存器（单个对象）顺序的读写。应区别与可串行化。
 可串行化针对不同事务的隔离，用来确保事务执行的结果与串形执行的结果相同 可线性化是读写寄存器（单个对象）的最新值的保证。  线性化依赖的条件 加锁与主节点选举 每个启动节点都试图获得锁，其中只有一个可以成功成为主节点。通过加锁来保证主节点选举「线性化」。
约束与唯一性保证 同一个用户名、电子邮件或系统中文件名需要唯一性的保证，也应该进行「线性化」。
跨通道的时间依赖 系统中存在其他通信渠道也需要「线性化」。
实现线性化系统  主从复制（部分支持可线性化） 共识算法（可线性化） 多主复制（不可线性化） 无主复制（可能不可线性化）  线性化与Quorum 一致性 Dynamo 风格的复制模型，读写遵从严格的 quorum 是无法支持可线性化的。
线性化的代价 多主复制和主从复制，网络中断都会导致同步暂停，从而无法保证客户端要求的线性化读写。
CAP 理论 可线性化与网络延迟 很少有系统真正满足线性化，现代多个 CPU 对同一个内存地址的读写都不能满足（参见硬件内存模型），如果需要强一致则需要内存屏障（栅栏）指令。
之所以放弃线性化的原因就是性能，而不是为了容错。由于网络延迟的不确定性，无论是否发生网络故障，线性化对性能的影响都是巨大的。
顺序保证 顺序与因果关系 顺序有助于保持因果关系。
 因果顺序并非全序：因果关系是小范围集合的偏序，可线性化是一个全序操作。 可线性化强于因果一致性 捕获因果依赖关系：检测并发写  序列号排序 非因果序列发生器 适用于系统不存在唯一主节点。
 每个节点都独立产生自己的一组序列号：一个奇数一个偶数，或者切入节点唯一标识符。 用足够高的分辨率的墙上时间戳附加到每个操作上。 预先分配区间范围，并及时扩容。  Lamport 时间戳 可以产生因果关系一致的序列号。Lamport 时间戳是一个值对 （计数器，节点 ID） ：
 节点 ID：每个节点都有一个唯一标志符。 计数器：每个节点都有一个计数器记录各自处理的请求总数。  优点：</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一致性保证&#34;&gt;一致性保证&lt;/h2&gt;
&lt;p&gt;分布式一致性主要针对延迟和故障等问题来协调副本之间的状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性化：最强一致性模型&lt;/li&gt;
&lt;li&gt;顺序保证：保证时间顺序，特别是因果关系和全局顺序&lt;/li&gt;
&lt;li&gt;最终一致性：一种非常弱的保证，参见&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/&#34;&gt;最终一致性效应&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可线性化&#34;&gt;可线性化&lt;/h2&gt;
&lt;p&gt;分布式语义下对寄存器（单个对象）顺序的读写。应区别与可&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/&#34;&gt;串行化&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可串行化针对不同事务的隔离，用来确保事务执行的结果与串形执行的结果相同&lt;/li&gt;
&lt;li&gt;可线性化是读写寄存器（单个对象）的最新值的保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线性化依赖的条件&#34;&gt;线性化依赖的条件&lt;/h3&gt;
&lt;h4 id=&#34;加锁与主节点选举&#34;&gt;加锁与主节点选举&lt;/h4&gt;
&lt;p&gt;每个启动节点都试图获得锁，其中只有一个可以成功成为主节点。通过加锁来保证主节点选举「线性化」。&lt;/p&gt;
&lt;h4 id=&#34;约束与唯一性保证&#34;&gt;约束与唯一性保证&lt;/h4&gt;
&lt;p&gt;同一个用户名、电子邮件或系统中文件名需要唯一性的保证，也应该进行「线性化」。&lt;/p&gt;
&lt;h4 id=&#34;跨通道的时间依赖&#34;&gt;跨通道的时间依赖&lt;/h4&gt;
&lt;p&gt;系统中存在其他通信渠道也需要「线性化」。&lt;/p&gt;
&lt;h3 id=&#34;实现线性化系统&#34;&gt;实现线性化系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主从复制（部分支持可线性化）&lt;/li&gt;
&lt;li&gt;共识算法（可线性化）&lt;/li&gt;
&lt;li&gt;多主复制（不可线性化）&lt;/li&gt;
&lt;li&gt;无主复制（可能不可线性化）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线性化与-quorum-一致性--20210615211745-quorum-一致性-dot-md&#34;&gt;线性化与&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;Quorum 一致性&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Dynamo 风格的复制模型，读写遵从严格的 quorum 是无法支持可线性化的。&lt;/p&gt;
&lt;h3 id=&#34;线性化的代价&#34;&gt;线性化的代价&lt;/h3&gt;
&lt;p&gt;多主复制和主从复制，网络中断都会导致同步暂停，从而无法保证客户端要求的线性化读写。&lt;/p&gt;
&lt;h3 id=&#34;cap-理论--20210726072940-cap-理论-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210726072940-cap_%E7%90%86%E8%AE%BA/&#34;&gt;CAP 理论&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;可线性化与网络延迟&#34;&gt;可线性化与网络延迟&lt;/h3&gt;
&lt;p&gt;很少有系统真正满足线性化，现代多个 CPU 对同一个内存地址的读写都不能满足（参见&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;硬件内存模型&lt;/a&gt;），如果需要强一致则需要内存屏障（栅栏）指令。&lt;/p&gt;
&lt;p&gt;之所以放弃线性化的原因就是性能，而不是为了容错。由于网络延迟的不确定性，无论是否发生网络故障，线性化对性能的影响都是巨大的。&lt;/p&gt;
&lt;h2 id=&#34;顺序保证&#34;&gt;顺序保证&lt;/h2&gt;
&lt;h3 id=&#34;顺序与因果关系&#34;&gt;顺序与因果关系&lt;/h3&gt;
&lt;p&gt;顺序有助于保持因果关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因果顺序并非全序：因果关系是小范围集合的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210726080332-%E5%81%8F%E5%BA%8F/&#34;&gt;偏序&lt;/a&gt;，可线性化是一个&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210727073548-%E5%85%A8%E5%BA%8F/&#34;&gt;全序&lt;/a&gt;操作。&lt;/li&gt;
&lt;li&gt;可线性化强于因果一致性&lt;/li&gt;
&lt;li&gt;捕获因果依赖关系：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/&#34;&gt;检测并发写&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;序列号排序&#34;&gt;序列号排序&lt;/h3&gt;
&lt;h4 id=&#34;非因果序列发生器&#34;&gt;非因果序列发生器&lt;/h4&gt;
&lt;p&gt;适用于系统不存在唯一主节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点都独立产生自己的一组序列号：一个奇数一个偶数，或者切入节点唯一标识符。&lt;/li&gt;
&lt;li&gt;用足够高的分辨率的墙上时间戳附加到每个操作上。&lt;/li&gt;
&lt;li&gt;预先分配区间范围，并及时扩容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lamport-时间戳&#34;&gt;Lamport 时间戳&lt;/h4&gt;
&lt;p&gt;可以产生因果关系一致的序列号。Lamport 时间戳是一个值对 &lt;code&gt;（计数器，节点 ID）&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点 ID：每个节点都有一个唯一标志符。&lt;/li&gt;
&lt;li&gt;计数器：每个节点都有一个计数器记录各自处理的请求总数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个节点可能存在相同的计数器，但是时间戳中的节点 ID 可以确保每个时间戳都是唯一的。&lt;/li&gt;
&lt;li&gt;保证&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210727073548-%E5%85%A8%E5%BA%8F/&#34;&gt;全序&lt;/a&gt;：比较两个 Lamport 时间戳，计数器较大的时间戳越大，计数器相同则节点 ID 大的那个时间戳越大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过节点排序保证了全局因果关系。Lamport 不同于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/#版本矢量&#34;&gt;版本矢量&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本矢量用以区分两个操作是并发还是因果依赖。&lt;/li&gt;
&lt;li&gt;Lamport 时间戳主要用于确保全序关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间戳依然不够&#34;&gt;时间戳依然不够&lt;/h4&gt;
&lt;p&gt;某些场景下全序关系依然不能满足需求，比如用户名唯一性要求，为了确认用户名唯一，需要获取所有节点正在进行的请求，查看有没有相同的用户名请求，才能建立全序关系。&lt;/p&gt;
&lt;h3 id=&#34;全序关系广播&#34;&gt;全序关系广播&lt;/h3&gt;
&lt;p&gt;分布式系统面临的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统中让所有节点就全序关系达成一致。&lt;/li&gt;
&lt;li&gt;如何扩展系统的吞吐量使之突破单一主节点的限制。&lt;/li&gt;
&lt;li&gt;如何处理主节点失效时的故障切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全序关系广播通常指节点之间交换消息的某种协议。需要满足两个基本安全属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可靠发送：没有消息丢失，一定发送到所有节点。&lt;/li&gt;
&lt;li&gt;严格有序：消息总是以相同顺序发送给每个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;全系关系广播使用场景&#34;&gt;全系关系广播使用场景&lt;/h4&gt;
&lt;p&gt;ZooKeeper 和 etcd 这样的共识服务实际上就实现了全序关系广播。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库复制：通过消息传递代表数据库写请求，让每个副本按照相同的顺序处理写请求，那么副本可以保持一致。&lt;/li&gt;
&lt;li&gt;可串形化事务：通过消息表示确定性事务并且作为存储过程来执行，切每个节点都遵从相同的执行顺序。&lt;/li&gt;
&lt;li&gt;提供 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/&#34;&gt;Fencing 令牌&lt;/a&gt;的锁服务：每个获取锁的请求都作为消息附加到日志中，所有消息按照日志中的顺序一次编号。（ZooKeeper 的 zxid）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;全序关系广播和可线性化&#34;&gt;全序关系广播和可线性化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;全系关系广播：基于异步模型，保证消息以固定顺序可靠的发送，但是不保证消息何时发送成功&lt;/li&gt;
&lt;li&gt;可线性化强调就近性：读取时保证能够看到最新写入值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;采用全序关系广播实现线性化存储&#34;&gt;采用全序关系广播实现线性化存储&lt;/h4&gt;
&lt;p&gt;可以通过使用全序关系广播以追加日志的方式来实现线性化的原子&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210728070407-%E6%AF%94%E8%BE%83_%E8%AE%BE%E7%BD%AE/&#34;&gt;比较-设置&lt;/a&gt;操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;日志中追加一条消息，并指明用户名&lt;/li&gt;
&lt;li&gt;读取日志，将其广播给所有节点，并等待回复&lt;/li&gt;
&lt;li&gt;检查是否有任何消息声称改用户名已被注册。如果第一条这样的回复来自当前节点，那么就成功获取用户名。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此过程只保证了线性化写入，无法保证线性化读取，这里只提供了&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;有时也成为&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;时间线一致性&lt;/a&gt;，弱与线性化的保证。&lt;/p&gt;
&lt;p&gt;满足线性化读取的方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ectd 的 quorum 读取：追加的方式把读取请求排序、广播，然后各个节点获取该日志，当本节点收到消息时才执行真正的操作。&lt;/li&gt;
&lt;li&gt;ZooKeeper 的 sync() 操作：如果可以以线性化的方式获取当前最新日志中的消息的位置，则查询位置，等待直到该位置之前的所有条目都已经发送给你，接下来再执行读取。&lt;/li&gt;
&lt;li&gt;可以从同步更新的副本上进行读取，这样确保总是读取最新值。这种技术可以用于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210728071508-%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6/&#34;&gt;链式复制&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;采用线性化存储实现全序关系广播&#34;&gt;采用线性化存储实现全序关系广播&lt;/h4&gt;
&lt;p&gt;通过线性化存储递增一个计数，相比于 &lt;a href=&#34;#lamport-%E6%97%B6%E9%97%B4%E6%88%B3&#34;&gt;Lamport 时间戳&lt;/a&gt; 其具有连续性，可以检测消息可靠性。&lt;/p&gt;
&lt;p&gt;实现线性化存储难点是失效。&lt;/p&gt;
&lt;h2 id=&#34;分布式事务与共识&#34;&gt;分布式事务与共识&lt;/h2&gt;
&lt;p&gt;共识问题是分布式计算中最重要也是最基本的问题之一。&lt;/p&gt;
&lt;p&gt;很多重要的场景需要集群节点达成一致，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主节点选举：脑裂。&lt;/li&gt;
&lt;li&gt;原子事务提交：跨节点或跨分区事务提交。所有节点要么全部成功，要么全部中止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原子提交与两阶段提交&#34;&gt;原子提交与两阶段提交&lt;/h3&gt;
&lt;h4 id=&#34;两阶段提交&#34;&gt;两阶段提交&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/&#34;&gt;分布式共识&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2PC 是一种在多节点之间实现事务原子提交的算法，用来确保所有节点要么全部提交，要么全部中止。&lt;/p&gt;
&lt;p&gt;不同于单节点上请求提交，2PC 中的提交/中止过程分为两个阶段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要混淆 2PC 和 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/&#34;&gt;2PL&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2PL 引入了新的组件：协调者（也称为事务管理器）。协调者通常实现为共享库，运行在请求事务相同进程中，但也可以是单独的进程或服务。&lt;/p&gt;
&lt;p&gt;数据库节点称为事务中的参与者。当应用程序准备提交事务时，协调者开始阶段1:发送一个准备请求到所有节点，询问它们是否可以提交。协调者然后跟踪参与者的回应：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部回应「是」：表示准备好提交，协调者开始阶段 2 ，提交开始实际执行。&lt;/li&gt;
&lt;li&gt;任何回应「否」：协调者发送放弃请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实践中的分布式事务&#34;&gt;实践中的分布式事务&lt;/h3&gt;
&lt;p&gt;目前两种截然不同的分布式事务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据库内部的分布式事务：所有节点运行相同的软件，协议也是内部的无需考虑兼容性。&lt;/li&gt;
&lt;li&gt;异构分布式事务：存在两种或两种以上的不同参与者实现技术。即使完全不同的系统，跨系统的分布式事务必须确保原子提交。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;异构分布式事务充满挑战。&lt;/p&gt;
&lt;h4 id=&#34;exactly-once-消息处理&#34;&gt;Exactly-once 消息处理&lt;/h4&gt;
&lt;p&gt;异构分布式事务旨在无缝集成多种不同的系统。消息队列通过自动提交消息和消息处理结果，可以确保消息可以有效处理有且仅有一次。
让系统可以进行安全的重试，来保持原子性。&lt;/p&gt;
&lt;h4 id=&#34;x-a-交易&#34;&gt;X/A 交易&lt;/h4&gt;
&lt;p&gt;X/Open XA（eXtend Architectrue，XA）是异构环境下实施两阶段提交的一个工业标准。其并不是一个网络协议，而是一个 C API。
XA 假定应用程序通过网络或者客户端库函数与参与者节点进行通信。事务协调者需要实现 XA API。&lt;/p&gt;
&lt;p&gt;应用程序崩溃，事务日志保存在应用服务本地磁盘，需要重启崩溃节点，XA API 读取日志，进而恢复事务的决定。&lt;/p&gt;
&lt;h4 id=&#34;停顿扔持有锁&#34;&gt;停顿扔持有锁&lt;/h4&gt;
&lt;h4 id=&#34;从协调者故障恢复&#34;&gt;从协调者故障恢复&lt;/h4&gt;
&lt;p&gt;启发式决策：参与者节点可以在紧急情况下单方面做出决定，放弃或者继续那些停顿的事务，而不需要等到协调者发出指令。&lt;/p&gt;
&lt;h4 id=&#34;分布式事务限制&#34;&gt;分布式事务限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果协调者不支持数据复制，会造成单点故障。&lt;/li&gt;
&lt;li&gt;破坏现在很多 HTTP 服务的无状态特性。&lt;/li&gt;
&lt;li&gt;X/A 需要保持多系统可兼容的最低标准，来兼容各种数据系统，无法实现诸如死锁检测和 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/&#34;&gt;SSI&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;分布式事务有扩大事务失败的风险，与构建容错系统背道而驰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支持容错的共识&#34;&gt;支持容错的共识&lt;/h3&gt;
&lt;p&gt;共识就是让几个节点就某项协议达成一致。&lt;/p&gt;
&lt;p&gt;需要满足的性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协商一致性（Uniform agreement）：所有节点都接受相同的决议。共识的核心思想：决定一致的结果，一旦决定，就不能改变。&lt;/li&gt;
&lt;li&gt;诚实性（Integrity）：所有节点不能反悔，即对某一些提议不能有两次决定。&lt;/li&gt;
&lt;li&gt;合法性（Validity）：如果决定了值 v，则 v 一定是由某个节点锁提议的。&lt;/li&gt;
&lt;li&gt;可终止性：节点如果不崩溃则最终一定可以达成决议。引入容错思想：强调共识算法不能原地空转，必须取得实质性的进展。属于一种活性（&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/#知识-真相与谎言&#34;&gt;安全性和活性&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分节点都正常运行才能确保可终止性，这个多数就可能安全的构成 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;quorum&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可终止性的前提下，发生崩溃或者不可用的节点数必须小于半数节点。&lt;/p&gt;
&lt;p&gt;大多数共识算法都假定系统不存在&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/&#34;&gt;拜占庭故障&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;共识算法与全序广播&#34;&gt;共识算法与全序广播&lt;/h4&gt;
&lt;p&gt;最著名的容错式共识算法包括：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075128-vsr/&#34;&gt;VSR&lt;/a&gt;、&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075140-paxos/&#34;&gt;Paxos&lt;/a&gt;、&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075154-raft/&#34;&gt;Raft&lt;/a&gt; 和 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075206-zab/&#34;&gt;Zab&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这些算法实际上并没有直接采用上述的形式化模型：提议一个值，同时满足上面 4 个属性。
相反，他们是决定一个值，然后采用&lt;a href=&#34;#%E5%85%A8%E5%BA%8F%E5%85%B3%E7%B3%BB%E5%B9%BF%E6%92%AD&#34;&gt;全序关系广播&lt;/a&gt;算法：在每一轮中，节点提出他们接下来想要发送的消息，然后决定下一个消息的全局顺序。&lt;/p&gt;
&lt;p&gt;全序广播相当于持续多轮共识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由与协商一致性，所有节点决定以相同的顺序发送相同的消息。&lt;/li&gt;
&lt;li&gt;由于诚实性，消息不能重复。&lt;/li&gt;
&lt;li&gt;由于合法性，消息不会被破坏，也不是凭空捏造。&lt;/li&gt;
&lt;li&gt;由于可终止性，消息不会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全序关系广播比重复性的一轮共识只解决一个提议更加高效（VSR、Raft 和 Zab，Paxos 对应的是其优化版本 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210731075851-multi_paxios/&#34;&gt;Multi-Paxios）&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;主从复制与共识&#34;&gt;主从复制与共识&lt;/h4&gt;
&lt;p&gt;主从复制的主节点一般是有运维人员手动选择和配置的，是一个独裁性质的“一致性算法”。
如果支持自动选举主节点和切换，这样更接近容错式全序广播，从而达成共识。&lt;/p&gt;
&lt;p&gt;共识面临选举一个主节点需要一个主节点。要解决共识，必须先处理共识。&lt;/p&gt;
&lt;h4 id=&#34;epoch-和-quorum&#34;&gt;Epoch 和 Quorum&lt;/h4&gt;
&lt;p&gt;共识算法协议采用了一种弱化保证：协议定义了一个世代编号（epoch number，Paxos 的 ballot number，VSP 的 view number，Raft 中的 term number），
并保证在每个世代里，主节点是唯一确定的。&lt;/p&gt;
&lt;p&gt;如果当前主节点失效，节点就开始一轮投票。选举会赋予一个单调递增的 epoch 号。&lt;/p&gt;
&lt;p&gt;主节点如果想做某个决定，需将提议发送给其他所有节点，等待 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;quorum&lt;/a&gt; 节点响应。&lt;/p&gt;
&lt;p&gt;两轮不同的投票：首先决定谁是主节点，然后对主节点的提议进行投票。&lt;/p&gt;
&lt;p&gt;和 &lt;a href=&#34;#%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4&#34;&gt;2PC&lt;/a&gt; 最大的区别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2PC 的协调者不依靠选举产生。&lt;/li&gt;
&lt;li&gt;2PC 要求每个参与者都必须做出“是”，容错共识算法只需要收到多数节点的投票结果即可通过决议。&lt;/li&gt;
&lt;li&gt;共识算法定义了恢复过程，出现故障可重新选举主节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;共识的局限性&#34;&gt;共识的局限性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;节点投票过程是一个同步复制过程。&lt;/li&gt;
&lt;li&gt;许多严格的多数节点才能允许。3节点允许1节点失效、5/2。&lt;/li&gt;
&lt;li&gt;多数共识算法假定一组固定参与投票的节点集，无法动态缩扩容。&lt;/li&gt;
&lt;li&gt;依靠超时来检测节点失效。&lt;/li&gt;
&lt;li&gt;对网络特别敏感，比如 Raft 中两个节点如果网络持续不可靠会出现主从反复切换，从而性能下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成员协调服务&#34;&gt;成员协调服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ZooKeeper&lt;/li&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将成千上万节点的共识交由像 ZooKeeper 这样由三五节点组成的共识代理大大提高性能。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>拜占庭故障</title>
      <link>https://www.linuxzen.com/notes/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/</link>
      <pubDate>Thu, 22 Jul 2021 08:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/</guid>
      <description>节点撒谎伪造 Fencing 令牌，或者部分节点故障、不遵从协议、干扰网络或者恶意攻击，则为「拜占庭故障」。 如果系统仍可以继续运行，那么我们称之为「拜占庭式容错系统」。</description>
      <content>&lt;p&gt;节点撒谎伪造 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/&#34;&gt;Fencing 令牌&lt;/a&gt;，或者部分节点故障、不遵从协议、干扰网络或者恶意攻击，则为「拜占庭故障」。
如果系统仍可以继续运行，那么我们称之为「拜占庭式容错系统」。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fencing 令牌</title>
      <link>https://www.linuxzen.com/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/</link>
      <pubDate>Thu, 22 Jul 2021 07:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/</guid>
      <description>Fencing（围栏）锁，每次锁服务授予锁时，同时返回 fencing 令牌，每次客户端发送写请求，都必须包含所持有的 fencing 令牌。
fencing 令牌单调递增，如果低版本的写入后到达，发现已经有高版本的 fencing 令牌写入，则拒绝此次写入。</description>
      <content>&lt;p&gt;Fencing（围栏）锁，每次锁服务授予锁时，同时返回 fencing 令牌，每次客户端发送写请求，都必须包含所持有的 fencing 令牌。&lt;/p&gt;
&lt;p&gt;fencing 令牌单调递增，如果低版本的写入后到达，发现已经有高版本的 fencing 令牌写入，则拒绝此次写入。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>单调时钟与墙上时钟</title>
      <link>https://www.linuxzen.com/notes/notes/20210722073012-%E5%8D%95%E8%B0%83%E6%97%B6%E9%92%9F%E4%B8%8E%E5%A2%99%E4%B8%8A%E6%97%B6%E9%92%9F/</link>
      <pubDate>Thu, 22 Jul 2021 07:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210722073012-%E5%8D%95%E8%B0%83%E6%97%B6%E9%92%9F%E4%B8%8E%E5%A2%99%E4%B8%8A%E6%97%B6%E9%92%9F/</guid>
      <description>墙上时钟 根据某个日历返回当前的日期与时间。
 Linux 上的 clock_gettime(CLOCK_REALTIME) Java 中的 System.currentTimeMills()  会返回 1970-01-01（UTC）的时间戳（秒和毫秒）。
墙上时钟会和 NTP 服务器同步产生跳跃导致一些奇怪的问题。
单调时钟 更适合测量持续时间段（时间间隔），如超时或服务的响应时间。保证总是向前（不会出现墙上时钟的回拨现象）。
 Linux 上的 clock_gettime(CLOCK_MONOTONIC) Java 中的 System.nanoTime()  单调时钟多个节点的对比没有任何意义，多路 CPU 可能有单独的计时器，且不与其他 CPU 进行同步。由操作系统进行补偿它们之间的偏差。
NTP 检测到本地石英比时间服务器更快或者更慢，NTP 会调整本地石英的震动频率（摆动），最大幅度为 0.05%。 NTP 并不会直接调整单调时钟向前或回拨 。</description>
      <content>&lt;h2 id=&#34;墙上时钟&#34;&gt;墙上时钟&lt;/h2&gt;
&lt;p&gt;根据某个日历返回当前的日期与时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 上的 &lt;code&gt;clock_gettime(CLOCK_REALTIME)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Java 中的 &lt;code&gt;System.currentTimeMills()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;会返回 1970-01-01（UTC）的时间戳（秒和毫秒）。&lt;/p&gt;
&lt;p&gt;墙上时钟会和 NTP 服务器同步产生跳跃导致一些奇怪的问题。&lt;/p&gt;
&lt;h2 id=&#34;单调时钟&#34;&gt;单调时钟&lt;/h2&gt;
&lt;p&gt;更适合测量持续时间段（时间间隔），如超时或服务的响应时间。保证总是向前（不会出现墙上时钟的回拨现象）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 上的 &lt;code&gt;clock_gettime(CLOCK_MONOTONIC)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Java 中的 &lt;code&gt;System.nanoTime()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单调时钟多个节点的对比没有任何意义，多路 CPU 可能有单独的计时器，且不与其他 CPU 进行同步。由操作系统进行补偿它们之间的偏差。&lt;/p&gt;
&lt;p&gt;NTP 检测到本地石英比时间服务器更快或者更慢，NTP 会调整本地石英的震动频率（摆动），最大幅度为 0.05%。 &lt;strong&gt;&lt;strong&gt;NTP 并不会直接调整单调时钟向前或回拨&lt;/strong&gt;&lt;/strong&gt; 。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 47. Permutations II</title>
      <link>https://www.linuxzen.com/notes/notes/20210721073657-leetcode_47_permutations_ii/</link>
      <pubDate>Wed, 21 Jul 2021 07:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210721073657-leetcode_47_permutations_ii/</guid>
      <description>tags: LeetCode  视频解析：https://www.youtube.com/watch?v=s7AvT7cGdSo
在 LeetCode: 46. Permutations 的基础上增加重复的元素。感觉不能依赖于 track + map 的去重逻辑回溯。
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; } }; 数据特征：
Value: 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, Index: 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { set&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ret; int n, i; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; perms; if (nums.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视频解析：&lt;a href=&#34;https://www.youtube.com/watch?v=s7AvT7cGdSo&#34;&gt;https://www.youtube.com/watch?v=s7AvT7cGdSo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210719073125-leetcode_46_permutations/&#34;&gt;LeetCode: 46. Permutations&lt;/a&gt; 的基础上增加重复的元素。感觉不能依赖于 &lt;code&gt;track&lt;/code&gt; + &lt;code&gt;map&lt;/code&gt; 的去重逻辑回溯。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; permuteUnique(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;

	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据特征：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Value: 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,
Index: 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0,
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; permuteUnique(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ret;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, i;
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; perms;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			ret.push_back(nums);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums.back();
			nums.pop_back();
			perms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; permuteUnique(nums);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; perm : perms) {
				perm.push_back(n);
				res.insert(perm);
			}
			nums.insert(nums.begin(), n);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; r : res) {
			ret.push_back(r);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>分布式系统挑战</title>
      <link>https://www.linuxzen.com/notes/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/</link>
      <pubDate>Wed, 21 Jul 2021 06:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/</guid>
      <description>tags: 分布式  故障与部分失效 单节点一般是要么工作要么失效，但是分布式系统多节点面临部分失效，大大提高了分布式系统的复杂性。
单节点软件特性：
 硬件正常工作时，相同的操作通常总会产生相同的结果，即确定性。 如果发生了某种内部错误，我们宁愿使计算机全部崩溃，而不是返回一个错误的结果。  云计算和超算  超算：垂直扩展的极端，设置检查点，一点节点故障则全部失效从上一个检查点重新开始（离线批处理），类似单机上内核崩溃。 云计算：水平扩展的极端 传统企业位于两个极端的中间  分布式可靠必然面临部分失效，需要依赖软件系统来提供容错机制。我们需要在不可靠的组件上构建可靠的系统。
不可靠网络  分布式无共享系统：成本低廉。 互联网以及大多数 IDC 内部网络都是异步网络：不保证发送一定到达（排队），等待响应时可能出现任何错误。  现实中的网络故障非常普遍 故障检测：HA、主从切换、保活机制（ICMP，SYN） 超时与无限期的延迟 网络拥塞与排队  网络负载过高会出现拥塞。 数据在发送的过程中分别会在发送端和接收端进行排队：等待发送和等待处理。 TCP 的拥塞控制机制。 虚拟化 CPU 核切换虚拟机  同步与异步网络  同步网络：固定电话网络，一路电话分配固定的电路、有带宽保证，规定延迟内保证完成数据包发送，不会丢弃数据包，成本高，利用率低 异步网络：数据中心网络，共享带宽，无法保证延迟和数据包发送，成本低廉，利用率高  不可靠时钟 单调时钟与墙上时钟 时间同步与准确性  计算机中的石英钟不够精确 NTP 服务器不稳定（网络、防火墙或服务本身） 虚拟机中时钟是虚拟化的。 终端设备不可控：休眠、故意设置  依赖同步的时钟 时钟陷阱：
 一天可能不总是 86400 秒 回拨 多个节点上的时间完全不相同  需要精确同步的时钟：
 自己监控所有节点上的时钟偏差 某个节点时钟漂移超出上限则将其宣告失效  时间戳与时间顺序  最后写入者获胜  时钟的置信区间 通过直接安装 GPS 接收器或原子（铯）时钟，它的误差范围通常可以查询制造商手册。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;故障与部分失效&#34;&gt;故障与部分失效&lt;/h2&gt;
&lt;p&gt;单节点一般是要么工作要么失效，但是分布式系统多节点面临部分失效，大大提高了分布式系统的复杂性。&lt;/p&gt;
&lt;p&gt;单节点软件特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件正常工作时，相同的操作通常总会产生相同的结果，即确定性。&lt;/li&gt;
&lt;li&gt;如果发生了某种内部错误，我们宁愿使计算机全部崩溃，而不是返回一个错误的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云计算和超算&#34;&gt;云计算和超算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;超算：垂直扩展的极端，设置检查点，一点节点故障则全部失效从上一个检查点重新开始（离线批处理），类似单机上内核崩溃。&lt;/li&gt;
&lt;li&gt;云计算：水平扩展的极端&lt;/li&gt;
&lt;li&gt;传统企业位于两个极端的中间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式可靠必然面临部分失效，需要依赖软件系统来提供容错机制。我们需要在不可靠的组件上构建可靠的系统。&lt;/p&gt;
&lt;h2 id=&#34;不可靠网络&#34;&gt;不可靠网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分布式无共享系统：成本低廉。&lt;/li&gt;
&lt;li&gt;互联网以及大多数 IDC 内部网络都是异步网络：不保证发送一定到达（排队），等待响应时可能出现任何错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;现实中的网络故障非常普遍&#34;&gt;现实中的网络故障非常普遍&lt;/h3&gt;
&lt;h3 id=&#34;故障检测-ha-主从切换-保活机制-icmp-syn&#34;&gt;故障检测：HA、主从切换、保活机制（ICMP，SYN）&lt;/h3&gt;
&lt;h3 id=&#34;超时与无限期的延迟&#34;&gt;超时与无限期的延迟&lt;/h3&gt;
&lt;h4 id=&#34;网络拥塞与排队&#34;&gt;网络拥塞与排队&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;网络负载过高会出现拥塞。&lt;/li&gt;
&lt;li&gt;数据在发送的过程中分别会在发送端和接收端进行排队：等待发送和等待处理。&lt;/li&gt;
&lt;li&gt;TCP 的拥塞控制机制。&lt;/li&gt;
&lt;li&gt;虚拟化 CPU 核切换虚拟机&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步与异步网络&#34;&gt;同步与异步网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同步网络：固定电话网络，一路电话分配固定的电路、有带宽保证，规定延迟内保证完成数据包发送，不会丢弃数据包，成本高，利用率低&lt;/li&gt;
&lt;li&gt;异步网络：数据中心网络，共享带宽，无法保证延迟和数据包发送，成本低廉，利用率高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不可靠时钟&#34;&gt;不可靠时钟&lt;/h2&gt;
&lt;h3 id=&#34;单调时钟与墙上时钟--20210722073012-单调时钟与墙上时钟-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210722073012-%E5%8D%95%E8%B0%83%E6%97%B6%E9%92%9F%E4%B8%8E%E5%A2%99%E4%B8%8A%E6%97%B6%E9%92%9F/&#34;&gt;单调时钟与墙上时钟&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;时间同步与准确性&#34;&gt;时间同步与准确性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;计算机中的石英钟不够精确&lt;/li&gt;
&lt;li&gt;NTP 服务器不稳定（网络、防火墙或服务本身）&lt;/li&gt;
&lt;li&gt;虚拟机中时钟是虚拟化的。&lt;/li&gt;
&lt;li&gt;终端设备不可控：休眠、故意设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;依赖同步的时钟&#34;&gt;依赖同步的时钟&lt;/h3&gt;
&lt;p&gt;时钟陷阱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一天可能不总是 86400 秒&lt;/li&gt;
&lt;li&gt;回拨&lt;/li&gt;
&lt;li&gt;多个节点上的时间完全不相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要精确同步的时钟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己监控所有节点上的时钟偏差&lt;/li&gt;
&lt;li&gt;某个节点时钟漂移超出上限则将其宣告失效&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;时间戳与时间顺序&#34;&gt;时间戳与时间顺序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/&#34;&gt;最后写入者获胜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时钟的置信区间&#34;&gt;时钟的置信区间&lt;/h4&gt;
&lt;p&gt;通过直接安装 GPS 接收器或原子（铯）时钟，它的误差范围通常可以查询制造商手册。&lt;/p&gt;
&lt;h4 id=&#34;全局快照的同步时钟&#34;&gt;全局快照的同步时钟&lt;/h4&gt;
&lt;p&gt;Google Spanner 根据部署了 GPS 接收器或者原子时钟的 TrueTime API 返回的时钟置信区间。确保读事务足够晚发生，避免与先前事务的置信区间产生重叠。&lt;/p&gt;
&lt;h3 id=&#34;进程暂停&#34;&gt;进程暂停&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;垃圾回收&lt;/li&gt;
&lt;li&gt;虚拟化暂停虚拟机&lt;/li&gt;
&lt;li&gt;磁盘 I/O&lt;/li&gt;
&lt;li&gt;内存交换分区&lt;/li&gt;
&lt;li&gt;手动暂停进程（SIGSTOP/SIGCONT）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;响应时间保证&#34;&gt;响应时间保证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RTOS 系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调整垃圾回收的影响&#34;&gt;调整垃圾回收的影响&lt;/h3&gt;
&lt;h2 id=&#34;知识-真相与谎言&#34;&gt;知识，真相与谎言&lt;/h2&gt;
&lt;h3 id=&#34;真相由多数决定-quorum-一致性--20210615211745-quorum-一致性-dot-md&#34;&gt;真相由多数决定：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;Quorum 一致性&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;主节点与锁&#34;&gt;主节点与锁&lt;/h4&gt;
&lt;h4 id=&#34;fencing-令牌--20210722075942-fencing-令牌-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/&#34;&gt;Fencing 令牌&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;拜占庭故障--20210722080226-拜占庭故障-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/&#34;&gt;拜占庭故障&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;理论系统模型与现实&#34;&gt;理论系统模型与现实&lt;/h4&gt;
&lt;p&gt;计时方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步模型：有上界网络延迟、上界进程暂停、上界的时钟误差。&lt;/li&gt;
&lt;li&gt;部分同步模型：允许少量的网络延迟、进程暂停、时钟误差超过上界。&lt;/li&gt;
&lt;li&gt;异步模型：不会做任何假设。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;节点失效模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;崩溃-中止模型&lt;/li&gt;
&lt;li&gt;崩溃-恢复模型&lt;/li&gt;
&lt;li&gt;拜占庭（任意）失效模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法的正确性&#34;&gt;算法的正确性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;唯一性：两个令牌不能获取到相同的值&lt;/li&gt;
&lt;li&gt;单调递增&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安全性和活性&#34;&gt;安全性和活性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;安全性：没有意外发生&lt;/li&gt;
&lt;li&gt;活性： 预期的事情最终一定会发生&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 46. Permutations</title>
      <link>https://www.linuxzen.com/notes/notes/20210719073125-leetcode_46_permutations/</link>
      <pubDate>Mon, 19 Jul 2021 07:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210719073125-leetcode_46_permutations/</guid>
      <description>tags: LeetCode  Keywords backtrack 回溯算法
图解 举例： [1, 2, 3] ，顺着叶子节点和删除的节点就可以还原成全排列。
 从上面图可以看出来，叶子节点加上回溯路径上被移除的节点就是结果的一项，从左到右依次是：
 [3,R:2,R:1] -&amp;gt; [3,2,1] [2,R:3,R:1] -&amp;gt; [2,3,1] &amp;hellip;  class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; track; backtrack(res, track, nums); return res; } void backtrack(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp; res, vector&amp;lt;int&amp;gt; &amp;amp; track, vector&amp;lt;int&amp;gt;&amp;amp; nums) { if (track.size() == nums.size()) { res.push_back(track); return; } for (int i = 0; i &amp;lt; nums.size(); i++) { if (visited.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keywords&#34;&gt;Keywords&lt;/h2&gt;
&lt;p&gt;backtrack 回溯算法&lt;/p&gt;
&lt;h2 id=&#34;图解&#34;&gt;图解&lt;/h2&gt;
&lt;p&gt;举例： &lt;code&gt;[1, 2, 3]&lt;/code&gt; ，顺着叶子节点和删除的节点就可以还原成全排列。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/leetcode-46-1.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;从上面图可以看出来，叶子节点加上回溯路径上被移除的节点就是结果的一项，从左到右依次是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[3,R:2,R:1]&lt;/code&gt; -&amp;gt; &lt;code&gt;[3,2,1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2,R:3,R:1]&lt;/code&gt; -&amp;gt; &lt;code&gt;[2,3,1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; permute(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; track;
		backtrack(res, track, nums);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtrack&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; res, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; track, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (track.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums.size()) {
			res.push_back(track);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (visited.find(nums[i]) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; visited.end() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; visited[nums[i]]) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
			}

			track.push_back(nums[i]);
			visited[nums[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

			&lt;span style=&#34;color:#75715e&#34;&gt;// go into next level
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			backtrack(res, track, nums);

			visited[nums[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
			track.pop_back();
		}
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; visited;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据视频解析：&lt;a href=&#34;https://www.youtube.com/watch?v=s7AvT7cGdSo&#34;&gt;https://www.youtube.com/watch?v=s7AvT7cGdSo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;得出以下解法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; permute(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, i;
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; perms;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			res.push_back(nums);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums.back();
			nums.pop_back();
			perms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; permute(nums);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; perm : perms) {
				perm.push_back(n);
				res.push_back(perm);
			}
			nums.insert(nums.begin(), n);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>JavaScript 内存模型 (2017)</title>
      <link>https://www.linuxzen.com/notes/notes/20210716120333-javascript_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2017/</link>
      <pubDate>Fri, 16 Jul 2021 12:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716120333-javascript_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2017/</guid>
      <description> tags: 编程语言内存模型,JavaScript  litmus test
Litmus Test: ES2017 racy reads on ARMv8 Can this program (using atomics) see r1 = 0, r2 = 1? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y x = 2 (non-atomic) r2 = x C++: yes (data race, can do anything at all). Java: the program cannot be written. ARMv8 using ldar/stlr: yes. ES2017: no! (contradicting ARMv8) </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;编程语言内存模型&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220102073737-javascript/&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: ES2017 racy reads on ARMv8
Can this program (using atomics) see r1 = 0, r2 = 1?
// Thread 1           // Thread 2
x = 1                 y = 1
r1 = y                x = 2 (non-atomic)
					  r2 = x
C++: yes (data race, can do anything at all).
Java: the program cannot be written.
ARMv8 using ldar/stlr: yes.
ES2017: no! (contradicting ARMv8)
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>C、Rust 和 Swift 的内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210716120258-c_rust_%E5%92%8C_swift_%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 16 Jul 2021 12:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716120258-c_rust_%E5%92%8C_swift_%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>tags: Rust,Swift,编程语言内存模型  都采用C++11 内存模型。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220102073640-swift/&#34;&gt;Swift&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;编程语言内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都采用&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;C++11 内存模型&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>C&#43;&#43; 弱同步原子（acquire/release atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/</link>
      <pubDate>Fri, 16 Jul 2021 11:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/</guid>
      <description>tags: C++11 内存模型,C/C++  C++ 还添加了较弱的原子，可以使用 atomic_store_explicit 和 atomic_load_explicit 以及附加的n内存排序参数来访问这些原子。使用 memory_order_seq_cst 使显式调用等效于C++ 同步原子（atomic）较短的调用。
较弱的原子称为 acquire/release 原子，一个 release 如果被后来的 acquire 观察到，那么就创建了一个 happen-before 的关系(从 release 到 acquire)。这个术语意在唤起 mutex:release 就像 unlock mutex ， acquire 就像锁定同一个 mutex 。release 之前执行的写入必须对后续 acquire 之后执行的读取可见，就像解锁 mutex 之前执行的写入必须对后解锁 mutex 之后执行的读取可见一样。
atomic&amp;lt;int&amp;gt; done; // Thread 1 // Thread 2 atomic_store(&amp;amp;done, 1, memory_order_release); while(atomic_load(&amp;amp;done, memory_order_acquire) == 0) { /* loop */ } acquire/release 原子只对单个内存位置的操作进行顺序一致的交替执行，所以属于内存一致性（coherence）而非顺序一致性。
来看下面 litmus test：
Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0?</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;C++11 内存模型&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 还添加了较弱的原子，可以使用 &lt;code&gt;atomic_store_explicit&lt;/code&gt; 和 &lt;code&gt;atomic_load_explicit&lt;/code&gt; 以及附加的n内存排序参数来访问这些原子。使用 &lt;code&gt;memory_order_seq_cst&lt;/code&gt; 使显式调用等效于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716113858-c_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_atomic/&#34;&gt;C++ 同步原子（atomic）&lt;/a&gt;较短的调用。&lt;/p&gt;
&lt;p&gt;较弱的原子称为 &lt;code&gt;acquire/release&lt;/code&gt; 原子，一个 &lt;code&gt;release&lt;/code&gt; 如果被后来的 &lt;code&gt;acquire&lt;/code&gt; 观察到，那么就创建了一个 &lt;code&gt;happen-before&lt;/code&gt; 的关系(从 &lt;code&gt;release&lt;/code&gt; 到 &lt;code&gt;acquire&lt;/code&gt;)。这个术语意在唤起 &lt;code&gt;mutex:release&lt;/code&gt; 就像 &lt;code&gt;unlock mutex&lt;/code&gt; ， &lt;code&gt;acquire&lt;/code&gt; 就像锁定同一个 &lt;code&gt;mutex&lt;/code&gt; 。&lt;code&gt;release&lt;/code&gt; 之前执行的写入必须对后续 &lt;code&gt;acquire&lt;/code&gt; 之后执行的读取可见，就像解锁 &lt;code&gt;mutex&lt;/code&gt; 之前执行的写入必须对后解锁 &lt;code&gt;mutex&lt;/code&gt; 之后执行的读取可见一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;atomic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; done;

&lt;span style=&#34;color:#75715e&#34;&gt;// Thread 1                                         // Thread 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;atomic_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;done, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, memory_order_release);       &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(atomic_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;done, memory_order_acquire) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* loop */&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;acquire/release&lt;/code&gt; 原子只对单个内存位置的操作进行顺序一致的交替执行，所以属于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/&#34;&gt;内存一致性（coherence）&lt;/a&gt;而非&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;来看下面 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Store Buffering
Can this program see r1 = 0, r2 = 0?
// Thread 1           // Thread 2
x = 1                 y = 1
r1 = y                r2 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): yes!
On ARM/POWER: yes!
On Java (using volatiles): no.
On C++11 (sequentially consistent atomics): no.
On C++11 (acquire/release atomics): yes!
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>C&#43;&#43; 非同步原子（Relaxed atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716114242-c_%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_relaxed_atomic/</link>
      <pubDate>Fri, 16 Jul 2021 11:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716114242-c_%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_relaxed_atomic/</guid>
      <description>tags: C++11 内存模型,C/C++  C++ 并没有仅仅停留在内存一致性（coherence）的C++ 弱同步原子（acquire/release atomic）。它还引入了非同步原子，称为 relaxed 原子（memory_order_relaxed）。这些原子根本没有同步效果——它们没有创建先发生的边——并且它们根本没有排序保证。事实上，宽松原子读_写和普通读_写没有区别，除了宽松原子上的竞争不被认为是竞争， 不能着火 。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;C++11 内存模型&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 并没有仅仅停留在&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/&#34;&gt;内存一致性（coherence）&lt;/a&gt;的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/&#34;&gt;C++ 弱同步原子（acquire/release atomic）&lt;/a&gt;。它还引入了非同步原子，称为 &lt;code&gt;relaxed&lt;/code&gt; 原子（memory_order_relaxed）。这些原子根本没有同步效果——它们没有创建先发生的边——并且它们根本没有排序保证。事实上，宽松原子读_写和普通读_写没有区别，除了宽松原子上的竞争不被认为是竞争， &lt;strong&gt;&lt;strong&gt;不能着火&lt;/strong&gt;&lt;/strong&gt; 。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>C&#43;&#43; 同步原子（atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716113858-c_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_atomic/</link>
      <pubDate>Fri, 16 Jul 2021 11:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716113858-c_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_atomic/</guid>
      <description> tags: C++11 内存模型  C++ 采用了顺序一致的原子变量，很像Java 同步原子（volatile）(与 C++ volatile 没有关系）。
atomic&amp;lt;int&amp;gt; done; // Thread 1 // Thread 2 atomic_store(&amp;amp;done, 1); while(atomic_load(&amp;amp;done) == 0) { /* loop */ } C++ 弱同步原子（acquire/release atomic） </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;C++11 内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 采用了顺序一致的原子变量，很像&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/&#34;&gt;Java 同步原子（volatile）&lt;/a&gt;(与 C++ volatile 没有关系）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;atomic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; done;

&lt;span style=&#34;color:#75715e&#34;&gt;// Thread 1                    // Thread 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;atomic_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;done, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(atomic_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;done) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* loop */&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c-plus-plus-弱同步原子-acquire-release-atomic--20210716115953-c-弱同步原子-acquire-release-atomic-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/&#34;&gt;C++ 弱同步原子（acquire/release atomic）&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>DRF-SC 还是着火（Catch Fire）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716113642-drf_sc_%E8%BF%98%E6%98%AF%E7%9D%80%E7%81%AB_catch_fire/</link>
      <pubDate>Fri, 16 Jul 2021 11:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716113642-drf_sc_%E8%BF%98%E6%98%AF%E7%9D%80%E7%81%AB_catch_fire/</guid>
      <description>tags: C++11 内存模型  与 Java 不同，C++ 没有给有竞争的程序任何保证。任何有竞争的程序都属于“未定义的行为”。允许在程序执行的最初几微秒内进行竞争访问，从而在几小时或几天后导致任意的错误行为。这通常被称为“DRF-SC或着火”：如果程序没有数据竞争，它以顺序一致的方式运行，如果有数据竞争，它可以做任何事情，包括着火。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;C++11 内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 Java 不同，C++ 没有给有竞争的程序任何保证。任何有竞争的程序都属于“&lt;a href=&#34;https://blog.regehr.org/archives/213&#34;&gt;未定义的行为&lt;/a&gt;”。允许在程序执行的最初几微秒内进行竞争访问，从而在几小时或几天后导致任意的错误行为。这通常被称为“DRF-SC或着火”：如果程序没有数据竞争，它以顺序一致的方式运行，如果有数据竞争，它可以做任何事情，包括着火。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>C&#43;&#43;11 内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 16 Jul 2021 11:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>tags: C/C++,Memory Model,编程语言内存模型  受新的 Java 内存模型（2004）许多同样的人开始为 C++ 定义一个类似的内存模型，最终在 C++11 中采用。 两个重要方便的差异：
 C++ 对具有数据竞争的程序不做任何保证 C++ 提供了三种原子性：强同步（顺序一致性），弱同步（内存一致性（coherence））和无同步（“relaxed”，用于隐藏竞争）。  第一点尝试消除对 Java 模型的复杂性需求，“relaxed” 的原子性重新引入 Java 关于定义什么是竞争程序的所有复杂性。结果是C++模型比Java更复杂，但对程序员的帮助更小。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;编程语言内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;受&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713201332-%E6%96%B0%E7%9A%84_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2004/&#34;&gt;新的 Java 内存模型（2004）&lt;/a&gt;许多同样的人开始为 C++ 定义一个类似的内存模型，最终在 C++11 中采用。
两个重要方便的差异：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++ 对具有数据竞争的程序不做任何保证&lt;/li&gt;
&lt;li&gt;C++ 提供了三种原子性：强同步（&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;），弱同步（&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/&#34;&gt;内存一致性（coherence）&lt;/a&gt;）和无同步（“relaxed”，用于隐藏竞争）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一点尝试消除对 Java 模型的复杂性需求，“relaxed” 的原子性重新引入 Java 关于定义什么是竞争程序的所有复杂性。结果是C++模型比Java更复杂，但对程序员的帮助更小。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Java 同步原子（volatile）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/</link>
      <pubDate>Fri, 16 Jul 2021 11:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/</guid>
      <description>线程的创建前置于（happens bofere）线程的第一个动作。 互斥体 m 的解锁前置于（happens before）任何 后续（subsequent） 对互斥体 m 的锁定。 volatile 变量 v 的写入前置于（happens bofere）任何 后续（subsequent） 对变量 v 的读取。  “后续（subsequent）” 意味着什么？Java 定义了所有锁定、解锁和 volatile 变量访问的行为，给出了整个程序中所有这些操作的总顺序，就像它们发生在某个顺序一致的交错中一样。“后续（subsequent）”指在总顺序中较晚执行。也就是说：锁定、解锁和 volatile 变量的访问的“总顺序”定义了“后续”的含义，“后续”定义了由特定执行创建的“前置于（happens before）”关系，最终“前置于（happens before）”关系定义了该特定执行是否存在数据竞争。如果没有数据竞争，那么执行就会以顺序一致的方式进行。
事实上， volatile 访问必须表现得像在某种总排序一样，意味这在下面 litmus test 中，不能出现 r1=0 和 r2=0 的结果:
Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no.</description>
      <content>&lt;ul&gt;
&lt;li&gt;线程的创建前置于（happens bofere）线程的第一个动作。&lt;/li&gt;
&lt;li&gt;互斥体 &lt;code&gt;m&lt;/code&gt; 的解锁前置于（happens before）任何 &lt;strong&gt;&lt;strong&gt;后续（subsequent）&lt;/strong&gt;&lt;/strong&gt; 对互斥体 &lt;code&gt;m&lt;/code&gt; 的锁定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt; 变量 &lt;code&gt;v&lt;/code&gt; 的写入前置于（happens bofere）任何 &lt;strong&gt;&lt;strong&gt;后续（subsequent）&lt;/strong&gt;&lt;/strong&gt; 对变量 &lt;code&gt;v&lt;/code&gt; 的读取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;“后续（subsequent）”&lt;/strong&gt;&lt;/strong&gt; 意味着什么？Java 定义了所有锁定、解锁和 &lt;code&gt;volatile&lt;/code&gt; 变量访问的行为，给出了整个程序中所有这些操作的总顺序，就像它们发生在某个顺序一致的交错中一样。“后续（subsequent）”指在总顺序中较晚执行。也就是说：锁定、解锁和 &lt;code&gt;volatile&lt;/code&gt; 变量的访问的“总顺序”定义了“后续”的含义，“后续”定义了由特定执行创建的“前置于（happens before）”关系，最终“前置于（happens before）”关系定义了该特定执行是否存在数据竞争。如果没有数据竞争，那么执行就会以顺序一致的方式进行。&lt;/p&gt;
&lt;p&gt;事实上， &lt;code&gt;volatile&lt;/code&gt; 访问必须表现得像在某种总排序一样，意味这在下面 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt; 中，不能出现 &lt;code&gt;r1=0&lt;/code&gt; 和 &lt;code&gt;r2=0&lt;/code&gt; 的结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Store Buffering
Can this program see r1 = 0, r2 = 0?
// Thread 1           // Thread 2
x = 1                 y = 1
r1 = y                r2 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): yes!
On ARM/POWER: yes!
On Java using volatiles: no.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Java 中对 &lt;code&gt;volatile&lt;/code&gt; 变量 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的读写不能被重新排序：一个线程的写入一定会同步到第二个，紧随着第二个的写入的读取就一定能看到第一个写入。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Java 决定竞争读写的具体规则</title>
      <link>https://www.linuxzen.com/notes/notes/20210716112456-java_%E5%86%B3%E5%AE%9A%E7%AB%9E%E4%BA%89%E8%AF%BB%E5%86%99%E7%9A%84%E5%85%B7%E4%BD%93%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 16 Jul 2021 11:24:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716112456-java_%E5%86%B3%E5%AE%9A%E7%AB%9E%E4%BA%89%E8%AF%BB%E5%86%99%E7%9A%84%E5%85%B7%E4%BD%93%E8%A7%84%E5%88%99/</guid>
      <description>对于小于等于 word 大小的变量，对变量（或字段） x 的读取必须看到对 x 的某一次写入所存储的值。 如果读取 r 观察到对 x 的写入 w ，那么 r 不发生在 w 之前。
也就是说 r 可以观察发生在 r 之前的所有写入，并且可以观察与 r 竞争的写入。</description>
      <content>&lt;p&gt;对于小于等于 word 大小的变量，对变量（或字段） &lt;code&gt;x&lt;/code&gt; 的读取必须看到对 &lt;code&gt;x&lt;/code&gt; 的某一次写入所存储的值。
如果读取 &lt;code&gt;r&lt;/code&gt; 观察到对 &lt;code&gt;x&lt;/code&gt; 的写入 &lt;code&gt;w&lt;/code&gt; ，那么 &lt;code&gt;r&lt;/code&gt; 不发生在 &lt;code&gt;w&lt;/code&gt; 之前。&lt;/p&gt;
&lt;p&gt;也就是说 &lt;code&gt;r&lt;/code&gt; 可以观察发生在 &lt;code&gt;r&lt;/code&gt; 之前的所有写入，并且可以观察与 &lt;code&gt;r&lt;/code&gt; 竞争的写入。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>内存顺序一致性（sequential consistency）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/</link>
      <pubDate>Fri, 16 Jul 2021 11:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/</guid>
      <description>See also: 顺序一致性。</description>
      <content>&lt;p&gt;See also: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>内存一致性（coherence）</title>
      <link>https://www.linuxzen.com/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/</link>
      <pubDate>Fri, 16 Jul 2021 11:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/</guid>
      <description>tags: Memory Model，一致性  FROM 硬件内存模型：
 threads in the system must agree about a total order for the writes to a single memory location. That is, threads must agree which writes overwrite other writes. This property is called called coherence.
 内存一致性的系统都所有线程都必须接受对一个内存地址所有写入的总顺序。换句话说，所有线程必须同意哪些写入可以覆盖另外的一些写入。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FROM &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;硬件内存模型&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;threads in the system must agree about a total order for the writes to a single memory location. That is, threads must agree which writes overwrite other writes. This property is called called coherence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内存一致性的系统都所有线程都必须接受对一个内存地址所有写入的总顺序。换句话说，所有线程必须同意哪些写入可以覆盖另外的一些写入。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Memory coherence vs consistency</title>
      <link>https://www.linuxzen.com/notes/notes/20210716110147-memory_coherence_vs_consistency/</link>
      <pubDate>Fri, 16 Jul 2021 11:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716110147-memory_coherence_vs_consistency/</guid>
      <description>Coherence deals with maintaining a global order in which writes to a single location or single variable are seen by all processors. Consistency deals with the ordering of operations to multiple locations with respect to all processors.
  Memory coherence: a memory system is coherent if any read of a data item returns the most recently written value of that data item (what values can be returned by a read).</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Coherence deals with maintaining a global order in which writes to a single location or single variable are seen by all processors. Consistency deals with the ordering of operations to multiple locations with respect to all processors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;Memory coherence: a memory system is coherent if any read of a data item returns the most recently written value of that data item (what values can be returned by a read).&lt;/p&gt;
&lt;p&gt;Memory consistency: A memory consistency model for a shared address space specifies constraints on the order in which memory operations must appear to be performed (i.e. to become visible to the processors) with respect to one another.(when a written value will be returned/seen by a read).&lt;/p&gt;
&lt;p&gt;Coherence defines the behavior of reads and writes to the same memory location, while consistency defines the behavior of reads and writes with respect to accesses to other locations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里应该想要区分还是&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/&#34;&gt;内存一致性（coherence）&lt;/a&gt;和&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/&#34;&gt;内存顺序一致性（sequential consistency）&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.systutorials.com/whats-the-difference-between-memory-coherence-and-consistency/&#34;&gt;What’s the difference between memory coherence and consistency?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>悲观与乐观并发控制</title>
      <link>https://www.linuxzen.com/notes/notes/20210716080024-%E6%82%B2%E8%A7%82%E4%B8%8E%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 16 Jul 2021 08:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716080024-%E6%82%B2%E8%A7%82%E4%B8%8E%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>悲观并发控制 两阶段加锁是一个典型的悲观并发控制。设计原则：如果某些操作可能出错，则直接放弃等待直到安全。
乐观并发控制 如果可能发生潜在冲突，事务会继续执行而不是终止，寄希望与相安无事；而当事务提交时，数据库会检查是否发生了冲突，如果是的话，中止事务并接下来重试。
对比 如果冲突很多则性能不佳，如果性能良好，且事务之间的竞争不大，乐观并发控制会比悲观方式性能高很多。</description>
      <content>&lt;h2 id=&#34;悲观并发控制&#34;&gt;悲观并发控制&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/&#34;&gt;两阶段加锁&lt;/a&gt;是一个典型的悲观并发控制。设计原则：如果某些操作可能出错，则直接放弃等待直到安全。&lt;/p&gt;
&lt;h2 id=&#34;乐观并发控制&#34;&gt;乐观并发控制&lt;/h2&gt;
&lt;p&gt;如果可能发生潜在冲突，事务会继续执行而不是终止，寄希望与相安无事；而当事务提交时，数据库会检查是否发生了冲突，如果是的话，中止事务并接下来重试。&lt;/p&gt;
&lt;h2 id=&#34;对比&#34;&gt;对比&lt;/h2&gt;
&lt;p&gt;如果冲突很多则性能不佳，如果性能良好，且事务之间的竞争不大，乐观并发控制会比悲观方式性能高很多。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>可串形化的快照隔离</title>
      <link>https://www.linuxzen.com/notes/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/</link>
      <pubDate>Fri, 16 Jul 2021 07:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/</guid>
      <description>可串形化的快照隔离（Serializable Snapshot Isolation，SSI）近两年被研究，尚需在实践中证明其性能，但是它很有可能成为未来数据的标配。
悲观与乐观并发控制 </description>
      <content>&lt;p&gt;可串形化的快照隔离（Serializable Snapshot Isolation，SSI）近两年被研究，尚需在实践中证明其性能，但是它很有可能成为未来数据的标配。&lt;/p&gt;
&lt;h2 id=&#34;悲观与乐观并发控制--20210716080024-悲观与乐观并发控制-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716080024-%E6%82%B2%E8%A7%82%E4%B8%8E%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/&#34;&gt;悲观与乐观并发控制&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>两阶段加锁</title>
      <link>https://www.linuxzen.com/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/</link>
      <pubDate>Fri, 16 Jul 2021 07:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/</guid>
      <description>两阶段枷锁（two-phase locking，2PL）是近 30 年来数据库唯一一种被广泛使用的串形化算法。 多个事务可以同时读取同一个对象，但只要出现任何写操作（修改或删除），则必须加锁以独占访问。
两阶段包括：
 事务执行之前要获得锁（第一阶段） 事务结束之后要释放锁（第二阶段）  实现 2PL 用于 MySQL（InnoDB）和 SQL Server 中的“可串形化隔离”，以及 DB2 的“可重复读”。
每个对象通过一个「读写锁」隔离读写操作。
 共享锁进行读取。 独占锁进行修改。 读取先获取共享锁，如果要修改则升级为独占锁。 事务获得锁之后一直持有到事务结束。  性能 慢和死锁
谓词锁 通过对区间条件加谓词锁。
索引区间锁 </description>
      <content>&lt;p&gt;两阶段枷锁（two-phase locking，2PL）是近 30 年来数据库唯一一种被广泛使用的串形化算法。
多个事务可以同时读取同一个对象，但只要出现任何写操作（修改或删除），则必须加锁以独占访问。&lt;/p&gt;
&lt;p&gt;两阶段包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事务执行之前要获得锁（第一阶段）&lt;/li&gt;
&lt;li&gt;事务结束之后要释放锁（第二阶段）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;2PL 用于 MySQL（InnoDB）和 SQL Server 中的“可串形化隔离”，以及 DB2 的“可重复读”。&lt;/p&gt;
&lt;p&gt;每个对象通过一个「读写锁」隔离读写操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁进行读取。&lt;/li&gt;
&lt;li&gt;独占锁进行修改。&lt;/li&gt;
&lt;li&gt;读取先获取共享锁，如果要修改则升级为独占锁。&lt;/li&gt;
&lt;li&gt;事务获得锁之后一直持有到事务结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性能&#34;&gt;性能&lt;/h2&gt;
&lt;p&gt;慢和死锁&lt;/p&gt;
&lt;h2 id=&#34;谓词锁&#34;&gt;谓词锁&lt;/h2&gt;
&lt;p&gt;通过对区间条件加谓词锁。&lt;/p&gt;
&lt;h2 id=&#34;索引区间锁&#34;&gt;索引区间锁&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>串行化</title>
      <link>https://www.linuxzen.com/notes/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/</link>
      <pubDate>Fri, 16 Jul 2021 07:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/</guid>
      <description>实际串行执行 解决并发问题最直接的方法：在一个线程上按照顺序方式每次执行一个事务。
为什么可行：
 内存越来越便宜，可以将事务需要的数据都放在内存中。 OLTP 事务通常执行很快，只产生少量的读写操作。通常较长时间的分析操作通常是只读。  事务为了充分利用单线程所做的调整：
 采用存储过程封装事务，Redis 采用 Lua 分区  约束  事务必须简短而高效。 事务所需数据都在内存。 写入吞吐量必须低，否则需要采用分区，最好没有跨分区事务。 要支持跨分区事务必须确保跨分区事务占比很小。  两阶段加锁 可串形化的快照隔离 </description>
      <content>&lt;h2 id=&#34;实际串行执行&#34;&gt;实际串行执行&lt;/h2&gt;
&lt;p&gt;解决并发问题最直接的方法：在一个线程上按照顺序方式每次执行一个事务。&lt;/p&gt;
&lt;p&gt;为什么可行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存越来越便宜，可以将事务需要的数据都放在内存中。&lt;/li&gt;
&lt;li&gt;OLTP 事务通常执行很快，只产生少量的读写操作。通常较长时间的分析操作通常是只读。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务为了充分利用单线程所做的调整：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用存储过程封装事务，Redis 采用 Lua&lt;/li&gt;
&lt;li&gt;分区&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;约束&#34;&gt;约束&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;事务必须简短而高效。&lt;/li&gt;
&lt;li&gt;事务所需数据都在内存。&lt;/li&gt;
&lt;li&gt;写入吞吐量必须低，否则需要采用分区，最好没有跨分区事务。&lt;/li&gt;
&lt;li&gt;要支持跨分区事务必须确保跨分区事务占比很小。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两阶段加锁--20210716074845-两阶段加锁-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/&#34;&gt;两阶段加锁&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;可串形化的快照隔离--20210716075758-可串形化的快照隔离-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/&#34;&gt;可串形化的快照隔离&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>写倾斜</title>
      <link>https://www.linuxzen.com/notes/notes/20210716072157-%E5%86%99%E5%80%BE%E6%96%9C/</link>
      <pubDate>Fri, 16 Jul 2021 07:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716072157-%E5%86%99%E5%80%BE%E6%96%9C/</guid>
      <description>即不是脏写也不会更新丢失，事务之间的写冲突并不直接，写倾斜可以视为更广义的数据丢失。
考虑急诊医生请假系统，核心逻辑是必须要有一个医生值班。两个医生同时请假，事务同时同时开始，那么两个医生都能查询到有两个医生值班，最后请假成功，导致无医生值班。</description>
      <content>&lt;p&gt;即不是脏写也不会更新丢失，事务之间的写冲突并不直接，写倾斜可以视为更广义的数据丢失。&lt;/p&gt;
&lt;p&gt;考虑急诊医生请假系统，核心逻辑是必须要有一个医生值班。两个医生同时请假，事务同时同时开始，那么两个医生都能查询到有两个医生值班，最后请假成功，导致无医生值班。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>写倾斜与幻读</title>
      <link>https://www.linuxzen.com/notes/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/</link>
      <pubDate>Fri, 16 Jul 2021 07:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/</guid>
      <description>写事务并发除了需要防止更新丢失还有一些更为微妙的写冲突。
写倾斜与幻读 定义写倾斜。</description>
      <content>&lt;p&gt;写事务并发除了需要&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/&#34;&gt;防止更新丢失&lt;/a&gt;还有一些更为微妙的写冲突。&lt;/p&gt;
&lt;h2 id=&#34;写倾斜与幻读--20210716071953-写倾斜与幻读-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/&#34;&gt;写倾斜与幻读&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;定义&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716072157-%E5%86%99%E5%80%BE%E6%96%9C/&#34;&gt;写倾斜&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>防止更新丢失</title>
      <link>https://www.linuxzen.com/notes/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Fri, 16 Jul 2021 07:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/</guid>
      <description>读事务遇到并发写会出现脏读（读-提交和可重复读可以解决），写事务并发会带来一些冲突，最值得关注的就是更新丢失问题。 应用程序从数据库读取某些值，然后应用逻辑做出修改，然后写回新值。
原子写操作 UPDATE counters SET value=value+1 WHERE key = &amp;#39;foo&amp;#39;; 原子操作通常采用方式：
 对读取对象加独占加锁，这种技术有时被称为「游标稳定性」。 强制所有原子操作都在单线程上执行。  显式枷锁 BEGIN TRANSACTION; SELECT * FROM figures WHERE name = &amp;#39;robot&amp;#39; AND game_id = 222 FOR UPDATE; -- 指示数据库对返回的所有结果行要加锁。 缺点：侵入应用逻辑、容易引发死锁（竞争冲突）。
自动检测更新丢失 数据库（Oracle 的串形化和 SQL Server 的快照级别隔离）可以自动检测何时发生了更新丢失，然后终止违规的那个事务。
原子比较和设置 UPDATE wiki_pages SET content = &amp;#39;new_content&amp;#39; WHERE id = 1234 AND conetnt = &amp;#39;old_content&amp;#39;; 冲突解决与复制  最后写入者获胜  </description>
      <content>&lt;p&gt;读事务遇到并发写会出现脏读（读-提交和可重复读可以解决），写事务并发会带来一些冲突，最值得关注的就是更新丢失问题。
应用程序从数据库读取某些值，然后应用逻辑做出修改，然后写回新值。&lt;/p&gt;
&lt;h2 id=&#34;原子写操作&#34;&gt;原子写操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; counters &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原子操作通常采用方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对读取对象加独占加锁，这种技术有时被称为「游标稳定性」。&lt;/li&gt;
&lt;li&gt;强制所有原子操作都在单线程上执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;显式枷锁&#34;&gt;显式枷锁&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRANSACTION&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; figures
  &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;robot&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; game_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;-- 指示数据库对返回的所有结果行要加锁。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;缺点：侵入应用逻辑、容易引发死锁（竞争冲突）。&lt;/p&gt;
&lt;h2 id=&#34;自动检测更新丢失&#34;&gt;自动检测更新丢失&lt;/h2&gt;
&lt;p&gt;数据库（Oracle 的串形化和 SQL Server 的快照级别隔离）可以自动检测何时发生了更新丢失，然后终止违规的那个事务。&lt;/p&gt;
&lt;h2 id=&#34;原子比较和设置&#34;&gt;原子比较和设置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; wiki_pages &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;new_content&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; conetnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;old_content&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;冲突解决与复制&#34;&gt;冲突解决与复制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/&#34;&gt;最后写入者获胜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>更新 Go 内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210715110202-%E6%9B%B4%E6%96%B0_go_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 15 Jul 2021 11:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210715110202-%E6%9B%B4%E6%96%B0_go_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description> tags: Go,Memory Model source: 更新Go内存模型 https://research.swtch.com/gomm  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200218115725/&#34;&gt;Go&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://colobu.com/2021/07/13/Updating-the-Go-Memory-Model/&#34;&gt;更新Go内存模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/gomm&#34;&gt;https://research.swtch.com/gomm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 25. Reverse Nodes in k-Group</title>
      <link>https://www.linuxzen.com/notes/notes/20210715064442-leetcode_25_reverse_nodes_in_k_group/</link>
      <pubDate>Thu, 15 Jul 2021 06:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210715064442-leetcode_25_reverse_nodes_in_k_group/</guid>
      <description>tags: LeetCode source: https://leetcode.com/problems/reverse-nodes-in-k-group/  /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { deque&amp;lt;ListNode*&amp;gt; dq; ListNode* cur = head; ListNode* top = nullptr; ListNode* tail = nullptr; bool first_k = true; while (cur !</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode.com/problems/reverse-nodes-in-k-group/&#34;&gt;https://leetcode.com/problems/reverse-nodes-in-k-group/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for singly-linked list.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct ListNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode *next;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode() : val(0), next(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode(int x) : val(x), next(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode(int x, ListNode *next) : val(x), next(next) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; reverseKGroup(ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; head, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k) {
		deque&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; dq;
		ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head;
		ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
		ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; first_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			dq.push_front(cur);
			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;

			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dq.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k) {
				&lt;span style=&#34;color:#75715e&#34;&gt;// start reverse in k
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dq.front();
				dq.pop_front();

				&lt;span style=&#34;color:#75715e&#34;&gt;// override head or connected from last k
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (first_k) {
					head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top;
					first_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					tail&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top;
				}

				&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;dq.empty()) {
					top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dq.front();
					dq.pop_front();
					top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
				}
				top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur;
				tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; top; &lt;span style=&#34;color:#75715e&#34;&gt;// mark the tail of linked list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;dq.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			tail&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dq.back();
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>事务隔离级别</title>
      <link>https://www.linuxzen.com/notes/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Wed, 14 Jul 2021 07:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>读-未提交  读数据时，会读到未成功提交的数据（未防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”）  读-提交  读数据时，只会读到已成功提交的数据（防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”）  防止脏写 通常通过推迟第二个写请求（行锁），直到前面的事务完成提交（或者终止）。
防止脏读 通过行锁同样可以避免脏读，但是实际中不可行（性能太差），一般采用类似 MVCC 的方式：对于待更新的对象，数据库都会维护其旧值和当前持锁事务将要设置的新值两个版本。 事务提交之前，其他所有读操作读旧值；仅当写事务提交之后，才会切换到读取新值。
可重复读（快照级别隔离） 在同一个事务中，反复读取总能获得一致性的结果，而不会读取到其他事务提交修改的新值。总体性想法是：每个事务都从数据库的一致性快照中读取，事务一开始所看到的是最近提交的数据，即使数据随后可能被另外一个事务更改，但保证每个事务都只看到特定时间点的旧数据。
实现快照级别隔离 MVCC
串行化 </description>
      <content>&lt;h2 id=&#34;读-未提交&#34;&gt;读-未提交&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;读数据时，会读到未成功提交的数据（未防止“脏读”）&lt;/li&gt;
&lt;li&gt;写数据时，只会覆盖已成功提交的数据（防止“脏写”）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;读-提交&#34;&gt;读-提交&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;读数据时，只会读到已成功提交的数据（防止“脏读”）&lt;/li&gt;
&lt;li&gt;写数据时，只会覆盖已成功提交的数据（防止“脏写”）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防止脏写&#34;&gt;防止脏写&lt;/h3&gt;
&lt;p&gt;通常通过推迟第二个写请求（行锁），直到前面的事务完成提交（或者终止）。&lt;/p&gt;
&lt;h3 id=&#34;防止脏读&#34;&gt;防止脏读&lt;/h3&gt;
&lt;p&gt;通过行锁同样可以避免脏读，但是实际中不可行（性能太差），一般采用类似 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827195823-mvcc/&#34;&gt;MVCC&lt;/a&gt; 的方式：对于待更新的对象，数据库都会维护其旧值和当前持锁事务将要设置的新值两个版本。
事务提交之前，其他所有读操作读旧值；仅当写事务提交之后，才会切换到读取新值。&lt;/p&gt;
&lt;h2 id=&#34;可重复读-快照级别隔离&#34;&gt;可重复读（快照级别隔离）&lt;/h2&gt;
&lt;p&gt;在同一个事务中，反复读取总能获得一致性的结果，而不会读取到其他事务提交修改的新值。总体性想法是：每个事务都从数据库的一致性快照中读取，事务一开始所看到的是最近提交的数据，即使数据随后可能被另外一个事务更改，但保证每个事务都只看到特定时间点的旧数据。&lt;/p&gt;
&lt;h3 id=&#34;实现快照级别隔离&#34;&gt;实现快照级别隔离&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827195823-mvcc/&#34;&gt;MVCC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;串行化&#34;&gt;串行化&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>ACID</title>
      <link>https://www.linuxzen.com/notes/notes/20210714074135-acid/</link>
      <pubDate>Wed, 14 Jul 2021 07:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714074135-acid/</guid>
      <description>原子性（Atomicity） 一致性（Consistency） 一致性并不是数据所保证的，而是程序借助数据库的原子性和隔离性（AD）来达到一致性。一致性的 C 放到 ACID 中只是为了可以更加顺畅的宣传（读）。
隔离性（Isolation） 事务隔离级别
持久性（Durability） </description>
      <content>&lt;h2 id=&#34;原子性-atomicity&#34;&gt;原子性（Atomicity）&lt;/h2&gt;
&lt;h2 id=&#34;一致性-consistency&#34;&gt;一致性（Consistency）&lt;/h2&gt;
&lt;p&gt;一致性并不是数据所保证的，而是程序借助数据库的原子性和隔离性（AD）来达到一致性。一致性的 C 放到 ACID 中只是为了可以更加顺畅的宣传（读）。&lt;/p&gt;
&lt;h2 id=&#34;隔离性-isolation&#34;&gt;隔离性（Isolation）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/&#34;&gt;事务隔离级别&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;持久性-durability&#34;&gt;持久性（Durability）&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>事务</title>
      <link>https://www.linuxzen.com/notes/notes/20210714073909-%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Wed, 14 Jul 2021 07:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714073909-%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务简化程序层错误处理，将多个读写捆绑成一个操作逻辑操作单元，成功则全部成功，失败则可以进行安全重试。
深入理解事务 ACID 单对象与多对象事务操作 事务操作涉及多对象和但对象。
 多对象，如更新邮件未读数和未读邮件个数 单对象，如更新一个大的字段（20KB 的 JSON）  弱隔离级别 事务隔离级别中的「读-未提交」、「读-提交」和「快照级别隔离可重复读」。
防止更新丢失 写倾斜与幻读 串行化 </description>
      <content>&lt;p&gt;事务简化程序层错误处理，将多个读写捆绑成一个操作逻辑操作单元，成功则全部成功，失败则可以进行安全重试。&lt;/p&gt;
&lt;h2 id=&#34;深入理解事务&#34;&gt;深入理解事务&lt;/h2&gt;
&lt;h3 id=&#34;acid--20210714074135-acid-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210714074135-acid/&#34;&gt;ACID&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;单对象与多对象事务操作&#34;&gt;单对象与多对象事务操作&lt;/h3&gt;
&lt;p&gt;事务操作涉及多对象和但对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多对象，如更新邮件未读数和未读邮件个数&lt;/li&gt;
&lt;li&gt;单对象，如更新一个大的字段（20KB 的 JSON）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;弱隔离级别&#34;&gt;弱隔离级别&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/&#34;&gt;事务隔离级别&lt;/a&gt;中的「读-未提交」、「读-提交」和「快照级别隔离可重复读」。&lt;/p&gt;
&lt;h3 id=&#34;防止更新丢失--20210716070457-防止更新丢失-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/&#34;&gt;防止更新丢失&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;写倾斜与幻读--20210716071953-写倾斜与幻读-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/&#34;&gt;写倾斜与幻读&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;串行化--20210716074157-串行化-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/&#34;&gt;串行化&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 92. Reverse Linked List II</title>
      <link>https://www.linuxzen.com/notes/notes/20210714065549-leetcode_92_reverse_linked_list_ii/</link>
      <pubDate>Wed, 14 Jul 2021 06:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714065549-leetcode_92_reverse_linked_list_ii/</guid>
      <description>tags: LeetCode source: https://leetcode.com/problems/reverse-linked-list-ii/  /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseBetween(ListNode* head, int left, int right) { stack&amp;lt;int&amp;gt; st; ListNode* cur = head; ListNode* prev_start = nullptr; if (left == 1) { prev_start = new ListNode(0, head); // dummy prev_start point to head 	} int i = 1; while(cur !</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode.com/problems/reverse-linked-list-ii/&#34;&gt;https://leetcode.com/problems/reverse-linked-list-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Definition for singly-linked list.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * struct ListNode {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     int val;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode *next;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode() : val(0), next(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode(int x) : val(x), next(nullptr) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     ListNode(int x, ListNode *next) : val(x), next(next) {}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; reverseBetween(ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; head, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; right) {
		stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;
		ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head;
		ListNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; prev_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			prev_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ListNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, head);  &lt;span style=&#34;color:#75715e&#34;&gt;// dummy prev_start point to head
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cur &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right) {
				st.push(cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
			}

			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; left) {
				prev_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur;
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// move ahead
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prev_start &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev_start&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (st.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top();
				cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;
				st.pop();
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Emacs Projectile 优化</title>
      <link>https://www.linuxzen.com/notes/notes/20210714065205-emacs_projectile_%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Jul 2021 06:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210714065205-emacs_projectile_%E4%BC%98%E5%8C%96/</guid>
      <description> tags: Emacs  最近换到 ivy 之后 projectile 切换项目加载 Buffer 或查找文件变得巨慢，查抄一番发现问题可以通过缓存解决：
 ivy-rich Projectile Caching  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近换到 ivy 之后 projectile 切换项目加载 Buffer 或查找文件变得巨慢，查抄一番发现问题可以通过缓存解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thanhvg/spacemacs/commit/af98532130b6ad442bb7753b4fd2ec7180419faa&#34;&gt;ivy-rich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.projectile.mx/projectile/configuration.html#caching&#34;&gt;Projectile Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Java 内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 13 Jul 2021 20:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description> tags: Memory Model,Java,编程语言内存模型  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210901081938-java/&#34;&gt;Java&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;编程语言内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>新的 Java 内存模型（2004）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713201332-%E6%96%B0%E7%9A%84_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2004/</link>
      <pubDate>Tue, 13 Jul 2021 20:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713201332-%E6%96%B0%E7%9A%84_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2004/</guid>
      <description> tags: Java 内存模型  新模型遵循 DRF-SC 方法：保证弱有序和无数据竞争（DRF）的 Java 程序以顺序一致的方式执行。
 JSR-133，在 2004 年发布的 Java 5.0 中被采用。规范：The Java Memory Model, 2005。
 Java 中程序员需要同步操作建立 happens-before 关系，确保一个线程不会在另一个线程读取或写入时并发的写入非原子变量。主要的同步操作有：
同步原子（volatile）和其它操作 参见：Java 同步原子（volatile）。
有数据竞争的程序语义 弱有序和无数据竞争（DRF）只保证「无数据」竞争的程序的顺序一致性行为。新的 Java 模型（和原版本一致）出于以下原因定义了「有数据」竞争程序的顺序一致性行为：
 支持Java的一般安全（security）和安全保障（safety guarantee）。 让程序员更容易发现错误。 使攻击者更难利用问题，因为由于数据竞争的原因可能造成的损失更有限。 让程序员更清楚他们的程序是做什么的  新的模型不再依赖内存一致性（coherence），取而代之的复用 happens-before（已经用于决定程序是否存在竞争）来决定竞争读写的结果。
具体规则参见：Java 决定竞争读写的具体规则。使用 happens-before 并结合Java 同步原子（volatile）就可以建立新的 happen before 关系，是对原始Java内存模型的重大改进。它为程序员提供了更多有用的保证，并使大量重要的编译器优化得到了明确的允。
happens-before 不排除语无伦次（incoherence） 以前发生的事不排除无用性（acausality） </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;Java 内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新模型遵循 DRF-SC 方法：保证&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/&#34;&gt;弱有序和无数据竞争（DRF）&lt;/a&gt;的 Java 程序以顺序一致的方式执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSR-133，在 2004 年发布的 Java 5.0 中被采用。规范：&lt;a href=&#34;https://rsim.cs.uiuc.edu/Pubs/popl05.pdf&#34;&gt;The Java Memory Model, 2005&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 中程序员需要同步操作建立 happens-before 关系，确保一个线程不会在另一个线程读取或写入时并发的写入非原子变量。主要的同步操作有：&lt;/p&gt;
&lt;h2 id=&#34;同步原子-volatile-和其它操作&#34;&gt;同步原子（volatile）和其它操作&lt;/h2&gt;
&lt;p&gt;参见：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/&#34;&gt;Java 同步原子（volatile）&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;有数据竞争的程序语义&#34;&gt;有数据竞争的程序语义&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/&#34;&gt;弱有序和无数据竞争（DRF）&lt;/a&gt;只保证「无数据」竞争的程序的顺序一致性行为。新的 Java 模型（和原版本一致）出于以下原因定义了「有数据」竞争程序的顺序一致性行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持Java的一般安全（security）和安全保障（safety guarantee）。&lt;/li&gt;
&lt;li&gt;让程序员更容易发现错误。&lt;/li&gt;
&lt;li&gt;使攻击者更难利用问题，因为由于数据竞争的原因可能造成的损失更有限。&lt;/li&gt;
&lt;li&gt;让程序员更清楚他们的程序是做什么的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的模型不再依赖&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/&#34;&gt;内存一致性（coherence）&lt;/a&gt;，取而代之的复用 happens-before（已经用于决定程序是否存在竞争）来决定竞争读写的结果。&lt;/p&gt;
&lt;p&gt;具体规则参见：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716112456-java_%E5%86%B3%E5%AE%9A%E7%AB%9E%E4%BA%89%E8%AF%BB%E5%86%99%E7%9A%84%E5%85%B7%E4%BD%93%E8%A7%84%E5%88%99/&#34;&gt;Java 决定竞争读写的具体规则&lt;/a&gt;。使用 happens-before 并结合&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/&#34;&gt;Java 同步原子（volatile）&lt;/a&gt;就可以建立新的 happen before 关系，是对原始Java内存模型的重大改进。它为程序员提供了更多有用的保证，并使大量重要的编译器优化得到了明确的允。&lt;/p&gt;
&lt;h2 id=&#34;happens-before-不排除语无伦次-incoherence&#34;&gt;happens-before 不排除语无伦次（incoherence）&lt;/h2&gt;
&lt;h2 id=&#34;以前发生的事不排除无用性-acausality&#34;&gt;以前发生的事不排除无用性（acausality）&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Java 编译器公共子表达式消除（common subexpression elimination）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713201045-java_%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%AC%E5%85%B1%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%88%E9%99%A4_common_subexpression_elimination/</link>
      <pubDate>Tue, 13 Jul 2021 20:10:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713201045-java_%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%AC%E5%85%B1%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%88%E9%99%A4_common_subexpression_elimination/</guid>
      <description>// p and q may or may not point at the same object. int i = p.x; // ... maybe another thread writes p.x at this point ... int j = q.x; int k = p.x; 在这个程序中，公共子表达式消除（common subexpression elimination）会注意到 p.x 被计算了两次，并将最后一行优化为 k = i 。</description>
      <content>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// p and q may or may not point at the same object.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// ... maybe another thread writes p.x at this point ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个程序中，公共子表达式消除（common subexpression elimination）会注意到 &lt;code&gt;p.x&lt;/code&gt; 被计算了两次，并将最后一行优化为 &lt;code&gt;k = i&lt;/code&gt; 。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>原始 Java 内存模型（1996）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713200556-%E5%8E%9F%E5%A7%8B_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_1996/</link>
      <pubDate>Tue, 13 Jul 2021 20:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713200556-%E5%8E%9F%E5%A7%8B_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_1996/</guid>
      <description> tags: Java 内存模型,Java  Java 是第一个试图写下多线程程序保证的主流语言。它包括：
 互斥体（mutex），并定义了它们隐含的内存排序要求。 “volatile” 原子变量: volatile 变量的所有读和写都需要直接在主内存中按程序顺序执行，使得对 volatile 变量的操作以顺序一致的方式进行。 制定了（或者至少试图制定）具有数据竞争的程序的行为。  缺陷  Atomic 需要同步：volatile 原子变量是不同步的，所以它们无助于消除程序其余部分的竞争。不能用于构建新的同步原语。 一致性与编译器优化不兼容：Java 编译器公共子表达式消除（common subexpression elimination）会导致其他线程写入新值无法对消除后表达式生效。  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;Java 内存模型&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210901081938-java/&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 是第一个试图写下多线程程序保证的主流语言。它包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥体（mutex），并定义了它们隐含的内存排序要求。&lt;/li&gt;
&lt;li&gt;“volatile” 原子变量: volatile 变量的所有读和写都需要直接在主内存中按程序顺序执行，使得对 volatile 变量的操作以顺序一致的方式进行。&lt;/li&gt;
&lt;li&gt;制定了（或者至少试图制定）具有数据竞争的程序的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺陷&#34;&gt;缺陷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Atomic 需要同步：volatile 原子变量是不同步的，所以它们无助于消除程序其余部分的竞争。不能用于构建新的同步原语。&lt;/li&gt;
&lt;li&gt;一致性与编译器优化不兼容：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713201045-java_%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%AC%E5%85%B1%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%88%E9%99%A4_common_subexpression_elimination/&#34;&gt;Java 编译器公共子表达式消除（common subexpression elimination）&lt;/a&gt;会导致其他线程写入新值无法对消除后表达式生效。&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>DRF-SC 系统同步指令</title>
      <link>https://www.linuxzen.com/notes/notes/20210713195115-drf_sc_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 13 Jul 2021 19:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713195115-drf_sc_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4/</guid>
      <description>保证了弱有序和无数据竞争（DRF）的系统会提供称为同步的特定指令，提供一种协调不同处理器（相当于硬件线程）的属性。</description>
      <content>&lt;p&gt;保证了&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/&#34;&gt;弱有序和无数据竞争（DRF）&lt;/a&gt;的系统会提供称为同步的特定指令，提供一种协调不同处理器（相当于硬件线程）的属性。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>同步原子（synchronizing atomic）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713194409-%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_synchronizing_atomic/</link>
      <pubDate>Tue, 13 Jul 2021 19:44:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713194409-%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_synchronizing_atomic/</guid>
      <description>原子变量（atomic variable）或原子操作（tomic operation）更好的解释。</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/&#34;&gt;原子变量（atomic variable）或原子操作（tomic operation）&lt;/a&gt;更好的解释。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>原子变量（atomic variable）或原子操作（tomic operation）</title>
      <link>https://www.linuxzen.com/notes/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/</link>
      <pubDate>Tue, 13 Jul 2021 19:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/</guid>
      <description>现代语言以原子变量（atomic variable）或原子操作（atomic operation）的形式提供特殊能力，允许程序同步其线程(参见硬件内存一致性模型)。
代码示例
// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); 如果使用原子变量实现 done 会产生很多效果：
 Thread 1 的编译代码必须确保对 x 的写入完成，并且对 done 的写入可见之前对 x 的写入对其他线程可见。 Thread 2 的编译代码必须在循环的每次迭代中（重新）读取 done 。 Thread 2 的编译代码必须在读取 done 之后才读取 x 。 编译后的代码必须做任何必要的事情来禁用可能会重新引入这些问题的硬件优化。 使 done 原子化的最终结果是程序按照我们想要的方式运行，成功地将 x 的值从 Thread 1 传递到 Thread 2 。  上面代码如果不使用原子变量会出现 Thread 1 和 Thread 2 读取 x 的同时写 x ，从而导致数据竞争（data race)。 done 使用原子变量实现后，用于同步对 x 的访问： Thread 1 现在不可能在 Thread 2 读取 x 的同时写 x，从而避免数据竞争。 这是硬件内存模型弱有序和无数据竞争（DRF）在编程语言环境的应用。</description>
      <content>&lt;p&gt;现代语言以原子变量（atomic variable）或原子操作（atomic operation）的形式提供特殊能力，允许程序同步其线程(参见硬件&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/&#34;&gt;内存一致性模型&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;代码示例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;// Thread 1           // Thread 2
x = 1;                while(done == 0) { /* loop */ }
done = 1;             print(x);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果使用原子变量实现 &lt;code&gt;done&lt;/code&gt; 会产生很多效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thread 1&lt;/code&gt; 的编译代码必须确保对 &lt;code&gt;x&lt;/code&gt; 的写入完成，并且对 &lt;code&gt;done&lt;/code&gt; 的写入可见之前对 &lt;code&gt;x&lt;/code&gt; 的写入对其他线程可见。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread 2&lt;/code&gt; 的编译代码必须在循环的每次迭代中（重新）读取 &lt;code&gt;done&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread 2&lt;/code&gt; 的编译代码必须在读取 &lt;code&gt;done&lt;/code&gt; 之后才读取 &lt;code&gt;x&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;编译后的代码必须做任何必要的事情来禁用可能会重新引入这些问题的硬件优化。&lt;/li&gt;
&lt;li&gt;使 &lt;code&gt;done&lt;/code&gt; 原子化的最终结果是程序按照我们想要的方式运行，成功地将 &lt;code&gt;x&lt;/code&gt; 的值从 &lt;code&gt;Thread 1&lt;/code&gt; 传递到 &lt;code&gt;Thread 2&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面代码如果不使用原子变量会出现 &lt;code&gt;Thread 1&lt;/code&gt; 和 &lt;code&gt;Thread 2&lt;/code&gt; 读取 &lt;code&gt;x&lt;/code&gt; 的同时写 &lt;code&gt;x&lt;/code&gt; ，从而导致数据竞争（data race)。
&lt;code&gt;done&lt;/code&gt; 使用原子变量实现后，用于同步对 &lt;code&gt;x&lt;/code&gt; 的访问： &lt;code&gt;Thread 1&lt;/code&gt; 现在不可能在 &lt;code&gt;Thread 2&lt;/code&gt; 读取 &lt;code&gt;x&lt;/code&gt; 的同时写 &lt;code&gt;x&lt;/code&gt;，从而避免数据竞争。
这是硬件内存模型&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/&#34;&gt;弱有序和无数据竞争（DRF）&lt;/a&gt;在编程语言环境的应用。&lt;/p&gt;
&lt;p&gt;原子变量（atomic variable）或原子操作（atomic operation）更恰当的名称应该是「&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713194409-%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_synchronizing_atomic/&#34;&gt;同步原子（synchronizing atomic）&lt;/a&gt;」。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>弱有序和无数据竞争（DRF）</title>
      <link>https://www.linuxzen.com/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/</link>
      <pubDate>Mon, 12 Jul 2021 16:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/</guid>
      <description>弱有序是 Sarita Adve 和 Mark Hill 在他们 1990 年的论文 Weak Ordering - A New Definition (1990) 提出。
定义如下
 Let a synchronization model be a set of constraints on memory accesses that specify how and when synchronization needs to be done.
同步模型是对内存访问的一组约束，这些约束指定了何时以及如何进行同步。
 硬件相对于同步模型是弱有序的，当且仅当它在顺序上与遵守同步模型的所有软件一致时。
Adve和Hill提出了一种同步模型，他们称之为无数据竞争(data-race-free，DRF)。该模型假设硬件具有独立于普通内存读写的内存同步操作。普通的内存读写可以在同步操作之间重新排序，但不能在跨它们移动。(也就是说，同步操作也可用来做重新排序的内存屏障。)如果对于所有理想化的顺序一致的执行，从不同线程对同一位置的任何两个普通存储器访问要么都是读取，要么通过同步操作强制一个在另一个之前发生而分开执行，则程序被称为无数据竞争的。</description>
      <content>&lt;p&gt;弱有序是 Sarita Adve 和 Mark Hill 在他们 1990 年的论文 &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.5567&#34;&gt;Weak Ordering - A New Definition (1990) &lt;/a&gt;提出。&lt;/p&gt;
&lt;p&gt;定义如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let a synchronization model be a set of constraints on memory accesses that specify how and when synchronization needs to be done.&lt;/p&gt;
&lt;p&gt;同步模型是对内存访问的一组约束，这些约束指定了何时以及如何进行同步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;硬件相对于同步模型是弱有序的，当且仅当它在顺序上与遵守同步模型的所有软件一致时。&lt;/p&gt;
&lt;p&gt;Adve和Hill提出了一种同步模型，他们称之为无数据竞争(data-race-free，DRF)。该模型假设硬件具有独立于普通内存读写的内存同步操作。普通的内存读写可以在同步操作之间重新排序，但不能在跨它们移动。(也就是说，同步操作也可用来做重新排序的内存屏障。)如果对于所有理想化的顺序一致的执行，从不同线程对同一位置的任何两个普通存储器访问要么都是读取，要么通过同步操作强制一个在另一个之前发生而分开执行，则程序被称为无数据竞争的。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>ARM/POWER Relaxed Memory Model</title>
      <link>https://www.linuxzen.com/notes/notes/20210712162917-arm_power_relaxed_memory_model/</link>
      <pubDate>Mon, 12 Jul 2021 16:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712162917-arm_power_relaxed_memory_model/</guid>
      <description>ARM和POWER系统的概念模型是，每个处理器从其自己的完整内存副本中读取和向其写入，每个写入独立地传播到其他处理器，随着写入的传播，允许重新排序。
 在这个宽松的(relaxed)模型中，我们迄今为止所看到的每一个litmus test的答案都是“yes，这真的可能发生。”
Litmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. On ARM/POWER: yes! Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no.</description>
      <content>&lt;p&gt;ARM和POWER系统的概念模型是，每个处理器从其自己的完整内存副本中读取和向其写入，每个写入独立地传播到其他处理器，随着写入的传播，允许重新排序。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://colobu.com/2021/06/30/hwmm/mem-weak.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;在这个宽松的(relaxed)模型中，我们迄今为止所看到的每一个litmus test的答案都是“yes，这真的可能发生。”&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Message Passing
Can this program see r1 = 1, r2 = 0?
// Thread 1           // Thread 2
x = 1                 r1 = y
y = 1                 r2 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): no.
On ARM/POWER: yes!
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Store Buffering
Can this program see r1 = 0, r2 = 0?
// Thread 1           // Thread 2
x = 1                 y = 1
r1 = y                r2 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): yes!
On ARM/POWER: yes!
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Independent Reads of Independent Writes (IRIW)
Can this program see r1 = 1, r2 = 0, r3 = 1, r4 = 0?
(Can Threads 3 and 4 see x and y change in different orders?)
// Thread 1    // Thread 2    // Thread 3    // Thread 4
x = 1          y = 1          r1 = x         r3 = y
							  r2 = y         r4 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): no.
On ARM/POWER: yes!
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Load Buffering
Can this program see r1 = 1, r2 = 1?
(Can each thread&#39;s read happen after the other thread&#39;s write?)
// Thread 1    // Thread 2
r1 = x         r2 = y
y = 1          x = 1
On sequentially consistent hardware: no.
On x86 (or other TSO): no.
On ARM/POWER: yes!
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>内存屏障</title>
      <link>https://www.linuxzen.com/notes/notes/20210712162102-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/</link>
      <pubDate>Mon, 12 Jul 2021 16:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712162102-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/</guid>
      <description>内存屏障（或栅栏）是非顺序一致性的硬件提供的一种显式指令，用于控制排序提供更强的内存排序，修复同步算法。
添加内存屏障，确保每个线程在开始读取之前都会刷新其先前对内存的写入：
// Thread 1 // Thread 2 x = 1 y = 1 barrier barrier r1 = y r2 = x x86 总存储有序（x86-TSO) 加上内存屏障之后 r1=0, r2=0 就会变得不可能。</description>
      <content>&lt;p&gt;内存屏障（或栅栏）是非&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;的硬件提供的一种显式指令，用于控制排序提供更强的内存排序，修复同步算法。&lt;/p&gt;
&lt;p&gt;添加内存屏障，确保每个线程在开始读取之前都会刷新其先前对内存的写入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;// Thread 1           // Thread 2
x = 1                 y = 1
barrier               barrier
r1 = y                r2 = x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/&#34;&gt;x86 总存储有序（x86-TSO)&lt;/a&gt; 加上内存屏障之后 &lt;code&gt;r1=0, r2=0&lt;/code&gt; 就会变得不可能。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>x86 总存储有序（x86-TSO)</title>
      <link>https://www.linuxzen.com/notes/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/</link>
      <pubDate>Mon, 12 Jul 2021 15:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/</guid>
      <description>x86 总存储有序(x86 Total Store Order, x86-TSO)：所有处理器仍然连接到一个共享内存，但是每个处理器都将对该内存的写入(write)放入到本地写入队列中。处理器继续执行新指令，同时写操作(write)会更新到这个共享内存。一个处理器上的内存读取在查询主内存之前会查询本地写队列，但它看不到其他处理器上的写队列。其效果就是当前处理器比其他处理器会先看到自己的写操作。
重要的是： 所有处理器都保证写入（存储 store）到共享内存的（总）顺序，所以给这个模型起了个名字：总存储有序（Total Store Order，TSO）。
写队列是一个标准的先进先出队列：内存写操作总是以与处理器执行相同顺序的应用于共享内存。
基于以上下面 litmus test 的答案依然是 no ，这种情况与顺序一致性模型结果一致：
Litmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. 但其他测试则并不一致区分与顺序一致性的常用例子:
Litmus Test: Write Queue (also called Store Buffer) Can this program see r1 = 0, r2 = 0?</description>
      <content>
  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://colobu.com/2021/06/30/hwmm/mem-tso.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;x86 总存储有序(x86 Total Store Order, x86-TSO)：所有处理器仍然连接到一个共享内存，但是每个处理器都将对该内存的写入(write)放入到本地写入队列中。处理器继续执行新指令，同时写操作(write)会更新到这个共享内存。一个处理器上的内存读取在查询主内存之前会查询本地写队列，但它看不到其他处理器上的写队列。其效果就是当前处理器比其他处理器会先看到自己的写操作。&lt;/p&gt;
&lt;p&gt;重要的是： &lt;strong&gt;&lt;strong&gt;所有处理器都保证写入（存储 store）到共享内存的（总）顺序，所以给这个模型起了个名字：总存储有序（Total Store Order，TSO）。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写队列是一个标准的先进先出队列：内存写操作总是以与处理器执行相同顺序的应用于共享内存。&lt;/p&gt;
&lt;p&gt;基于以上下面 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt; 的答案依然是 &lt;code&gt;no&lt;/code&gt; ，这种情况与&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;模型结果一致：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Message Passing
Can this program see r1 = 1, r2 = 0?
// Thread 1           // Thread 2
x = 1                 r1 = y
y = 1                 r2 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): no.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但其他测试则并不一致区分与&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;的常用例子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Write Queue (also called Store Buffer)
Can this program see r1 = 0, r2 = 0?
// Thread 1           // Thread 2
x = 1                 y = 1
r1 = y                r2 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): yes!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TSO 系统中，线程 1和 2 可能会将它们的写操作排队，然后任何一个写操作进入内存之前从内存中读取，这两个读操作都会看到零。但是任何顺序一致的执行中， &lt;code&gt;x=1&lt;/code&gt; 或 &lt;code&gt;y=1&lt;/code&gt; 必会有一个首先生效。&lt;/p&gt;
&lt;p&gt;如果基于 TSO 系统需要更强的内存排序，可以使用&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712162102-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/&#34;&gt;内存屏障&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一旦一个写操作到达主存储器，所有处理器不仅同认同该值存在，而且还认同它相对于来自其他处理器的写操作的先后顺序。考虑一下这个litmus test:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Litmus Test: Independent Reads of Independent Writes (IRIW)
Can this program see r1 = 1, r2 = 0, r3 = 1, r4 = 0?
(Can Threads 3 and 4 see x and y change in different orders?)
// Thread 1    // Thread 2    // Thread 3    // Thread 4
x = 1          y = 1          r1 = x         r3 = y
							  r2 = y         r4 = x
On sequentially consistent hardware: no.
On x86 (or other TSO): no.
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>litmus test</title>
      <link>https://www.linuxzen.com/notes/notes/20210712153952-litmus_test/</link>
      <pubDate>Mon, 12 Jul 2021 15:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712153952-litmus_test/</guid>
      <description>下面这种关于样本结果的问题被称为 litmus test 。它只有两个答案：可能还是不可能？为我们提供了一种区分内存一致性模型的清晰方法：如果一个模型支持特定的执行，而另一个不支持，那么这两个模型显然不同。
litmus test 假设所有变量都初始为 0 ， rN 表示非共享变量，而是一个线程本地寄存器。
Litmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x 然而不幸的是，一个特定的模型对一个特定的 litmus test 给出的答案往往令人惊讶。</description>
      <content>&lt;p&gt;下面这种关于样本结果的问题被称为 &lt;code&gt;litmus test&lt;/code&gt; 。它只有两个答案：可能还是不可能？为我们提供了一种区分&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/&#34;&gt;内存一致性模型&lt;/a&gt;的清晰方法：如果一个模型支持特定的执行，而另一个不支持，那么这两个模型显然不同。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;litmus test&lt;/code&gt; 假设所有变量都初始为 &lt;code&gt;0&lt;/code&gt; ， &lt;code&gt;rN&lt;/code&gt; 表示非共享变量，而是一个线程本地寄存器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;Litmus Test: Message Passing
Can this program see r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Thread 1           // Thread 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                 r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                 r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而不幸的是，一个特定的模型对一个特定的 &lt;code&gt;litmus test&lt;/code&gt; 给出的答案往往令人惊讶。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>顺序一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 12 Jul 2021 15:19:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>Leslie Lamport 1979 年的论文 How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs 定义：
 The customary approach to designing and proving the correctness of multiprocess algorithms for such a computer assumes that the following condition is satisfied: the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program.</description>
      <content>&lt;p&gt;Leslie Lamport 1979 年的论文 &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/make-multiprocessor-computer-correctly-executes-multiprocess-programs/&#34;&gt;How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs&lt;/a&gt; 定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The customary approach to designing and proving the correctness of multiprocess algorithms for such a computer assumes that the following condition is satisfied: the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program. A multiprocessor satisfying this condition will be called sequentially consistent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;为这种计算机设计和证明多处理算法正确性的通常方法假定满足下列条件:任何执行的结果都是相同的，就好像所有处理器的操作都是按某种顺序执行的，每个处理器的操作都是按程序指定的顺序出现的。满足这一条件的多处理器系统将被称为顺序一致的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;顺序一致性允许程序员假设程序按照它们在源码中组织相同的顺序执行，并且单个线程的执行只是以某种顺序交替（interleaving），而不是以其他方式排列。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看一下下面这个 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;Litmus Test: Message Passing
Can this program see r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Thread 1           // Thread 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                 r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                 r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt; 的执行顺序一致，则有六种可能的交替：&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://colobu.com/2021/06/30/hwmm/mem-litmus.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;所以这个 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712153952-litmus_test/&#34;&gt;litmus test&lt;/a&gt; 的答案是 &lt;code&gt;no&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;不幸得时，实践中现在硬件都会偏离顺序一致性来放弃严格的顺序一致性可以让硬件更快的执行程序。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>内存一致性模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 15:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/</guid>
      <description> tags: 一致性，Memory Model  当执行给定程序时，硬件和编译器之间的契约，对编译后后的代码对存储在内存中的数据更改的可见性和一致性。 这种契约称为「内存一致性模型（Memeory Consistency Model）」或仅仅是「内存模型（Memory Model）」。
最初目标是定义程序员编写汇编代码时硬件提供的保证，后来用来定义高级编程语言（如 C++ 或 Java）对该语言编写代码的程序员提供的保证。
例如下面变量都初始为 0 的情况下，线程 1 和 2 都运行在自己专用的处理器上，都运行到完成，这个程序能打印 0 吗？
// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); Memory coherence vs consistency 内存一致性（coherence） 内存顺序一致性（sequential consistency） 硬件  顺序一致性 x86 总存储有序（x86-TSO) ARM/POWER Relaxed Memory Model 弱有序和无数据竞争（DRF）  编程语言内存模型 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当执行给定程序时，硬件和编译器之间的契约，对编译后后的代码对存储在内存中的数据更改的可见性和一致性。
这种契约称为「内存一致性模型（Memeory Consistency Model）」或仅仅是「内存模型（Memory Model）」。&lt;/p&gt;
&lt;p&gt;最初目标是定义程序员编写汇编代码时硬件提供的保证，后来用来定义高级编程语言（如 C++ 或 Java）对该语言编写代码的程序员提供的保证。&lt;/p&gt;
&lt;p&gt;例如下面变量都初始为 0 的情况下，线程 1 和 2 都运行在自己专用的处理器上，都运行到完成，这个程序能打印 0 吗？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Thread 1           // Thread 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(done &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* loop */&lt;/span&gt; }
done &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;             print(x);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;memory-coherence-vs-consistency--20210716110147-memory-coherence-vs-consistency-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110147-memory_coherence_vs_consistency/&#34;&gt;Memory coherence vs consistency&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;内存一致性-coherence--20210716110953-内存一致性-coherence-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/&#34;&gt;内存一致性（coherence）&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;内存顺序一致性-sequential-consistency--20210716111043-内存顺序一致性-sequential-consistency-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/&#34;&gt;内存顺序一致性（sequential consistency）&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;硬件&#34;&gt;硬件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;顺序一致性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/&#34;&gt;x86 总存储有序（x86-TSO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712162917-arm_power_relaxed_memory_model/&#34;&gt;ARM/POWER Relaxed Memory Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/&#34;&gt;弱有序和无数据竞争（DRF）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程语言内存模型--20210712143544-编程语言内存模型-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;编程语言内存模型&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>编程语言内存模型</title>
      <link>https://www.linuxzen.com/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 14:35:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>tags: Memory Model,Programming Language,Computer Systems Programming Language Memory Models 编程语言内存模型  编程语言内存模型回答了并行程序可以依靠什么行为以便它们的线程之间可以共享内存的问题。
首先需要理解原子变量（atomic variable）或原子操作（tomic operation），编程语言模型作为程序员和编译器之间的约定规定了它们之间所需要的额外细节。
硬件、Litmus Tests、Happens Before 和 DRF-SC 程序使用DRF-SC 系统同步指令在多个处理器运行的代码之间创建一种“happens before”的关系。
 Thread 1 和 Thread 2 执行 S(a) 同步指令。在这个特定执行中，两条 S(a) 指令建立了从 Thread 1 到 Thread 2 的 happens-before 关系，因此 Thread 1 中的 = W(x)= 发生在 Thread 2 中的 R(x) 之前。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/plmm&#34;&gt;Programming Language Memory Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colobu.com/2021/07/11/Programming-Language-Memory-Models/&#34;&gt;编程语言内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程语言内存模型回答了并行程序可以依靠什么行为以便它们的线程之间可以共享内存的问题。&lt;/p&gt;
&lt;p&gt;首先需要理解&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/&#34;&gt;原子变量（atomic variable）或原子操作（tomic operation）&lt;/a&gt;，编程语言模型作为程序员和编译器之间的约定规定了它们之间所需要的额外细节。&lt;/p&gt;
&lt;h2 id=&#34;硬件-litmus-tests-happens-before-和-drf-sc&#34;&gt;硬件、Litmus Tests、Happens Before 和 DRF-SC&lt;/h2&gt;
&lt;p&gt;程序使用&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210713195115-drf_sc_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4/&#34;&gt;DRF-SC 系统同步指令&lt;/a&gt;在多个处理器运行的代码之间创建一种“happens before”的关系。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://colobu.com/2021/07/11/Programming-Language-Memory-Models/mem-adve-4.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;&lt;code&gt;Thread 1&lt;/code&gt; 和 &lt;code&gt;Thread 2&lt;/code&gt; 执行 &lt;code&gt;S(a)&lt;/code&gt; 同步指令。在这个特定执行中，两条 &lt;code&gt;S(a)&lt;/code&gt; 指令建立了从 &lt;code&gt;Thread 1&lt;/code&gt; 到 &lt;code&gt;Thread 2&lt;/code&gt; 的 &lt;code&gt;happens-before&lt;/code&gt; 关系，因此 &lt;code&gt;Thread 1&lt;/code&gt; 中的 = W(x)= 发生在 &lt;code&gt;Thread 2&lt;/code&gt; 中的 &lt;code&gt;R(x)&lt;/code&gt; 之前。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>硬件内存模型</title>
      <link>https://www.linuxzen.com/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 14:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>tags: Memory Model,Computer Systems Hardware Memory Models 硬件内存模型  内存模型 内存一致性模型</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102072550-memory_model/&#34;&gt;Memory Model&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/hwmm&#34;&gt;Hardware Memory Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colobu.com/2021/06/30/hwmm&#34;&gt;硬件内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存模型&#34;&gt;内存模型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/&#34;&gt;内存一致性模型&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Emacs 优化启动速度</title>
      <link>https://www.linuxzen.com/notes/notes/20210712114303-emacs_%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Mon, 12 Jul 2021 11:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712114303-emacs_%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</guid>
      <description> tags: Emacs  优化 GC 参考：LSP Mode Performance
;; Optmization ;; Sources: ;; ;; - https://www.reddit.com/r/emacs/comments/ofhket/further_boost_start_up_time_with_a_simple_tweak/ ;; - https://emacs-lsp.github.io/lsp-mode/page/performance/ ;; (setq gc-cons-threshold 32000000) ;; 32mb (setq read-process-output-max (* 1024 1024)) ;; 1mb 将启动速度优化到 3 秒左右。
Dumping Emacs  Emacs WIKI: Dumping Emacs Painless Transition to Portable Dumper  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优化-gc&#34;&gt;优化 GC&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/performance/&#34;&gt;LSP Mode Performance&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Optmization&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Sources:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; - https://www.reddit.com/r/emacs/comments/ofhket/further_boost_start_up_time_with_a_simple_tweak/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; - https://emacs-lsp.github.io/lsp-mode/page/performance/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
(setq gc-cons-threshold &lt;span style=&#34;color:#ae81ff&#34;&gt;32000000&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; 32mb&lt;/span&gt;
(setq read-process-output-max (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;;; 1mb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将启动速度优化到 3 秒左右。&lt;/p&gt;
&lt;h2 id=&#34;dumping-emacs&#34;&gt;Dumping Emacs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emacs WIKI: &lt;a href=&#34;https://www.emacswiki.org/emacs/DumpingEmacs&#34;&gt;Dumping Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.casouri.cat/note/2020/painless-transition-to-portable-dumper/index.html&#34;&gt;Painless Transition to Portable Dumper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>动态再平衡策略</title>
      <link>https://www.linuxzen.com/notes/notes/20210712072221-%E5%8A%A8%E6%80%81%E5%86%8D%E5%B9%B3%E8%A1%A1%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 12 Jul 2021 07:22:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712072221-%E5%8A%A8%E6%80%81%E5%86%8D%E5%B9%B3%E8%A1%A1%E7%AD%96%E7%95%A5/</guid>
      <description>为什么不用取模？ 节点数发生变化时，会导致很多关键字需要做节点数据迁移，会大大增加再平衡的成本。
固定数量的分区 创建远超实际节点数的分区数量，然后再为每个节点分配多个分区。
新加入节点 从现有的节点上匀走几个分区，直到分区再次达到平衡。
删除节点 采取和上面相反的过程。
优点  分区总数量不变，也不会改变关键字的分区映射关系。 唯一需要调整的分区与节点的映射关系。 分区和节点的映射关系调整可以逐步完成。  缺点  分区数量需要数据库创建时确定，并不能更改  动态分区 分区数据增长超过一个可配参数的阈值（HBase 10GB），它就拆分为两个分区，相反则合并相邻的分区。过程类似B-trees 的分裂操作。
每个分区总是分配一个节点，一个节点可以承载多个分区。
分区分裂 将其中的一半转移到其他节点以平衡负载。
优点  分区数量可以自动适配数据总量。 空数据库可以配置初始分区解决少量数据集就一个分区避免系统热点（HBase 和 MongoDB）  按节点比例分区 使分区数与集群节点数成正比关系（Cassandra 和 Ketama），就是每个节点具有固定数量的分区。 当节点数不变时，每个分区的大小与数据集大小保持正比增长关系。
新加入节点 随机选择固定数量的现有分区进行分裂，然后拿走这些分区的一半数据量。
优点  较大的数据可以使每个分区的大小保持稳定。  缺点  存在不公平分裂。  </description>
      <content>&lt;h2 id=&#34;为什么不用取模&#34;&gt;为什么不用取模？&lt;/h2&gt;
&lt;p&gt;节点数发生变化时，会导致很多关键字需要做节点数据迁移，会大大增加再平衡的成本。&lt;/p&gt;
&lt;h2 id=&#34;固定数量的分区&#34;&gt;固定数量的分区&lt;/h2&gt;
&lt;p&gt;创建远超实际节点数的分区数量，然后再为每个节点分配多个分区。&lt;/p&gt;
&lt;h3 id=&#34;新加入节点&#34;&gt;新加入节点&lt;/h3&gt;
&lt;p&gt;从现有的节点上匀走几个分区，直到分区再次达到平衡。&lt;/p&gt;
&lt;h3 id=&#34;删除节点&#34;&gt;删除节点&lt;/h3&gt;
&lt;p&gt;采取和上面相反的过程。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分区总数量不变，也不会改变关键字的分区映射关系。&lt;/li&gt;
&lt;li&gt;唯一需要调整的分区与节点的映射关系。&lt;/li&gt;
&lt;li&gt;分区和节点的映射关系调整可以逐步完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分区数量需要数据库创建时确定，并不能更改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态分区&#34;&gt;动态分区&lt;/h2&gt;
&lt;p&gt;分区数据增长超过一个可配参数的阈值（HBase 10GB），它就拆分为两个分区，相反则合并相邻的分区。过程类似&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606143901-b_trees/&#34;&gt;B-trees&lt;/a&gt; 的分裂操作。&lt;/p&gt;
&lt;p&gt;每个分区总是分配一个节点，一个节点可以承载多个分区。&lt;/p&gt;
&lt;h3 id=&#34;分区分裂&#34;&gt;分区分裂&lt;/h3&gt;
&lt;p&gt;将其中的一半转移到其他节点以平衡负载。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分区数量可以自动适配数据总量。&lt;/li&gt;
&lt;li&gt;空数据库可以配置初始分区解决少量数据集就一个分区避免&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/&#34;&gt;系统热点&lt;/a&gt;（HBase 和 MongoDB）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;按节点比例分区&#34;&gt;按节点比例分区&lt;/h2&gt;
&lt;p&gt;使分区数与集群节点数成正比关系（Cassandra 和 Ketama），就是每个节点具有固定数量的分区。
当节点数不变时，每个分区的大小与数据集大小保持正比增长关系。&lt;/p&gt;
&lt;h3 id=&#34;新加入节点&#34;&gt;新加入节点&lt;/h3&gt;
&lt;p&gt;随机选择固定数量的现有分区进行分裂，然后拿走这些分区的一半数据量。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;较大的数据可以使每个分区的大小保持稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存在不公平分裂。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>基于词条的二级索引分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210712071502-%E5%9F%BA%E4%BA%8E%E8%AF%8D%E6%9D%A1%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA/</link>
      <pubDate>Mon, 12 Jul 2021 07:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712071502-%E5%9F%BA%E4%BA%8E%E8%AF%8D%E6%9D%A1%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA/</guid>
      <description>对所有数据构建全局索引，为了避免瓶颈，对索引本身进行分区，比如：
 将 a～r 开始的关键字放在分区 0 将 s～z 开始的关键字放在分区 1  优点  可以支持高效的区间查询 读取更为高效  缺点  写入速度慢，会引入明显的写入放大 写入逻辑复杂 难以保证索引时刻最新，需要跨多个相关分区的分布式事务支持  实践 对全局二级索引的更新往往都是异步的。</description>
      <content>&lt;p&gt;对所有数据构建全局索引，为了避免瓶颈，对索引本身进行分区，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 a～r 开始的关键字放在分区 0&lt;/li&gt;
&lt;li&gt;将 s～z 开始的关键字放在分区 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优点&#34;&gt;优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以支持高效的区间查询&lt;/li&gt;
&lt;li&gt;读取更为高效&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺点&#34;&gt;缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;写入速度慢，会引入明显的写入放大&lt;/li&gt;
&lt;li&gt;写入逻辑复杂&lt;/li&gt;
&lt;li&gt;难以保证索引时刻最新，需要跨多个相关分区的分布式事务支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;
&lt;p&gt;对全局二级索引的更新往往都是异步的。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>基于文档分区的二级索引</title>
      <link>https://www.linuxzen.com/notes/notes/20210712071105-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E5%88%86%E5%8C%BA%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 12 Jul 2021 07:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210712071105-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E5%88%86%E5%8C%BA%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/</guid>
      <description>每个分区各自维护自身的二级索引，读取时需要对所有分区节点进行查询然后对结果进行合并。
这种方法虽然二级索引查询代价高，但依然广泛用于实践：MongoDB、Riak、Cassandra、ElasticSearch、SolrCloud 和 VoltDB。</description>
      <content>&lt;p&gt;每个分区各自维护自身的二级索引，读取时需要对所有分区节点进行查询然后对结果进行合并。&lt;/p&gt;
&lt;p&gt;这种方法虽然二级索引查询代价高，但依然广泛用于实践：MongoDB、Riak、Cassandra、ElasticSearch、SolrCloud 和 VoltDB。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>基于关键字哈希值分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 11 Jul 2021 17:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/</guid>
      <description>可以基于关键值哈希函数的方式分区，解决基于关键字区间分区数据倾斜与热点的问题。一个好的哈希函数可以处理数据倾斜并使其均匀分布，并且不需要在加密方面很强。
优点 这种方法可以很好的将关键字均匀分配到多个分区中。
缺点 丧失良好的区间查询性能。即使关键字相邻，也会分布在不同的分区上。</description>
      <content>&lt;p&gt;可以基于关键值哈希函数的方式分区，解决&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/&#34;&gt;基于关键字区间分区&lt;/a&gt;数据倾斜与热点的问题。一个好的哈希函数可以处理数据倾斜并使其均匀分布，并且不需要在加密方面很强。&lt;/p&gt;
&lt;h2 id=&#34;优点&#34;&gt;优点&lt;/h2&gt;
&lt;p&gt;这种方法可以很好的将关键字均匀分配到多个分区中。&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;缺点&lt;/h2&gt;
&lt;p&gt;丧失良好的区间查询性能。即使关键字相邻，也会分布在不同的分区上。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>基于关键字区间分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 11 Jul 2021 15:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/</guid>
      <description>为每个分区分配一段连续的关键字或者关键字区间范围。</description>
      <content>&lt;p&gt;为每个分区分配一段连续的关键字或者关键字区间范围。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>系统热点</title>
      <link>https://www.linuxzen.com/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/</link>
      <pubDate>Sun, 11 Jul 2021 15:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/</guid>
      <description>负载倾斜会导致所有负载都集中在一个分区节点上，这种负载严重不成比例的分区即称为系统热点。
应用层解决 即使通过基于关键字哈希值分区和基于关键字区间分区等策略解决了大部分热点问题，但是极端情况下依然会出现热点，比如社交媒体的热点时间都会导致热点，只能通过应用层解决，一个简单的技术：
 关键字开头或结尾添加一个随机数，两位随机数就可以将关键字的写操作分布到 100 个不同的分区上； 读取就必须从所有的 1000 个关键字中读取数据然后进行合并； 通过额外的元数据标记哪些关键字进行了特殊处理。  由于对读取造成的额外开销，所以通常只有对少量的热点关键词附加随机数才有意义。</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/&#34;&gt;负载倾斜&lt;/a&gt;会导致所有负载都集中在一个分区节点上，这种负载严重不成比例的分区即称为系统热点。&lt;/p&gt;
&lt;h2 id=&#34;应用层解决&#34;&gt;应用层解决&lt;/h2&gt;
&lt;p&gt;即使通过&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/&#34;&gt;基于关键字哈希值分区&lt;/a&gt;和&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/&#34;&gt;基于关键字区间分区&lt;/a&gt;等策略解决了大部分热点问题，但是极端情况下依然会出现热点，比如社交媒体的热点时间都会导致热点，只能通过应用层解决，一个简单的技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键字开头或结尾添加一个随机数，两位随机数就可以将关键字的写操作分布到 100 个不同的分区上；&lt;/li&gt;
&lt;li&gt;读取就必须从所有的 1000 个关键字中读取数据然后进行合并；&lt;/li&gt;
&lt;li&gt;通过额外的元数据标记哪些关键字进行了特殊处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于对读取造成的额外开销，所以通常只有对少量的热点关键词附加随机数才有意义。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>负载倾斜</title>
      <link>https://www.linuxzen.com/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/</link>
      <pubDate>Sun, 11 Jul 2021 15:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/</guid>
      <description>分区不均匀时出现某些分区节点比其他分区承担更多的数据量和查询负载。倾斜会导致分区效率严重下降。</description>
      <content>&lt;p&gt;分区不均匀时出现某些分区节点比其他分区承担更多的数据量和查询负载。倾斜会导致分区效率严重下降。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>数据分区</title>
      <link>https://www.linuxzen.com/notes/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 11 Jul 2021 15:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/</guid>
      <description>每一条数据都属于特定的分区，每个分区都是一个小型数据库。
目的 提高扩展性，分散大的数据集和查询负载。
目标 将数据和查询负载均匀的分步在所有节点上。如果分布不均匀会出现负载倾斜和系统热点。
数据分区与数据复制 结合数据复制每个分区在多个节点都有副本，进行冗余提高可用性。
键-值数据的分区 避免系统热点最简单的方法是将记录随机分配给所有节点上，缺点是：没办法知道数据保存在哪个节点上，所以读取时需要查询所有节点。
基于关键字区间分区 基于关键字哈希值分区 负载倾斜与系统热点 分区与二级索引 二级索引不能唯一标识一条记录，比如查询颜色为红色的汽车。二级索引带来的主要挑战是它们不能规整的映射到分区中。
有两种方法来支持对二级索引进行分区：
 基于文档分区的二级索引 基于词条的二级索引分区  分区再平衡  动态再平衡策略 自动与手动再平衡操作  请求路由 策略  客户端可以连接任意节点，并由节点做转发不在当前节点的分区请求。 由路由层来充当分区感知的负载均衡器。 客户端直接感知分区和节点分配关系，客户端直连目标节点。  做出路由决策的组件  Zookeeper gossip 协议  </description>
      <content>&lt;p&gt;每一条数据都属于特定的分区，每个分区都是一个小型数据库。&lt;/p&gt;
&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;
&lt;p&gt;提高扩展性，分散大的数据集和查询负载。&lt;/p&gt;
&lt;h2 id=&#34;目标&#34;&gt;目标&lt;/h2&gt;
&lt;p&gt;将数据和查询负载均匀的分步在所有节点上。如果分布不均匀会出现&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/&#34;&gt;负载倾斜&lt;/a&gt;和&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/&#34;&gt;系统热点&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;数据分区与数据复制&#34;&gt;数据分区与数据复制&lt;/h2&gt;
&lt;p&gt;结合数据复制每个分区在多个节点都有副本，进行冗余提高可用性。&lt;/p&gt;
&lt;h2 id=&#34;键-值数据的分区&#34;&gt;键-值数据的分区&lt;/h2&gt;
&lt;p&gt;避免&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/&#34;&gt;系统热点&lt;/a&gt;最简单的方法是将记录随机分配给所有节点上，缺点是：没办法知道数据保存在哪个节点上，所以读取时需要查询所有节点。&lt;/p&gt;
&lt;h3 id=&#34;基于关键字区间分区--20210711154220-基于关键字区间分区-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/&#34;&gt;基于关键字区间分区&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;基于关键字哈希值分区--20210711171149-基于关键字哈希值分区-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/&#34;&gt;基于关键字哈希值分区&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;负载倾斜--20210711153606-负载倾斜-dot-md--与-系统热点--20210711153934-系统热点-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/&#34;&gt;负载倾斜&lt;/a&gt;与&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/&#34;&gt;系统热点&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;分区与二级索引&#34;&gt;分区与二级索引&lt;/h2&gt;
&lt;p&gt;二级索引不能唯一标识一条记录，比如查询颜色为红色的汽车。二级索引带来的主要挑战是它们不能规整的映射到分区中。&lt;/p&gt;
&lt;p&gt;有两种方法来支持对二级索引进行分区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712071105-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E5%88%86%E5%8C%BA%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/&#34;&gt;基于文档分区的二级索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712071502-%E5%9F%BA%E4%BA%8E%E8%AF%8D%E6%9D%A1%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA/&#34;&gt;基于词条的二级索引分区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分区再平衡&#34;&gt;分区再平衡&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712072221-%E5%8A%A8%E6%80%81%E5%86%8D%E5%B9%B3%E8%A1%A1%E7%AD%96%E7%95%A5/&#34;&gt;动态再平衡策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动与手动再平衡操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;请求路由&#34;&gt;请求路由&lt;/h2&gt;
&lt;h3 id=&#34;策略&#34;&gt;策略&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;客户端可以连接任意节点，并由节点做转发不在当前节点的分区请求。&lt;/li&gt;
&lt;li&gt;由路由层来充当分区感知的负载均衡器。&lt;/li&gt;
&lt;li&gt;客户端直接感知分区和节点分配关系，客户端直连目标节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;做出路由决策的组件&#34;&gt;做出路由决策的组件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Zookeeper&lt;/li&gt;
&lt;li&gt;gossip 协议&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>syn</title>
      <link>https://www.linuxzen.com/notes/notes/20210616144616-syn/</link>
      <pubDate>Wed, 16 Jun 2021 14:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210616144616-syn/</guid>
      <description> syn::Span 代码位置  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syn::Span&lt;/code&gt; 代码位置&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>quote</title>
      <link>https://www.linuxzen.com/notes/notes/20210616144334-quote/</link>
      <pubDate>Wed, 16 Jun 2021 14:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210616144334-quote/</guid>
      <description>循环展开 let fields = vec![ syn::Ident::new(&amp;#34;foo&amp;#34;, syn::Span::call_site()), syn::Ident::new(&amp;#34;bar&amp;#34;, syn::Span::call_site()), ]; let token = quote!{ #(#fields),* }; // -&amp;gt; foo,bar </description>
      <content>&lt;h2 id=&#34;循环展开&#34;&gt;循环展开&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![
  syn::Ident::new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, syn::Span::call_site()),
  syn::Ident::new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;, syn::Span::call_site()),
];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quote&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;{
  #(#fields),&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
}; &lt;span style=&#34;color:#75715e&#34;&gt;// -&amp;gt; foo,bar
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Rust 属性宏解析</title>
      <link>https://www.linuxzen.com/notes/notes/20210616141500-rust_%E5%B1%9E%E6%80%A7%E5%AE%8F%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 16 Jun 2021 14:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210616141500-rust_%E5%B1%9E%E6%80%A7%E5%AE%8F%E8%A7%A3%E6%9E%90/</guid>
      <description>准备 解析宏通过两个 crate 进行：
 quote = &amp;ldquo;1.0&amp;rdquo; syn = &amp;ldquo;1.0&amp;rdquo;  Derive 属性宏 探讨 Rust 宏系统中带属性（Attributes）的 Derive 宏的几种变体，以及如何进行解析。
属性宏的变体   函数调用
#[derive(Custom)] struct Demo { #[attr(arg)] a: i8, }   关键字参数调用
#[derive(Custom)] struct Demo { #[args(name = &amp;#34;val&amp;#34;)] b: i8, }   直接赋值
#[derive(Custom)] struct Demo { #[meta = &amp;#34;val&amp;#34;] c: i8, }   函数调用 关键字参数调用 可以从 Struct 解析出各个字段，通过解析各个字段的 attrs 属性，并对 attrs 进行遍历，使用 attr.parse_args()? 即可解析出对应的关键字参数，咱们以前面的代码为例:</description>
      <content>&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;解析宏通过两个 crate 进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210616144334-quote/&#34;&gt;quote&lt;/a&gt; = &amp;ldquo;1.0&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210616144616-syn/&#34;&gt;syn&lt;/a&gt; = &amp;ldquo;1.0&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;derive-属性宏&#34;&gt;Derive 属性宏&lt;/h2&gt;
&lt;p&gt;探讨 Rust 宏系统中带属性（Attributes）的 Derive 宏的几种变体，以及如何进行解析。&lt;/p&gt;
&lt;h3 id=&#34;属性宏的变体&#34;&gt;属性宏的变体&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Custom)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Demo&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;#[attr(arg)]&lt;/span&gt;
  a: &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字参数调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Custom)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Demo&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;#[args(name = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
  b: &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接赋值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Custom)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Demo&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;#[meta = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
  c: &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;函数调用&#34;&gt;函数调用&lt;/h3&gt;
&lt;h3 id=&#34;关键字参数调用&#34;&gt;关键字参数调用&lt;/h3&gt;
&lt;p&gt;可以从 Struct 解析出各个字段，通过解析各个字段的 attrs 属性，并对 attrs 进行遍历，使用 &lt;code&gt;attr.parse_args()?&lt;/code&gt; 即可解析出对应的关键字参数，咱们以前面的代码为例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Custom)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Demo&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;#[args(name = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
  b: &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的解析代码为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; proc_macro::TokenStream;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; quote::quote;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; syn::{self, parse, DeriveInput};

&lt;span style=&#34;color:#75715e&#34;&gt;#[proc_macro_derive(Custom, attributes(args))]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;derive&lt;/span&gt;(input: &lt;span style=&#34;color:#a6e22e&#34;&gt;TokenStream&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TokenStream&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ast: &lt;span style=&#34;color:#a6e22e&#34;&gt;DeriveInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse(input).unwrap();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ast.ident;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; debug_fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![];

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Data::Struct(ds) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ast.data {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Fields::Named(fields) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds.fields {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; field &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; fields.named.iter() {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; field_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field.ident.clone().unwrap();
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(attr) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field.attrs.clone().iter().next() {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; parse_args_attr_value(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;attr) {
						Ok(v) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
						   &lt;span style=&#34;color:#75715e&#34;&gt;// TODO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;						},
						Err(err) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; err.to_compile_error().into(),
					}
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quote&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;{
	};
	tokens.into()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_args_attr_value&lt;/span&gt;(attr: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syn&lt;/span&gt;::Attribute) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;syn::LitStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, syn::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(seg) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attr.path.segments.first() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg.ident &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attr.parse_args()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Meta::NameValue(values) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; arg_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;values.path.segments.first().unwrap().ident;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; arg_name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Lit::Str(name) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; values.lit {
						&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ok(Some(name));
					}
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(syn::Error::new(attr.bracket_token.span, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected `args(name = \&amp;#34;...\&amp;#34;)`&amp;#34;&lt;/span&gt;.to_owned()));
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ok(None)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;直接赋值&#34;&gt;直接赋值&lt;/h3&gt;
&lt;p&gt;直接赋值类似于上面的关键字解析调用，但是对应的 &lt;code&gt;attr.parse_args&lt;/code&gt; 需要替换为 &lt;code&gt;attr.parse_meta&lt;/code&gt; ，比如解析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Custom)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Demo&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;#[meta = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
  c: &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; proc_macro::TokenStream;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; quote::quote;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; syn::{self, parse, DeriveInput};

&lt;span style=&#34;color:#75715e&#34;&gt;#[proc_macro_derive(Custom, attributes(args))]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;derive&lt;/span&gt;(input: &lt;span style=&#34;color:#a6e22e&#34;&gt;TokenStream&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TokenStream&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ast: &lt;span style=&#34;color:#a6e22e&#34;&gt;DeriveInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse(input).unwrap();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ast.ident;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; debug_fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![];

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Data::Struct(ds) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ast.data {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Fields::Named(fields) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds.fields {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; field &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; fields.named.iter() {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; field_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field.ident.clone().unwrap();
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(attr) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field.attrs.clone().iter().next() {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; parse_meta_attr_value(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;attr) {
						Ok(v) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
						   &lt;span style=&#34;color:#75715e&#34;&gt;// TODO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;						},
						Err(err) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; err.to_compile_error().into(),
					}
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quote&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;{
	};
	tokens.into()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_meta_attr_value&lt;/span&gt;(attr: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syn&lt;/span&gt;::Attribute) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;syn::LitStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, syn::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(seg) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attr.path.segments.first() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg.ident &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attr.parse_meta()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Meta::NameValue(values) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; arg_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;values.path.segments.first().unwrap().ident;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; arg_name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; syn::Lit::Str(name) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; values.lit {
						&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ok(Some(name));
					}
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(syn::Error::new(attr.bracket_token.span, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected `meta = \&amp;#34;...\&amp;#34;`&amp;#34;&lt;/span&gt;.to_owned()));
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ok(None)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Happens-before 关系和并发</title>
      <link>https://www.linuxzen.com/notes/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Tue, 15 Jun 2021 21:54:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/</guid>
      <description>确定前后关系  服务器为每个主键维护一个版本号，每当主键新值写入时递增版本号，并将新版本号与写入值一起保存。 当客户端读取主键时，服务器将返回所有（未被覆盖的）当前值以及最新的版本号。且要求写入之前，客户端必须先发送读请求。 客户端写主键，写请求必须包含之前读到的版本号，读到的值和新值合并后的集合。写请求的响应可以像读操作一样，会返回所有当前值，这样可以一步步链接起多个写入的值。 当服务器收到带有特定版本号的写入时，覆盖该版本号或者更低版本的所有值，但必须保存更高版本号所有值。  当写请求包含了前一次读取的版本号时，意味着修改时基于以前的状态。否则它将与所有的其他写入同时进行，不会覆盖任何已有值，其传入的值将包含在后续读请求的返回值列表中。
合并同时写入的值 上面算法不会导致数据丢失，但是客户端需要做一些额外的工作：如果多个操作并发发生，则客户端必须通过合并并发写入的值来继承旧值。同时删除需要特殊的墓碑标记，防止被合并回去。
版本矢量 每个副本和每个主键均定义一个版本号，每个副本在处理时增加自己的版本号，并跟踪从其他副本看到的版本号。通过这些信息来指示要覆盖那些值，该保留那些并发值。
所有的版本号集合称为版本矢量。</description>
      <content>&lt;h2 id=&#34;确定前后关系&#34;&gt;确定前后关系&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;服务器为每个主键维护一个版本号，每当主键新值写入时递增版本号，并将新版本号与写入值一起保存。&lt;/li&gt;
&lt;li&gt;当客户端读取主键时，服务器将返回所有（未被覆盖的）当前值以及最新的版本号。且要求写入之前，客户端必须先发送读请求。&lt;/li&gt;
&lt;li&gt;客户端写主键，写请求必须包含之前读到的版本号，读到的值和新值合并后的集合。写请求的响应可以像读操作一样，会返回所有当前值，这样可以一步步链接起多个写入的值。&lt;/li&gt;
&lt;li&gt;当服务器收到带有特定版本号的写入时，覆盖该版本号或者更低版本的所有值，但必须保存更高版本号所有值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当写请求包含了前一次读取的版本号时，意味着修改时基于以前的状态。否则它将与所有的其他写入同时进行，不会覆盖任何已有值，其传入的值将包含在后续读请求的返回值列表中。&lt;/p&gt;
&lt;h2 id=&#34;合并同时写入的值&#34;&gt;合并同时写入的值&lt;/h2&gt;
&lt;p&gt;上面算法不会导致数据丢失，但是客户端需要做一些额外的工作：如果多个操作并发发生，则客户端必须通过合并并发写入的值来继承旧值。同时删除需要特殊的墓碑标记，防止被合并回去。&lt;/p&gt;
&lt;h2 id=&#34;版本矢量&#34;&gt;版本矢量&lt;/h2&gt;
&lt;p&gt;每个副本和每个主键均定义一个版本号，每个副本在处理时增加自己的版本号，并跟踪从其他副本看到的版本号。通过这些信息来指示要覆盖那些值，该保留那些并发值。&lt;/p&gt;
&lt;p&gt;所有的版本号集合称为版本矢量。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>检测并发写</title>
      <link>https://www.linuxzen.com/notes/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/</link>
      <pubDate>Tue, 15 Jun 2021 21:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/</guid>
      <description>LWW：最后写入者获胜 Happens-before 关系和并发 </description>
      <content>&lt;h2 id=&#34;lww-最后写入者获胜--20210615083500-最后写入者获胜-dot-md&#34;&gt;LWW：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/&#34;&gt;最后写入者获胜&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;happens-before-关系和并发--20210615215426-happens-before-关系和并发-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/&#34;&gt;Happens-before 关系和并发&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>sloppy quorum</title>
      <link>https://www.linuxzen.com/notes/notes/20210615212500-sloppy_quorum/</link>
      <pubDate>Tue, 15 Jun 2021 21:25:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615212500-sloppy_quorum/</guid>
      <description>当节点不能满足 \(w + r &amp;gt; n\) 时将写请求暂时写入一些可访问的临时节点中，一旦网络问题得到交接，临时节点需要把接收的写入全部发送到原始主节点上。这就是所谓的数据回传（或者暗示移交）。</description>
      <content>&lt;p&gt;当节点不能满足 \(w + r &amp;gt; n\) 时将写请求暂时写入一些可访问的临时节点中，一旦网络问题得到交接，临时节点需要把接收的写入全部发送到原始主节点上。这就是所谓的数据回传（或者暗示移交）。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Quorum 一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Tue, 15 Jun 2021 21:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description> tags: 一致性  确定读写成功 确定读写节点在多少节点成功才可以认为写入成功：需要保证读取时至少一个包含新值。
n 个副本的情况下，写入需要 \(w\) 个节点确认，读取必须至少查询 \(r\) 个节点，则只要 \(w + r &amp;gt; n\) ，读取的节点中一定会包含最新值。
 \(w\) 仲裁写（法定票数写） \(r\) 仲裁读（法定票说读）  一般 \(n\) 设置为奇数： \(w=r=(n+1)/2\) （向上取整）。
可容忍的失效节点数 仲裁条件 \(w+r&amp;gt;n\) 定义了系统可容忍的失效节点数。
 \(w&amp;lt;n\) ，如果一个节点不可用，仍然可以处理写入。 \(r&amp;lt;n\) ，如果一个节点不可用，仍然可以处理读取。 \(n=3\),\(w=2\),\(r=2\)，则可以容忍一个节点不可用 \(n=5\),\(w=3\),\(r=3\), 则可以容忍两个节点不可用  局限性  如果采用了 sloppy quorum，写操作的 w 节点和读取的 r 节点可能完全不同，因此无法保证写请求一定存在重叠的节点。 并发无法明确顺序，需要进行合并并发写入。如最后写入者获胜。 同时读写，写操作在一部分节点上完成，则读取新值还是旧值存在不确定性。 部分节点写入成功，但是最终写入失败无法回滚。 新值的节点失效，但恢复数据来自某个旧值，则总的新值节点数低于 w 边界情况  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;一致性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;确定读写成功&#34;&gt;确定读写成功&lt;/h2&gt;
&lt;p&gt;确定读写节点在多少节点成功才可以认为写入成功：需要保证读取时至少一个包含新值。&lt;/p&gt;
&lt;p&gt;n 个副本的情况下，写入需要 \(w\) 个节点确认，读取必须至少查询 \(r\) 个节点，则只要 \(w + r &amp;gt; n\) ，读取的节点中一定会包含最新值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(w\) 仲裁写（法定票数写）&lt;/li&gt;
&lt;li&gt;\(r\) 仲裁读（法定票说读）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般 \(n\) 设置为奇数： \(w=r=(n+1)/2\) （向上取整）。&lt;/p&gt;
&lt;h2 id=&#34;可容忍的失效节点数&#34;&gt;可容忍的失效节点数&lt;/h2&gt;
&lt;p&gt;仲裁条件 \(w+r&amp;gt;n\) 定义了系统可容忍的失效节点数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(w&amp;lt;n\) ，如果一个节点不可用，仍然可以处理写入。&lt;/li&gt;
&lt;li&gt;\(r&amp;lt;n\) ，如果一个节点不可用，仍然可以处理读取。&lt;/li&gt;
&lt;li&gt;\(n=3\),\(w=2\),\(r=2\)，则可以容忍一个节点不可用&lt;/li&gt;
&lt;li&gt;\(n=5\),\(w=3\),\(r=3\), 则可以容忍两个节点不可用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;局限性&#34;&gt;局限性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如果采用了 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615212500-sloppy_quorum/&#34;&gt;sloppy quorum&lt;/a&gt;，写操作的 w 节点和读取的 r 节点可能完全不同，因此无法保证写请求一定存在重叠的节点。&lt;/li&gt;
&lt;li&gt;并发无法明确顺序，需要进行合并并发写入。如&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/&#34;&gt;最后写入者获胜&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;同时读写，写操作在一部分节点上完成，则读取新值还是旧值存在不确定性。&lt;/li&gt;
&lt;li&gt;部分节点写入成功，但是最终写入失败无法回滚。&lt;/li&gt;
&lt;li&gt;新值的节点失效，但恢复数据来自某个旧值，则总的新值节点数低于 w&lt;/li&gt;
&lt;li&gt;边界情况&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>无主节点复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210615210219-%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Tue, 15 Jun 2021 21:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615210219-%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6/</guid>
      <description>没有主节点，允许任何节点接受来自客户端的写请求。
实现方式  客户端直接将其写请求发送到多节点 一个协调者代表客户端进行写入，与主节点的数据库不同，协调者并不负责写入顺序的维护。  节点失效时写入数据库 客户端将写请求并行发送给三个节点，两个可用节点接受写请求，而不可用副本则无法处理该请求。
现在失效的节点重新上线，客户端可能会读取到旧的值。
为了解决这个问题客户端并行的向多个节点发送读请求，并通过版本号来确定哪个值更新。
读修复与反熵  读修复；客户端并行读取多个节点，检测到过期的返回值，然后用新的返回值写入到返回旧值的副本。 反熵过程：后台不断查找副本之间的差异，将任何缺少的数据从一个节点复制到另一个节点。不保证特定顺序的复制写入，并且会引入明显的复制滞后问题。  Quorum 一致性 检测并发写 </description>
      <content>&lt;p&gt;没有主节点，允许任何节点接受来自客户端的写请求。&lt;/p&gt;
&lt;h2 id=&#34;实现方式&#34;&gt;实现方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端直接将其写请求发送到多节点&lt;/li&gt;
&lt;li&gt;一个协调者代表客户端进行写入，与主节点的数据库不同，协调者并不负责写入顺序的维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;节点失效时写入数据库&#34;&gt;节点失效时写入数据库&lt;/h2&gt;
&lt;p&gt;客户端将写请求并行发送给三个节点，两个可用节点接受写请求，而不可用副本则无法处理该请求。&lt;/p&gt;
&lt;p&gt;现在失效的节点重新上线，客户端可能会读取到旧的值。&lt;/p&gt;
&lt;p&gt;为了解决这个问题客户端并行的向多个节点发送读请求，并通过版本号来确定哪个值更新。&lt;/p&gt;
&lt;h3 id=&#34;读修复与反熵&#34;&gt;读修复与反熵&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;读修复；客户端并行读取多个节点，检测到过期的返回值，然后用新的返回值写入到返回旧值的副本。&lt;/li&gt;
&lt;li&gt;反熵过程：后台不断查找副本之间的差异，将任何缺少的数据从一个节点复制到另一个节点。不保证特定顺序的复制写入，并且会引入明显的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/&#34;&gt;复制滞后问题&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;quorum-一致性--20210615211745-quorum-一致性-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;Quorum 一致性&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;检测并发写--20210615213433-检测并发写-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/&#34;&gt;检测并发写&lt;/a&gt;&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>全部-至-全部型拓扑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615084309-%E5%85%A8%E9%83%A8_%E8%87%B3_%E5%85%A8%E9%83%A8%E5%9E%8B%E6%8B%93%E6%89%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615084309-%E5%85%A8%E9%83%A8_%E8%87%B3_%E5%85%A8%E9%83%A8%E5%9E%8B%E6%8B%93%E6%89%91/</guid>
      <description>最常见的拓扑结构，提供更好的容错。每个节点从其他所有节点同步写入。</description>
      <content>&lt;p&gt;最常见的拓扑结构，提供更好的容错。每个节点从其他所有节点同步写入。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>星型拓扑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615084143-%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:41:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615084143-%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91/</guid>
      <description>通过指定一个根节点，根结点将所有的写操作转发给其他所有节点。</description>
      <content>&lt;p&gt;通过指定一个根节点，根结点将所有的写操作转发给其他所有节点。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>环形拓扑</title>
      <link>https://www.linuxzen.com/notes/notes/20210615084010-%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91/</link>
      <pubDate>Tue, 15 Jun 2021 08:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615084010-%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91/</guid>
      <description>每个节点接收来自前序节点的写入，并将这些写入（加上字节的写入）转发后后序节点。同时通过唯一 ID 防止无限循环。</description>
      <content>&lt;p&gt;每个节点接收来自前序节点的写入，并将这些写入（加上字节的写入）转发后后序节点。同时通过唯一 ID 防止无限循环。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>最后写入者获胜</title>
      <link>https://www.linuxzen.com/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/</link>
      <pubDate>Tue, 15 Jun 2021 08:35:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/</guid>
      <description>每个副本总是保存最新值，允许覆盖并丢弃旧值。假定每个写请求都最终同步到所有副本，只要我们有一个明确的方法来确定哪个写入时最新的，则副本可以最终收敛到相同的值。
通过每个请求附加一个时间戳，选择最新即最大的时间戳，丢弃较早的写入。则为最后写入着获胜（last write wins，LWW）。
缺点 会造成数据丢失。
适用场景  缓存系统。  确保安全无副作用 唯一方法是只写入一次然后写入值视为不可变，这样旧避免对同一个主键的并发（覆盖）写。</description>
      <content>&lt;p&gt;每个副本总是保存最新值，允许覆盖并丢弃旧值。假定每个写请求都最终同步到所有副本，只要我们有一个明确的方法来确定哪个写入时最新的，则副本可以最终收敛到相同的值。&lt;/p&gt;
&lt;p&gt;通过每个请求附加一个时间戳，选择最新即最大的时间戳，丢弃较早的写入。则为最后写入着获胜（last write wins，LWW）。&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;缺点&lt;/h2&gt;
&lt;p&gt;会造成数据丢失。&lt;/p&gt;
&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;缓存系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;确保安全无副作用&#34;&gt;确保安全无副作用&lt;/h2&gt;
&lt;p&gt;唯一方法是只写入一次然后写入值视为不可变，这样旧避免对同一个主键的并发（覆盖）写。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>收敛于一致的状态</title>
      <link>https://www.linuxzen.com/notes/notes/20210615083221-%E6%94%B6%E6%95%9B%E4%BA%8E%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81/</link>
      <pubDate>Tue, 15 Jun 2021 08:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615083221-%E6%94%B6%E6%95%9B%E4%BA%8E%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81/</guid>
      <description>多个主节点看到的执行顺序不一致，病了同时按照各自看到的写入顺序执行，那么数据库最终将处于不一致状态。
数据库必须以一种趋同的方式来解决冲突。
可能的解决方式  给每个写入分配唯一的 ID，如基于时间戳的最后写入者获胜。 为每个主节点分配一个唯一 ID，序列号高的优先于序列号低的主节点，可能导致数据丢失 以某种方式合并值，如按照字母顺序拼接在一起 利用预定义号的格式记录，然后依靠应用层逻辑，事后解决冲突（可能会提示用户）  </description>
      <content>&lt;p&gt;多个主节点看到的执行顺序不一致，病了同时按照各自看到的写入顺序执行，那么数据库最终将处于不一致状态。&lt;/p&gt;
&lt;p&gt;数据库必须以一种趋同的方式来解决冲突。&lt;/p&gt;
&lt;h2 id=&#34;可能的解决方式&#34;&gt;可能的解决方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;给每个写入分配唯一的 ID，如基于时间戳的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/&#34;&gt;最后写入者获胜&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;为每个主节点分配一个唯一 ID，序列号高的优先于序列号低的主节点，可能导致数据丢失&lt;/li&gt;
&lt;li&gt;以某种方式合并值，如按照字母顺序拼接在一起&lt;/li&gt;
&lt;li&gt;利用预定义号的格式记录，然后依靠应用层逻辑，事后解决冲突（可能会提示用户）&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>避免冲突</title>
      <link>https://www.linuxzen.com/notes/notes/20210615082908-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81/</link>
      <pubDate>Tue, 15 Jun 2021 08:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210615082908-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81/</guid>
      <description>应用层保证对特定记录的写请求总是通过同一个主节点，来避免发生些冲突。
如用户更新自己的配置总是路由到特定的数据中心。
缺点 特定数据中心发生故障不得不改变事先指定的主节点。</description>
      <content>&lt;p&gt;应用层保证对特定记录的写请求总是通过同一个主节点，来避免发生些冲突。&lt;/p&gt;
&lt;p&gt;如用户更新自己的配置总是路由到特定的数据中心。&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;缺点&lt;/h2&gt;
&lt;p&gt;特定数据中心发生故障不得不改变事先指定的主节点。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>前缀一致读</title>
      <link>https://www.linuxzen.com/notes/notes/20210614211632-%E5%89%8D%E7%BC%80%E4%B8%80%E8%87%B4%E8%AF%BB/</link>
      <pubDate>Mon, 14 Jun 2021 21:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614211632-%E5%89%8D%E7%BC%80%E4%B8%80%E8%87%B4%E8%AF%BB/</guid>
      <description>对于一系列按照某个顺序发生的写请求，同时读取这些内容时也会按照当时写入的顺序。
场景 分区数据库中出现的一个特殊问题。
正常对话：
 P: C小姐，你能看到多远的文莱？
C：大约 10s，P 先生。
 但是由于复制滞后，最终能被观察到的可能是：
 C：大约 10s，P 先生。
P: C小姐，你能看到多远的文莱？
 解决方案 低效率：具有因果关系的写入都交给一个分区来完成。 新方法：跟踪事件因果关系。</description>
      <content>&lt;p&gt;对于一系列按照某个顺序发生的写请求，同时读取这些内容时也会按照当时写入的顺序。&lt;/p&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;分区数据库中出现的一个特殊问题。&lt;/p&gt;
&lt;p&gt;正常对话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P: C小姐，你能看到多远的文莱？&lt;/p&gt;
&lt;p&gt;C：大约 10s，P 先生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是由于复制滞后，最终能被观察到的可能是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C：大约 10s，P 先生。&lt;/p&gt;
&lt;p&gt;P: C小姐，你能看到多远的文莱？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;低效率：具有因果关系的写入都交给一个分区来完成。
新方法：跟踪事件因果关系。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>单调读一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210918-%E5%8D%95%E8%B0%83%E8%AF%BB%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 14 Jun 2021 21:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210918-%E5%8D%95%E8%B0%83%E8%AF%BB%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>是一种比强一致性弱但是比最终一致性效应强的保证，单调读保证：
如果某个用户依次进行多次读取，则绝不会看到回滚的现象，即在读取到较新的值之后又发生读旧值的情况。
场景 用户刷新网络，读请求被随机路由到某个从节点，先后从两个不同的从节点读取到了不同的内容，比如看到一个新添加的评论一次出现，一次消失。
解决方案 按照用户 ID 进行哈希方法取代随机路由。</description>
      <content>&lt;p&gt;是一种比&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614210953-%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;强一致性&lt;/a&gt;弱但是比&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/&#34;&gt;最终一致性效应&lt;/a&gt;强的保证，单调读保证：&lt;/p&gt;
&lt;p&gt;如果某个用户依次进行多次读取，则绝不会看到回滚的现象，即在读取到较新的值之后又发生读旧值的情况。&lt;/p&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;用户刷新网络，读请求被随机路由到某个从节点，先后从两个不同的从节点读取到了不同的内容，比如看到一个新添加的评论一次出现，一次消失。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;按照用户 ID 进行哈希方法取代随机路由。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>强一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210953-%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 14 Jun 2021 21:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210953-%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>读写一致性</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210755-%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 14 Jun 2021 21:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210755-%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>也称为「写后读一致性」，解决用户主节点写入后立马从从节点读取不到到情况。只能解决单用户的一致性，但是解决不了多用户的一致性。
场景 用户新提交了评论，但是自己看不到，需要等一会才能看到。
解决方案 记录更新时间戳，在指定时间内从主节点读取。</description>
      <content>&lt;p&gt;也称为「写后读一致性」，解决用户主节点写入后立马从从节点读取不到到情况。只能解决单用户的一致性，但是解决不了多用户的一致性。&lt;/p&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;用户新提交了评论，但是自己看不到，需要等一会才能看到。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;记录更新时间戳，在指定时间内从主节点读取。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>最终一致性效应</title>
      <link>https://www.linuxzen.com/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/</link>
      <pubDate>Mon, 14 Jun 2021 21:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/</guid>
      <description>主从异步复制的情况下会导致数据库中出现明显不一致，此时从不同的从节点读取就会得到不一样的结果。这种不一致只是一个暂时状态，如果停止写入数据，经过一段时间之后，从节点最终会赶上并与主节点保持一致。
这种效应被称为最终一致性。</description>
      <content>&lt;p&gt;主从异步复制的情况下会导致数据库中出现明显不一致，此时从不同的从节点读取就会得到不一样的结果。这种不一致只是一个暂时状态，如果停止写入数据，经过一段时间之后，从节点最终会赶上并与主节点保持一致。&lt;/p&gt;
&lt;p&gt;这种效应被称为最终一致性。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>复制滞后问题</title>
      <link>https://www.linuxzen.com/notes/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 14 Jun 2021 20:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description>异步同步的情况下出出现最终一致性效应复制滞后会导致：用户提交了修改到主节点，但是从从节点没有读取到最新的变更，比如看不到自己提交的评论等。
读写一致性：读自己的写 一旦用户的数据最近发生改变则路由用户请求从主节点进行读取，规避复制滞后的问题。
缺点：只保证单一用户写后读的的一致性，但是不保证多个用户的一致性。比如发了一条评论，自己能刷新到但是同在身边的朋友可能就刷新不到。
单调读一致性 前缀一致读 解决方案  应用层可以提供比数据库更强有力的保证。 事务是数据库提供的更强保证的一种方式。  </description>
      <content>&lt;p&gt;异步同步的情况下出出现&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/&#34;&gt;最终一致性效应&lt;/a&gt;复制滞后会导致：用户提交了修改到主节点，但是从从节点没有读取到最新的变更，比如看不到自己提交的评论等。&lt;/p&gt;
&lt;h2 id=&#34;读写一致性--20210614210755-读写一致性-dot-md--读自己的写&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614210755-%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;读写一致性&lt;/a&gt;：读自己的写&lt;/h2&gt;
&lt;p&gt;一旦用户的数据最近发生改变则路由用户请求从主节点进行读取，规避复制滞后的问题。&lt;/p&gt;
&lt;p&gt;缺点：只保证单一用户写后读的的一致性，但是不保证多个用户的一致性。比如发了一条评论，自己能刷新到但是同在身边的朋友可能就刷新不到。&lt;/p&gt;
&lt;h2 id=&#34;单调读一致性--20210614210918-单调读一致性-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614210918-%E5%8D%95%E8%B0%83%E8%AF%BB%E4%B8%80%E8%87%B4%E6%80%A7/&#34;&gt;单调读一致性&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;前缀一致读--20210614211632-前缀一致读-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614211632-%E5%89%8D%E7%BC%80%E4%B8%80%E8%87%B4%E8%AF%BB/&#34;&gt;前缀一致读&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;应用层可以提供比数据库更强有力的保证。&lt;/li&gt;
&lt;li&gt;事务是数据库提供的更强保证的一种方式。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>复制日志实现</title>
      <link>https://www.linuxzen.com/notes/notes/20210614205249-%E5%A4%8D%E5%88%B6%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 14 Jun 2021 20:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614205249-%E5%A4%8D%E5%88%B6%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/</guid>
      <description>基于语句复制 优点：简单 缺点：语句副作用，或者随时间改变返回值的函数的使用会导致复制的数据产生改变。
基于预写日志（WAL）传输 优点：解决基于语句复制的问题。 缺点：日志描述过于底层：哪些磁盘块的哪些字节发生了改变，和引擎实现高度耦合，不利于模式演进。
基于行的逻辑日志复制 用一系列记录来描述数据表行级别的写请求：
 对于插入行，日志包含所有相关列的新值。 对于删除行，标记主键删除。 对于行货更新，记录主键和对应列的新值。  MySQL binlog 基于此模式。
优点：更利于模式演进，支持向后兼容，同时解耦特性引擎便于外部解析。
基于触发器的复制 触发器支持注册自己的应用层代码并在数据发生改变时被调用。
优点：将复制控制交给应用层，支持更高的灵活性。 缺点：开销更大，更容易出错。</description>
      <content>&lt;h2 id=&#34;基于语句复制&#34;&gt;基于语句复制&lt;/h2&gt;
&lt;p&gt;优点：简单
缺点：语句副作用，或者随时间改变返回值的函数的使用会导致复制的数据产生改变。&lt;/p&gt;
&lt;h2 id=&#34;基于预写日志-wal-传输&#34;&gt;基于预写日志（WAL）传输&lt;/h2&gt;
&lt;p&gt;优点：解决基于语句复制的问题。
缺点：日志描述过于底层：哪些磁盘块的哪些字节发生了改变，和引擎实现高度耦合，不利于模式演进。&lt;/p&gt;
&lt;h2 id=&#34;基于行的逻辑日志复制&#34;&gt;基于行的逻辑日志复制&lt;/h2&gt;
&lt;p&gt;用一系列记录来描述数据表行级别的写请求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于插入行，日志包含所有相关列的新值。&lt;/li&gt;
&lt;li&gt;对于删除行，标记主键删除。&lt;/li&gt;
&lt;li&gt;对于行货更新，记录主键和对应列的新值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MySQL binlog 基于此模式。&lt;/p&gt;
&lt;p&gt;优点：更利于模式演进，支持向后兼容，同时解耦特性引擎便于外部解析。&lt;/p&gt;
&lt;h2 id=&#34;基于触发器的复制&#34;&gt;基于触发器的复制&lt;/h2&gt;
&lt;p&gt;触发器支持注册自己的应用层代码并在数据发生改变时被调用。&lt;/p&gt;
&lt;p&gt;优点：将复制控制交给应用层，支持更高的灵活性。
缺点：开销更大，更容易出错。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>主从复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210614203213-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 14 Jun 2021 20:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614203213-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</guid>
      <description>主从模式下主节点进行写入，可以从从节点进行读取。
同步复制 主节点写入，并等待从节点写入后再返回写入成功。
半同步复制 主节点写入，选举一个从节点进行同步复制，其他从节点进行异步复制，一旦同步复制的从节点出现性能下降或故障则选用一个新的从节点进行同步复制。
异步复制 主节点写入，不等待从节点写入直接返回写入成功。</description>
      <content>&lt;p&gt;主从模式下主节点进行写入，可以从从节点进行读取。&lt;/p&gt;
&lt;h2 id=&#34;同步复制&#34;&gt;同步复制&lt;/h2&gt;
&lt;p&gt;主节点写入，并等待从节点写入后再返回写入成功。&lt;/p&gt;
&lt;h2 id=&#34;半同步复制&#34;&gt;半同步复制&lt;/h2&gt;
&lt;p&gt;主节点写入，选举一个从节点进行同步复制，其他从节点进行异步复制，一旦同步复制的从节点出现性能下降或故障则选用一个新的从节点进行同步复制。&lt;/p&gt;
&lt;h2 id=&#34;异步复制&#34;&gt;异步复制&lt;/h2&gt;
&lt;p&gt;主节点写入，不等待从节点写入直接返回写入成功。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>数据复制</title>
      <link>https://www.linuxzen.com/notes/notes/20210614203122-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 14 Jun 2021 20:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210614203122-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/</guid>
      <description>主节点与从节点 复制 单个节点可以完整存放所有数据副本，节点间进行主从复制。
配置新从节点 可以通过快照来加速新从节点复制：
 对主节点的数据副本产生一个一致性快照，避免长时间锁定数据库。 拷贝快照到从节点 请求快照后面的更改日志 应用数据变更  节点失效 从节点失效：追赶式恢复 主节点失效：节点切换 自动切换
 确认失效 选举新的主节点 使主节点生效  挑战
 从节点复制不完整 各个数据层数据不一致，如 MySQL 和 Redis 之间 多个主节点选举：脑裂 如何有效检测主节点失效  复制日志实现 复制滞后问题 多主节点复制 使用场景 多数据中心 优点：
 性能 容忍数据中心失效 容忍网络问题  缺点：写冲突
离线客户端操作 协作编辑 处理写冲突 同步与异步冲突检测  同步：等待写请求完成对所有主节点的同步再通知用户写入成功。 异步：等待单一主节点写入成功后通知用户卸乳成功，稍后多主节点数据同步的时候才能检测到冲突  避免冲突 收敛于一致的状态 自定义冲突解决逻辑  写入时解决 读取时解决  拓扑结构  环形拓扑 星型拓扑 全部-至-全部型拓扑  无主节点复制 </description>
      <content>&lt;h2 id=&#34;主节点与从节点&#34;&gt;主节点与从节点&lt;/h2&gt;
&lt;h3 id=&#34;复制&#34;&gt;复制&lt;/h3&gt;
&lt;p&gt;单个节点可以完整存放所有数据副本，节点间进行&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614203213-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/&#34;&gt;主从复制&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;配置新从节点&#34;&gt;配置新从节点&lt;/h3&gt;
&lt;p&gt;可以通过快照来加速新从节点复制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对主节点的数据副本产生一个一致性快照，避免长时间锁定数据库。&lt;/li&gt;
&lt;li&gt;拷贝快照到从节点&lt;/li&gt;
&lt;li&gt;请求快照后面的更改日志&lt;/li&gt;
&lt;li&gt;应用数据变更&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;节点失效&#34;&gt;节点失效&lt;/h3&gt;
&lt;h4 id=&#34;从节点失效-追赶式恢复&#34;&gt;从节点失效：追赶式恢复&lt;/h4&gt;
&lt;h4 id=&#34;主节点失效-节点切换&#34;&gt;主节点失效：节点切换&lt;/h4&gt;
&lt;p&gt;自动切换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认失效&lt;/li&gt;
&lt;li&gt;选举新的主节点&lt;/li&gt;
&lt;li&gt;使主节点生效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;挑战&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从节点复制不完整&lt;/li&gt;
&lt;li&gt;各个数据层数据不一致，如 MySQL 和 Redis 之间&lt;/li&gt;
&lt;li&gt;多个主节点选举：脑裂&lt;/li&gt;
&lt;li&gt;如何有效检测主节点失效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复制日志实现--20210614205249-复制日志实现-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614205249-%E5%A4%8D%E5%88%B6%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/&#34;&gt;复制日志实现&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;复制滞后问题--20210614205621-复制滞后问题-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/&#34;&gt;复制滞后问题&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;多主节点复制&#34;&gt;多主节点复制&lt;/h2&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;使用场景&lt;/h3&gt;
&lt;h4 id=&#34;多数据中心&#34;&gt;多数据中心&lt;/h4&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;容忍数据中心失效&lt;/li&gt;
&lt;li&gt;容忍网络问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：写冲突&lt;/p&gt;
&lt;h4 id=&#34;离线客户端操作&#34;&gt;离线客户端操作&lt;/h4&gt;
&lt;h4 id=&#34;协作编辑&#34;&gt;协作编辑&lt;/h4&gt;
&lt;h3 id=&#34;处理写冲突&#34;&gt;处理写冲突&lt;/h3&gt;
&lt;h4 id=&#34;同步与异步冲突检测&#34;&gt;同步与异步冲突检测&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同步：等待写请求完成对所有主节点的同步再通知用户写入成功。&lt;/li&gt;
&lt;li&gt;异步：等待单一主节点写入成功后通知用户卸乳成功，稍后多主节点数据同步的时候才能检测到冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;避免冲突--20210615082908-避免冲突-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615082908-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81/&#34;&gt;避免冲突&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;收敛于一致的状态--20210615083221-收敛于一致的状态-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615083221-%E6%94%B6%E6%95%9B%E4%BA%8E%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81/&#34;&gt;收敛于一致的状态&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;自定义冲突解决逻辑&#34;&gt;自定义冲突解决逻辑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;写入时解决&lt;/li&gt;
&lt;li&gt;读取时解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拓扑结构&#34;&gt;拓扑结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615084010-%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91/&#34;&gt;环形拓扑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615084143-%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91/&#34;&gt;星型拓扑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615084309-%E5%85%A8%E9%83%A8_%E8%87%B3_%E5%85%A8%E9%83%A8%E5%9E%8B%E6%8B%93%E6%89%91/&#34;&gt;全部-至-全部型拓扑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;无主节点复制--20210615210219-无主节点复制-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210615210219-%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6/&#34;&gt;无主节点复制&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>认同的话</title>
      <link>https://www.linuxzen.com/notes/notes/20210612092853-%E8%AE%A4%E5%90%8C%E7%9A%84%E8%AF%9D/</link>
      <pubDate>Sat, 12 Jun 2021 09:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210612092853-%E8%AE%A4%E5%90%8C%E7%9A%84%E8%AF%9D/</guid>
      <description>当一个不可能出错的事物出错了，通常也就意味着不可修复 &amp;ndash; Douglas Adams，《基本无害》（1992）  关于写文档  There is a secret that needs to be understood in order to write good software documentation: there isn’t one thing called documentation, there are four.
They are: tutorials, how-to guides, technical reference and explanation. They represent four different purposes or functions, and require four different approaches to their creation. Understanding the implications of this will help improve most documentation - often immensely.</description>
      <content>&lt;ul&gt;
&lt;li&gt;当一个不可能出错的事物出错了，通常也就意味着不可修复 &amp;ndash; Douglas Adams，《基本无害》（1992）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于写文档&#34;&gt;关于写文档&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a secret that needs to be understood in order to write good software documentation:
there isn’t one thing called documentation, there are four.&lt;/p&gt;
&lt;p&gt;They are: tutorials, how-to guides, technical reference and explanation.
They represent four different purposes or functions, and require four different approaches to their creation. Understanding the implications of this will help improve most documentation - often immensely.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Actor</title>
      <link>https://www.linuxzen.com/notes/notes/20210612091808-actor/</link>
      <pubDate>Sat, 12 Jun 2021 09:18:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210612091808-actor/</guid>
      <description>Actor 模型是用于单个进程中的并发模型。逻辑被封装在 Actor 中。每个 Actor 通常代表一个客户端或实体，可以具备本地状态（不共享），通过发送和接收异步消息与其他 Actor 通信。不保证消息传送：某些错误情况下，消息将丢失。每个 Actor 只处理一条消息，因此可以由框架独立调度。
Actor 框架集成了任务调度和消息流的框架。</description>
      <content>&lt;p&gt;Actor 模型是用于单个进程中的并发模型。逻辑被封装在 Actor 中。每个 Actor 通常代表一个客户端或实体，可以具备本地状态（不共享），通过发送和接收异步消息与其他 Actor 通信。不保证消息传送：某些错误情况下，消息将丢失。每个 Actor 只处理一条消息，因此可以由框架独立调度。&lt;/p&gt;
&lt;p&gt;Actor 框架集成了任务调度和消息流的框架。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Avro</title>
      <link>https://www.linuxzen.com/notes/notes/20210610222725-avro/</link>
      <pubDate>Thu, 10 Jun 2021 22:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610222725-avro/</guid>
      <description>两种模式语言：IDL 用于人工编辑，另一种更易于机器读取。
Avro 编码数据中只有对应字段的长度和具体的数据，不包含字段的类型信息。
写模式与读模式  写模式：使用所知道的模式的任何版本来编码数据（可以编译到代码中） 读模式：解码时期望数据符合某个模式，可能是构建过程中基于模式生成  Avro 的关键思想是写模式和读不必完全一样，只需要保持兼容，由读取端解决差异：通过对比查看写模式和读模式并将数据从写模式转换为读模式。
 读取数据的代码中遇到出现在写模式但是不在读模式的字段，则忽略。 如果读数据的带代码需要某个字段，但是写模式不包含该字段的名称，则使用在读模式中声明的默认值填充。  模式演化  向前兼容：新版本的模式作为 writer，旧版本的模式作为 reader。 向后兼容：新版本的模式作为 reader，旧版本的模式作为 writer。  同时为了保持兼容性，只能添加莫删除具有默认值的字段。</description>
      <content>&lt;p&gt;两种模式语言：IDL 用于人工编辑，另一种更易于机器读取。&lt;/p&gt;
&lt;p&gt;Avro 编码数据中只有对应字段的长度和具体的数据，不包含字段的类型信息。&lt;/p&gt;
&lt;h2 id=&#34;写模式与读模式&#34;&gt;写模式与读模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;写模式：使用所知道的模式的任何版本来编码数据（可以编译到代码中）&lt;/li&gt;
&lt;li&gt;读模式：解码时期望数据符合某个模式，可能是构建过程中基于模式生成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Avro 的关键思想是写模式和读不必完全一样，只需要保持兼容，由读取端解决差异：通过对比查看写模式和读模式并将数据从写模式转换为读模式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取数据的代码中遇到出现在写模式但是不在读模式的字段，则忽略。&lt;/li&gt;
&lt;li&gt;如果读数据的带代码需要某个字段，但是写模式不包含该字段的名称，则使用在读模式中声明的默认值填充。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;模式演化&#34;&gt;模式演化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;向前兼容：新版本的模式作为 writer，旧版本的模式作为 reader。&lt;/li&gt;
&lt;li&gt;向后兼容：新版本的模式作为 reader，旧版本的模式作为 writer。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时为了保持兼容性，只能添加莫删除具有默认值的字段。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Thrift 与 Protocol Buffers</title>
      <link>https://www.linuxzen.com/notes/notes/20210610222754-thrift_%E4%B8%8E_protocol_buffers/</link>
      <pubDate>Thu, 10 Jun 2021 22:27:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610222754-thrift_%E4%B8%8E_protocol_buffers/</guid>
      <description>每个字段一个标记号码，字段名可以随意调整因为编码信息中只有标记号码，没有字段名称，但是标记号码不能随意调整，基于此可以实现：
 向前兼容 旧代码忽略不能识别的标记号码，并根据类型的注释来通知解析器跳过特定的字节数。 向后兼容 标记号码不变的情况下新的代码总是能够解析旧代码序列化的数据，但是新添加的字段不能标记为 required，不然会触发运行时错误。  同时为了保证前后兼容，删除字段也不能删除设置为 required 的字段，同时再次新添字段标记号码不能被再次使用。
改变类型同时也会导致前后兼容问题。</description>
      <content>&lt;p&gt;每个字段一个标记号码，字段名可以随意调整因为编码信息中只有标记号码，没有字段名称，但是标记号码不能随意调整，基于此可以实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向前兼容
旧代码忽略不能识别的标记号码，并根据类型的注释来通知解析器跳过特定的字节数。&lt;/li&gt;
&lt;li&gt;向后兼容
标记号码不变的情况下新的代码总是能够解析旧代码序列化的数据，但是新添加的字段不能标记为 required，不然会触发运行时错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时为了保证前后兼容，删除字段也不能删除设置为 required 的字段，同时再次新添字段标记号码不能被再次使用。&lt;/p&gt;
&lt;p&gt;改变类型同时也会导致前后兼容问题。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>数据编码与演化</title>
      <link>https://www.linuxzen.com/notes/notes/20210610215330-%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E6%BC%94%E5%8C%96/</link>
      <pubDate>Thu, 10 Jun 2021 21:53:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610215330-%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E6%BC%94%E5%8C%96/</guid>
      <description>模式演化要保证：
 向后兼容 较新的代码可以读取旧代码编写的数据 向前兼容 较旧的代码可以读取较新代码编写的数据  数据编码格式 语言特定格式  Python pickle Java java.io.Serializable Ruby Marshal  JSON、XML与二进制变体 二进制变体
 Message Pack：二进制的 JSON  Thrift 与 Protocol Buffers Avro 数据流模式 基于数据库的数据流 不同是写写入不同的值 归档存储 基于服务的数据流：REST 和 RPC RPC 的问题 给人一种本地调用的错觉，却需要面临网络的不确定性：延迟和超时。
基于消息传递的数据流 消息中间件：RabbitMQ、Kafka 分布式Actor 框架：Akka、Erlang OTP </description>
      <content>&lt;p&gt;模式演化要保证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向后兼容
较新的代码可以读取旧代码编写的数据&lt;/li&gt;
&lt;li&gt;向前兼容
较旧的代码可以读取较新代码编写的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据编码格式&#34;&gt;数据编码格式&lt;/h2&gt;
&lt;h3 id=&#34;语言特定格式&#34;&gt;语言特定格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python pickle&lt;/li&gt;
&lt;li&gt;Java java.io.Serializable&lt;/li&gt;
&lt;li&gt;Ruby Marshal&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;json-xml与二进制变体&#34;&gt;JSON、XML与二进制变体&lt;/h3&gt;
&lt;p&gt;二进制变体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Message Pack：二进制的 JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thrift-与-protocol-buffers--20210610222754-thrift-与-protocol-buffers-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210610222754-thrift_%E4%B8%8E_protocol_buffers/&#34;&gt;Thrift 与 Protocol Buffers&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;avro--20210610222725-avro-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210610222725-avro/&#34;&gt;Avro&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;数据流模式&#34;&gt;数据流模式&lt;/h2&gt;
&lt;h3 id=&#34;基于数据库的数据流&#34;&gt;基于数据库的数据流&lt;/h3&gt;
&lt;h4 id=&#34;不同是写写入不同的值&#34;&gt;不同是写写入不同的值&lt;/h4&gt;
&lt;h4 id=&#34;归档存储&#34;&gt;归档存储&lt;/h4&gt;
&lt;h3 id=&#34;基于服务的数据流-rest-和-rpc&#34;&gt;基于服务的数据流：REST 和 RPC&lt;/h3&gt;
&lt;h4 id=&#34;rpc-的问题&#34;&gt;RPC 的问题&lt;/h4&gt;
&lt;p&gt;给人一种本地调用的错觉，却需要面临网络的不确定性：延迟和超时。&lt;/p&gt;
&lt;h3 id=&#34;基于消息传递的数据流&#34;&gt;基于消息传递的数据流&lt;/h3&gt;
&lt;h4 id=&#34;消息中间件-rabbitmq-kafka&#34;&gt;消息中间件：RabbitMQ、Kafka&lt;/h4&gt;
&lt;h4 id=&#34;分布式-actor--20210612091808-actor-dot-md--框架-akka-erlang-otp&#34;&gt;分布式&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210612091808-actor/&#34;&gt;Actor&lt;/a&gt; 框架：Akka、Erlang OTP&lt;/h4&gt;
</content>
    </item>
    
    <item>
      <title>OLAP</title>
      <link>https://www.linuxzen.com/notes/notes/20210610214521-olap/</link>
      <pubDate>Thu, 10 Jun 2021 21:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610214521-olap/</guid>
      <description>在线分析处理（Online Analytic Processing，OLAP）。</description>
      <content>&lt;p&gt;在线分析处理（Online Analytic Processing，OLAP）。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>OLTP</title>
      <link>https://www.linuxzen.com/notes/notes/20210610214348-oltp/</link>
      <pubDate>Thu, 10 Jun 2021 21:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210610214348-oltp/</guid>
      <description>在线事务处理（Online Transaction Processing，OLTP）。</description>
      <content>&lt;p&gt;在线事务处理（Online Transaction Processing，OLTP）。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>B-trees</title>
      <link>https://www.linuxzen.com/notes/notes/20210606143901-b_trees/</link>
      <pubDate>Sun, 06 Jun 2021 14:39:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606143901-b_trees/</guid>
      <description>B-tree 是最广泛使用的索引结构。和排序字符串表：SSTables一样，B-tree 保留按键排序的 key-value 对， 这样可以实现高效的 key-value 查找和区间查询。
结构 B-tree 将数据库分解成固定大小的页或块，传统上 4KB，这种设计更接近底层硬件，磁盘也是以固定大小的块排列的。
 分页因子 B-tree 中一个页所包含的子页引用数量称为分支因子。
添加新键  找到其范围新键的页 如果页没有足够的可用空间来容纳新键，则将其分裂为两个半满的页，并更新父页以包含新的键范围。    算法确保树保持平衡：具有 n 个键的 B-tree 总是具有 \(O(log n)\) 的深度。大多数据库适合 3~4 层的 B-tree。 分支因子为 500 的 4KB 页的四级树可以存储高达 256TB。
可靠性：WAL B-tree 底层的基本写操作是使用新的数据覆盖磁盘上的旧页。
如果发生页分裂则需要覆盖多个不同的页，同时更新父页，这个操作比较危险，如果此时发生崩溃则会破坏索引。 常见的 B-tree 使用额外的数据结构：预写日志(WAL)：
 追加的写 WAL； 每个 B-tree 必须先更新 WAL 然后再修改树本身的页。  通过使用「锁存器」保护进行并发控制，保护 B-tree 页被多个线程访问而看到树不一样的状态。
优化  通过复制方案替代 WAL 进行崩溃恢复，修改的页被写入不同的位置，树中父页的新版本被创建，并指向新的位置。 保存键的缩略信息，可以压入更多的键，保持更高的分支因子，减少层数。 对树进行布局，相邻叶子页按顺序保存在磁盘。 添加额外的指针到树中，如左右兄弟页。 变体，如分形树：借鉴日志结构减少磁盘寻道。  </description>
      <content>&lt;p&gt;B-tree 是最广泛使用的索引结构。和&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/&#34;&gt;排序字符串表：SSTables&lt;/a&gt;一样，B-tree 保留按键排序的 key-value 对，
这样可以实现高效的 key-value 查找和区间查询。&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构&lt;/h2&gt;
&lt;p&gt;B-tree 将数据库分解成固定大小的页或块，传统上 4KB，这种设计更接近底层硬件，磁盘也是以固定大小的块排列的。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/b-tree-dot.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;分页因子&#34;&gt;分页因子&lt;/h2&gt;
&lt;p&gt;B-tree 中一个页所包含的子页引用数量称为分支因子。&lt;/p&gt;
&lt;h2 id=&#34;添加新键&#34;&gt;添加新键&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;找到其范围新键的页&lt;/li&gt;
&lt;li&gt;如果页没有足够的可用空间来容纳新键，则将其分裂为两个半满的页，并更新父页以包含新的键范围。&lt;/li&gt;
&lt;/ol&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/b-tree-dot-insert-before.png&#34;   /&gt;
    
  &lt;/figure&gt;



  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/b-tree-dot-insert-after.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;算法确保树保持平衡：具有 n 个键的 B-tree 总是具有 \(O(log n)\) 的深度。大多数据库适合 3~4 层的 B-tree。
分支因子为 500 的 4KB 页的四级树可以存储高达 256TB。&lt;/p&gt;
&lt;h2 id=&#34;可靠性-wal&#34;&gt;可靠性：WAL&lt;/h2&gt;
&lt;p&gt;B-tree 底层的基本写操作是使用新的数据覆盖磁盘上的旧页。&lt;/p&gt;
&lt;p&gt;如果发生页分裂则需要覆盖多个不同的页，同时更新父页，这个操作比较危险，如果此时发生崩溃则会破坏索引。
常见的 B-tree 使用额外的数据结构：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813074328-%E9%A2%84%E5%86%99%E6%97%A5%E5%BF%97/&#34;&gt;预写日志&lt;/a&gt;(WAL)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;追加的写 WAL；&lt;/li&gt;
&lt;li&gt;每个 B-tree 必须先更新 WAL 然后再修改树本身的页。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过使用「锁存器」保护进行并发控制，保护 B-tree 页被多个线程访问而看到树不一样的状态。&lt;/p&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过复制方案替代 WAL 进行崩溃恢复，修改的页被写入不同的位置，树中父页的新版本被创建，并指向新的位置。&lt;/li&gt;
&lt;li&gt;保存键的缩略信息，可以压入更多的键，保持更高的分支因子，减少层数。&lt;/li&gt;
&lt;li&gt;对树进行布局，相邻叶子页按顺序保存在磁盘。&lt;/li&gt;
&lt;li&gt;添加额外的指针到树中，如左右兄弟页。&lt;/li&gt;
&lt;li&gt;变体，如分形树：借鉴日志结构减少磁盘寻道。&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>哈希索引</title>
      <link>https://www.linuxzen.com/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sun, 06 Jun 2021 10:33:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</guid>
      <description>索引 先来看一个世界上由 Bash 实现的最简单的数据库实现：
#!/bin/bash db_set() { echo &amp;#34;$1,$2&amp;#34; &amp;gt;&amp;gt; database } db_get() { grep &amp;#34;^$1,&amp;#34; database | sed -e &amp;#34;s/^$1,//&amp;#34; | tail -n 1 } 这种数据库通过追加文件尾部的方式高效写入，许多数据库内部都是用日志，日志是一个仅支持追加更新的数据文件。但是 db_get 的性能会随着数据量的变大而下降，为了解决这个问题就需要引入新的数据结构： 索引 。
索引是基于原始数据而派生而来的额外数据结构：适当的索引可以加速读取查询，但是回减慢写速度。
key-value 索引通常使用 hash map 来实现，最简单的索引策略：保存内存中的 hash map，把每个键一一映射到数据文件中特定的字节偏移量。
优化磁盘占用  将日志分解成一定大小的段，当文件达到一定大小时就关闭它，并将后续写入到新的段文件中。 然后可以在这些段上执行压缩：丢弃重复的键，并且只保留每个键最近的更新。 同时将变小后的多个段在后台合并在一起（段在写入后不再会进行修改所以不会出现竞争）。 合并完成后将读取请求切换到新的合并段上，然后可以安全的删除旧的段文件。  实现中面临的问题  文件格式：二进制。 删除记录：通过特殊的墓碑标记。 崩溃恢复：Bitcask 通过将 hash map 快照存储到磁盘。 部分写入：文件校验丢弃损坏的部分。 并发控制：只有一个写线程。  追加的好处  顺序写性能高。 并发控制和崩溃恢复简单。 段合并避免文件碎片化。  局限性  大量的键存储在内存可能导致内存耗尽，同时需要处理哈希冲突 区间查询效率不高。  </description>
      <content>&lt;h2 id=&#34;索引&#34;&gt;索引&lt;/h2&gt;
&lt;p&gt;先来看一个世界上由 Bash 实现的最简单的数据库实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;db_set&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;,&lt;/span&gt;$2&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; database
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

db_get&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;,&amp;#34;&lt;/span&gt; database | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/^&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;,//&amp;#34;&lt;/span&gt; | tail -n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种数据库通过追加文件尾部的方式高效写入，许多数据库内部都是用日志，日志是一个仅支持追加更新的数据文件。但是 db_get 的性能会随着数据量的变大而下降，为了解决这个问题就需要引入新的数据结构： &lt;code&gt;索引&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;索引是基于原始数据而派生而来的额外数据结构：适当的索引可以加速读取查询，但是回减慢写速度。&lt;/p&gt;
&lt;p&gt;key-value 索引通常使用 hash map 来实现，最简单的索引策略：保存内存中的 hash map，把每个键一一映射到数据文件中特定的字节偏移量。&lt;/p&gt;
&lt;h2 id=&#34;优化磁盘占用&#34;&gt;优化磁盘占用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将日志分解成一定大小的段，当文件达到一定大小时就关闭它，并将后续写入到新的段文件中。&lt;/li&gt;
&lt;li&gt;然后可以在这些段上执行压缩：丢弃重复的键，并且只保留每个键最近的更新。&lt;/li&gt;
&lt;li&gt;同时将变小后的多个段在后台合并在一起（段在写入后不再会进行修改所以不会出现竞争）。&lt;/li&gt;
&lt;li&gt;合并完成后将读取请求切换到新的合并段上，然后可以安全的删除旧的段文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现中面临的问题&#34;&gt;实现中面临的问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件格式：二进制。&lt;/li&gt;
&lt;li&gt;删除记录：通过特殊的墓碑标记。&lt;/li&gt;
&lt;li&gt;崩溃恢复：Bitcask 通过将 hash map 快照存储到磁盘。&lt;/li&gt;
&lt;li&gt;部分写入：文件校验丢弃损坏的部分。&lt;/li&gt;
&lt;li&gt;并发控制：只有一个写线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;追加的好处&#34;&gt;追加的好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;顺序写性能高。&lt;/li&gt;
&lt;li&gt;并发控制和崩溃恢复简单。&lt;/li&gt;
&lt;li&gt;段合并避免文件碎片化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;局限性&#34;&gt;局限性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大量的键存储在内存可能导致内存耗尽，同时需要处理哈希冲突&lt;/li&gt;
&lt;li&gt;区间查询效率不高。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>排序字符串表：SSTables</title>
      <link>https://www.linuxzen.com/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/</link>
      <pubDate>Sun, 06 Jun 2021 10:31:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/</guid>
      <description>SSTables 通过按照键的顺序存储在日志段文件中来解决哈希索引面临的一些问题。它要求每个键在每个合并的段文件中只能出现一次（通过压缩确保）。
对比哈希索引的日志段 优点   合并段更加高效，即使文件大于可用内存。类似于归并排序算法中使用的方法。并发读取多个输入段文件，比较每个文件的第一个键，把最小的键拷贝到输出文件，并重复。
解决多个段文件重复：保留最新的值，因为每个段包含在某段时间内写入数据库的所有值，意味着肯定有一个值比其他所有值更新。
  基于键有序的特性可以采用稀疏索引避免内存中包含所有键的索引。
  将一定范围内的所有键存储到一个块中，便于需要请求范围内多个 key-value，降低磁盘 I/O。
  构建和维护 保证顺序 内存中痛哦红黑树或者 AVL 树支持任意顺序插入并以排序后的顺序读取它们。
 写入时，将其添加到内存中的平衡树数据结构中，成为内存表。 内存表大于某个阈值（MB级别），将其作为 SSTable 文件写入磁盘。写入同时，写入可以继续添加到一个新的内存表实例中。 处理请求顺序：首先从内存表中查找键 -&amp;gt; 最新的磁盘段文件 -&amp;gt; 次新磁盘段文件，以此类推。 后台进程周期性执行段合并与压缩，合并多个段文件并丢弃被覆盖或着删除的值。  崩溃处理 为了避免数据库崩溃最近的写入（在内存表中尚未写入磁盘）将会丢失的问题：
 在磁盘上保留单独的日志，每个写入都会立即追加到该日志。并且无需排序。 内存表写入 SSTable 时，丢弃相应的日志。  使用此技术的数据库  LevelDB RocksDB  类似的
 Cassandra HBase  </description>
      <content>&lt;p&gt;SSTables 通过按照键的顺序存储在日志段文件中来解决&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/&#34;&gt;哈希索引&lt;/a&gt;面临的一些问题。它要求每个键在每个合并的段文件中只能出现一次（通过压缩确保）。&lt;/p&gt;
&lt;h2 id=&#34;对比-哈希索引--20210606103354-哈希索引-dot-md--的日志段&#34;&gt;对比&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/&#34;&gt;哈希索引&lt;/a&gt;的日志段&lt;/h2&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;合并段更加高效，即使文件大于可用内存。类似于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/&#34;&gt;归并排序&lt;/a&gt;算法中使用的方法。并发读取多个输入段文件，比较每个文件的第一个键，把最小的键拷贝到输出文件，并重复。&lt;/p&gt;
&lt;p&gt;解决多个段文件重复：保留最新的值，因为每个段包含在某段时间内写入数据库的所有值，意味着肯定有一个值比其他所有值更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于键有序的特性可以采用稀疏索引避免内存中包含所有键的索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将一定范围内的所有键存储到一个块中，便于需要请求范围内多个 key-value，降低磁盘 I/O。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;构建和维护&#34;&gt;构建和维护&lt;/h2&gt;
&lt;h3 id=&#34;保证顺序&#34;&gt;保证顺序&lt;/h3&gt;
&lt;p&gt;内存中痛哦红黑树或者 AVL 树支持任意顺序插入并以排序后的顺序读取它们。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写入时，将其添加到内存中的平衡树数据结构中，成为内存表。&lt;/li&gt;
&lt;li&gt;内存表大于某个阈值（MB级别），将其作为 SSTable 文件写入磁盘。写入同时，写入可以继续添加到一个新的内存表实例中。&lt;/li&gt;
&lt;li&gt;处理请求顺序：首先从内存表中查找键 -&amp;gt; 最新的磁盘段文件 -&amp;gt; 次新磁盘段文件，以此类推。&lt;/li&gt;
&lt;li&gt;后台进程周期性执行段合并与压缩，合并多个段文件并丢弃被覆盖或着删除的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;崩溃处理&#34;&gt;崩溃处理&lt;/h3&gt;
&lt;p&gt;为了避免数据库崩溃最近的写入（在内存表中尚未写入磁盘）将会丢失的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在磁盘上保留单独的日志，每个写入都会立即追加到该日志。并且无需排序。&lt;/li&gt;
&lt;li&gt;内存表写入 SSTable 时，丢弃相应的日志。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用此技术的数据库&#34;&gt;使用此技术的数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LevelDB&lt;/li&gt;
&lt;li&gt;RocksDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;HBase&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LSM-Tree</title>
      <link>https://www.linuxzen.com/notes/notes/20210606100317-lsm_tree/</link>
      <pubDate>Sun, 06 Jun 2021 10:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606100317-lsm_tree/</guid>
      <description> 日志结构合并树（Log-Structured Merge-Tree）：基于合并和压缩排序文件原理的存储引擎通常都被称为 LSM 存储引擎。
 压缩排序文件基于排序字符串表：SSTables。
LSM-Tree 基本思想：保存在后台并合并的排序字符串表：SSTables。即使数据集远远大于可用内存，仍然能够正常工作。 基于有序的特性，可以有效的执行区间查询，并且由于磁盘是顺序写入，所以 LSM-Tree 可以支持非常高的写入吞吐量。
性能优化  通过布隆过滤器优化 LSM-Tree 查找不存在的键性能低下的问题。 通过大小分级和分层压缩优化 SSTables 压缩和合并时的具体顺序和时机。  大小分级：较新和较小的 SSTables 被连续合并到较旧和较大的 SSTables。 分层压缩：键的范围分裂成多个更小的 SSTables，就数据被移动到单独的“层级”，这样压缩可以逐步进行并节省磁盘空间。    </description>
      <content>&lt;blockquote&gt;
&lt;p&gt;日志结构合并树（Log-Structured Merge-Tree）：基于合并和压缩排序文件原理的存储引擎通常都被称为 LSM 存储引擎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩排序文件基于&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/&#34;&gt;排序字符串表：SSTables&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;LSM-Tree 基本思想：保存在后台并合并的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/&#34;&gt;排序字符串表：SSTables&lt;/a&gt;。即使数据集远远大于可用内存，仍然能够正常工作。
基于有序的特性，可以有效的执行区间查询，并且由于磁盘是顺序写入，所以 LSM-Tree 可以支持非常高的写入吞吐量。&lt;/p&gt;
&lt;h2 id=&#34;性能优化&#34;&gt;性能优化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过布隆过滤器优化 LSM-Tree 查找不存在的键性能低下的问题。&lt;/li&gt;
&lt;li&gt;通过大小分级和分层压缩优化 SSTables 压缩和合并时的具体顺序和时机。
&lt;ul&gt;
&lt;li&gt;大小分级：较新和较小的 SSTables 被连续合并到较旧和较大的 SSTables。&lt;/li&gt;
&lt;li&gt;分层压缩：键的范围分裂成多个更小的 SSTables，就数据被移动到单独的“层级”，这样压缩可以逐步进行并节省磁盘空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>数据存储与检索</title>
      <link>https://www.linuxzen.com/notes/notes/20210606095514-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/</link>
      <pubDate>Sun, 06 Jun 2021 09:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606095514-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/</guid>
      <description>存储引擎 哈希索引 日志结构存储引擎：LSM-Tree 面向页的存储引擎：B-trees 对比 LSM-Tree 和 B-trees    项目 LSM-Tree B-trees 备注     性能 写入更快，吞吐更高 读取更快 具体场景上需要进行基准测试   存储 可变大小的段，通常 nMB 固定大小的页，传统 4KB    写入 追加，写入更多不利于 SSD 新的数据覆盖磁盘上旧的页    并发控制 后台合并进行原子替换 锁存器     其他索引结构   在索引中存储值
  多列索引
  全文索引和模糊索引
  在内存中保存所有内容
优点：可以支持更复杂的数据结构，而无需考虑数据存储结构。
  事务处理与分析处理 事务处理：OLTP 分析处理：OLAP 对比    属性 OLTP OLAP     主要读属性 基于键，每次查询返回少量记录 对于大量记录进行汇总   主要写属性 随机访问，低延迟写入用户的输入 批量导入（ETL）或事件流   典型使用场景 终端用户，通过网络应用程序 内部分析师，为决策提供支持   数据表征 最新的数据状态（当前时间点） 随着事件而变化的所有事件历史   数据规模 GB 到 TB TB 到 PB    数据仓库 星型与雪花型分析模式 星型模型也称为维度建模。</description>
      <content>&lt;h2 id=&#34;存储引擎&#34;&gt;存储引擎&lt;/h2&gt;
&lt;h3 id=&#34;哈希索引--20210606103354-哈希索引-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/&#34;&gt;哈希索引&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;日志结构存储引擎-lsm-tree--20210606100317-lsm-tree-dot-md&#34;&gt;日志结构存储引擎：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606100317-lsm_tree/&#34;&gt;LSM-Tree&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;面向页的存储引擎-b-trees--20210606143901-b-trees-dot-md&#34;&gt;面向页的存储引擎：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606143901-b_trees/&#34;&gt;B-trees&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;对比-lsm-tree--20210606100317-lsm-tree-dot-md--和-b-trees--20210606143901-b-trees-dot-md&#34;&gt;对比 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606100317-lsm_tree/&#34;&gt;LSM-Tree&lt;/a&gt; 和 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606143901-b_trees/&#34;&gt;B-trees&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;LSM-Tree&lt;/th&gt;
&lt;th&gt;B-trees&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;写入更快，吞吐更高&lt;/td&gt;
&lt;td&gt;读取更快&lt;/td&gt;
&lt;td&gt;具体场景上需要进行基准测试&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储&lt;/td&gt;
&lt;td&gt;可变大小的段，通常 nMB&lt;/td&gt;
&lt;td&gt;固定大小的页，传统 4KB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;写入&lt;/td&gt;
&lt;td&gt;追加，写入更多不利于 SSD&lt;/td&gt;
&lt;td&gt;新的数据覆盖磁盘上旧的页&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;并发控制&lt;/td&gt;
&lt;td&gt;后台合并进行原子替换&lt;/td&gt;
&lt;td&gt;锁存器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;其他索引结构&#34;&gt;其他索引结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在索引中存储值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多列索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全文索引和模糊索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在内存中保存所有内容&lt;/p&gt;
&lt;p&gt;优点：可以支持更复杂的数据结构，而无需考虑数据存储结构。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务处理与分析处理&#34;&gt;事务处理与分析处理&lt;/h2&gt;
&lt;h3 id=&#34;事务处理-oltp--20210610214348-oltp-dot-md&#34;&gt;事务处理：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210610214348-oltp/&#34;&gt;OLTP&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;分析处理-olap--20210610214521-olap-dot-md&#34;&gt;分析处理：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210610214521-olap/&#34;&gt;OLAP&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;对比&#34;&gt;对比&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;OLTP&lt;/th&gt;
&lt;th&gt;OLAP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;主要读属性&lt;/td&gt;
&lt;td&gt;基于键，每次查询返回少量记录&lt;/td&gt;
&lt;td&gt;对于大量记录进行汇总&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主要写属性&lt;/td&gt;
&lt;td&gt;随机访问，低延迟写入用户的输入&lt;/td&gt;
&lt;td&gt;批量导入（ETL）或事件流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;典型使用场景&lt;/td&gt;
&lt;td&gt;终端用户，通过网络应用程序&lt;/td&gt;
&lt;td&gt;内部分析师，为决策提供支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据表征&lt;/td&gt;
&lt;td&gt;最新的数据状态（当前时间点）&lt;/td&gt;
&lt;td&gt;随着事件而变化的所有事件历史&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据规模&lt;/td&gt;
&lt;td&gt;GB 到 TB&lt;/td&gt;
&lt;td&gt;TB 到 PB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数据仓库&#34;&gt;数据仓库&lt;/h3&gt;
&lt;h3 id=&#34;星型与雪花型分析模式&#34;&gt;星型与雪花型分析模式&lt;/h3&gt;
&lt;p&gt;星型模型也称为维度建模。&lt;/p&gt;
&lt;h3 id=&#34;列式存储&#34;&gt;列式存储&lt;/h3&gt;
&lt;h3 id=&#34;列压缩&#34;&gt;列压缩&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>数据模型与查询语言</title>
      <link>https://www.linuxzen.com/notes/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Sun, 06 Jun 2021 09:52:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</guid>
      <description>数据模型 关系模型 突出数据之间的关联。
文档模型 数据来自于包含文档，文档间关联很少。
图状数据模型 针对所有数据都可能互相关联。
数据查询语言 Web 上声明式查询 CSS 选择器。
MapReduce 查询 MapReduce 是一种编程模型，用于在许多机器上批量处理海量数据。
MongoDB 中的 MapReduce
db.observations.mapReduce( function map() { // 2 	var year = this.observationTimestamp.getFullYear(); var month = this.obbservationTimestamp.getMonth() + 1; emit(year + &amp;#34;-&amp;#34; + month, this.numAnimals); // 3  }, function reduce(key, values) { // 4 	return Array.sum(values); // 5  }, { query: {family: &amp;#34;Sharks&amp;#34;}, // 1 	out: &amp;#34;monthlySharkReport&amp;#34; // 6  } );  过滤器声明式执行鲨鱼种类（MongoDB 特有扩展）。 mapper：对于每个匹配的文档都会调用一次这个 JavaScript 函数。 mapper 发射一个「键-值」对，键是 “2013-12” 格式的字符串，值是动物的数量 mapper 发射的键值对按键分组，对于相同键的所有「键-值」对，调用 reduce 函数。 reducer 函数将特定月份的所有观察到的动物数量相加。 最终输出写入到 monthlySharkReport 集合中  </description>
      <content>&lt;h2 id=&#34;数据模型&#34;&gt;数据模型&lt;/h2&gt;
&lt;h3 id=&#34;关系模型&#34;&gt;关系模型&lt;/h3&gt;
&lt;p&gt;突出数据之间的关联。&lt;/p&gt;
&lt;h3 id=&#34;文档模型&#34;&gt;文档模型&lt;/h3&gt;
&lt;p&gt;数据来自于包含文档，文档间关联很少。&lt;/p&gt;
&lt;h3 id=&#34;图状数据模型&#34;&gt;图状数据模型&lt;/h3&gt;
&lt;p&gt;针对所有数据都可能互相关联。&lt;/p&gt;
&lt;h2 id=&#34;数据查询语言&#34;&gt;数据查询语言&lt;/h2&gt;
&lt;h3 id=&#34;web-上声明式查询&#34;&gt;Web 上声明式查询&lt;/h3&gt;
&lt;p&gt;CSS 选择器。&lt;/p&gt;
&lt;h3 id=&#34;mapreduce-查询&#34;&gt;MapReduce 查询&lt;/h3&gt;
&lt;p&gt;MapReduce 是一种编程模型，用于在许多机器上批量处理海量数据。&lt;/p&gt;
&lt;p&gt;MongoDB 中的 MapReduce&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;observations&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mapReduce&lt;/span&gt;(
  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;() {                   &lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;year&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;observationTimestamp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFullYear&lt;/span&gt;();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;month&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;obbservationTimestamp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMonth&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;year&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;month&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;numAnimals&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  },
  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;) {     &lt;span style=&#34;color:#75715e&#34;&gt;// 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;);        &lt;span style=&#34;color:#75715e&#34;&gt;// 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  },
  {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sharks&amp;#34;&lt;/span&gt;},       &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;monthlySharkReport&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;过滤器声明式执行鲨鱼种类（MongoDB 特有扩展）。&lt;/li&gt;
&lt;li&gt;mapper：对于每个匹配的文档都会调用一次这个 JavaScript 函数。&lt;/li&gt;
&lt;li&gt;mapper 发射一个「键-值」对，键是 “2013-12” 格式的字符串，值是动物的数量&lt;/li&gt;
&lt;li&gt;mapper 发射的键值对按键分组，对于相同键的所有「键-值」对，调用 reduce 函数。&lt;/li&gt;
&lt;li&gt;reducer 函数将特定月份的所有观察到的动物数量相加。&lt;/li&gt;
&lt;li&gt;最终输出写入到 &lt;code&gt;monthlySharkReport&lt;/code&gt; 集合中&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>可靠、可扩展与可维护的应用系统</title>
      <link>https://www.linuxzen.com/notes/notes/20210604221658-%E5%8F%AF%E9%9D%A0_%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 04 Jun 2021 22:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210604221658-%E5%8F%AF%E9%9D%A0_%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</guid>
      <description>可靠性 故障与失效  故障（faults）或者错误：组件偏离其正常规格，可以提供容错（fault-tolerant）机制 失效（failure）意味系统作为一个整体停止  硬件故障 软件错误 人为失误 避免优化方式：
 以最小出错方式设计系统。抽象、提供管理界面，使“做正确的事很轻松”，防止限制过多。 分离最容易出错的地方，提供沙箱用以放心尝试。 充分测试。 提供快速恢复机制尽量减少故障影响：快速回滚，提供校验数据的工具。 设置详细而清晰的监控系统 培训和流程  可扩展性 描述负载  QPS 数据库写入比例 同时在线活动用户数 缓存命中率等。  描述性能  吞吐量（throughput）/每秒处理数据量 延迟（latency）/响应时间（response time）：延迟是处理时间，响应时间是客户端看到的。  最好通过百分位数来监控指标：p50/p80/p90/p95/p99/p999，p50 指标表示一半请求在这个指标之下，一半在这个指标之上。
应对负载增加  无状态很方便扩容 但有状态的分布式面临一定的挑战  可维护性 可运维性：运维更轻松 监控、文档、自动化、良好的默认配置、可手动控制系统状态让系统自我修复（比如熔断机制）。
简单性：简化复杂度 抽象！
可演化性：易于改变  TDD 重构  </description>
      <content>&lt;h2 id=&#34;可靠性&#34;&gt;可靠性&lt;/h2&gt;
&lt;h3 id=&#34;故障与失效&#34;&gt;故障与失效&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;故障（faults）或者错误：组件偏离其正常规格，可以提供容错（fault-tolerant）机制&lt;/li&gt;
&lt;li&gt;失效（failure）意味系统作为一个整体停止&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;硬件故障&#34;&gt;硬件故障&lt;/h3&gt;
&lt;h3 id=&#34;软件错误&#34;&gt;软件错误&lt;/h3&gt;
&lt;h3 id=&#34;人为失误&#34;&gt;人为失误&lt;/h3&gt;
&lt;p&gt;避免优化方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以最小出错方式设计系统。抽象、提供管理界面，使“做正确的事很轻松”，防止限制过多。&lt;/li&gt;
&lt;li&gt;分离最容易出错的地方，提供沙箱用以放心尝试。&lt;/li&gt;
&lt;li&gt;充分测试。&lt;/li&gt;
&lt;li&gt;提供快速恢复机制尽量减少故障影响：快速回滚，提供校验数据的工具。&lt;/li&gt;
&lt;li&gt;设置详细而清晰的监控系统&lt;/li&gt;
&lt;li&gt;培训和流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可扩展性&#34;&gt;可扩展性&lt;/h2&gt;
&lt;h3 id=&#34;描述负载&#34;&gt;描述负载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;QPS&lt;/li&gt;
&lt;li&gt;数据库写入比例&lt;/li&gt;
&lt;li&gt;同时在线活动用户数&lt;/li&gt;
&lt;li&gt;缓存命中率等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;描述性能&#34;&gt;描述性能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量（throughput）/每秒处理数据量&lt;/li&gt;
&lt;li&gt;延迟（latency）/响应时间（response time）：延迟是处理时间，响应时间是客户端看到的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最好通过百分位数来监控指标：p50/p80/p90/p95/p99/p999，p50 指标表示一半请求在这个指标之下，一半在这个指标之上。&lt;/p&gt;
&lt;h3 id=&#34;应对负载增加&#34;&gt;应对负载增加&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无状态很方便扩容&lt;/li&gt;
&lt;li&gt;但有状态的分布式面临一定的挑战&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可维护性&#34;&gt;可维护性&lt;/h2&gt;
&lt;h3 id=&#34;可运维性-运维更轻松&#34;&gt;可运维性：运维更轻松&lt;/h3&gt;
&lt;p&gt;监控、文档、自动化、良好的默认配置、可手动控制系统状态让系统自我修复（比如熔断机制）。&lt;/p&gt;
&lt;h3 id=&#34;简单性-简化复杂度&#34;&gt;简单性：简化复杂度&lt;/h3&gt;
&lt;p&gt;抽象！&lt;/p&gt;
&lt;h3 id=&#34;可演化性-易于改变&#34;&gt;可演化性：易于改变&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;重构&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20210604221412-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 04 Jun 2021 22:14:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210604221412-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description> tags: 读书笔记,Bigdata,分布式,数据库  数据系统基础 可靠、可扩展与可维护的应用系统 数据模型与查询语言 数据存储与检索 数据编码与演化 分布式数据系统 目的：扩展性、容错和高可用、延迟考虑（多机房）
扩展：
 垂直扩展：提升单机性能 水平扩展：无共享结构，由软件实现核心逻辑  复制与分区：
 复制：多节点冗余 分区：数据库拆分 分片：分区分配给不同的节点  数据复制 数据分区 事务 分布式系统挑战 一致性与共识 派生数据  记录系统：真实数据系统，拥有数据的权威版本。 派生数据系统：从另一个数据系统获取，丢失可以根据数据源重建，如缓存等。  批处理系统 流处理系统 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/&#34;&gt;分布式&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210805082720-%E6%95%B0%E6%8D%AE%E5%BA%93/&#34;&gt;数据库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据系统基础&#34;&gt;数据系统基础&lt;/h2&gt;
&lt;h3 id=&#34;可靠-可扩展与可维护的应用系统--20210604221658-可靠-可扩展与可维护的应用系统-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210604221658-%E5%8F%AF%E9%9D%A0_%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/&#34;&gt;可靠、可扩展与可维护的应用系统&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;数据模型与查询语言--20210606095222-数据模型与查询语言-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/&#34;&gt;数据模型与查询语言&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;数据存储与检索--20210606095514-数据存储与检索-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210606095514-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/&#34;&gt;数据存储与检索&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;数据编码与演化--20210610215330-数据编码与演化-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210610215330-%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E6%BC%94%E5%8C%96/&#34;&gt;数据编码与演化&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;分布式数据系统&#34;&gt;分布式数据系统&lt;/h2&gt;
&lt;p&gt;目的：扩展性、容错和高可用、延迟考虑（多机房）&lt;/p&gt;
&lt;p&gt;扩展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垂直扩展：提升单机性能&lt;/li&gt;
&lt;li&gt;水平扩展：无共享结构，由软件实现核心逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复制与分区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制：多节点冗余&lt;/li&gt;
&lt;li&gt;分区：数据库拆分&lt;/li&gt;
&lt;li&gt;分片：分区分配给不同的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据复制--20210614203122-数据复制-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210614203122-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/&#34;&gt;数据复制&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;数据分区--20210711153015-数据分区-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/&#34;&gt;数据分区&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;事务--20210714073909-事务-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210714073909-%E4%BA%8B%E5%8A%A1/&#34;&gt;事务&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;分布式系统挑战--20210721063222-分布式系统挑战-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/&#34;&gt;分布式系统挑战&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;一致性与共识--20210725072621-一致性与共识-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/&#34;&gt;一致性与共识&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;派生数据&#34;&gt;派生数据&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;记录系统：真实数据系统，拥有数据的权威版本。&lt;/li&gt;
&lt;li&gt;派生数据系统：从另一个数据系统获取，丢失可以根据数据源重建，如缓存等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;批处理系统--20210805074336-批处理系统-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/&#34;&gt;批处理系统&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;流处理系统--20210813065446-流处理系统-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210813065446-%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/&#34;&gt;流处理系统&lt;/a&gt;&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>项目代号</title>
      <link>https://www.linuxzen.com/notes/notes/20210525113247-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E5%8F%B7/</link>
      <pubDate>Tue, 25 May 2021 11:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210525113247-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E5%8F%B7/</guid>
      <description> tags: 技术随想  几何结构  mobius Klein Trefoil knot Penrose triangle  植物  bonsai broccoli  科幻  tardis dalek 消灭  神话 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210220165806-%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/&#34;&gt;技术随想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;几何结构&#34;&gt;几何结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%B8%A6&#34;&gt;mobius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Klein%5Fbottle&#34;&gt;Klein&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trefoil%5Fknot&#34;&gt;Trefoil knot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Penrose%5Ftriangle&#34;&gt;Penrose triangle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;植物&#34;&gt;植物&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;bonsai&lt;/li&gt;
&lt;li&gt;broccoli&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;科幻&#34;&gt;科幻&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;tardis&lt;/li&gt;
&lt;li&gt;dalek  消灭&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;神话&#34;&gt;神话&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>macOS 问题解决三板斧</title>
      <link>https://www.linuxzen.com/notes/notes/20210322145956-macos_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B8%89%E6%9D%BF%E6%96%A7/</link>
      <pubDate>Mon, 22 Mar 2021 14:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210322145956-macos_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B8%89%E6%9D%BF%E6%96%A7/</guid>
      <description> tags: macOS  通常你沟通苹果的官方支持一般都会给你三板斧：
 重启：按住电源键 10 秒中，然后等几秒钟后再开机 重置 SMC：关机然后按住：Ctrl + Option + 右侧Shift + 电源键 7 秒钟关机，等待几秒钟后开机。  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074038-macos/&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常你沟通苹果的官方支持一般都会给你三板斧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重启：按住电源键 10 秒中，然后等几秒钟后再开机&lt;/li&gt;
&lt;li&gt;重置 SMC：关机然后按住：Ctrl + Option + 右侧Shift + 电源键 7 秒钟关机，等待几秒钟后开机。&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>macOS TimeMachine 日志</title>
      <link>https://www.linuxzen.com/notes/notes/20210322145854-macos_timemachine_%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 22 Mar 2021 14:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210322145854-macos_timemachine_%E6%97%A5%E5%BF%97/</guid>
      <description> tags: macOS  查看 TimeMachine 日志：
printf &amp;#39;\e[3J&amp;#39; &amp;amp;&amp;amp; log show --predicate &amp;#39;subsystem == &amp;#34;com.apple.TimeMachine&amp;#34;&amp;#39; --debug --last 6m </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074038-macos/&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看 TimeMachine 日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\e[3J&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; log show --predicate &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subsystem == &amp;#34;com.apple.TimeMachine&amp;#34;&amp;#39;&lt;/span&gt; --debug --last 6m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>English IPA</title>
      <link>https://www.linuxzen.com/notes/notes/20210317141647-english_ipa/</link>
      <pubDate>Wed, 17 Mar 2021 14:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210317141647-english_ipa/</guid>
      <description>tags: Learning English  一些通用的规则：
 音标后面的 ː 提示拖长音。  元音 大而圆    音标 中文 发音技巧 常见单词 拼读规则     /​æ​/ 爱 张大嘴发中文的「爱」,发音短促有力。 bag map dad sad a   /​e​/ 爱 音同 /​æ​/ 但是嘴形要小一些。 get let pen yes e   /​ɔː​/ 哦 嘴巴轮圆了发音，并拖长音 floor door store sport oor,ore,or   /​ɔ​/ 哦 /​ɔː​/ 的短音 lot dog hot shop o    扁扁扁    音标 中文 发音技巧 常见单词 拼读规则     /iː​/ 一 相比一嘴要扁一些，稍稍更用力一些 see meet he she ee, e   /​i​/ 一 /iː​/ 短音 happy daddy honey 词尾的 y 或 ey   /​I​/ 一 用 /​e​/ 的嘴形发 /​i​/ this give it city i   /əː​/ 呃 相比中文嘴要扁一些，稍稍更用力一些 work girl dirt sir or, ir   /​ə​/ 呃 /əː​/ 的短音 again a father weather 单独的 a 及词尾的 er    需要额外注意的：</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些通用的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音标后面的 ː 提示拖长音。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;元音&#34;&gt;元音&lt;/h2&gt;
&lt;h3 id=&#34;大而圆&#34;&gt;大而圆&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/​æ​/&lt;/td&gt;
&lt;td&gt;爱&lt;/td&gt;
&lt;td&gt;张大嘴发中文的「爱」,发音短促有力。&lt;/td&gt;
&lt;td&gt;bag map dad sad&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​e​/&lt;/td&gt;
&lt;td&gt;爱&lt;/td&gt;
&lt;td&gt;音同 /​æ​/ 但是嘴形要小一些。&lt;/td&gt;
&lt;td&gt;get let pen yes&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ɔː​/&lt;/td&gt;
&lt;td&gt;哦&lt;/td&gt;
&lt;td&gt;嘴巴轮圆了发音，并拖长音&lt;/td&gt;
&lt;td&gt;floor door store sport&lt;/td&gt;
&lt;td&gt;oor,ore,or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ɔ​/&lt;/td&gt;
&lt;td&gt;哦&lt;/td&gt;
&lt;td&gt;/​ɔː​/ 的短音&lt;/td&gt;
&lt;td&gt;lot dog hot shop&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;扁扁扁&#34;&gt;扁扁扁&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/iː​/&lt;/td&gt;
&lt;td&gt;一&lt;/td&gt;
&lt;td&gt;相比一嘴要扁一些，稍稍更用力一些&lt;/td&gt;
&lt;td&gt;see meet he she&lt;/td&gt;
&lt;td&gt;ee, e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​i​/&lt;/td&gt;
&lt;td&gt;一&lt;/td&gt;
&lt;td&gt;/iː​/ 短音&lt;/td&gt;
&lt;td&gt;happy daddy honey&lt;/td&gt;
&lt;td&gt;词尾的 y 或 ey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​I​/&lt;/td&gt;
&lt;td&gt;一&lt;/td&gt;
&lt;td&gt;用 /​e​/ 的嘴形发 /​i​/&lt;/td&gt;
&lt;td&gt;this give it city&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/əː​/&lt;/td&gt;
&lt;td&gt;呃&lt;/td&gt;
&lt;td&gt;相比中文嘴要扁一些，稍稍更用力一些&lt;/td&gt;
&lt;td&gt;work girl dirt sir&lt;/td&gt;
&lt;td&gt;or, ir&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ə​/&lt;/td&gt;
&lt;td&gt;呃&lt;/td&gt;
&lt;td&gt;/əː​/ 的短音&lt;/td&gt;
&lt;td&gt;again a father weather&lt;/td&gt;
&lt;td&gt;单独的 a 及词尾的 er&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;需要额外注意的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;worker 前面是  /əː​/ 后面是  /​ə​/ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;合起来&#34;&gt;合起来&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/​ei/&lt;/td&gt;
&lt;td&gt;诶&lt;/td&gt;
&lt;td&gt;/​e​/ 和 /​i​/ 连起来，将嘴形压扁，含有下压的过程&lt;/td&gt;
&lt;td&gt;name mate late say&lt;/td&gt;
&lt;td&gt;ay 或以 e 结尾（e 不发音）a 发 /​ei/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​iə​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;两个音快速的合起来读，没有真正的合并（双元音）&lt;/td&gt;
&lt;td&gt;hear bear dear really&lt;/td&gt;
&lt;td&gt;ear eer ea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ɔi​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;两个音快速的合起来读，没有真正的合并（双元音）&lt;/td&gt;
&lt;td&gt;boy soy noise toy&lt;/td&gt;
&lt;td&gt;oy oi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ɛə​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;两个音快速的合起来读，没有真正的合并（双元音）&lt;/td&gt;
&lt;td&gt;their hair pair fair&lt;/td&gt;
&lt;td&gt;eir air&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;name 中 a 发 /​ei/ 的这种发音属于「软化」。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;大而后&#34;&gt;大而后&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/​aː​/&lt;/td&gt;
&lt;td&gt;啊&lt;/td&gt;
&lt;td&gt;张大嘴，发音靠后，拖长&lt;/td&gt;
&lt;td&gt;car far class ask&lt;/td&gt;
&lt;td&gt;ar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ʌ​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/​aː​/ 的短音，发音靠喉咙挤压（泰山压顶）&lt;/td&gt;
&lt;td&gt;love but come some&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ai​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;对比 /​æ​/ 发音柔和且稍稍拖长&lt;/td&gt;
&lt;td&gt;hi time like five&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​əu​/&lt;/td&gt;
&lt;td&gt;嗷&lt;/td&gt;
&lt;td&gt;发音靠后，柔和饱满&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​au​/&lt;/td&gt;
&lt;td&gt;嗷&lt;/td&gt;
&lt;td&gt;需要张大嘴，且发音靠后&lt;/td&gt;
&lt;td&gt;now house how about&lt;/td&gt;
&lt;td&gt;ou ow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;字母 i 发 /​i​/ （/​ɪ​/）时，通常不直接作为词尾，而是会有一个辅音垫在后面&lt;/li&gt;
&lt;li&gt;字母 i 发 /​ai​/ 时，即可直接作为词尾，也可不作词尾。当词尾为不发音的 e 时，字母 i 通常发 /​ai​/，即「软化」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;辅音&#34;&gt;辅音&lt;/h2&gt;
&lt;h3 id=&#34;类母语&#34;&gt;类母语&lt;/h3&gt;
&lt;p&gt;辅音和元音合并发音时，以下辅音可视为和汉语拼音发音类同！&lt;/p&gt;
&lt;p&gt;/​p​/ /​t​/ /​k​/ /​f​/ /​s​/ /​h​/ /​d​/ /​g​/ /​z​/ /​r​/ /​w​/ /​m​/ /​n​/ /​l​/&lt;/p&gt;
&lt;p&gt;而且这些辅音音标还是和字母基本对应。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/​j​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes your year&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ʃ​/&lt;/td&gt;
&lt;td&gt;sh&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;she shy shoe&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/tʃ​/&lt;/td&gt;
&lt;td&gt;ch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;chair cheer cheap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;读一半&#34;&gt;读一半&lt;/h3&gt;
&lt;p&gt;辅音元音无法组合发音，辅音单独发音的时候“只读一半音”。读一半就是去掉元音之后的发音。
发音要点：发音较轻，不拖。&lt;/p&gt;
&lt;h4 id=&#34;清辅音&#34;&gt;清辅音&lt;/h4&gt;
&lt;p&gt;通过吐气来替代声带，叫做“清辅音”。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/​p​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;map hope deep&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​t​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;get yet&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​k​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;book break&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​f​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;half if&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​s​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes ice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​ʃ​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;fish wish&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/tʃ​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;each teach&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;浊辅音&#34;&gt;浊辅音&lt;/h4&gt;
&lt;p&gt;并非凸起就能完成，需要轻微震动声代，称为“浊辅音”。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;音标&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;发音技巧&lt;/th&gt;
&lt;th&gt;常见单词&lt;/th&gt;
&lt;th&gt;拼读规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/​g​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;big bad leg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​b​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;lab job&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​d​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;dad side&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​z​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;noise is&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​m​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;some room&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​n​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;man son&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/​l​/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不发音，而只是一个动作：舌头前半部分往上颚上台&lt;/td&gt;
&lt;td&gt;tall ball milk&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;/​j​/ /​w​/ /​r​/ /​w​/ 在现在英语中不单独存在。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Learning English</title>
      <link>https://www.linuxzen.com/notes/topics/20210317141621-learning_english/</link>
      <pubDate>Wed, 17 Mar 2021 14:16:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20210317141621-learning_english/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>二叉树的遍历</title>
      <link>https://www.linuxzen.com/notes/notes/20210220203210-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 20 Feb 2021 20:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220203210-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <description>分为三种：前序、后序和中序，其中最容易用栈改写的是后序。
前序(Preorder)：Root -&amp;gt; Left -&amp;gt; Right class Solution { public: void processPreorderTraversal(TreeNode* root, vector&amp;lt;int&amp;gt; &amp;amp; collector) { if (root == nullptr) { return; } processPreorderTraversal(root-&amp;gt;left, collector); collector.push_back(root-&amp;gt;val); processPreorderTraversal(root-&amp;gt;right, collector); } vector&amp;lt;int&amp;gt; inorderTraversal(TreeNode* root) { vector&amp;lt;int&amp;gt; ret; if (root == nullptr) { return ret; } processPreorderTraversal(root, ret); return ret; } }; 中序(Inorder): Left -&amp;gt; Root -&amp;gt; Right class Solution { public: void processInorderTraversal(TreeNode* root, vector&amp;lt;int&amp;gt; &amp;amp; collector) { if (root == nullptr) { return; } processInorderTraversal(root-&amp;gt;left, collector); collector.</description>
      <content>&lt;p&gt;分为三种：前序、后序和中序，其中最容易用栈改写的是后序。&lt;/p&gt;
&lt;h2 id=&#34;前序--preorder--root-left-right&#34;&gt;前序(Preorder)：Root -&amp;gt; Left -&amp;gt; Right&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; processPreorderTraversal(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; collector) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		processPreorderTraversal(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, collector);
		collector.push_back(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
		processPreorderTraversal(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, collector);
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; inorderTraversal(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ret;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
		}
		processPreorderTraversal(root, ret);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;中序--inorder--left-root-right&#34;&gt;中序(Inorder): Left -&amp;gt; Root -&amp;gt; Right&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; processInorderTraversal(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; collector) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		processInorderTraversal(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, collector);
		collector.push_back(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
		processInorderTraversal(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, collector);
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; inorderTraversal(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ret;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
		}
		processInorderTraversal(root, ret);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;后序--postorder--left-right-root&#34;&gt;后序(Postorder)：Left -&amp;gt; Right -&amp;gt; Root&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; processPostorderTraversal(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; collector) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
		processPostorderTraversal(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;left, collector);
		processPostorderTraversal(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;right, collector);
		collector.push_back(root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;val);
	}

	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; postorderTraversal(TreeNode&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; root) {
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ret;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
		}
		processPostorderTraversal(root, ret);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;非递归遍历&#34;&gt;非递归遍历&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903503807119374&#34;&gt;【刷题】二叉树非递归遍历 &lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>OX-HUGO 批量导出 Markdown</title>
      <link>https://www.linuxzen.com/notes/notes/20210220175534-ox_hugo_%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA_markdown/</link>
      <pubDate>Sat, 20 Feb 2021 17:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220175534-ox_hugo_%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA_markdown/</guid>
      <description> tags: Taking Notes, Org Mode  方案一：通过 Emacs 批处理模式 emacs file.org --batch -f org-hugo-export-wim-to-md --kill --batch 默认不启用配置文件，可以使用 -l
emacs file.org --batch -l ~/.emacs.d/init.el -f org-hugo-export-wim-to-md --kill 方案二：通过 LISP 遍历 (mapc (lambda (x) (with-current-buffer (find-file-noselect x) (org-hugo-export-wim-to-md t))) (directory-files &amp;#34;/Users/wh/codes/notes/roam-research-notes-hugo/journal&amp;#34; nil &amp;#34;^[0-9]+$&amp;#34; t)) </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20211231122047-taking_notes/&#34;&gt;Taking Notes&lt;/a&gt;, &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120643_org_mode/&#34;&gt;Org Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方案一-通过-emacs-批处理模式&#34;&gt;方案一：通过 Emacs 批处理模式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;emacs file.org --batch -f org-hugo-export-wim-to-md --kill
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--batch&lt;/code&gt; 默认不启用配置文件，可以使用 &lt;code&gt;-l&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;emacs file.org --batch -l ~/.emacs.d/init.el -f org-hugo-export-wim-to-md --kill
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;方案二-通过-lisp-遍历&#34;&gt;方案二：通过 LISP 遍历&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mapc&lt;/span&gt;
 (lambda (x)
   (with-current-buffer
	   (find-file-noselect x)
	 (org-hugo-export-wim-to-md &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
 (directory-files &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/wh/codes/notes/roam-research-notes-hugo/journal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[0-9]+$&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>中间件</title>
      <link>https://www.linuxzen.com/notes/notes/20210220165816-%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Sat, 20 Feb 2021 16:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220165816-%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>tags: 技术，技术概念  中间件可以对系统进行解耦，比如上层系统对下层系统进行网络请求，考虑下面结构
- U - / | \ /--- | ---\ / | \ A B C 如果下层系统增加节点的话就需要重启 U。
引入 HAProxy 或者 Nginx 之类的中间件可以对两层系统进行解耦：
U | +------+ | HA | +------+ / | \ /--- | ---\ / | \ A B C 这样上层和下层系统都依赖中间件，但是系统之间不再强耦合，下层系统可以依赖中间件随意的进行所扩容而不用被上层系统感知。 这时候中间件只要保证中间件稳定即可，可以在中间件上进行热重启。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中间件可以对系统进行解耦，比如上层系统对下层系统进行网络请求，考虑下面结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;	   - U -
	  /  |  \
  /---   |   ---\
 /       |       \
A        B        C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果下层系统增加节点的话就需要重启 U。&lt;/p&gt;
&lt;p&gt;引入 HAProxy 或者 Nginx 之类的中间件可以对两层系统进行解耦：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;		 U
		 |
	 +------+
	 |  HA  |
	 +------+
	  /  |  \
  /---   |   ---\
 /       |       \
A        B        C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样上层和下层系统都依赖中间件，但是系统之间不再强耦合，下层系统可以依赖中间件随意的进行所扩容而不用被上层系统感知。
这时候中间件只要保证中间件稳定即可，可以在中间件上进行热重启。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>技术随想</title>
      <link>https://www.linuxzen.com/notes/notes/20210220165806-%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/</link>
      <pubDate>Sat, 20 Feb 2021 16:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210220165806-%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/</guid>
      <description> 项目代号 技术概念  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210525113247-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E5%8F%B7/&#34;&gt;项目代号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/&#34;&gt;技术概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>C/C&#43;&#43; thread-local storage</title>
      <link>https://www.linuxzen.com/notes/notes/20210219200958-c_c_thread_local_storage/</link>
      <pubDate>Fri, 19 Feb 2021 20:09:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210219200958-c_c_thread_local_storage/</guid>
      <description> tags: C/C++ source: All about thread-local storage  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://maskray.me/blog/2021-02-14-all-about-thread-local-storage&#34;&gt;All about thread-local storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>macOS max open files</title>
      <link>https://www.linuxzen.com/notes/notes/20210125174343-macos_max_open_files/</link>
      <pubDate>Mon, 25 Jan 2021 17:43:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210125174343-macos_max_open_files/</guid>
      <description>tags: macOS  fix &amp;ldquo;Too many open files in system&amp;rdquo; error</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074038-macos/&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://superuser.com/questions/433746/is-there-a-fix-for-the-too-many-open-files-in-system-error-on-os-x-10-7-1&#34;&gt;fix &amp;ldquo;Too many open files in system&amp;rdquo; error&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>GDB 打出所有线程的 Backtrace</title>
      <link>https://www.linuxzen.com/notes/notes/20210118114707-gdb_%E6%89%93%E5%87%BA%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E7%9A%84_backtrace/</link>
      <pubDate>Mon, 18 Jan 2021 11:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210118114707-gdb_%E6%89%93%E5%87%BA%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E7%9A%84_backtrace/</guid>
      <description> tags: GDB  thread apply all bt </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210118114626-gdb/&#34;&gt;GDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;thread apply all bt
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>GDB</title>
      <link>https://www.linuxzen.com/notes/topics/20210118114626-gdb/</link>
      <pubDate>Mon, 18 Jan 2021 11:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20210118114626-gdb/</guid>
      <description> tags: C/C++,Programming Tools  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074329-programming_tools/&#34;&gt;Programming Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>C&#43;&#43; LSP</title>
      <link>https://www.linuxzen.com/notes/notes/20210114175011-lsp/</link>
      <pubDate>Thu, 14 Jan 2021 17:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20210114175011-lsp/</guid>
      <description>tags: Emacs,LSP,C/C++,CMake  通过如下命令生成 clangd 识别的编译配置文件
mkdir build cd build cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .. mv compile_commands.json ../ 然后重启 M-x lsp-restart-workspace RET 即可。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231165951-lsp/&#34;&gt;LSP&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200628123035-cmake/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过如下命令生成 clangd 识别的编译配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir build
cd build
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ..
mv compile_commands.json ../
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重启 &lt;code&gt;M-x lsp-restart-workspace RET&lt;/code&gt; 即可。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Python behind the scenes #2: how the CPython compiler works</title>
      <link>https://www.linuxzen.com/notes/notes/20201015182827-python_behind_the_scenes_2_how_the_cpython_compiler_works/</link>
      <pubDate>Thu, 15 Oct 2020 18:28:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20201015182827-python_behind_the_scenes_2_how_the_cpython_compiler_works/</guid>
      <description>tags: Translate,Incomplete,Python  Python 幕后 #2: CPython 编译器如何工作 今天的主题（Today&amp;rsquo;s subject） 在本系列的第一篇文章中我们研究了 Python 虚拟机。我们学了解到它通过执行一系列叫做字节码（bytecode）的指令。 我们也看到 Python 字节码没有完全描述代码片段的行为。这也是为什么存在一个代码对象（code object）的概念。 执行诸如函数或模块的代码块也就是执行对应的代码对象。代码对象包含了代码块的字节码，包含代码中使用的常量和变量名， 还有代码块的一些属性。
通常，一个 Python 程序员不用编写字节码，并且也不用创建代码对象，而是编写正常的 Python 代码。所有 CPython 必须 能够将源代码转换成代码对象。CPython 编译器就负责这部分工作。我们将通过这部分内容探索它是如何工作的。
Note: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。 我将会尝试关注一些重要的改变并添加更新备注。
什么是 CPython 编译器（What CPython compiler is） 我们已经了解了 CPython 编译器的职责，但是在我们进入到它是如何实现的之前，让我们首先来搞清楚为什么我们称之为编译器？
在通常情况加，编译器是一个将一个程序语言翻译到另一个与之等价的程序语言的程序。编译器有许多种类，但是通常情况下我们 讨论的都是静态编译：将一个高级语言的程序翻译成机器码。CPython 编译器也是这样吗？要回答这个问题，我们先看一下静态编 译器的传统三阶段设计（three-stage design）。
 编译器前端（frontend）将源代码转换成一种中间语言（IR,intermediate representation）。然后优化器（optimzer）拿到中间语言 对其进行优化并把优化过的中间语言传递给编译器后端生成机器码。如果我们选择一种源语言和目标机器无关的中间语言，我们就 得到了三阶段设计的关键益处：对于一个编译器来说，支持一种新的源语言仅仅需要新增一个对应的编译器前端，支持一种新的目标机器 仅仅需要新增一个对应的编译器后端。
LLVM 工具集（toolchain）就是这个模型的一个很好的成功的例子。有很多编译器前端如 C、Rust、Swift 等其他很多编程语言基于 LLVM 提供给编译器更加复杂的部分。LLVM 的创建者 Chris Latter 提供了一个很好的 LLVM 架构概览。
CPython 尽管不需要支持多个源语言和目标机器，尔仅仅需要支持 Python 代码和 CPython 虚拟机。不过，CPython 同样实现了三阶段设计。 如果想知道为什么，我们需要更加详细的解释编译器的三阶段的每个阶段。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231172037-incomplete/&#34;&gt;Incomplete&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200628133616-python/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python-幕后-2-cpython-编译器如何工作&#34;&gt;Python 幕后 #2: CPython 编译器如何工作&lt;/h2&gt;
&lt;h3 id=&#34;今天的主题-today-s-subject&#34;&gt;今天的主题（Today&amp;rsquo;s subject）&lt;/h3&gt;
&lt;p&gt;在本系列的&lt;a href=&#34;https://www.linuxzen.com/python-behind-the-scenes%5F1%5Fhow%5Fcpython%5Fvm%5Fworks.html&#34;&gt;第一篇文章&lt;/a&gt;中我们研究了 Python 虚拟机。我们学了解到它通过执行一系列叫做字节码（bytecode）的指令。
我们也看到 Python 字节码没有完全描述代码片段的行为。这也是为什么存在一个代码对象（code object）的概念。
执行诸如函数或模块的代码块也就是执行对应的代码对象。代码对象包含了代码块的字节码，包含代码中使用的常量和变量名，
还有代码块的一些属性。&lt;/p&gt;
&lt;p&gt;通常，一个 Python 程序员不用编写字节码，并且也不用创建代码对象，而是编写正常的 Python 代码。所有 CPython 必须
能够将源代码转换成代码对象。CPython 编译器就负责这部分工作。我们将通过这部分内容探索它是如何工作的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/strong&gt;: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。
我将会尝试关注一些重要的改变并添加更新备注。&lt;/p&gt;
&lt;h3 id=&#34;什么是-cpython-编译器-what-cpython-compiler-is&#34;&gt;什么是 CPython 编译器（What CPython compiler is）&lt;/h3&gt;
&lt;p&gt;我们已经了解了 CPython 编译器的职责，但是在我们进入到它是如何实现的之前，让我们首先来搞清楚为什么我们称之为编译器？&lt;/p&gt;
&lt;p&gt;在通常情况加，编译器是一个将一个程序语言翻译到另一个与之等价的程序语言的程序。编译器有许多种类，但是通常情况下我们
讨论的都是静态编译：将一个高级语言的程序翻译成机器码。CPython 编译器也是这样吗？要回答这个问题，我们先看一下静态编
译器的传统三阶段设计（three-stage design）。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/python-bts-2/diagram1.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;编译器前端（frontend）将源代码转换成一种中间语言（IR,intermediate representation）。然后优化器（optimzer）拿到中间语言
对其进行优化并把优化过的中间语言传递给编译器后端生成机器码。如果我们选择一种源语言和目标机器无关的中间语言，我们就
得到了三阶段设计的关键益处：对于一个编译器来说，支持一种新的源语言仅仅需要新增一个对应的编译器前端，支持一种新的目标机器
仅仅需要新增一个对应的编译器后端。&lt;/p&gt;
&lt;p&gt;LLVM 工具集（toolchain）就是这个模型的一个很好的成功的例子。有很多编译器前端如 C、Rust、Swift 等其他很多编程语言基于
LLVM 提供给编译器更加复杂的部分。LLVM 的创建者 Chris Latter 提供了一个很好的 &lt;a href=&#34;http://aosabook.org/en/llvm.html&#34;&gt;LLVM 架构概览&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;CPython 尽管不需要支持多个源语言和目标机器，尔仅仅需要支持 Python 代码和 CPython 虚拟机。不过，CPython 同样实现了三阶段设计。
如果想知道为什么，我们需要更加详细的解释编译器的三阶段的每个阶段。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/python-bts-2/diagram2.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;上面图片表示了一个典型的编译器模型。现在将之与下面 CPython 编译器架构的图片进行对比。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/python-bts-2/diagram3.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;是不是看起来很像？这里的关键点是任何之前学过编译器的人都应该熟悉 CPython 编译器的结构。如果你没有学过相关知识，著名的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%5F(%E6%95%99%E6%9D%90)&#34;&gt;龙书（Dragon Book）&lt;/a&gt;
是一个非常好的构建编译器的理论引导。这本书很长，但是即使阅读前几章你也会收获巨大。&lt;/p&gt;
&lt;p&gt;我们的对比需要一些进一步的解释。首先，从 CPython 3.9 默认使用了一个新的解析器直接输入 AST（抽象语法树，Abstract Syntax Tree），
不再需要任何中间部署来构建解析树。因此 CPython 编译器模型得到进一步简化。其次，与静态编译器相比，CPython 的一些前置阶段工作很少
也许会让人认为 CPython 编译器更加像一个编译器前端。我们不会采用硬核编译器编写者的这种观点。&lt;/p&gt;
&lt;h3 id=&#34;编译器架构概述-overview-of-the-compiler-s-architecture&#34;&gt;编译器架构概述（Overview of the compiler&amp;rsquo;s architecture）&lt;/h3&gt;
&lt;p&gt;上面的图很好，但是它们隐藏了很多细节会造成误导，所以让我们花费一些时间讨论 CPython 编译器的整体设计。&lt;/p&gt;
&lt;p&gt;CPython 编译器的两个主要部分是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译器前端；和&lt;/li&gt;
&lt;li&gt;编译器后端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编译器前端接受 Python 代码产生 AST。编译器后端接受 AST 产生代码对象。贯穿整个 Python 源代码，
术语解析器（parser）和编译器分别代表编译器前端和后端。这里的编译器（compiler）代表另外一个意思。
它应该被称为其他的名字比如代码对象生成器，但是我们依然坚持使用编译器，因为它似乎不会造成太多麻烦。&lt;/p&gt;
&lt;p&gt;解析器（parser）的职责是检查输入的 Python 代码语法是否正确。如果不正确，解析器会报告一个像下面这样的错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;SyntaxError&lt;/span&gt;: invalid syntax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果输入正确，解析器会根据文法（grammar）规则对它进行组织。文法（grammar）定义了一个语言的语法（syntax）&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
我认为形式文法（formal grammar）的概念之于我们的讨论非常关键，我们需要需要稍微注意一下它的形式定义 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;根据传统定义，一个公式是一个包含四个项目的元组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(\sum\) - 有限的端点符号集，或简称端点（通常用小写字母表示）。&lt;/li&gt;
&lt;li&gt;\(N\) - 有限的非端点符号集，或简称非端点（通常用大写字母表示）。&lt;/li&gt;
&lt;li&gt;\(P\) - 有限的产生式规则集。在无文法上下文的情况（包括 Python 的文法），一个产生式的规则只是一个将一个非端点符号映射成
无序的端点和非端点序列，就像 \(A \rightarrow aB\)&lt;/li&gt;
&lt;li&gt;\(S\) - 开始符号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文法定义了语言，其中包含可以通过应用产生式规则生成的所有端点序列。要生成序列，以符号 \(S\) 开头，根据产生式规则将每个
非端点递归替换为一个序列，直到整个序列由端点组成。使用已建立的符号约定，列出产生式规则以指定文法就够了。例如，
这是一个简单的文法生成交替的 1 和 0 的序列：&lt;/p&gt;
&lt;p&gt;$S → 10S|10 $&lt;/p&gt;
&lt;p&gt;我们将会在解析器部分继续更深入的讨论文法。&lt;/p&gt;
&lt;h3 id=&#34;抽象语法树-abstract-syntax-tree&#34;&gt;抽象语法树（Abstract syntax tree）&lt;/h3&gt;
&lt;p&gt;解析器的最终目的是产生 AST。AST 是一个提供源代码高层抽象的树结构。下面是一段代码通过使用 &lt;a href=&#34;https://docs.python.org/3/library/ast.html&#34;&gt;ast&lt;/a&gt; 标准库 dump 出来的对应的 AST：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
f(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ python -m ast example.py
Module&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
   body&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;
	  Assign&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
		 targets&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;
			Name&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, ctx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Store&lt;span style=&#34;color:#f92672&#34;&gt;())]&lt;/span&gt;,
		 value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Constant&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;123&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;,
	  Expr&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
		 value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Call&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
			func&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Name&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, ctx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Load&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;,
			args&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;
			   Name&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, ctx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Load&lt;span style=&#34;color:#f92672&#34;&gt;())]&lt;/span&gt;,
			keywords&lt;span style=&#34;color:#f92672&#34;&gt;=[]))]&lt;/span&gt;,
   type_ignores&lt;span style=&#34;color:#f92672&#34;&gt;=[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AST 节点的类型使用&lt;a href=&#34;https://www.cs.princeton.edu/research/techreps/TR-554-97&#34;&gt;抽象语法描述语言&lt;/a&gt;（ASDL）进行定义。ASDL 是一个简单的声明式语言用来描述中间语言（IRs），也就是 AST。
这里是 &lt;a href=&#34;https://github.com/python/cpython/blob/master/Parser/Python.asdl&#34;&gt;Parser/Python.asdl&lt;/a&gt; 中 &lt;code&gt;Assign&lt;/code&gt; 和 &lt;code&gt;Expr&lt;/code&gt; 节点的定义：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-adsl&#34; data-lang=&#34;adsl&#34;&gt;stmt = ... | Assign(expr* targets, expr value, string? type_comment) | ...
expr = ... | Call(expr func, expr* args, keyword* keywords) | ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ASDL 规范能够让我们快速的直观了解 Python AST。但是解析器需要使用 C 代码来表示 AST。幸好，通过 ASDL 的描述可以非常简单的生成 C 结构体。
下面是 CPython 的实现，结果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _stmt {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; _stmt_kind kind;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// ... other kinds of statements
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
			asdl_seq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;targets;
			expr_ty value;
			string type_comment;
		} Assign;
		&lt;span style=&#34;color:#75715e&#34;&gt;// ... other kinds of statements
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	} v;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lineno;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; col_offset;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; end_lineno;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; end_col_offset;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _expr {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; _expr_kind kind;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// ... other kinds of expressions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
			expr_ty func;
			asdl_seq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args;
			asdl_seq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;keywords;
		} Call;
		&lt;span style=&#34;color:#75715e&#34;&gt;// ... other kinds of expressions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	} v;
	&lt;span style=&#34;color:#75715e&#34;&gt;// ... same as in _stmt
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AST 是一种易于使用的表示形式。它可以表示程序做了什么，隐藏一些不必要的信息，如缩进、标点和其他一些 Python 语法特性。&lt;/p&gt;
&lt;p&gt;AST 表示主要的受益者是编译器，编译器可以以一个相对简单的方式遍历 AST 然后生成字节码。除了编译器，还有其他很多 Python 工具
使用 AST 来处理 Python 代码。比如，&lt;a href=&#34;https://github.com/pytest-dev/pytest/&#34;&gt;pytest&lt;/a&gt; 在 &lt;code&gt;assert&lt;/code&gt; 失败时会通过修改 AST 来提供一些有用的信息（当 &lt;code&gt;assert&lt;/code&gt; 的表达式返回
&lt;code&gt;False&lt;/code&gt; 时&lt;code&gt;assert&lt;/code&gt; 自身除了抛出 &lt;code&gt;AssertionError&lt;/code&gt; 以外并没有多任何事情）。另外一个例子就是 &lt;a href=&#34;https://github.com/PyCQA/bandit&#34;&gt;bandit&lt;/a&gt; 通过分析 AST 来发现 Python
代码中的一些常见的安全问题。&lt;/p&gt;
&lt;p&gt;现在，我们已经学习了一点 Python AST 相关的支持，我们的目光现在可以转向解析器如何从源码构建它的了。&lt;/p&gt;
&lt;h3 id=&#34;从源代码生成-ast-from-source-code-to-ast&#34;&gt;从源代码生成 AST（From source code to AST）&lt;/h3&gt;
&lt;p&gt;实际上，就像我前面提到的，从 CPython 3.9 开始 CPython 不在只有一个解析器，而是两个，新的解析器被默认使用。通过传递 &lt;code&gt;-X oldparser&lt;/code&gt;
选项依然可以使用就的解析器。但是在 CPython 3.10 中旧的解析器将会被彻底的移除。&lt;/p&gt;
&lt;p&gt;两个解析器区别很大。我们将会集中在新的解析器上，但是在这之前我们先来看看就的解析器。&lt;/p&gt;
&lt;h4 id=&#34;旧解析器-old-parser&#34;&gt;旧解析器（old parser）&lt;/h4&gt;
&lt;p&gt;很长时间以来 Python 的语法是通过生成文法（generative grammar）来正式定义的。它是我们前面讨论过的文法中一种。它告诉我们如何
生成属于该语言的序列。生成文法的问题是它不能直接对应与能够解析那些序列的解析算法。幸好，聪明的人能够区分生成文法的类型并建
立相应的解析器。这些包括 &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free%5Fgrammar&#34;&gt;上下文无关(context free)&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/LL%5Fgrammar&#34;&gt;LL(k)&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/LR%5Fparser&#34;&gt;LR(k)&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/LALR%5Fparser&#34;&gt;LALR&lt;/a&gt; 和其他许多类型的文法。Python 的文法是 LL(1)。它指定
使用 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F&#34;&gt;扩展巴科斯范式（EBNF, Extended Backus–Naur Form）&lt;/a&gt;。&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;要想知道它如何描述 Python 语法的，让我们来看一下 &lt;code&gt;while&lt;/code&gt; 语句的规则。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;file_input: (NEWLINE | stmt)* ENDMARKER
stmt: simple_stmt | compound_stmt
compound_stmt: ... | while_stmt | ...
while_stmt: &#39;while&#39; namedexpr_test &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CPython 通过以下功能扩展了传统的符号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择分组（grouping of alternatives）： &lt;code&gt;(a | b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可选部分： &lt;code&gt;[a]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;零个或多个和一个或多个重复： &lt;code&gt;a*&lt;/code&gt; 和 &lt;code&gt;a+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以参见 &lt;a href=&#34;https://www.blogger.com/profile/12821714508588242516&#34;&gt;why Guido van Rossum chose to use regular expressions&lt;/a&gt;。它们允许编程语言的语法表现的更加的自然（对一个程序员来说）。
我们可以仅仅写 \(A \rightarrow a+\) 来代替 \(A \rightarrow aA|a\) 。这个选择是有代价的：CPython 需要开发一个方法支持扩展的符号。&lt;/p&gt;
&lt;p&gt;LL(1) 文法解析是一个已解决的问题。解决方案是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%8B%E6%8E%A8%E8%87%AA%E5%8A%A8%E6%9C%BA&#34;&gt;下推自动机（PDA, Pushdown automaton）&lt;/a&gt;作为自上而下的解析器。PDA 使用栈通过模拟生成来
操作输入字符串。要解析一些输入，它在栈上以开始符号为起点。然后它从输入查找第一个符号，猜测应该对开始符号应用哪一个规则然后用规则
右边的部分对它进行替换。如果栈顶的符号是一个端点匹配输入的下一个符号，PDA 将会从栈顶将之弹出并跳过已匹配的符号。如果栈顶符号是非
端点，PDA 尝试猜测规则根据输入的中符号去替换它。这个过程一直重复，直到整个输入都被扫描或者 PDA 通过输入中的下一个符号在栈上无法
匹配一个端点：导致错误。&lt;/p&gt;
&lt;p&gt;CPython 因为编写了产生式规则所以无法直接使用这个方法，所以需要开发新的方法。要支持扩展符号，旧的解析器通过&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA&#34;&gt;确定有限状态自动机（DFA, Deterministic Finite Automaton）&lt;/a&gt;
表示文法中的每一个规则，其以和正则表达式等效而闻名。解析器自身是一个像 PDA 一样的基于栈的自动机，但是不将符号压入栈，而是替代的压入 DFA 的状态。
这里是旧解析器使用的关键的数据结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;              s_state;       &lt;span style=&#34;color:#75715e&#34;&gt;/* State in current DFA */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; dfa       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s_dfa;         &lt;span style=&#34;color:#75715e&#34;&gt;/* Current DFA */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _node    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s_parent;      &lt;span style=&#34;color:#75715e&#34;&gt;/* Where to add next node */&lt;/span&gt;
} stackentry;

&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	stackentry      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s_top;         &lt;span style=&#34;color:#75715e&#34;&gt;/* Top entry */&lt;/span&gt;
	stackentry       s_base[MAXSTACK];&lt;span style=&#34;color:#75715e&#34;&gt;/* Array of stack entries */&lt;/span&gt;
									&lt;span style=&#34;color:#75715e&#34;&gt;/* NB The stack grows down */&lt;/span&gt;
} stack;

&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	stack           p_stack;        &lt;span style=&#34;color:#75715e&#34;&gt;/* Stack of parser states */&lt;/span&gt;
	grammar         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_grammar;     &lt;span style=&#34;color:#75715e&#34;&gt;/* Grammar to use */&lt;/span&gt;
									&lt;span style=&#34;color:#75715e&#34;&gt;// basically, a collection of DFAs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	node            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_tree;        &lt;span style=&#34;color:#75715e&#34;&gt;/* Top of parse tree */&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;} parser_state;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有 &lt;a href=&#34;https://github.com/python/cpython/blob/3.9/Parser/parser.c&#34;&gt;Parser/parser.c&lt;/a&gt; 中的注释总结方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A parsing rule is represented as a Deterministic Finite-state Automaton (DFA). A node in a DFA represents a stabte of the parser; an arc represents a transition. Transitions are either labeled with terminal symbols or with nonterminals. When the parser decides to follow an arc labeled with a nonterminal, it is invoked recursively with the DFA representing the parsing rule for that as its initial state; when that DFA accepts, the parser that invoked it continues. The parse tree constructed by the recursively called parser is inserted as a child in the current parse tree.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;DFA 代表解析规则。DFA 中节点代表解析器中的状态，arc 表示过渡。过渡用端点或非端点标记。当解析器决定跟随一个 arc 标记的非端点，它是以该解析规则的 DFA 作为它的初始状态递归调用；当 DFA 接受时，调用它的解析器将继续。通过递归的调用构建的解析树作为子树插入当前的解析树中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在解析输入的过程中，解析器构建了解析树，也被称作具体语法树（Concrete Syntax Tree，CST）。对比 AST，解析树直接对应输入时对应的规则。解析树的所有节点通过 &lt;code&gt;node&lt;/code&gt; 结构体表示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _node {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt;               n_type;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n_str;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;                 n_lineno;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;                 n_col_offset;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;                 n_nchildren;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _node        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n_child;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;                 n_end_lineno;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;                 n_end_col_offset;
} node;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，解析树并不是编译器所需要的。它必须转换成 AST。这部分工作由 &lt;a href=&#34;https://github.com/python/cpython/blob/3.9/Python/ast.c&#34;&gt;Python/ast.c&lt;/a&gt; 来完成。这部分算法递归的遍历解析树然后将解析树的节点翻译成 AST 的节点。
几乎没人发现这几近 6000 的代码是多么令人兴奋啊。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标记器（tokenizer）&lt;/p&gt;
&lt;p&gt;从语法的角度来说 Python 并不是一门简单的语言。尽管 Python 的文法看起来很简单并且包含在注释在内也就 200 行。这是因为文法的符号都是标记而非单独的字符。
一个标记通过类型表示，比如 &lt;code&gt;NUMBER&lt;/code&gt; 、 &lt;code&gt;NAME&lt;/code&gt; 、 &lt;code&gt;NEWLINE&lt;/code&gt; ， 对应的值和位置在源码中。 CPython 在 &lt;a href=&#34;https://github.com/python/cpython/blob/3.9/Grammar/Tokens&#34;&gt;Grammar/Tokens&lt;/a&gt; 中列出了 63 种不同类型的标记。
我们可以使用标注库 &lt;a href=&#34;https://docs.python.org/3/library/tokenize.html&#34;&gt;tokenize&lt;/a&gt; 来看一个标记过的程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x_plus&lt;/span&gt;(x):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ python -m tokenize example2.py
0,0-0,0:            ENCODING       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
1,0-1,3:            NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;def&amp;#39;&lt;/span&gt;
1,4-1,10:           NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x_plus&amp;#39;&lt;/span&gt;
1,10-1,11:          OP             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;
1,11-1,12:          NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;
1,12-1,13:          OP             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;
1,13-1,14:          OP             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
1,14-1,15:          NEWLINE        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
2,0-2,4:            INDENT         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;    &amp;#39;&lt;/span&gt;
2,4-2,6:            NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;if&amp;#39;&lt;/span&gt;
2,7-2,8:            NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;
2,9-2,11:           OP             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;=&amp;#39;&lt;/span&gt;
2,12-2,13:          NUMBER         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
2,13-2,14:          OP             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
2,14-2,15:          NEWLINE        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
3,0-3,8:            INDENT         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;        &amp;#39;&lt;/span&gt;
3,8-3,14:           NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;return&amp;#39;&lt;/span&gt;
3,15-3,16:          NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;
3,16-3,17:          NEWLINE        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
4,4-4,4:            DEDENT         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
4,4-4,10:           NAME           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;return&amp;#39;&lt;/span&gt;
4,11-4,12:          NUMBER         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
4,12-4,13:          NEWLINE        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
5,0-5,0:            DEDENT         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
5,0-5,0:            ENDMARKER      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是解析器如何看待程序的。当解析器需要一个标记时，它将通过标记器来获得。标记器每次从缓冲区读取一个字符然后尝试进行前缀匹配一些类型的标记。
标记器如何处理不同的编码？它是基于 &lt;code&gt;io&lt;/code&gt; 模块。首先，标记器检测编码。如果没有指定编码则默认 &lt;code&gt;UTF-8&lt;/code&gt; ，然后标记器通过等价于
Python 的 &lt;code&gt;open(fd, mode=&#39;r&#39;, encoding=enc)&lt;/code&gt; 的 C 调用打开文件 ，然后通过调用 &lt;code&gt;readline&lt;/code&gt; 读取内容。这个函数返回 unicode 字符串。
标记器读取的字符仅仅是该字符的 UTF-8 编码的字节码（或者 EOF）。&lt;/p&gt;
&lt;p&gt;我们可以在文法中直接定义数字或名称，尽管它会变得更加复杂。我们无法做的是在语法中表达缩进的重要性，而又不使上下文敏感，并因此不适合解析。
标记器通过提供 &lt;code&gt;INDENT&lt;/code&gt; 和 &lt;code&gt;DEDENT&lt;/code&gt; 标记让解析器的工作更加简单。它们和像 C 语言中的大括号具有相同的意义。标记器足够强大去处理缩进是因为
它有状态。当前缩进通过栈顶保存，并会随着层级增加而进行压栈，随着层级减少而出栈。&lt;/p&gt;
&lt;p&gt;旧的解析器是 CPython 代码中的重要部分。文法的 DFA 规则自动生成，但是解析器的其他部分则是手动实现。这与新解析器相反，新的解析器似乎是解决解析
Python 代码问题的更优雅的方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;新解析器-new-parser&#34;&gt;新解析器（new parser）&lt;/h4&gt;
&lt;p&gt;新解析器带来了新的文法。这个文法是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A7%A3%E6%9E%90%E8%A1%A8%E8%BE%BE%E6%96%87%E6%B3%95&#34;&gt;解析表达文法&lt;/a&gt;（Parsing Expression Grammar，PEG）。要理解 PEG 最重要是一点就是不仅仅是一组文法。它是另一种定义
文法的方法。PEG 作为一个工具描述编程语言并基于描述生成解析器在 &lt;a href=&#34;https://pdos.csail.mit.edu/~baford/packrat/popl04/&#34;&gt;2004 年由布莱恩·福特（Bryan Ford）推出&lt;/a&gt;。PEG 区别于传统形式文法的地方在于它的规则
将非端点映射到解析表达式，而不仅仅是符号序列。这也是 CPython 的精神。解析表达式是归纳定义的。 如果 e，\(e_1\) 和 \(e_2\) 是解析表达式，那么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;空字符串&lt;/li&gt;
&lt;li&gt;任意端点&lt;/li&gt;
&lt;li&gt;任意非端点&lt;/li&gt;
&lt;li&gt;\(e_{1}e_{2}\) ：序列&lt;/li&gt;
&lt;li&gt;$e_1 | e_2 $ ：优先选择&lt;/li&gt;
&lt;li&gt;\(e*\) ：零个或多个重复&lt;/li&gt;
&lt;li&gt;\(!e\) : 非&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PEG 是分析文法，也就是说它们被设计不仅仅生成语言同时也可以分析语言。&lt;/p&gt;
&lt;h2 id=&#34;脚注&#34;&gt;脚注&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;grammar 和 syntax 都有语法的意思，这里将 grammar 翻译成文法以区分。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;参见维基百科 &lt;a href=&#34;https://en.wikipedia.org/wiki/Terminal%5Fand%5Fnonterminal%5Fsymbols&#34;&gt;Terminal and nonterminal symbols&lt;/a&gt; 、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80&#34;&gt;形式语言&lt;/a&gt;和&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E6%96%87%E6%B3%95&#34;&gt;形式文法&lt;/a&gt;。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/39728328&#34;&gt;递归下降解析&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>straight.el 命令</title>
      <link>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Tue, 06 Oct 2020 20:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0/</guid>
      <description>tags: Emacs
  M-x straight-thaw-versions RET 恢复到锁定的版本
  M-x straight-pull-all RET 更新所有包
  M-x straight-freeze-versions RET 锁定当前版本
  Duplicated with straight.el 更新所有已安装的包</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-x straight-thaw-versions RET&lt;/code&gt;  恢复到锁定的版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-x straight-pull-all RET&lt;/code&gt; 更新所有包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-x straight-freeze-versions RET&lt;/code&gt; 锁定当前版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Duplicated with &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/&#34;&gt;straight.el 更新所有已安装的包&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>straight.el 更新所有已安装的包</title>
      <link>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/</link>
      <pubDate>Tue, 06 Oct 2020 20:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/</guid>
      <description> straight-thaw-versions straight-pull-all straight-freeze-versions  </description>
      <content>&lt;ol&gt;
&lt;li&gt;straight-thaw-versions&lt;/li&gt;
&lt;li&gt;straight-pull-all&lt;/li&gt;
&lt;li&gt;straight-freeze-versions&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Emacs Buffer 名字去重</title>
      <link>https://www.linuxzen.com/notes/notes/20200927170116-emacs_buffer_%E5%90%8D%E5%AD%97%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Sun, 27 Sep 2020 17:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200927170116-emacs_buffer_%E5%90%8D%E5%AD%97%E5%8E%BB%E9%87%8D/</guid>
      <description> tags: Emacs source: https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Uniquify.html  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source: &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Uniquify.html&#34;&gt;https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Uniquify.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>范数（norm）</title>
      <link>https://www.linuxzen.com/notes/notes/20200912102351-%E8%8C%83%E6%95%B0/</link>
      <pubDate>Sat, 12 Sep 2020 10:23:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912102351-%E8%8C%83%E6%95%B0/</guid>
      <description>具有“长度”概念的函数。在线性代数、泛函分析等相关数学领域，是一个函数，其为向量空间内所有向量赋予非零的正长度或大小。</description>
      <content>&lt;p&gt;具有“长度”概念的函数。在线性代数、泛函分析等相关数学领域，是一个函数，其为向量空间内所有向量赋予非零的正长度或大小。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>MAE（平均绝对误差）</title>
      <link>https://www.linuxzen.com/notes/notes/20200912101549-mae_%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE/</link>
      <pubDate>Sat, 12 Sep 2020 10:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912101549-mae_%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE/</guid>
      <description>\[MAE(X,h) = \frac{1}{m}\sum_{i=1}^{m}\left\lvert h(x^{(i)} - y ^{i})\right\rvert\]</description>
      <content>&lt;p&gt;\[MAE(X,h) = \frac{1}{m}\sum_{i=1}^{m}\left\lvert h(x^{(i)} - y ^{i})\right\rvert\]&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>RMSE（均方根误差）</title>
      <link>https://www.linuxzen.com/notes/notes/20200912094544-rmse_%E5%9D%87%E6%96%B9%E6%A0%B9%E8%AF%AF%E5%B7%AE/</link>
      <pubDate>Sat, 12 Sep 2020 09:45:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912094544-rmse_%E5%9D%87%E6%96%B9%E6%A0%B9%E8%AF%AF%E5%B7%AE/</guid>
      <description>测量预测过程中的预测错误的标准差。
公式
\[RMSE(X,h)=\sqrt{\frac{1}{m}\sum_{i=1}^{m}(h(x^{(i)}) - y^{(i)})^2}\]
 m 是你在测量 RMSE 时，所使用的数据集中实例的数量 \(x^{(i)}\) 是数据集中第 \(i\) 个实例的所有特征值的向量（标签特征除外），\(y{(i)}\) 是标签（也就是我们期待该实例的输出值） X 是数据集中所有实例所有特征值的矩阵（标记特征除外）。每个实例一行，也就是说第 \(i\) 行等于 \(x^{(i)}\) 的转置矩阵1，记作 \((x^{(i)})^T\) h 是系统的预测函数，也称为一个假设。当给定系统一个实例的特征向量 \(x^{(i)}\) ，他会输出一个预测值 \(\hat{y}=h(x^{(i)})\) RMSE(X,h) 是使用假设 h 在示例上测量的成本函数。    转置运算符会将列向量转换成行向量。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
      <content>&lt;p&gt;测量预测过程中的预测错误的&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224141925_/&#34;&gt;标准差&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;公式&lt;/p&gt;
&lt;p&gt;\[RMSE(X,h)=\sqrt{\frac{1}{m}\sum_{i=1}^{m}(h(x^{(i)}) - y^{(i)})^2}\]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m 是你在测量 RMSE 时，所使用的数据集中实例的数量&lt;/li&gt;
&lt;li&gt;\(x^{(i)}\) 是数据集中第 \(i\) 个实例的所有特征值的向量（标签特征除外），\(y{(i)}\) 是标签（也就是我们期待该实例的输出值）&lt;/li&gt;
&lt;li&gt;X 是数据集中所有实例所有特征值的矩阵（标记特征除外）。每个实例一行，也就是说第 \(i\) 行等于 \(x^{(i)}\) 的转置矩阵&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，记作 \((x^{(i)})^T\)&lt;/li&gt;
&lt;li&gt;h 是系统的预测函数，也称为一个假设。当给定系统一个实例的特征向量 \(x^{(i)}\) ，他会输出一个预测值 \(\hat{y}=h(x^{(i)})\)&lt;/li&gt;
&lt;li&gt;RMSE(X,h) 是使用假设 h 在示例上测量的成本函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;转置运算符会将列向量转换成行向量。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>机器学习涉及数学概念</title>
      <link>https://www.linuxzen.com/notes/notes/20200912093811-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B6%89%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sat, 12 Sep 2020 09:38:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200912093811-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B6%89%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</guid>
      <description>公式  RMSE（均方根误差） MAE（平均绝对误差）  概念  标准差（Std Dev） 范数  方差 皮尔逊相关系数（标准相关系数） 线性相关性 </description>
      <content>&lt;h2 id=&#34;公式&#34;&gt;公式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200912094544-rmse_%E5%9D%87%E6%96%B9%E6%A0%B9%E8%AF%AF%E5%B7%AE/&#34;&gt;RMSE（均方根误差）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200912101549-mae_%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE/&#34;&gt;MAE（平均绝对误差）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224141925_/&#34;&gt;标准差（Std Dev）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200912102351-%E8%8C%83%E6%95%B0/&#34;&gt;范数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方差&#34;&gt;方差&lt;/h2&gt;
&lt;h2 id=&#34;皮尔逊相关系数-标准相关系数&#34;&gt;皮尔逊相关系数（标准相关系数）&lt;/h2&gt;
&lt;h2 id=&#34;线性相关性&#34;&gt;线性相关性&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Python behind the scenes #1: how the CPython VM works</title>
      <link>https://www.linuxzen.com/notes/notes/20200908103647-python_behind_the_scenes_1_how_the_cpython_vm_works/</link>
      <pubDate>Tue, 08 Sep 2020 10:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200908103647-python_behind_the_scenes_1_how_the_cpython_vm_works/</guid>
      <description>tags: Translate,Python  原文链接：Python behind the scenes #1: how the CPython VM works。
Python 幕后 #1: CPython 虚拟机如何工作 介绍（Introduction） 你是否曾经好奇过当你运行 Python 代码时 python 做了些什么？
$ python script.py 这篇文章将开启一个系列来尝试解答这个问题。我们将深入 Python 最流行的实现 CPython 的内部。 通过深入 CPython 的内部我们将更深一层的去理解这门编程语言本身。这也是我们这个系列的最主要的目标。 如果你熟悉 Python 并且可以阅读 C 代码，但是对 CPython 源码本身没有太多的经验， 那么你可能非常适合本系列，并且对本系列感兴趣。
什么是 CPython 并且为什么有人想学习它（What CPython is and why anyone would want to study it） 我们首先来说明一些众所周知的事情。CPython 是用 C 编写的 Python 解析器。他是 Python 语言的众多实现 的一种，其他还有诸如 PyPy、Jython、IronPython 等。CPython 的独特之处在于它是 Python 的起源、维护时间最长也是最受欢迎的。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200628133616-python/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;https://tenthousandmeters.com/blog/python-behind-the-scenes-1-how-the-cpython-vm-works/&#34;&gt;Python behind the scenes #1: how the CPython VM works&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;python-幕后-1-cpython-虚拟机如何工作&#34;&gt;Python 幕后 #1: CPython 虚拟机如何工作&lt;/h2&gt;
&lt;h3 id=&#34;介绍-introduction&#34;&gt;介绍（Introduction）&lt;/h3&gt;
&lt;p&gt;你是否曾经好奇过当你运行 Python 代码时 &lt;code&gt;python&lt;/code&gt; 做了些什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ python script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这篇文章将开启一个系列来尝试解答这个问题。我们将深入 Python 最流行的实现 CPython 的内部。
通过深入 CPython 的内部我们将更深一层的去理解这门编程语言本身。这也是我们这个系列的最主要的目标。
如果你熟悉 Python 并且可以阅读 C 代码，但是对 CPython 源码本身没有太多的经验，
那么你可能非常适合本系列，并且对本系列感兴趣。&lt;/p&gt;
&lt;h3 id=&#34;什么是-cpython-并且为什么有人想学习它-what-cpython-is-and-why-anyone-would-want-to-study-it&#34;&gt;什么是 CPython 并且为什么有人想学习它（What CPython is and why anyone would want to study it）&lt;/h3&gt;
&lt;p&gt;我们首先来说明一些众所周知的事情。CPython 是用 C 编写的 Python 解析器。他是 Python 语言的众多实现
的一种，其他还有诸如 PyPy、Jython、IronPython 等。CPython 的独特之处在于它是 Python 的起源、维护时间最长也是最受欢迎的。&lt;/p&gt;
&lt;p&gt;CPython 实现了 Python，但是 Python 是什么？最简单的一个答案可能是：Python 是一门编程语言。
当正确问相同的问题，那么答案将会更加明确：什么定义了 Python？Python 不像 C 语言有正式的规范，
但是与之相近的是 &lt;a href=&#34;https://docs.python.org/zh-cn/3.9/reference/index.html&#34;&gt;Python 语言参考（Python Language Reference）&lt;/a&gt;，它以如下内容开始：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我希望尽可能地保证内容精确无误，但还是选择使用自然词句进行描述，正式的规格定义仅用于句法和词法解析。这样应该能使文档对于普通人来说更易理解，但也可能导致一些歧义。因此，如果你是来自火星并且想凭借这份文档把 Python 重新实现一遍，也许有时需要自行猜测，实际上最终大概会得到一个十分不同的语言。而在另一方面，如果你正在使用 Python 并且想了解有关该语言特定领域的精确规则，你应该能够在这里找到它们。如果你希望查看对该语言更正式的定义，也许你可以花些时间自己写上一份 &amp;mdash; 或者发明一台克隆机器 :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以 Python 不仅仅通过语言参考定义，说 Python 是通过语言参考定义的实现或者说是 CPython 都是错误的，
因为其中的一些实现细节并不是语言的一部分。一个基于引用计数的垃圾回收器就是例子。由于没有一个来说法是正确的，
我们可以说 Python 的一部分是由 Python 语言参考（Python Language Reference）定义，
一部分是它的主要实现 CPython 定义。&lt;/p&gt;
&lt;p&gt;这样的结论似乎很古怪，但是我认为这对我们弄清我们要学习的主题至关重要。我们可能依然困惑我们为什么需要学习它。
除了好奇心，我认为还有如下理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有完整的视角可以更深入的理解这门语言。如果了解一些 Python 的细节那么就更容易掌握一些 Python 特性。&lt;/li&gt;
&lt;li&gt;在实践中实现细节很重要。当想要了解语言适用性及其局限性、评估性能或检测效率低下时，了解对象如何存储，
垃圾回收器如何工作，以及如何协调多个线程将是非常重要的。&lt;/li&gt;
&lt;li&gt;CPython 提供了 Python/C API 来允许我们用 C 扩展 Python 或者在 C 中嵌入 Python。
程序员需要很好的理解 CPython 如何工作才能高效的使用这些 API。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;了解-cpython-如果工作需要做些什么-what-it-takes-to-understand-how-cpython-works&#34;&gt;了解 CPython 如果工作需要做些什么（What it takes to understand how CPython works）&lt;/h3&gt;
&lt;p&gt;CPython 被设计成易于维护。一个新人完全可以阅读源代码并理解代码做了些什么。但是，这可能需要一些时间。
通过这个系列我希望能帮助你缩短这个时间。&lt;/p&gt;
&lt;h3 id=&#34;这个系列如何推进-how-this-series-is-laid-out&#34;&gt;这个系列如何推进（How this series is laid out）&lt;/h3&gt;
&lt;p&gt;我选择采取自上而下的方法。在这个部分我们将探索 CPython 虚拟机的核心概念。接下来，我们将看到
CPython 如何编译一个程序到 VM 可以执行的内容。再然后，我们将熟悉源代码，并通过执行一个程序
来学习解释器的主要部分。最后，我们可以挑选语言不同的方面来一个接一个的去看看它们是如何实现的。
这是我的一个大概的想法，并不是一个严格的计划。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/strong&gt;: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。
我将会尝试关注一些重要的改变并添加更新备注。&lt;/p&gt;
&lt;h3 id=&#34;鸟瞰-the-big-picture&#34;&gt;鸟瞰（The big picture）&lt;/h3&gt;
&lt;p&gt;执行一个 Python 程序大概经过三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化（Initialization）&lt;/li&gt;
&lt;li&gt;编译（Compilation）&lt;/li&gt;
&lt;li&gt;解释（Interpretation）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在初始化阶段，CPython 初始化运行 Python 所需要的数据结构。同时也准备一些诸如
内建类型、配置和加载内建模块，初始化导入系统（import system）和一些其他的事情。
这是一个非常重要的阶段，但是由于其功能性质这个阶段也是常被 CPython 的探索者忽略的一个阶段。&lt;/p&gt;
&lt;p&gt;接下来是编译阶段。CPython 在某种意义上是一个解释器而不是编译器，因为它不输出机器码。
但是解释器通常会在执行之前把源代码翻译成一种中间语言（intermediate representation）。
CPython 也是如此。这个翻译阶段和一个典型的编译器做同样的事情：解析源代码然后构建 AST（Abstract Syntax Tree）、
通过 AST 生成字节码、甚至执行一些字节码优化的操作。&lt;/p&gt;
&lt;p&gt;在进入下一阶段之前，我们需要理解什么是字节码（bytecode）。字节码是一系列的指令。
每一个指令由两个字节组成：一个为 opcode，一个为参数（argument）。看如下例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(x):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CPython 将函数定义 &lt;code&gt;g&lt;/code&gt; 翻译成一个字节序列：[124, 0, 100, 1, 23, 0, 83, 0]。
如果我们运行标准库 &lt;code&gt;dis&lt;/code&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;去反汇编它，我们将会得到如下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_FAST            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (x)
			&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_CONST           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
			&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; BINARY_ADD
			&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字节 &lt;code&gt;124&lt;/code&gt; 表示 opcode &lt;code&gt;LOAD_FAST&lt;/code&gt; 并且有一个参数 &lt;code&gt;0&lt;/code&gt; 。字节 &lt;code&gt;100&lt;/code&gt; 表示 opcode &lt;code&gt;LOAD_CONST&lt;/code&gt; 并且有一个参数 &lt;code&gt;1&lt;/code&gt; 。
&lt;code&gt;BINARY_ADD&lt;/code&gt; 和 &lt;code&gt;RETURN_VALUE&lt;/code&gt; 指令不需要参数所以总是被编码成 &lt;code&gt;(23, 0)&lt;/code&gt; 和 &lt;code&gt;(83, 0)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;CPython 的核心就是一个运行字节码的虚拟机。通过查看上面例子你可能已经猜到它是如何工作的拉。
CPython 虚拟机一个基于栈的。也就意味这它执行指令并通过栈存储和获取数据。
&lt;code&gt;LOAD_FAST&lt;/code&gt; 指令将局部变量压入栈，
&lt;code&gt;LOAD_CONST&lt;/code&gt; 压入一个常量，
&lt;code&gt;BINARY_ADD&lt;/code&gt; 从栈中弹出两个对象，然后进行相加并将结果放回栈。
最好 &lt;code&gt;RETURN_VALUE&lt;/code&gt; 从栈弹出任意值然后将结果返回给调用者。&lt;/p&gt;
&lt;p&gt;当有指令需要运行时字节码运行在一个巨大的执行循环中， &lt;code&gt;yield&lt;/code&gt; 一个值或者发生错误将导致它停止。&lt;/p&gt;
&lt;p&gt;这样一个简短概述引发了很多问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数对 opcode &lt;code&gt;LOAD_FAST&lt;/code&gt; 和 &lt;code&gt;LOAD_CONST&lt;/code&gt; 的意义是什么？他们是索引吗？他们如何索引？&lt;/li&gt;
&lt;li&gt;VM 会在栈上放置值或者对象的引用吗？&lt;/li&gt;
&lt;li&gt;CPython 如何知道 &lt;code&gt;x&lt;/code&gt; 是一个局部变量。&lt;/li&gt;
&lt;li&gt;如果参数太大无法放到一个字节内怎么办？&lt;/li&gt;
&lt;li&gt;连接两个字符串和两个数字相加是同一个指令吗？如果是，VM 如何处理这些操作之间的差异？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要回答这些和其他一些有趣的问题我们需要先看一下 CPython VM 的一些核心概念。&lt;/p&gt;
&lt;h3 id=&#34;代码对象-函数对象-帧-code-objects-function-objects-frames&#34;&gt;代码对象、函数对象、帧（Code objects, function objects, frames）&lt;/h3&gt;
&lt;h4 id=&#34;代码对象&#34;&gt;代码对象&lt;/h4&gt;
&lt;p&gt;我们已经看过一个简单的函数的字节码是什么样子的。但是一个典型的 Python 程序要复杂的多。
VM 如何执行一个包含程序定义和函数调用的模块（module）？&lt;/p&gt;
&lt;p&gt;考虑如下程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

print(f(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的字节码什么样子？让我们分析这个程序做了什么来解答这个问题。它定义了一个函数 &lt;code&gt;f&lt;/code&gt; ，
通过一个参数 &lt;code&gt;1&lt;/code&gt; 调用函数 &lt;code&gt;f&lt;/code&gt; 然后打印结果。无论函数 &lt;code&gt;f&lt;/code&gt; 做了什么都不会包含在模块字节码中。
我们可以通过运行一个反汇编来证明我们自己：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;1           0 LOAD_CONST               0 (&amp;lt;code object f at 0x10bffd1e0, file &amp;quot;example.py&amp;quot;, line 1&amp;gt;)
			2 LOAD_CONST               1 (&#39;f&#39;)
			4 MAKE_FUNCTION            0
			6 STORE_NAME               0 (f)

4           8 LOAD_NAME                1 (print)
		   10 LOAD_NAME                0 (f)
		   12 LOAD_CONST               2 (1)
		   14 CALL_FUNCTION            1
		   16 CALL_FUNCTION            1
		   18 POP_TOP
		   20 LOAD_CONST               3 (None)
		   22 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一行通过从一些叫做代码对象（code object）的东西创建一个函数并绑定名字为 &lt;code&gt;f&lt;/code&gt; 来定义函数 &lt;code&gt;f&lt;/code&gt; 。
我们没有看到函数 &lt;code&gt;f&lt;/code&gt; 用来返回一个自增的参数的字节码。&lt;/p&gt;
&lt;p&gt;被作为单一执行单元的代码片段如一个模块或者一个函数体被称为代码块。
CPython 存储关于代码块的信息的结构体就是代码对象（code object）。
它包含字节码和一些其他的比如代码块使用的变量名列表。运行一个模块或者调用一个函数意味着开始
执行相应的代码对象。&lt;/p&gt;
&lt;h4 id=&#34;函数对象-function-object&#34;&gt;函数对象（function object）&lt;/h4&gt;
&lt;p&gt;但是，函数不仅仅是代码对象。它必须包含一些额外的信息比如名字、文档字符串（docstring）、
默认参数和定义在闭包作用域中的变量的值。这些信息连同代码对象存储在一个函数对象里。
&lt;code&gt;MAKE_FUNCTION&lt;/code&gt; 指令用于创建函数对象。CPython 中定义函数对象的源码前置了如下注释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Function objects and code objects should not be confused with each other:&lt;/p&gt;
&lt;p&gt;Function objects are created by the execution of the &amp;lsquo;def&amp;rsquo; statement. They reference a code object in their &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;code&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; attribute, which is a purely syntactic object, i.e. nothing more than a compiled version of some source code lines. There is one code object per source code &amp;ldquo;fragment&amp;rdquo;, but each code object can be referenced by zero or many function objects depending only on how many times the &amp;lsquo;def&amp;rsquo; statement in the source was executed so far.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;函数对象和代码对象不应互相混淆：&lt;/p&gt;
&lt;p&gt;函数对象通过执行 &amp;lsquo;def&amp;rsquo; 语句创建。它们通过他们的 &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;code&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 属性引用一个代码对象，这个代码对象
是一些源代码编译后纯语法对象。每一个代码“片段（fragment）”都对应一个代码对象，
但是每一个代码对象都可以被零个或多个函数对象引用，取决于源码中的 &amp;lsquo;def&amp;rsquo; 语句目前为止被执行了多少次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多个函数对象如何饮用一个代码对象？这里有个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_add_x&lt;/span&gt;(x):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_x&lt;/span&gt;(y):
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; add_x

add_4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_add_x(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
add_5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_add_x(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;make_add_x&lt;/code&gt; 函数的字节码包含了一个 &lt;code&gt;MAKE_FUNCTION&lt;/code&gt; 指令。函数 &lt;code&gt;add_4&lt;/code&gt; 和 &lt;code&gt;add_5&lt;/code&gt; 是通过同一个
代码对象作为参数调用这个指令产生的结果，但是其参数 &lt;code&gt;x&lt;/code&gt; 的值不相同。
每一个函数拥有自己的变量单元的机制允许我们创建如 &lt;code&gt;add_4&lt;/code&gt; 和 &lt;code&gt;add_5&lt;/code&gt; 的闭包函数。&lt;/p&gt;
&lt;p&gt;我们继续下一个主题之前推荐你看一下定义函数对象的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; PyCodeObject {
	PyObject_HEAD
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_argcount;            &lt;span style=&#34;color:#75715e&#34;&gt;/* #arguments, except *args */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_posonlyargcount;     &lt;span style=&#34;color:#75715e&#34;&gt;/* #positional only arguments */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_kwonlyargcount;      &lt;span style=&#34;color:#75715e&#34;&gt;/* #keyword only arguments */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_nlocals;             &lt;span style=&#34;color:#75715e&#34;&gt;/* #local variables */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_stacksize;           &lt;span style=&#34;color:#75715e&#34;&gt;/* #entries needed for evaluation stack */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_flags;               &lt;span style=&#34;color:#75715e&#34;&gt;/* CO_..., see below */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; co_firstlineno;         &lt;span style=&#34;color:#75715e&#34;&gt;/* first source line number */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_code;          &lt;span style=&#34;color:#75715e&#34;&gt;/* instruction opcodes */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_consts;        &lt;span style=&#34;color:#75715e&#34;&gt;/* list (constants used) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_names;         &lt;span style=&#34;color:#75715e&#34;&gt;/* list of strings (names used) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_varnames;      &lt;span style=&#34;color:#75715e&#34;&gt;/* tuple of strings (local variable names) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_freevars;      &lt;span style=&#34;color:#75715e&#34;&gt;/* tuple of strings (free variable names) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_cellvars;      &lt;span style=&#34;color:#75715e&#34;&gt;/* tuple of strings (cell variable names) */&lt;/span&gt;

	Py_ssize_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_cell2arg;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Maps cell vars which are arguments. */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_filename;      &lt;span style=&#34;color:#75715e&#34;&gt;/* unicode (where it was loaded from) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;co_name;          &lt;span style=&#34;color:#75715e&#34;&gt;/* unicode (name, for reference) */&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;/* ... more members ... */&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	PyObject_HEAD
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_code;        &lt;span style=&#34;color:#75715e&#34;&gt;/* A code object, the __code__ attribute */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_globals;     &lt;span style=&#34;color:#75715e&#34;&gt;/* A dictionary (other mappings won&amp;#39;t do) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_defaults;    &lt;span style=&#34;color:#75715e&#34;&gt;/* NULL or a tuple */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_kwdefaults;  &lt;span style=&#34;color:#75715e&#34;&gt;/* NULL or a dict */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_closure;     &lt;span style=&#34;color:#75715e&#34;&gt;/* NULL or a tuple of cell objects */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_doc;         &lt;span style=&#34;color:#75715e&#34;&gt;/* The __doc__ attribute, can be anything */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_name;        &lt;span style=&#34;color:#75715e&#34;&gt;/* The __name__ attribute, a string object */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_dict;        &lt;span style=&#34;color:#75715e&#34;&gt;/* The __dict__ attribute, a dict or NULL */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_weakreflist; &lt;span style=&#34;color:#75715e&#34;&gt;/* List of weak references */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_module;      &lt;span style=&#34;color:#75715e&#34;&gt;/* The __module__ attribute, can be anything */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_annotations; &lt;span style=&#34;color:#75715e&#34;&gt;/* Annotations, a dict or NULL */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func_qualname;    &lt;span style=&#34;color:#75715e&#34;&gt;/* The qualified name */&lt;/span&gt;
	vectorcallfunc vectorcall;
} PyFunctionObject;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;帧对象-frame-object&#34;&gt;帧对象（frame object）&lt;/h4&gt;
&lt;p&gt;当执行一个代码对象时，VM 需要一直跟踪变量的值并不断的更新值栈（value stack）。
同时还需要记住在什么地方停止运行当前代码对象然后去运行其他的代码对象，并且在哪里返回。
CPython 在一个帧对象里存储这些信息，或者简单的说成帧。一个帧提供了一个哪个代码对象可以被执行的状态。
由于我们已经开始习惯源代码，所以这里我贴出帧对象的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _frame {
	PyObject_VAR_HEAD
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _frame &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_back;      &lt;span style=&#34;color:#75715e&#34;&gt;/* previous frame, or NULL */&lt;/span&gt;
	PyCodeObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_code;       &lt;span style=&#34;color:#75715e&#34;&gt;/* code segment */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_builtins;       &lt;span style=&#34;color:#75715e&#34;&gt;/* builtin symbol table (PyDictObject) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_globals;        &lt;span style=&#34;color:#75715e&#34;&gt;/* global symbol table (PyDictObject) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_locals;         &lt;span style=&#34;color:#75715e&#34;&gt;/* local symbol table (any mapping) */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;f_valuestack;    &lt;span style=&#34;color:#75715e&#34;&gt;/* points after the last local */&lt;/span&gt;

	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;f_stacktop;          &lt;span style=&#34;color:#75715e&#34;&gt;/* Next free slot in f_valuestack.  ... */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_trace;          &lt;span style=&#34;color:#75715e&#34;&gt;/* Trace function */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; f_trace_lines;         &lt;span style=&#34;color:#75715e&#34;&gt;/* Emit per-line trace events? */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; f_trace_opcodes;       &lt;span style=&#34;color:#75715e&#34;&gt;/* Emit per-opcode trace events? */&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;/* Borrowed reference to a generator, or NULL */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_gen;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f_lasti;                &lt;span style=&#34;color:#75715e&#34;&gt;/* Last instruction if called */&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;/* ... */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f_lineno;               &lt;span style=&#34;color:#75715e&#34;&gt;/* Current line number */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f_iblock;               &lt;span style=&#34;color:#75715e&#34;&gt;/* index in f_blockstack */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; f_executing;           &lt;span style=&#34;color:#75715e&#34;&gt;/* whether the frame is still executing */&lt;/span&gt;
	PyTryBlock f_blockstack[CO_MAXBLOCKS]; &lt;span style=&#34;color:#75715e&#34;&gt;/* for try and loop blocks */&lt;/span&gt;
	PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f_localsplus[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];  &lt;span style=&#34;color:#75715e&#34;&gt;/* locals+stack, dynamically sized */&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个帧被创建用来执行模块的代码对象。任何时候需要执行另外一个代码对象 CPython 都会创建创建新的
帧去执行该代码对象。每一个帧都有一个引用指向前一个帧。从而，帧形成了一个栈被称为调用栈，当前帧位于
顶部。当一个函数被调用，一个新的帧被压到栈上。当从当前执行帧返回时，CPython 通过记录的最后处理的指令
来继续执行前一个帧。某种意义上 CPython 除了执行帧其他什么也没做。但是接下来我们马上看到这个总结
善意的隐藏了某些细节。&lt;/p&gt;
&lt;h3 id=&#34;线程-解释器-运行时-threads-interpreters-runtime&#34;&gt;线程、解释器、运行时（Threads, interpreters, runtime）&lt;/h3&gt;
&lt;p&gt;我们已经讨论过三个重要的主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码对象&lt;/li&gt;
&lt;li&gt;函数对象，和&lt;/li&gt;
&lt;li&gt;帧对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPython 还有三个重要的主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程状态（thread stage）&lt;/li&gt;
&lt;li&gt;解释器状态（interpreter state），和&lt;/li&gt;
&lt;li&gt;运行时状态（runtime state）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线程状态&#34;&gt;线程状态&lt;/h4&gt;
&lt;p&gt;线程状态是一个包含线程特定数据栈数据结构，其中包含调用栈、异常状态和调试设置。
不应将其和系统线程（OS thread）混淆，尽管它们联系紧密。考虑当时使用标准库 &lt;code&gt;threading&lt;/code&gt;
在一个单独的线程运行一个函数发生了什么：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;():
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Perform an I/O-bound task&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f)
t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;t.start&lt;/code&gt; 实际上创建通过系统调用（类 Unix 系统中通过 &lt;code&gt;pthread_create&lt;/code&gt; ，Windows 通过
&lt;code&gt;_beginthreadex&lt;/code&gt; ）了一个新的系统线程。新建的线程调用在 &lt;code&gt;_thread&lt;/code&gt; 模块中的函数负责调
用相应的目标函数。这个函数不仅仅接收目标函数和目标函数的参数，同时一个新的线程状态
被用在了新建的系统线程上。系统线程通过它自己的线程状态进入执行循环，并一直持有。&lt;/p&gt;
&lt;p&gt;这里我们可能记得阻止多线程同时陷入执行循环的著名的 GIL（Global Interpreter Lock）。
主要原因是为了在不引入更多细粒度的锁的情况下保护 CPython 状态免受损坏。
&lt;a href=&#34;https://docs.python.org/zh-cn/3.9/c-api/init.html#thread-state-and-the-global-interpreter-lock&#34;&gt;Python C/API 参考&lt;/a&gt;清晰的解释了 GIL：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Python interpreter is not fully thread-safe. In order to support multi-threaded Python programs, there’s a global lock, called the global interpreter lock or GIL, that must be held by the current thread before it can safely access Python objects. Without the lock, even the simplest operations could cause problems in a multi-threaded program: for example, when two threads simultaneously increment the reference count of the same object, the reference count could end up being incremented only once instead of twice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 解释器不是完全的线程安全。为了支持 Python 多线程程序，引入一个称为全局解释器锁或者 GILI 的全局锁，
当前线程必须持有该锁才能安全的访问 Python 对象。如果没有持有该锁，就连最简单的操作都会在多线程程序中引发
问题：比如，当两个线程同时增加同一个对象的引用计数，引用计数最终可能只被增加了一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要管理多线程，就需要一个比线程状态更高层级的数据结构。&lt;/p&gt;
&lt;h4 id=&#34;解释器状态和运行时状态-interpreter-and-runtime-states&#34;&gt;解释器状态和运行时状态（interpreter and runtime states）&lt;/h4&gt;
&lt;p&gt;实际上，这是两个状态：解释器状态和运行时状态。两者的需求区分看起来似乎不明显。但是，任何程序
的执行都需要各个状态的最少一个实例，并且有合理的原因。&lt;/p&gt;
&lt;p&gt;解释器状态是一组线程以及该组相关的数据。线程共享诸如加载的模块（sys.modules）、内建对象（builtins.__dict__）
和导入系统（importlib）。&lt;/p&gt;
&lt;p&gt;运行时状态是一个全局变量。保存着进程相关的数据。包含 CPython 状态（是否初始化）和 GIL。&lt;/p&gt;
&lt;p&gt;通常情况下，一个进程的所有线程都属于同一个解释器。但是，有一些罕见的情况比如有人想创建一个子解释器来隔离一组线程。
比如 &lt;a href=&#34;https://modwsgi.readthedocs.io/en/develop/user-guides/processes-and-threading.html#python-sub-interpreters&#34;&gt;mod_wsgi&lt;/a&gt; 使用不同的解释器来运行 WSGI 程序。最明显的隔离效果是各组线程拥有它们自己版本的模块，包括 &lt;code&gt;__main__&lt;/code&gt; ，
也就是隔离全局命名空间（global namespace）。&lt;/p&gt;
&lt;p&gt;CPython 没有提供像 &lt;code&gt;threading&lt;/code&gt; 模块那样简单的方式创建新的解释器。这个特性仅仅通过 Python/C API 提供支持，
但是&lt;a href=&#34;https://www.python.org/dev/peps/pep-0554/&#34;&gt;未来有可能改善&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;架构摘要-architecture-summary&#34;&gt;架构摘要（Architecture summary）&lt;/h3&gt;
&lt;p&gt;让我们来快速总结 CPython 的架构来看看这一切是如何组织在一块的。解释器可以被看作分层结构（layer structure）。
这些层级概括为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行时（Runtime）：进程的全局 CPython 状态；包含 GIL 和内存分配机制。&lt;/li&gt;
&lt;li&gt;解释器（Interpreter）：一组线程和它们共享的数据，如导入的模块。&lt;/li&gt;
&lt;li&gt;线程（Thread）：特定于单个系统线程的数据；包含调用栈。&lt;/li&gt;
&lt;li&gt;帧（Frame）：调用栈的元素；提供执行一个代码对象的状态。&lt;/li&gt;
&lt;li&gt;执行循环（Evalution loop）：执行一个代码对象（描述代码块做了什么，包含字节码、变量名字）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们已经看到不同的层级通过相应的数据结构来表示。在某些情况下它们很难等效。比如，内存分配机制
通过使用全局变量来实现。这不是运行时状态的一部分，但是绝对是 CPython 运行时层级的一部分。&lt;/p&gt;
&lt;h3 id=&#34;总结-conclusion&#34;&gt;总结（Conclusion）&lt;/h3&gt;
&lt;p&gt;在这一部分我们已经大体描述了 &lt;code&gt;python&lt;/code&gt; 在执行一个 Python 程序时做了什么。我们已经看到它工作在三个状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化 Python 运行时&lt;/li&gt;
&lt;li&gt;编译源代码到一个模块代码对象；然后&lt;/li&gt;
&lt;li&gt;执行代码对象的字节码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解释器中负责执行字节码的部分称为虚拟机（VM，virtual machine）。CPython VM 包含一些特别重要的概念：
代码对象（code object）、帧对象（frame object）、线程状态（thread state）、解释器状态（interpreter state）和
运行时（runtime）。这些数据结构构成了 CPython 架构的核心。&lt;/p&gt;
&lt;p&gt;我们还有很多内容没有涉及到。我们避免陷入到源代码中。初始化和编译阶段完全超出了我们的范围。
相反，我们从虚拟机的概述开始。通过这种方式，我认为，我们可以更好的看到每个阶段所负责的内容。
现在我们知道 CPython 将源代码编译成了什么 &amp;ndash; 代码对象（code object）。
接下来我们将看到它是如何做到的。&lt;/p&gt;
&lt;p&gt;如果你有任何问题、评论或者建议，随时通过 &lt;a href=&#34;mailto:victor@tenthousandmeters.com&#34;&gt;victor@tenthousandmeters.com&lt;/a&gt; 联系原作者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Update 4 September 2020&lt;/strong&gt;&lt;/strong&gt;: I&amp;rsquo;ve made &lt;a href=&#34;https://tenthousandmeters.com/materials/python-behind-the-scenes-a-list-of-resources/&#34;&gt;a list of resources&lt;/a&gt; that I&amp;rsquo;ve used to learn about CPython internals&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;译注： &lt;code&gt;python -c &amp;quot;import dis;dis.dis(&#39;&#39;&#39;def g(x): return x + 3&#39;&#39;&#39;)&amp;quot;&lt;/code&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>机器学习测试与验证</title>
      <link>https://www.linuxzen.com/notes/notes/20200907081217-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Mon, 07 Sep 2020 08:12:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200907081217-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81/</guid>
      <description>将数据分成两部分：训练集和测试集，通常使用 80% 的数据进行训练，20% 的数据用来测试。
验证集 单独分出来一个保留集合作为验证集，防止调整模型和超参数拟合测试集的最佳模型。
交叉验证 为避免验证集浪费太多数据，交叉验证将训练集分成若干个互补子集，然后每个模型都通过这些子集的不同组合来 训练，之后用剩余的子集进行验证。</description>
      <content>&lt;p&gt;将数据分成两部分：训练集和测试集，通常使用 80% 的数据进行训练，20% 的数据用来测试。&lt;/p&gt;
&lt;h2 id=&#34;验证集&#34;&gt;验证集&lt;/h2&gt;
&lt;p&gt;单独分出来一个保留集合作为验证集，防止调整模型和超参数拟合测试集的最佳模型。&lt;/p&gt;
&lt;h2 id=&#34;交叉验证&#34;&gt;交叉验证&lt;/h2&gt;
&lt;p&gt;为避免验证集浪费太多数据，交叉验证将训练集分成若干个互补子集，然后每个模型都通过这些子集的不同组合来
训练，之后用剩余的子集进行验证。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>机器学习的主要挑战</title>
      <link>https://www.linuxzen.com/notes/notes/20200907080323-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8C%91%E6%88%98/</link>
      <pubDate>Mon, 07 Sep 2020 08:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200907080323-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8C%91%E6%88%98/</guid>
      <description>训练数据的数量不足 训练数据不具代表性 质量差的数据 无关特征 特征工程 一个成功的机器学习项目，关键部分是提取一组好的用了训练的特征集，这个过程叫做特征工程。
 特征选择 特征提取 通过手机数据创造新的特征  训练数据过度拟合 在模型的训练数据上表现良好，但是泛化时却不尽人如意。
解决方法
 简化模型 收集更多的训练数据 减少训练数据中的噪声（修复数据错误和消除异常值）  正则化 通过约束模型使其更简单，并降低过度拟合风险。
超参数 通过调整超参数来调整应用正则化的程度。调整超参数是构建机器学习系统的非常重要的组成部分。
训练数据拟合不足 解决方法：
 选择一个带有更多参数、更强大的模型 给学习算法提供更好的特征集 减少模型中的约束（如减少正则化超参数）  </description>
      <content>&lt;h2 id=&#34;训练数据的数量不足&#34;&gt;训练数据的数量不足&lt;/h2&gt;
&lt;h2 id=&#34;训练数据不具代表性&#34;&gt;训练数据不具代表性&lt;/h2&gt;
&lt;h2 id=&#34;质量差的数据&#34;&gt;质量差的数据&lt;/h2&gt;
&lt;h2 id=&#34;无关特征&#34;&gt;无关特征&lt;/h2&gt;
&lt;h3 id=&#34;特征工程&#34;&gt;特征工程&lt;/h3&gt;
&lt;p&gt;一个成功的机器学习项目，关键部分是提取一组好的用了训练的特征集，这个过程叫做特征工程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特征选择&lt;/li&gt;
&lt;li&gt;特征提取&lt;/li&gt;
&lt;li&gt;通过手机数据创造新的特征&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;训练数据过度拟合&#34;&gt;训练数据过度拟合&lt;/h2&gt;
&lt;p&gt;在模型的训练数据上表现良好，但是泛化时却不尽人如意。&lt;/p&gt;
&lt;p&gt;解决方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化模型&lt;/li&gt;
&lt;li&gt;收集更多的训练数据&lt;/li&gt;
&lt;li&gt;减少训练数据中的噪声（修复数据错误和消除异常值）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正则化&#34;&gt;正则化&lt;/h4&gt;
&lt;p&gt;通过约束模型使其更简单，并降低过度拟合风险。&lt;/p&gt;
&lt;h4 id=&#34;超参数&#34;&gt;超参数&lt;/h4&gt;
&lt;p&gt;通过调整超参数来调整应用正则化的程度。调整超参数是构建机器学习系统的非常重要的组成部分。&lt;/p&gt;
&lt;h2 id=&#34;训练数据拟合不足&#34;&gt;训练数据拟合不足&lt;/h2&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个带有更多参数、更强大的模型&lt;/li&gt;
&lt;li&gt;给学习算法提供更好的特征集&lt;/li&gt;
&lt;li&gt;减少模型中的约束（如减少正则化超参数）&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>机器学习系统的种类</title>
      <link>https://www.linuxzen.com/notes/notes/20200907074200-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A7%8D%E7%B1%BB/</link>
      <pubDate>Mon, 07 Sep 2020 07:42:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200907074200-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A7%8D%E7%B1%BB/</guid>
      <description>监督式/无监督式学习 监督式学习 定义 训练数据经过标注包含素所需解决方案（标签或标记）
相关算法  K-邻近算法 线性回归 逻辑回归：广泛用于分类，输出“属于某个给定类别的概率”的值 支持向量机 决策树和随机森林 神经网络  适应场景  分类任务 预测变量  无监督式学习 定义 训练数据未经标注
相关算法  聚类算法  K-平均算法 分层聚类分析 最大期望算法   可视化和降维  主成分分析 核主成分分析 局部线性嵌入 t-分布随机临近嵌入   关联规则学习  Apriori Eclat    适应场景  通过聚类算法检测相似（层次聚类算法精度更高，可以再次细分） 可视化算法 降维：不丢失太多信息的前提下简化数据，方法之一是合并特征，过程叫做特征提取 异常检测：判断新的输入是正常还是异常，数据初筛、防作弊等 关联规则学习：发现属性之间有趣的联系  半监督式学习 大量未标记数据和少量标记数据进行学习。
强化学习 观察环境、作出选择、执行操作、并获得回报（负值则为惩罚）。
批量学习和在线学习 在数据流中进行增量学习。
批量学习 在线学习 在线学习也称为增量学习，同时支持恢复到上一状态，便于检测到性能下降及时中断和回滚。
核外学习 超大数据集超出一台计算机的主存储器，每次加载部分数据并不断重复直至完成训练。
学习率 学习率高系统迅速适应新数据，同时快速忘记老数据，学习率低则反之。
基于实例和基于模型的学习 基于实例的学习 系统完全记住学习示例，然后通过某种相似度度量方式将其泛化到新的实例。
基于模型的学习 模型选择 观察数据得出模型的过程。</description>
      <content>&lt;h2 id=&#34;监督式-无监督式学习&#34;&gt;监督式/无监督式学习&lt;/h2&gt;
&lt;h3 id=&#34;监督式学习&#34;&gt;监督式学习&lt;/h3&gt;
&lt;h4 id=&#34;定义&#34;&gt;定义&lt;/h4&gt;
&lt;p&gt;训练数据经过标注包含素所需解决方案（标签或标记）&lt;/p&gt;
&lt;h4 id=&#34;相关算法&#34;&gt;相关算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;K-邻近算法&lt;/li&gt;
&lt;li&gt;线性回归&lt;/li&gt;
&lt;li&gt;逻辑回归：广泛用于分类，输出“属于某个给定类别的概率”的值&lt;/li&gt;
&lt;li&gt;支持向量机&lt;/li&gt;
&lt;li&gt;决策树和随机森林&lt;/li&gt;
&lt;li&gt;神经网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;适应场景&#34;&gt;适应场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分类任务&lt;/li&gt;
&lt;li&gt;预测变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无监督式学习&#34;&gt;无监督式学习&lt;/h3&gt;
&lt;h4 id=&#34;定义&#34;&gt;定义&lt;/h4&gt;
&lt;p&gt;训练数据未经标注&lt;/p&gt;
&lt;h4 id=&#34;相关算法&#34;&gt;相关算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;聚类算法
&lt;ul&gt;
&lt;li&gt;K-平均算法&lt;/li&gt;
&lt;li&gt;分层聚类分析&lt;/li&gt;
&lt;li&gt;最大期望算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可视化和降维
&lt;ul&gt;
&lt;li&gt;主成分分析&lt;/li&gt;
&lt;li&gt;核主成分分析&lt;/li&gt;
&lt;li&gt;局部线性嵌入&lt;/li&gt;
&lt;li&gt;t-分布随机临近嵌入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关联规则学习
&lt;ul&gt;
&lt;li&gt;Apriori&lt;/li&gt;
&lt;li&gt;Eclat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;适应场景&#34;&gt;适应场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过聚类算法检测相似（层次聚类算法精度更高，可以再次细分）&lt;/li&gt;
&lt;li&gt;可视化算法&lt;/li&gt;
&lt;li&gt;降维：不丢失太多信息的前提下简化数据，方法之一是合并特征，过程叫做特征提取&lt;/li&gt;
&lt;li&gt;异常检测：判断新的输入是正常还是异常，数据初筛、防作弊等&lt;/li&gt;
&lt;li&gt;关联规则学习：发现属性之间有趣的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;半监督式学习&#34;&gt;半监督式学习&lt;/h3&gt;
&lt;p&gt;大量未标记数据和少量标记数据进行学习。&lt;/p&gt;
&lt;h3 id=&#34;强化学习&#34;&gt;强化学习&lt;/h3&gt;
&lt;p&gt;观察环境、作出选择、执行操作、并获得回报（负值则为惩罚）。&lt;/p&gt;
&lt;h2 id=&#34;批量学习和在线学习&#34;&gt;批量学习和在线学习&lt;/h2&gt;
&lt;p&gt;在数据流中进行增量学习。&lt;/p&gt;
&lt;h3 id=&#34;批量学习&#34;&gt;批量学习&lt;/h3&gt;
&lt;h3 id=&#34;在线学习&#34;&gt;在线学习&lt;/h3&gt;
&lt;p&gt;在线学习也称为增量学习，同时支持恢复到上一状态，便于检测到性能下降及时中断和回滚。&lt;/p&gt;
&lt;h4 id=&#34;核外学习&#34;&gt;核外学习&lt;/h4&gt;
&lt;p&gt;超大数据集超出一台计算机的主存储器，每次加载部分数据并不断重复直至完成训练。&lt;/p&gt;
&lt;h4 id=&#34;学习率&#34;&gt;学习率&lt;/h4&gt;
&lt;p&gt;学习率高系统迅速适应新数据，同时快速忘记老数据，学习率低则反之。&lt;/p&gt;
&lt;h2 id=&#34;基于实例和基于模型的学习&#34;&gt;基于实例和基于模型的学习&lt;/h2&gt;
&lt;h3 id=&#34;基于实例的学习&#34;&gt;基于实例的学习&lt;/h3&gt;
&lt;p&gt;系统完全记住学习示例，然后通过某种相似度度量方式将其泛化到新的实例。&lt;/p&gt;
&lt;h3 id=&#34;基于模型的学习&#34;&gt;基于模型的学习&lt;/h3&gt;
&lt;h4 id=&#34;模型选择&#34;&gt;模型选择&lt;/h4&gt;
&lt;p&gt;观察数据得出模型的过程。&lt;/p&gt;
&lt;h4 id=&#34;衡量模型表现&#34;&gt;衡量模型表现&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义效用函数（或适应度函数）来衡量模型有多好&lt;/li&gt;
&lt;li&gt;定义成本函数来衡量模型有多差&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;线性回归通常选择成本函数来衡量线性模型的预测和训练实例之间的差距。&lt;/p&gt;
&lt;p&gt;线性回归算法的意义所在：通过你提供的训练样本，找出最符合所提供数据的线性模型的参数，这就是训练过程。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>《机器学习实战》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200905075701-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 05 Sep 2020 07:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200905075701-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>概览  机器学习系统的种类 机器学习的主要挑战 机器学习测试与验证  模型是观察的简化。
相关数学概念  机器学习涉及数学概念  </description>
      <content>&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200907074200-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A7%8D%E7%B1%BB/&#34;&gt;机器学习系统的种类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200907080323-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8C%91%E6%88%98/&#34;&gt;机器学习的主要挑战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200907081217-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81/&#34;&gt;机器学习测试与验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模型是观察的简化。&lt;/p&gt;
&lt;h2 id=&#34;相关数学概念&#34;&gt;相关数学概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200912093811-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B6%89%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/&#34;&gt;机器学习涉及数学概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Machine Learning</title>
      <link>https://www.linuxzen.com/notes/notes/20200903180214-machine_learning/</link>
      <pubDate>Thu, 03 Sep 2020 18:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200903180214-machine_learning/</guid>
      <description> scikit-learn 提供一些常见的机器学习算法  逻辑回归(Logistic Regression aka LR) 线性分类器   XGBoost 提供随机森林解决逻辑回归特征不明显的问题  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt; 提供一些常见的机器学习算法
&lt;ul&gt;
&lt;li&gt;逻辑回归(Logistic Regression aka LR) 线性分类器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XGBoost 提供随机森林解决逻辑回归特征不明显的问题&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Rust Obscure Words for non-native English speakers</title>
      <link>https://www.linuxzen.com/notes/notes/20200829081145-rust_obscure_words_for_non_native_english_speakers/</link>
      <pubDate>Sat, 29 Aug 2020 08:11:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200829081145-rust_obscure_words_for_non_native_english_speakers/</guid>
      <description>  tags: Rust,Learning English
  unwinding
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unwinding&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Rust Asynchronous Programming</title>
      <link>https://www.linuxzen.com/notes/notes/20200828160809-rust_asynchronous_programming/</link>
      <pubDate>Fri, 28 Aug 2020 16:08:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200828160809-rust_asynchronous_programming/</guid>
      <description>tags: Rust  Future  async fn 将一个代码块转换为一个 Future 对象， Future 对象维护一个状态机 Future 对象必须运行在一个 Executor 上  Executor   futures::executor::block_on 阻塞当前线程直到 future 完成
// `block_on` blocks the current thread until the provided future has run to // completion. Other executors provide more complex behavior, like scheduling // multiple futures onto the same thread. use futures::executor::block_on; async fn hello_world() { println!(&amp;#34;hello, world!&amp;#34;); } fn main() { let future = hello_world(); // Nothing is printed 	block_on(future); // `future` is run and &amp;#34;hello, world!</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;async fn&lt;/code&gt; 将一个代码块转换为一个 &lt;code&gt;Future&lt;/code&gt; 对象， &lt;code&gt;Future&lt;/code&gt; 对象维护一个状态机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Future&lt;/code&gt; 对象必须运行在一个 &lt;code&gt;Executor&lt;/code&gt; 上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;executor&#34;&gt;Executor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;futures::executor::block_on&lt;/code&gt; 阻塞当前线程直到 future 完成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `block_on` blocks the current thread until the provided future has run to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// completion. Other executors provide more complex behavior, like scheduling
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// multiple futures onto the same thread.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; futures::executor::block_on;

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello_world&lt;/span&gt;() {
	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world!&amp;#34;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; future &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hello_world(); &lt;span style=&#34;color:#75715e&#34;&gt;// Nothing is printed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	block_on(future); &lt;span style=&#34;color:#75715e&#34;&gt;// `future` is run and &amp;#34;hello, world!&amp;#34; is printed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;await&#34;&gt;await&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;await 异步的等待 future 完成，不阻塞当前线程，可以配合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;futures::join!&lt;/code&gt; 可以同时 await 多个 future&lt;/li&gt;
&lt;li&gt;&lt;code&gt;futures::try_join!&lt;/code&gt; 如果其中一个子 future 返回错误则立即返回（join! 需要等所有 future 全部返回）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;futures::select!&lt;/code&gt; 任意一个 future 完成则立即返回&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;learn_and_sing&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Wait until the song has been learned before singing it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// We use `.await` here rather than `block_on` to prevent blocking the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// thread, which makes it possible to `dance` at the same time.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; song &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; learn_song().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
	sing_song(song).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;async_main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; learn_and_sing();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dance();

	&lt;span style=&#34;color:#75715e&#34;&gt;// `join!` is like `.await` but can wait for multiple futures concurrently.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// If we&amp;#39;re temporarily blocked in the `learn_and_sing` future, the `dance`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// future will take over the current thread. If `dance` becomes blocked,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// `learn_and_sing` can take back over. If both futures are blocked, then
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// `async_main` is blocked and will yield to the executor.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	futures::join&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(f1, f2);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	block_on(async_main());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Go Swagger 实现代码即文档</title>
      <link>https://www.linuxzen.com/notes/notes/20200828104706-go_swagger/</link>
      <pubDate>Fri, 28 Aug 2020 10:47:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200828104706-go_swagger/</guid>
      <description>tags: Go  目标 当跟随这篇文章完成后将产出如下内容：
 代码 http://gitlab.17zuoye.net/vgo/go-swagger-example 文档 http://swagger.17zuoye.net/?url=http%3A%2F%2F10.200.242.61%3A9090%2Fswagger.json  准备  Go1.14 及以上版本 安装 go-swagger ：参见 官方文档。 接下来使用 gin 框架作为示例，如果之前没接触过可以先了解下该框架  创建一个项目 $ mkdir go-swagger-example $ cd go-swagger-example/ $ go mod init gitlab.17zuoye.net/vgo/go-swagger-example 开始使用 首先在你的 `main.go` 定义 go generate 像下面这样：
//go:generate swagger generate spec -o ./swagger.yml package main func main() { println(&amp;#34;Hello world!&amp;#34;); } 此时如果运行 go generate 在项目目录下就会生成一个 swagger.yml 文件：
paths: {} swagger: &amp;#34;2.0&amp;#34; 使用单独的包托管 swagger 相关定义 在之前实践的过程中发现，如果在多个包中定义了相同名称的结构体会到只一个结构体覆盖另外一个结构体的定义。 所以为了解决这个问题，我把所有 swagger 相关的定义都放在同一个包下来避免相同名字的结构体。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200218115725/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标&#34;&gt;目标&lt;/h2&gt;
&lt;p&gt;当跟随这篇文章完成后将产出如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码 &lt;a href=&#34;http://gitlab.17zuoye.net/vgo/go-swagger-example&#34;&gt;http://gitlab.17zuoye.net/vgo/go-swagger-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文档 &lt;a href=&#34;http://swagger.17zuoye.net/?url=http%3A%2F%2F10.200.242.61%3A9090%2Fswagger.json&#34;&gt;http://swagger.17zuoye.net/?url=http%3A%2F%2F10.200.242.61%3A9090%2Fswagger.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go1.14 及以上版本&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;go-swagger&lt;/code&gt; ：参见 &lt;a href=&#34;https://goswagger.io/install.html&#34;&gt;官方文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;接下来使用 &lt;a href=&#34;https://gin-gonic.com/&#34;&gt;gin&lt;/a&gt; 框架作为示例，如果之前没接触过可以先了解下该框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建一个项目&#34;&gt;创建一个项目&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ mkdir go-swagger-example
$ cd go-swagger-example/
$ go mod init gitlab.17zuoye.net/vgo/go-swagger-example
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;开始使用&#34;&gt;开始使用&lt;/h3&gt;
&lt;p&gt;首先在你的 `main.go` 定义 &lt;code&gt;go generate&lt;/code&gt; 像下面这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//go:generate swagger generate spec -o ./swagger.yml
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时如果运行 &lt;code&gt;go generate&lt;/code&gt; 在项目目录下就会生成一个 &lt;code&gt;swagger.yml&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;: {}
&lt;span style=&#34;color:#f92672&#34;&gt;swagger&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用单独的包托管-swagger-相关定义&#34;&gt;使用单独的包托管 swagger 相关定义&lt;/h3&gt;
&lt;p&gt;在之前实践的过程中发现，如果在多个包中定义了相同名称的结构体会到只一个结构体覆盖另外一个结构体的定义。
所以为了解决这个问题，我把所有 swagger 相关的定义都放在同一个包下来避免相同名字的结构体。&lt;/p&gt;
&lt;p&gt;创建 &lt;code&gt;swagger/swagger.go&lt;/code&gt; 填充如下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Package swagger defines API documentation.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Swagger 演示后端接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Schemes: http
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Host: 10.200.242.35:8080
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    BasePath: /api/
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Version: 0.1.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Contact: 王会&amp;lt;hui.wang.a@17zuoye.com&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Consumes:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    - application/json
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Produces:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    - application/vnd.17zuoye.v1+json
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:meta
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swagger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面文件通过注释来定义了一些接口相关的信息，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Schemes&lt;/code&gt; 定义可用的协议&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Host&lt;/code&gt; 定义接口地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasePath&lt;/code&gt; 定义接口基础路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumes&lt;/code&gt; 定义复杂请求的类型（可以覆盖）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Produces&lt;/code&gt; 定义接口响应类型（可以覆盖）&lt;/li&gt;
&lt;li&gt;还有一些其他的信息，比如联系人等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 &lt;code&gt;swagger:meta&lt;/code&gt; 来结束声明。&lt;/p&gt;
&lt;p&gt;此时我们再次运行 &lt;code&gt;go generate&lt;/code&gt; 将会得到如下 &lt;code&gt;swagger.yml&lt;/code&gt; 定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;basePath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/api/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;consumes&lt;/span&gt;:
- &lt;span style=&#34;color:#ae81ff&#34;&gt;application/json&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10.200.242.35&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;info&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;contact&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hui.wang.a@17zuoye.com&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;王会&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Swagger 演示后端接口&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;defines API documentation.&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1.0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;: {}
&lt;span style=&#34;color:#f92672&#34;&gt;produces&lt;/span&gt;:
- &lt;span style=&#34;color:#ae81ff&#34;&gt;application/vnd.17zuoye.v1+json&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;schemes&lt;/span&gt;:
- &lt;span style=&#34;color:#ae81ff&#34;&gt;http&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;swagger&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编写接口文档&#34;&gt;编写接口文档&lt;/h2&gt;
&lt;h3 id=&#34;准备-service-包&#34;&gt;准备 service 包&lt;/h3&gt;
&lt;p&gt;我们打算将接口实现相关代码放在 &lt;code&gt;service&lt;/code&gt; 包下，首先来创建 &lt;code&gt;service/service.go&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
)


&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Engine&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Default&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;Engine&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Group&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Mount handlers to gin here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;post-提交信息&#34;&gt;POST 提交信息&lt;/h3&gt;
&lt;p&gt;假设我们编写一个创建用户信息的接口，需要名字和年龄两个参数。我们在 &lt;code&gt;service&lt;/code&gt; 包下创建 &lt;code&gt;user.go&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:route POST /users users-create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 创建用户。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Responses:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   default: DefaultResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   201: UserResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateUser&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过上面代码中的注释我们创建了一个 Swagger 中的 &lt;code&gt;route&lt;/code&gt;  其 ID 是 &lt;code&gt;users-create&lt;/code&gt; 。
我们在注释中也声明了响应，但是我们目前还没有定义参数和对应的响应。&lt;/p&gt;
&lt;p&gt;Go Swagger 的参数定义是反向的，意思就是你需要定义一个 &lt;code&gt;parameter&lt;/code&gt; 然后指明用在哪个 &lt;code&gt;route&lt;/code&gt; 或
&lt;code&gt;operation&lt;/code&gt; 上（通过对应的 ID）。下面就让我们一起来看一看，我们来创建 &lt;code&gt;swagger/user.go&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swagger&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// UserCreateForm 用于创建用户的表单，可以供 gin 使用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserCreateForm&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Username&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;username&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserCreateParams 声明 Swagger 参数生成文档
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:parameters users-create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserCreateParams&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserCreateForm&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserEntity user entity to respond
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserEntity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;id&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Username&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;username&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserResponse 声明 Swagger 响应用于文档生成
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserResponse&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserEntity&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来调整 &lt;code&gt;swagger/swagger.go&lt;/code&gt; 定义 &lt;code&gt;DefaultResponse&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Package swagger defines API documentation.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Swagger 演示后端接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Schemes: http
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Host: 10.200.242.35:8080
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    BasePath: /api/
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Version: 0.1.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Contact: 王会&amp;lt;hui.wang.a@17zuoye.com&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Consumes:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    - application/json
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    Produces:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    - application/vnd.17zuoye.v1+json
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:meta
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swagger&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Default default entity
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Code&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;code&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;msg&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// DefaultResponse 默认响应，用于 Swagger 文档生成
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultResponse&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Default&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们运行 &lt;code&gt;go generate&lt;/code&gt; 将会生成如下 &lt;code&gt;swagger.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;basePath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/api/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;consumes&lt;/span&gt;:
- &lt;span style=&#34;color:#ae81ff&#34;&gt;application/json&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;definitions&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;Default&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Default default entity&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;code&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;int64&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Code&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;msg&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;string&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Message&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;x-go-package&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab.17zuoye.net/vgo/go-swagger-example/swagger&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;UserEntity&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;UserEntity user entity to respond&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;age&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;int64&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Age&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uint64&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ID&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;string&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Username&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;x-go-package&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab.17zuoye.net/vgo/go-swagger-example/swagger&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;UserCreateForm&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;UserCreateForm 用于创建用户的表单，可以供 gin 使用&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;age&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;int64&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Age&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;:
		&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;string&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;x-go-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Username&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;x-go-package&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gitlab.17zuoye.net/vgo/go-swagger-example/swagger&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10.200.242.35&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;info&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;contact&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hui.wang.a@17zuoye.com&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;王会&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Swagger 演示后端接口&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;defines API documentation.&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1.0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;/users&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;post&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;operationId&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;users-create&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
	  - &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;body&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Body&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;schema&lt;/span&gt;:
		  &lt;span style=&#34;color:#f92672&#34;&gt;$ref&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/definitions/UserCreateForm&amp;#39;&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;responses&lt;/span&gt;:
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;201&amp;#34;&lt;/span&gt;:
		  &lt;span style=&#34;color:#f92672&#34;&gt;$ref&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/responses/UserResponse&amp;#39;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;:
		  &lt;span style=&#34;color:#f92672&#34;&gt;$ref&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/responses/DefaultResponse&amp;#39;&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;summary&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;创建用户。&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;produces&lt;/span&gt;:
- &lt;span style=&#34;color:#ae81ff&#34;&gt;application/vnd.17zuoye.v1+json&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;responses&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;DefaultResponse&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DefaultResponse 默认响应，用于 Swagger 文档生成&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;schema&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;$ref&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/definitions/Default&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;UserResponse&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;UserResponse 声明 Swagger 响应用于文档生成&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;schema&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;$ref&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/definitions/UserEntity&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;schemes&lt;/span&gt;:
- &lt;span style=&#34;color:#ae81ff&#34;&gt;http&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;swagger&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 &lt;code&gt;swagger serve -F swagger swagger.yml&lt;/code&gt; 可查看文档。&lt;/p&gt;
&lt;h3 id=&#34;查询参数&#34;&gt;查询参数&lt;/h3&gt;
&lt;p&gt;接下来我们来编写查询接口文档，这次和上面创建稍有不同，参数通过 Query 进行传递，
编辑 &lt;code&gt;service/user.go&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryUsers&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:route POST /users users-create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 创建用户。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Responses:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   default: DefaultResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   201: UserResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateUser&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:route GET /users users-query
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 查询用户。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Respones:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   default: DefaultResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   200: UsersResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryUsers&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来调整 &lt;code&gt;swagger/user.go&lt;/code&gt; 定义参数和响应：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swagger&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// UserCreateForm 用于创建用户的表单，可以供 gin 使用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserCreateForm&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Username&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;username&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserCreateParams 声明 Swagger 参数生成文档
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:parameters users-create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserCreateParams&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserCreateForm&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserEntity user entity to respond
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserEntity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;id&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Username&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;username&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserResponse 声明 Swagger 响应用于文档生成
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserResponse&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserEntity&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UserQueryParams 声明 Swagger 参数生成文档
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:parameters users-query
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserQueryParams&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// json tag 用于 swagger
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// in: query
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Username&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;username&amp;#34; form:&amp;#34;username&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// UsersResponse 用户列表响应
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UsersResponse&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Page&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;page&amp;#34;`&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;PerPage&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;perPage&amp;#34;`&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Total&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;total&amp;#34;`&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Users&lt;/span&gt;   []&lt;span style=&#34;color:#a6e22e&#34;&gt;UserEntity&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;users&amp;#34;`&lt;/span&gt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 &lt;code&gt;go generate &amp;amp;&amp;amp; swagger serve -F swagger swagger.yml&lt;/code&gt; 可查看效果。&lt;/p&gt;
&lt;h3 id=&#34;url-中-path-参数&#34;&gt;URL 中 Path 参数&lt;/h3&gt;
&lt;p&gt;如果我们要更新用户信息，按照 RESTful 的设计方式，请求的方式应该是 &lt;code&gt;PATCH /api/users/:id&lt;/code&gt; ，
此时 &lt;code&gt;route&lt;/code&gt; 已经无法满足，需要借助 &lt;code&gt;operation&lt;/code&gt; 编写一些原始的 &lt;code&gt;YAML&lt;/code&gt; 来实现，下面是调整
后的 &lt;code&gt;service/user.go&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryUsers&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UpdateUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:route POST /users users-create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 创建用户。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Responses:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   default: DefaultResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   201: UserResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateUser&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:route GET /users users-query
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 查询用户。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Responses:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   default: DefaultResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   200: UsersResponse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryUsers&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// swagger:operation PATCH /users/{userId} users-update
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 更新用户信息。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ---
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// parameters:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// - in: path
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   name: userId
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   type: int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   description: 用户 ID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// - in: body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   name: Body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//   schema:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//     &amp;#34;$ref&amp;#34;: &amp;#34;#/definitions/UserCreateForm&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// respones:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//  &amp;#34;200&amp;#34;:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//    &amp;#34;$ref&amp;#34;: &amp;#34;#/responses/UserResponse&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//  &amp;#34;default&amp;#34;:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//    &amp;#34;$ref&amp;#34;: &amp;#34;#/responses/DefaultResponse&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PATCH&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users/:id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;UpdateUser&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;
&lt;p&gt;可以通过 CI/CD 生成 &lt;code&gt;swagger.yml&lt;/code&gt; 进行部署，然后将对应的 JSON 地址结合公司 &lt;a href=&#34;http://swagger.17zuoye.net/&#34;&gt;http://swagger.17zuoye.net/&lt;/a&gt;
进行部署查看。&lt;/p&gt;
&lt;p&gt;相关示例可以参考 &lt;a href=&#34;http://gitlab.17zuoye.net/vgo/go-swagger-example&#34;&gt;http://gitlab.17zuoye.net/vgo/go-swagger-example&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>MySQL forget password</title>
      <link>https://www.linuxzen.com/notes/notes/20200827195950-mysql_forget_password/</link>
      <pubDate>Thu, 27 Aug 2020 19:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827195950-mysql_forget_password/</guid>
      <description>tags: MySQL  启动 mysqld 时加上 --skip-grant-tables 参数可以无密码进入 MySQL。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320173956_mysql/&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动 mysqld 时加上 &lt;code&gt;--skip-grant-tables&lt;/code&gt; 参数可以无密码进入 MySQL。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>MVCC</title>
      <link>https://www.linuxzen.com/notes/notes/20200827195823-mvcc/</link>
      <pubDate>Thu, 27 Aug 2020 19:58:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827195823-mvcc/</guid>
      <description>tags: MySQL https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/  来自《高性能 MySQL》：
InnoDB 在每一行都隐式的多存储两个字段：
 事务更新版本 事务删除版本  当事务开始时记录这两个版本，在读取的时候根据 Undo Log 和 Redo Log 来实现隔离级别的控制。序列化隔离级别下只能通过行锁来保证。
在可重复读隔离级别下：
 首先判断事务更新版本是否大于事务开始前的版本 如果大于则根据 Undo Log 进行回退实现可重复读，这样在同一事务下不管读多少遍读取到的内容都是一样的。  可重复读隔离即便下无法避免幻读：即一开始没有读取到，随着其他插入事务的提交在同一事务里执行查询又能读取到的情况。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320173956_mysql/&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/&#34;&gt;https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来自《高性能 MySQL》：&lt;/p&gt;
&lt;p&gt;InnoDB 在每一行都隐式的多存储两个字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务更新版本&lt;/li&gt;
&lt;li&gt;事务删除版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当事务开始时记录这两个版本，在读取的时候根据 Undo Log 和 Redo Log 来实现隔离级别的控制。序列化隔离级别下只能通过行锁来保证。&lt;/p&gt;
&lt;p&gt;在可重复读隔离级别下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先判断事务更新版本是否大于事务开始前的版本&lt;/li&gt;
&lt;li&gt;如果大于则根据 Undo Log 进行回退实现可重复读，这样在同一事务下不管读多少遍读取到的内容都是一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可重复读隔离即便下无法避免幻读：即一开始没有读取到，随着其他插入事务的提交在同一事务里执行查询又能读取到的情况。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>MySQL grant subnet</title>
      <link>https://www.linuxzen.com/notes/notes/20200827195621-mysql_grant_subnet/</link>
      <pubDate>Thu, 27 Aug 2020 19:56:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827195621-mysql_grant_subnet/</guid>
      <description> tags: MySQL,Network  https://stackoverflow.com/a/38389851/2873718
MySQL 授权用户子网段需要使用:
172.16.0.0/255.240.0.0 而不能使用
172.16.0.0/12 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320173956_mysql/&#34;&gt;MySQL&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/38389851/2873718&#34;&gt;https://stackoverflow.com/a/38389851/2873718&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL 授权用户子网段需要使用:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;172.16.0.0/255.240.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而不能使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;172.16.0.0/12
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Network</title>
      <link>https://www.linuxzen.com/notes/notes/20200827180638-network/</link>
      <pubDate>Thu, 27 Aug 2020 18:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200827180638-network/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>逻辑右移</title>
      <link>https://www.linuxzen.com/notes/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/</link>
      <pubDate>Sun, 02 Aug 2020 16:55:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/</guid>
      <description>位移产生的空白填上 0，会导致有符号的负数变成正数。</description>
      <content>&lt;p&gt;位移产生的空白填上 0，会导致有符号的负数变成正数。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>算数右移</title>
      <link>https://www.linuxzen.com/notes/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/</link>
      <pubDate>Sun, 02 Aug 2020 16:51:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/</guid>
      <description>位移的产生的空白填上符号位。</description>
      <content>&lt;p&gt;位移的产生的空白填上符号位。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>汇编</title>
      <link>https://www.linuxzen.com/notes/notes/20200802155053-%E6%B1%87%E7%BC%96/</link>
      <pubDate>Sun, 02 Aug 2020 15:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802155053-%E6%B1%87%E7%BC%96/</guid>
      <description>tags: Computer Systems,《深入理解计算机系统》读书笔记  程序编码 $ gcc -Og -S mstore.c # outputs mstore.s $ gcc -Og -c mstore.c # outptus mstore.o $ objdump -d mstore.o 所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。
数据格式    C 声明 Intel 数据类型 汇编代码后缀 大小（字节）     char 字节 b 1   short 字 w 2   int 双字 l 4   long 四字 q 8   char* 四字 q 8   float 单精度 l 4   double 双精度 q 8    访问信息 寄存器 一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 通用目的寄存器 。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《深入理解计算机系统》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序编码&#34;&gt;程序编码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gcc -Og -S mstore.c  &lt;span style=&#34;color:#75715e&#34;&gt;# outputs mstore.s&lt;/span&gt;
$ gcc -Og -c mstore.c  &lt;span style=&#34;color:#75715e&#34;&gt;# outptus mstore.o&lt;/span&gt;
$ objdump -d mstore.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。&lt;/p&gt;
&lt;h2 id=&#34;数据格式&#34;&gt;数据格式&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;C 声明&lt;/th&gt;
&lt;th&gt;Intel 数据类型&lt;/th&gt;
&lt;th&gt;汇编代码后缀&lt;/th&gt;
&lt;th&gt;大小（字节）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;字节&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;字&lt;/td&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;双字&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;四字&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char*&lt;/td&gt;
&lt;td&gt;四字&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;单精度&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;双精度&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;访问信息&#34;&gt;访问信息&lt;/h2&gt;
&lt;h3 id=&#34;寄存器&#34;&gt;寄存器&lt;/h3&gt;
&lt;p&gt;一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 &lt;code&gt;通用目的寄存器&lt;/code&gt; 。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;四字&lt;/th&gt;
&lt;th&gt;双字&lt;/th&gt;
&lt;th&gt;字&lt;/th&gt;
&lt;th&gt;字节&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%rax&lt;/td&gt;
&lt;td&gt;%eax&lt;/td&gt;
&lt;td&gt;%ax&lt;/td&gt;
&lt;td&gt;%al&lt;/td&gt;
&lt;td&gt;返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rbx&lt;/td&gt;
&lt;td&gt;%ebx&lt;/td&gt;
&lt;td&gt;%bx&lt;/td&gt;
&lt;td&gt;%bl&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rcx&lt;/td&gt;
&lt;td&gt;%ecx&lt;/td&gt;
&lt;td&gt;%cx&lt;/td&gt;
&lt;td&gt;%cl&lt;/td&gt;
&lt;td&gt;第四个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdx&lt;/td&gt;
&lt;td&gt;%edx&lt;/td&gt;
&lt;td&gt;%dx&lt;/td&gt;
&lt;td&gt;%dl&lt;/td&gt;
&lt;td&gt;第三个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsi&lt;/td&gt;
&lt;td&gt;%esi&lt;/td&gt;
&lt;td&gt;%si&lt;/td&gt;
&lt;td&gt;%sil&lt;/td&gt;
&lt;td&gt;第二个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdi&lt;/td&gt;
&lt;td&gt;%edi&lt;/td&gt;
&lt;td&gt;%di&lt;/td&gt;
&lt;td&gt;%dil&lt;/td&gt;
&lt;td&gt;第一个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rbp&lt;/td&gt;
&lt;td&gt;%ebp&lt;/td&gt;
&lt;td&gt;%bp&lt;/td&gt;
&lt;td&gt;%bpl&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsp&lt;/td&gt;
&lt;td&gt;%esp&lt;/td&gt;
&lt;td&gt;%sp&lt;/td&gt;
&lt;td&gt;%spl&lt;/td&gt;
&lt;td&gt;栈指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r8&lt;/td&gt;
&lt;td&gt;%r8d&lt;/td&gt;
&lt;td&gt;%r8w&lt;/td&gt;
&lt;td&gt;%r8b&lt;/td&gt;
&lt;td&gt;第五个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r9&lt;/td&gt;
&lt;td&gt;%r9d&lt;/td&gt;
&lt;td&gt;%r9w&lt;/td&gt;
&lt;td&gt;%r9b&lt;/td&gt;
&lt;td&gt;第六个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r10&lt;/td&gt;
&lt;td&gt;%r10d&lt;/td&gt;
&lt;td&gt;%r10w&lt;/td&gt;
&lt;td&gt;%r10b&lt;/td&gt;
&lt;td&gt;调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r11&lt;/td&gt;
&lt;td&gt;%r11d&lt;/td&gt;
&lt;td&gt;%r11w&lt;/td&gt;
&lt;td&gt;%r11b&lt;/td&gt;
&lt;td&gt;调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r12&lt;/td&gt;
&lt;td&gt;%r12d&lt;/td&gt;
&lt;td&gt;%r12w&lt;/td&gt;
&lt;td&gt;%r11b&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r13&lt;/td&gt;
&lt;td&gt;%r13d&lt;/td&gt;
&lt;td&gt;%r13w&lt;/td&gt;
&lt;td&gt;%r13b&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r14&lt;/td&gt;
&lt;td&gt;%r14d&lt;/td&gt;
&lt;td&gt;%r14w&lt;/td&gt;
&lt;td&gt;%r14&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r15&lt;/td&gt;
&lt;td&gt;%r15d&lt;/td&gt;
&lt;td&gt;%r15w&lt;/td&gt;
&lt;td&gt;%r15&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;相关规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成 1 字节和 2 字节数字的指令会保持剩下的字节不变&lt;/li&gt;
&lt;li&gt;生成 4 字节的数字的指令会把高位 4 个字节设置为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寄存器的使用有一组编程规范控制着如何来管理栈、传递参数、从函数返回值，以及存储局部和临时数据。
%rsp 用来指明运行时栈的结束位置。&lt;/p&gt;
&lt;h3 id=&#34;操作数指示符&#34;&gt;操作数指示符&lt;/h3&gt;
&lt;p&gt;分为几类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;立即数（字面量）&lt;/li&gt;
&lt;li&gt;寄存器&lt;/li&gt;
&lt;li&gt;内存引用（支持多种寻址模式）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设寄存器是一个数组 R，内存是一个大的字节数组，寻址方式为索引，如 M[0] 就是访问内存的第一个字节。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;操作数值&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;立即数&lt;/td&gt;
&lt;td&gt;$Imm&lt;/td&gt;
&lt;td&gt;Imm&lt;/td&gt;
&lt;td&gt;立即数寻址&lt;/td&gt;
&lt;td&gt;$0x08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;寄存器&lt;/td&gt;
&lt;td&gt;\(r_a\)&lt;/td&gt;
&lt;td&gt;\(R[r_a]\)&lt;/td&gt;
&lt;td&gt;寄存器寻址&lt;/td&gt;
&lt;td&gt;%rdx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm&lt;/td&gt;
&lt;td&gt;M[Imm]&lt;/td&gt;
&lt;td&gt;绝对寻址&lt;/td&gt;
&lt;td&gt;0x80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(\(r_a\))&lt;/td&gt;
&lt;td&gt;M[R[\(r_a\)]]&lt;/td&gt;
&lt;td&gt;间接寻址&lt;/td&gt;
&lt;td&gt;(%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(\(r_b\))&lt;/td&gt;
&lt;td&gt;M[Imm+R[\(r_b\)]]&lt;/td&gt;
&lt;td&gt;（基址 + 偏移量）寻址&lt;/td&gt;
&lt;td&gt;0x08(%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(\(r_b\),\(r_i\))&lt;/td&gt;
&lt;td&gt;M[R[\(r_b\)] + R[\(r_i\)]]&lt;/td&gt;
&lt;td&gt;变址寻址&lt;/td&gt;
&lt;td&gt;(%rdx,%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(\(r_b\),\(r_i\))&lt;/td&gt;
&lt;td&gt;M[Imm + R[\(r_b\)] + R[\(r_i\)]]&lt;/td&gt;
&lt;td&gt;变址寻址&lt;/td&gt;
&lt;td&gt;0x08(%rdx,%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(,\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;(,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(,\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[Imm + R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;0x08(,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(\(r_b\),\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[R[\(r_b\)]+R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;(%rdx,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(\(r_b\),\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[Imm + R[\(r_b\)]+R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;0x08(%rdx,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数据传送指令&#34;&gt;数据传送指令&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;变体&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MOV S,D&lt;/td&gt;
&lt;td&gt;movb/movw/movl/movq&lt;/td&gt;
&lt;td&gt;D&amp;lt;-S&lt;/td&gt;
&lt;td&gt;传送&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVABSQ 1,R&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;R&amp;lt;-1&lt;/td&gt;
&lt;td&gt;传送绝对的四字&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVZ S,R&lt;/td&gt;
&lt;td&gt;movzbw/movzbl/movzwl/movzbq/movzwq&lt;/td&gt;
&lt;td&gt;R&amp;lt;-零扩展(S)&lt;/td&gt;
&lt;td&gt;以零扩展进行传送&lt;/td&gt;
&lt;td&gt;目标只能是寄存器，后缀 bw  表示字节传送到字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVS S,R&lt;/td&gt;
&lt;td&gt;movsbw/movsbl/movswl/movsbq/movswq/movslq&lt;/td&gt;
&lt;td&gt;R&amp;lt;-符号扩展(S)&lt;/td&gt;
&lt;td&gt;以符号扩展进行传送&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cltq&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;%rax&amp;lt;-符号扩展(%eax)&lt;/td&gt;
&lt;td&gt;把 %eax 符号扩展到 %rax&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;压入和弹出栈数据&#34;&gt;压入和弹出栈数据&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pushq S&lt;/td&gt;
&lt;td&gt;R[%rsp]&amp;lt;-R[%rsp]-0x08; M[R[%rsp]]&amp;lt;-R&lt;/td&gt;
&lt;td&gt;将四字压入栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;popq D&lt;/td&gt;
&lt;td&gt;D&amp;lt;-M[R[%rsp]];R[%rsp]&amp;lt;-R[%rsp]+0x08&lt;/td&gt;
&lt;td&gt;将四字弹出栈&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;算数和逻辑操作&#34;&gt;算数和逻辑操作&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;leaq&lt;/td&gt;
&lt;td&gt;leaq S,D&lt;/td&gt;
&lt;td&gt;D&amp;lt;-&amp;amp;S&lt;/td&gt;
&lt;td&gt;加载有效地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一元&lt;/td&gt;
&lt;td&gt;INC D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D + 1&lt;/td&gt;
&lt;td&gt;加 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DEC D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D - 1&lt;/td&gt;
&lt;td&gt;减 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;NEG D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- -D&lt;/td&gt;
&lt;td&gt;取负&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;NOT D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- ~D&lt;/td&gt;
&lt;td&gt;取补&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二元&lt;/td&gt;
&lt;td&gt;ADD S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D + S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SUB S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D - S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;IMUL S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D * S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XOR  S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D ^ S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;OR S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D ｜ S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AND S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;amp; S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;位移&lt;/td&gt;
&lt;td&gt;SAL k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;laquo; k&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SHL k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;laquo; k&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SAR k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;raquo; k&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/&#34;&gt;算数右移&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SHR k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;raquo; k&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/&#34;&gt;逻辑右移&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特殊&lt;/td&gt;
&lt;td&gt;imulq S&lt;/td&gt;
&lt;td&gt;R[%rdx]: R[%rax] &amp;lt;- S x R[%rax]&lt;/td&gt;
&lt;td&gt;有符号全乘法（支持两个 64 位的数字全 128 位乘积，用两个寄存器表示 8 字）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;mulq&lt;/td&gt;
&lt;td&gt;R[%rdx]: R[%rax] &amp;lt;- S x R[%rax]&lt;/td&gt;
&lt;td&gt;无符号全乘法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;cqto&lt;/td&gt;
&lt;td&gt;R[%rdx]: R[%rax] &amp;lt;- 符号扩展(R[%rax])&lt;/td&gt;
&lt;td&gt;转换为 8 字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;idivq S&lt;/td&gt;
&lt;td&gt;R[%rdx] &amp;lt;- R[%rdx]: R[%rax] mod S&lt;/td&gt;
&lt;td&gt;有符号除法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;R[%rdx] &amp;lt;- (R[%rdx]: R[%rax]) / S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;divq  S&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;td&gt;无符号除法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;leaq 将计算出的有效地址写入到目标寄存器，可以根据比例变址寻址进行复杂的数值计算。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;long t = x + 4 * y + 12 * z&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ASM&#34; data-lang=&#34;ASM&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; x in %rdi, y in %rsi, z in %rdx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
scale:
  &lt;span style=&#34;color:#a6e22e&#34;&gt;leaq&lt;/span&gt; (%rdi,%rsi,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), %rax   &lt;span style=&#34;color:#75715e&#34;&gt;; x + 4*y
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;leaq&lt;/span&gt; (%rdx,%rdx,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), %rdx   &lt;span style=&#34;color:#75715e&#34;&gt;; z + 2*z = 3 * z
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;leaq&lt;/span&gt; (%rax,%rdx,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), %rax   &lt;span style=&#34;color:#75715e&#34;&gt;; (x + 4*y) + 4*(3*z) = x + 4*y + 12*z
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;控制&#34;&gt;控制&lt;/h2&gt;
&lt;p&gt;测试数据值，然后根据测试的结果来改变控制流或者数据流。jump 指令可以指定控制应该被传递到程序的某个其他部分。&lt;/p&gt;
&lt;h3 id=&#34;条件码&#34;&gt;条件码&lt;/h3&gt;
&lt;p&gt;条件码寄存器存储了单个位的条件码来描述最近的算术或者逻辑操作的属性。常用的条件码有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CF：进位标志。最近的操作使最高位产生了进位。用来检查无符号操作的溢出。&lt;/li&gt;
&lt;li&gt;ZF：零标志。最近操作得出的结果为 0。&lt;/li&gt;
&lt;li&gt;SF：符号标志。最近的操作结果为负数。&lt;/li&gt;
&lt;li&gt;OF：溢出标志。最近的操作导致一个补码溢出 &amp;ndash; 正溢出或负溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leaq 不改变任何条件码。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>IEEE 浮点数</title>
      <link>https://www.linuxzen.com/notes/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/</link>
      <pubDate>Sun, 02 Aug 2020 15:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/</guid>
      <description>tags: Computer Systems,《深入理解计算机系统》读书笔记  浮点数小数表示形式 .0111 = \(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\)
IEEE 浮点数表示形式 \[ V=(-1)^s X M X 2^E \]
 s = 0 表示负数， s = 1 表示正数 M 是二进制表示的小数 E 是阶码  浮点数二进制组成  一个单独符号位 s 表吗符合 k 位阶码字段 exp 编码阶码 E n 位小数字段 frac 编码尾数 M  两种常见的格式  float  s = 1 k = 8 n = 23   double  s = 1 k = 11 n = 52    三种计算方式 前置的一些值</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《深入理解计算机系统》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浮点数小数表示形式&#34;&gt;浮点数小数表示形式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.0111&lt;/code&gt; = \(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\)&lt;/p&gt;
&lt;h2 id=&#34;ieee-浮点数表示形式&#34;&gt;IEEE 浮点数表示形式&lt;/h2&gt;
&lt;p&gt;\[ V=(-1)^s X M X 2^E \]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s = 0&lt;/code&gt; 表示负数， &lt;code&gt;s = 1&lt;/code&gt; 表示正数&lt;/li&gt;
&lt;li&gt;M 是二进制表示的小数&lt;/li&gt;
&lt;li&gt;E 是阶码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浮点数二进制组成&#34;&gt;浮点数二进制组成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个单独符号位 s 表吗符合&lt;/li&gt;
&lt;li&gt;k 位阶码字段 exp 编码阶码 E&lt;/li&gt;
&lt;li&gt;n 位小数字段 frac 编码尾数 M&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两种常见的格式&#34;&gt;两种常见的格式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;s = 1&lt;/li&gt;
&lt;li&gt;k = 8&lt;/li&gt;
&lt;li&gt;n = 23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;s = 1&lt;/li&gt;
&lt;li&gt;k = 11&lt;/li&gt;
&lt;li&gt;n = 52&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;三种计算方式&#34;&gt;三种计算方式&lt;/h3&gt;
&lt;p&gt;前置的一些值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e 是 exp 位表示的无符号数&lt;/li&gt;
&lt;li&gt;f 是 frac 位表示的小数&lt;/li&gt;
&lt;li&gt;\(Bias = 2^{k-1} -1\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;规格化的值&#34;&gt;规格化的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;规则：阶码字段 exp 的位模式即不全为 0，也不全为 1（单精度 255，双精度 2047）&lt;/li&gt;
&lt;li&gt;计算方式
&lt;ul&gt;
&lt;li&gt;\(E = e - Bias\)&lt;/li&gt;
&lt;li&gt;$M = 1 + f $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非规格化的值&#34;&gt;非规格化的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;规则：阶码字段 exp 全是 0（用于表示 0）&lt;/li&gt;
&lt;li&gt;计算方式
&lt;ul&gt;
&lt;li&gt;\(E = 1 - Bias\)&lt;/li&gt;
&lt;li&gt;\(M = f\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以表示 +0 和 -0。&lt;/p&gt;
&lt;h3 id=&#34;特殊值&#34;&gt;特殊值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阶码字段 exp 全是 1
&lt;ul&gt;
&lt;li&gt;小数字段全 0 表示：无穷（s = 0 负无穷，s = 1 正无穷）&lt;/li&gt;
&lt;li&gt;小数字段非全 0 表示：NaN（Not a Number）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Computer Systems</title>
      <link>https://www.linuxzen.com/notes/topics/20200802151319-computer_systems/</link>
      <pubDate>Sun, 02 Aug 2020 15:13:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200802151319-computer_systems/</guid>
      <description>内存模型  硬件内存模型 编程语言内存模型  </description>
      <content>&lt;h2 id=&#34;内存模型&#34;&gt;内存模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;硬件内存模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/&#34;&gt;编程语言内存模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Choosing a Rust web framework, 2020 edition</title>
      <link>https://www.linuxzen.com/notes/notes/20200710101214-web/</link>
      <pubDate>Fri, 10 Jul 2020 10:12:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200710101214-web/</guid>
      <description> tags: Rust source:Choosing a Rust web framework, 2020 edition  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source:&lt;a href=&#34;https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/&#34;&gt; Choosing a Rust web framework, 2020 edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://www.linuxzen.com/notes/notes/20200707214623-ssh/</link>
      <pubDate>Tue, 07 Jul 2020 21:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200707214623-ssh/</guid>
      <description>SSH Port Forwarding  -L 将远端机器的端口映射到本地 -R 将本地端口映射到远端  </description>
      <content>&lt;h2 id=&#34;ssh-port-forwarding&#34;&gt;SSH Port Forwarding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-L&lt;/code&gt; 将远端机器的端口映射到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-R&lt;/code&gt; 将本地端口映射到远端&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Fearless Concurrency with Rust</title>
      <link>https://www.linuxzen.com/notes/notes/20200703104039-fearless_concurrency_with_rust/</link>
      <pubDate>Fri, 03 Jul 2020 10:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200703104039-fearless_concurrency_with_rust/</guid>
      <description> tags: Rust 原文链接：https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文链接：&lt;a href=&#34;https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html&#34;&gt;https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Rust Means Never Having to Close a Socket</title>
      <link>https://www.linuxzen.com/notes/notes/20200629181735-rust_means_never_having_to_close_a_socket/</link>
      <pubDate>Mon, 29 Jun 2020 18:17:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629181735-rust_means_never_having_to_close_a_socket/</guid>
      <description>tags: Translate,Rust,Rust Wrapper Types  原文链接：Rust Means Never Having to Close a Socket
Rust 最酷的特性之一就是它可以自动地帮助你管理资源，同时在仍能保持安全（没有段错误）和高性能。
这是因为 Rust 是一门与众不同地编程语言，要理解我说的可能有点困难，让我来更近一步说明：
 Rust 就像带垃圾回收的编程语言，你无需手动释放内存 Rust 不同于其他带垃圾回收的编程语言，你无需1手动关闭或者释放像文件、套接字和锁这样的资源 Rust 达到以上这些特性不附带任何运行时开销（垃圾回收或者引用计数），并且不牺牲安全性。  如果你曾经造成过一个套接字或者文件泄漏，或者使用过一些抽象方法造成了这些资源的泄漏，那么你就会知道这有多重要。
你可能已经期望通过“使用后释放”来避免内存问题，而与此同时你并没有考虑到没有明确地关闭套接字可能出现类似的错误。我在这里告诉你，还有更好地办法。
如果你使用的是带垃圾回收的编程语言，则应密切关注本文提到的资源管理方面的内容。如果你使用的是像 C/C++ 这样底层编程语言，你可能会对安全方面更加感兴趣。
 Rust 的许多特性都是从其他语言借鉴而来。Rust 之所以变得有趣是因为它把所有的这些特性放在了一起，并且在编程语言层面实现了更严格地保证。 实际上，这种编程语言层面的保证让这些特性更加实用。
 所有权系统（The Ownership System） 让这种保证工作的方式是通过 Rust 的「所有权（ownership）」系统。不管任何时候你创建一个新的对象，都被创建它的「作用域（scope）」所拥有。
让我们通过一个例子来进一步说明：我们定义一个函数，函数拷贝输入文件到临时文件去处理它，然后拷贝输入文件到输出文件。
fn process(from: &amp;amp;Path, to: &amp;amp;Path) -&amp;gt; IoResult&amp;lt;()&amp;gt; { // creates a new tempdir with the specified suffix 	let tempdir = try!(TempDir::new(&amp;#34;skylight&amp;#34;)); // open the input file 	let mut from_file = try!</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200325165657_rust_wrapper_types/&#34;&gt;Rust Wrapper Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;https://blog.skylight.io/rust-means-never-having-to-close-a-socket/&#34;&gt;Rust Means Never Having to Close a Socket&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust 最酷的特性之一就是它可以自动地帮助你管理资源，同时在仍能保持安全（没有段错误）和高性能。&lt;/p&gt;
&lt;p&gt;这是因为 Rust 是一门与众不同地编程语言，要理解我说的可能有点困难，让我来更近一步说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 就像带垃圾回收的编程语言，你无需手动释放内存&lt;/li&gt;
&lt;li&gt;Rust 不同于其他带垃圾回收的编程语言，你无需&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;手动关闭或者释放像文件、套接字和锁这样的资源&lt;/li&gt;
&lt;li&gt;Rust 达到以上这些特性不附带任何运行时开销（垃圾回收或者引用计数），并且不牺牲安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你曾经造成过一个套接字或者文件泄漏，或者使用过一些抽象方法造成了这些资源的泄漏，那么你就会知道这有多重要。&lt;/p&gt;
&lt;p&gt;你可能已经期望通过“使用后释放”来避免内存问题，而与此同时你并没有考虑到没有明确地关闭套接字可能出现类似的错误。我在这里告诉你，还有更好地办法。&lt;/p&gt;
&lt;p&gt;如果你使用的是带垃圾回收的编程语言，则应密切关注本文提到的资源管理方面的内容。如果你使用的是像 C/C++ 这样底层编程语言，你可能会对安全方面更加感兴趣。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 的许多特性都是从其他语言借鉴而来。Rust 之所以变得有趣是因为它把所有的这些特性放在了一起，并且在编程语言层面实现了更严格地保证。
实际上，这种编程语言层面的保证让这些特性更加实用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;所有权系统-the-ownership-system&#34;&gt;所有权系统（The Ownership System）&lt;/h2&gt;
&lt;p&gt;让这种保证工作的方式是通过 Rust 的「所有权（ownership）」系统。不管任何时候你创建一个新的对象，都被创建它的「作用域（scope）」所拥有。&lt;/p&gt;
&lt;p&gt;让我们通过一个例子来进一步说明：我们定义一个函数，函数拷贝输入文件到临时文件去处理它，然后拷贝输入文件到输出文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;(from: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, to: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IoResult&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// creates a new tempdir with the specified suffix
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tempdir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(TempDir::new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;skylight&amp;#34;&lt;/span&gt;));

	&lt;span style=&#34;color:#75715e&#34;&gt;// open the input file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; from_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(File::open(from));

	&lt;span style=&#34;color:#75715e&#34;&gt;// create a temporary file inside the tempdir
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tempfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(File::create(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tempdir.path().join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tmp1&amp;#34;&lt;/span&gt;)));

	&lt;span style=&#34;color:#75715e&#34;&gt;// copy the input file into the tempfile
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(io::util::copy(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; from_file, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tempfile));

	&lt;span style=&#34;color:#75715e&#34;&gt;// use an external program to process the tmpfile in place
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// after processing, copy the tempfile into the output file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(File::create(to));

	io::util::copy(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; tempfile, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; out)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，函数 &lt;code&gt;process&lt;/code&gt; 的作用域再第一行创建了 &lt;code&gt;TempDir&lt;/code&gt; 是其初始拥有者。在这个例子中， &lt;code&gt;process&lt;/code&gt; 函数从未放弃所有权，所以当函数完成调用，
它就会自动被丢弃（dropped），也就是会删除 &lt;code&gt;Tempfile&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这就是一个关于自动资源管理的例子。 &lt;code&gt;TempDir&lt;/code&gt; 对象不仅仅是一片内存，它还代表被管理的资源。一旦程序不在使用该资源，那么它的清理逻辑将会被调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另外：在这 C++ 中被称为 「RAII」（Resource Acquistion Is Initialization）：资源获取即初始化，它是编程中最容易混淆但是有用的命名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对我来说很有趣地是，能最大效率地减轻程序员手动管理内存的技术往往也最难成功和有效地减轻程序员手动地管理资源。
在高级语言中，我们从不需要释放内存，但是我们通常需要关闭套接字、文件和释放锁。&lt;/p&gt;
&lt;p&gt;在实际中，在带有垃圾回收机制的编程语言中泄漏这些资源的情况令人震惊，所以我真的很享受这样一个事实，
在 Rust 中忘记关闭套接字不是一个大问题，就像在 Rust 忘记释放内存一样。并且在 Rust 中，
你可以免受防御涉及资源的“释放后使用”错误，就像你免受防御涉及内存的“释放后使用”错误一样。&lt;/p&gt;
&lt;p&gt;这听起来很神奇，所以你可能会有一些问题关于它实际上是如何工作的。&lt;/p&gt;
&lt;p&gt;首先，这个系统基于事实上一个对象在同一时间只能有一个所有者。我该如何确保我没有错误地在多个地方引用 &lt;code&gt;TempDir&lt;/code&gt; ？
答案是所有权系统不是建议性的。在 Rust 中，对象被创建其的作用域所拥有。它可以将所有权转移到其他作用域，或者在完成执行后保留所有权。
当一个作用域完成时，Rust 将销毁它所拥有地所有对象。&lt;/p&gt;
&lt;p&gt;因为一个对象同时只能归一个作用域所有，你可以通过查看就知道执行结束时有哪些对象将被销毁。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
	first: String,
	last: String
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; yehuda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person {
		first: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yehuda&amp;#34;&lt;/span&gt;.to_string(),
		last: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Katz&amp;#34;&lt;/span&gt;.to_string()
	};

	&lt;span style=&#34;color:#75715e&#34;&gt;// `yehuda` is transferred to `name_size`, so it cannot be
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// used anymore in this function, and it will not be destroyed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// when this function returns. It is up to `name_size`,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// or possibly a future owner, to destroy it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name_size(yehuda);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person {
		first: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;.to_string(),
		last: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dale&amp;#34;&lt;/span&gt;.to_string()
	};

	&lt;span style=&#34;color:#75715e&#34;&gt;// `tom` wasn&amp;#39;t transferred, so it will be
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// destroyed when this function returns.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name_size&lt;/span&gt;(person: &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uint&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Person { first, last } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; person;
	first.len() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; last.len()

	&lt;span style=&#34;color:#75715e&#34;&gt;// this function owns Person, so the Person is destroyed when `name_size` returns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仅仅通过逐一查看这两个函数，你可以看到 &lt;code&gt;yehuda&lt;/code&gt; 被转移到了 &lt;code&gt;name_size&lt;/code&gt; 函数，但是 &lt;code&gt;tom&lt;/code&gt; 则没有。
通过查看 &lt;code&gt;name_size&lt;/code&gt; 函数，你可以看到它一直拥有它的 &lt;code&gt;person&lt;/code&gt; 参数直到它返回。仅仅通过查看这两个函数，
你就可以直接确定哪个对象（如果有）将会在它们执行完毕被销毁。&lt;/p&gt;
&lt;p&gt;但是如何解释临时文件的例子？如果你查看 &lt;code&gt;process&lt;/code&gt; 函数的第三行代码，你可以看到 &lt;code&gt;TempDir&lt;/code&gt; 上的方法 &lt;code&gt;tempdir.path()&lt;/code&gt; 被调用。
难道这不是意味着我创建了第二个引用，并且理论上有两个所有者？或者意味着我们将所有权转移到了 &lt;code&gt;path&lt;/code&gt; 方法，也就是当该方法返回时会立即销毁这个目录？
显然这两个答案都行不通。&lt;/p&gt;
&lt;h2 id=&#34;借用和借出-borrowing-and-lending&#34;&gt;借用和借出（Borrowing and Lending）&lt;/h2&gt;
&lt;p&gt;要理解这里发生了什么，我们需要看一下 &lt;code&gt;path&lt;/code&gt; 方法的方法签名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过如下方式念出这个方法签名：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;path 方法「借用（borrows）」self 并返回「借用的（borrowed）」Path。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个函数借用一个对象并不会取的对象的所有权，并且在返回时不会销毁该对象。它只能在函数调用期间使用借用的对象，它不能，比如，创建线程并在线程中使用借用的对象。
换句话说，借用的对象必须不能在超出借出它的函数的作用域外存活。&lt;/p&gt;
&lt;p&gt;这意味着 Rust 编译器会检查所有函数调用并且在编译期得知代码是否尝试获取所有权。一旦一个对象的所有权被转移，那么原所有者会被拒绝访问该对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
	first: String,
	last: String,
	age: &lt;span style=&#34;color:#a6e22e&#34;&gt;uint&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person {
		first: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yehuda&amp;#34;&lt;/span&gt;.to_string(),
		last: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Katz&amp;#34;&lt;/span&gt;.to_string(),
		age: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; thirties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_thirties(person);
	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}, thirties: {}&amp;#34;&lt;/span&gt;, person, thirties);
}

&lt;span style=&#34;color:#75715e&#34;&gt;// This function tries to take ownership of `Person`; it does not
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ask to borrow it by taking &amp;amp;Person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_thirties&lt;/span&gt;(person: &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;) {
	person.age &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; person.age &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我尝试编译这段代码，我会得到下面的编译错误（略有删节）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;move.rs:16:34: 16:40 error: use of moved value: `person`
move.rs:16     println!(&amp;quot;{}, thirties: {}&amp;quot;, person, thirties);
											^~\~~~~

move.rs:15:32: 15:38 note: `person` moved here
move.rs:15     let thirties = is_thirties(person);
										  ^~\~~~~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;错误的意思是 &lt;code&gt;hello&lt;/code&gt; 函数的作用域是 &lt;code&gt;Person&lt;/code&gt; 的初始所有者，但是当调用 &lt;code&gt;is_thirties&lt;/code&gt; 时，它把所有权转移到了 &lt;code&gt;is_thirties&lt;/code&gt; 函数的作用域。
作为新的所有者，当 &lt;code&gt;is_thirties&lt;/code&gt; 返回，它就会释放 &lt;code&gt;Person&lt;/code&gt; 占据的内存。&lt;/p&gt;
&lt;p&gt;作为替代你会想使用「借用和借出」写这个程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person {
		first: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yehuda&amp;#34;&lt;/span&gt;.to_string(),
		last: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Katz&amp;#34;&lt;/span&gt;.to_string(),
		age: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
	};

	&lt;span style=&#34;color:#75715e&#34;&gt;// lend the person -- don&amp;#39;t transfer ownership
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; thirties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_thirties(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;person);

	&lt;span style=&#34;color:#75715e&#34;&gt;// now this scope still owns the person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}, thirties: {}&amp;#34;&lt;/span&gt;, person, thirties);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_thirties&lt;/span&gt;(person: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;) {
	person.age &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; person.age &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;从根本上讲，这意味着经过验证地所有权是你函数接口的一部分。&lt;/strong&gt;&lt;/strong&gt; Rust 开发者有时将其称为“借用检查器（borrow checker）”，但是却恰当好处。&lt;/p&gt;
&lt;p&gt;实际上，这些大部分时间可以正常工作的原因是，函数获得它们值的方式是通过“借用（borrowing）”。它们获得值、通过这些值处理一些逻辑然后返回。
长时间保持该值（比如通过使用线程）既不常见，又是时候该考虑一下正在发生的什么。&lt;/p&gt;
&lt;p&gt;当我们开始编写一个新的函数时应该借用所需参数，而不是尝试获取其所有权。经过一段时间的 Rust 编程之后这将不会增加认知成本，只是默认这样做。
如果编译器抱怨（随着你掌握这些规则将它们变成习惯（second nature）这样的情况将越来越少），这意味着你正在做含有潜在危险地事情，那就需要你思考一下了。&lt;/p&gt;
&lt;h2 id=&#34;从一个借用对象中返回一个借用字段-returning-a-borrowed-field-from-a-borrowed-object&#34;&gt;从一个借用对象中返回一个借用字段（Returning a Borrowed Field from a Borrowed Object）&lt;/h2&gt;
&lt;p&gt;在前面我们检查了如下方法签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个签名可能让你困惑。我之前说过当一个函数借用了一个对象，它必须只能在函数调用期间使用这个值，并且在此之后就不能使用。
难道返回对象的其中一部分没有违反这个规则？&lt;/p&gt;
&lt;p&gt;这个之所以没问题是因为 &lt;code&gt;path&lt;/code&gt; 的调用者明显有权使用 &lt;code&gt;Tempfile&lt;/code&gt; 并通过参数将之借给 &lt;code&gt;path&lt;/code&gt; 。
在这个案例中，Rust 编译器将会保证返回的 &lt;code&gt;Path&lt;/code&gt; 没有在超出拥有 &lt;code&gt;Tempfile&lt;/code&gt; 的作用域之外存活。&lt;/p&gt;
&lt;p&gt;实际上，这意味着你可以返回从上游借来的内容，然后 Rust 将处理好跟踪该内容的原容器。&lt;/p&gt;
&lt;p&gt;让我们通过一个例子来举例说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person {
		first: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yehuda&amp;#34;&lt;/span&gt;.to_string(),
		last: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Katz&amp;#34;&lt;/span&gt;.to_string(),
		age: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
	};

	first_name(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;person)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first_name&lt;/span&gt;(person: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// as_slice borrows a slice &amp;#34;view&amp;#34; out of a string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	person.first.as_slice()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你仔细观察，你可以立即看到问题所在。函数 &lt;code&gt;hello&lt;/code&gt; 试图返回一个借用的 &lt;code&gt;&amp;amp;str&lt;/code&gt; ，但是拥有包含被返回的字节的原 &lt;code&gt;Person&lt;/code&gt; 的所有权在 &lt;code&gt;hello&lt;/code&gt; 中。
一旦 &lt;code&gt;hello&lt;/code&gt; 返回，那么 &lt;code&gt;Person&lt;/code&gt; 将不复存在，导致借用的内容（字符串切片）指向了无效地地址。&lt;/p&gt;
&lt;p&gt;如果试图编译这段代码，你将得到如下报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;move.rs:8:15: 8:19 error: missing lifetime specifier [E0106]
move.rs:8 fn hello() -&amp;gt; &amp;amp;str {
						^~\~~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个有点混乱地错误信息表示我们正尝试返回借用的字节，但是函数的调用者没有借给我们借用字节的来源 &lt;code&gt;Person&lt;/code&gt; 。
Rust 正在向我们征询如果返回值不属于调用者作用域那么应该归属于那个「生命周期（lifetime）」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常情况下，Rust 会将返回值的作用域绑定到借用参数的作用域。这在里，我们没有借用的参数，所以 Rust 要求我们进行显式地定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际情况下，这表示一个函数可以轻松地通过借用的方式返回借用参数中的内容。否则，你需要给该返回值找到一个调用者可以访问的存储位置，
或者克隆（clone）该值让调用者拥有一份自己的拷贝。&lt;/p&gt;
&lt;h2 id=&#34;易用性-ergonomics&#34;&gt;易用性（Ergonomics）&lt;/h2&gt;
&lt;p&gt;咋一看，所有权这些机制让人感觉很复杂，并且看起来可能会对使用 Rust 的易用性产生重大影响。可以肯定的是，一开始确实会有这种感觉。&lt;/p&gt;
&lt;p&gt;但是有几个因素会让 Rust 的所有权变得比远看上去更加易用。&lt;/p&gt;
&lt;p&gt;首先，大量的实际代码适用于借用/借出模式。随着我写了越来越多的 Rust 代码，我逐渐意识到用 Ruby 编写的程序遵循类似的模式：
函数创建一些对象并将它们传递给子函数执行某些任务，然后子函数返回新值。&lt;/p&gt;
&lt;p&gt;当然，这是递归的，因此仅当差异（在于函数调用期间使用参数，以及延长参数的使用周期）在 Rust 中被显式区分时，它才能变得显而易见。
只有通过函数签名进行区分和全面覆盖，并检查错误，我们才能获得 Rust 提供的保证。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相反，C++ 只对部分情况进行了明显地区分，并且没有错误检查。带有垃圾回收机制的语言通常会隐藏“转移（transferred）”和“借出（lent）”参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如我上面所说，这意味着 Rust 程序员快速学习将借用作为默认行为去编写函数来减轻许多系统认知负担。&lt;/p&gt;
&lt;p&gt;其次，随着使用一段时间 Rust 之后，大部分人意识到借用检查器错误和警告他们的都是真实地、严重地和比较难以发觉的错误。
一段时间以后，借用检查器自然地将您推入编程模式并且减少出现此类难以发觉地错误的影响。&lt;/p&gt;
&lt;p&gt;再次，我个人发现，对所有权的清晰了解可以大大提高我对程序进行推理地能力，同时避免意外引入后面会花费大量地时间跟踪排查的内存泄漏问题。&lt;/p&gt;
&lt;p&gt;最后，自动资源管理具有真正地易用性优势，既可以防止资源泄漏（当我懒惰时），又可以防止额外地样板代码和缩进（当我谨慎时）。&lt;/p&gt;
&lt;p&gt;除 C++ 之外，很少程序员经历过自动资源管理为标准的编程环境，打开大脑的“blub”部分并认为它没有那么大的作用是非常非常容易的。
Rust 改变了这个领域中的传统权衡，我建议您将脑中告诉自己「我不需要它在《我选择的编程语言》，它有多重要？ ？」的小声音暂时先放回去。&lt;/p&gt;
&lt;h2 id=&#34;引用计数-和垃圾回收&#34;&gt;引用计数（和垃圾回收）&lt;/h2&gt;
&lt;p&gt;你可能已经注意到 Rust 已经有引用计数指针（并且计划未来实现 GC）。&lt;/p&gt;
&lt;p&gt;它是如何在所有权系统中工作的呢？&lt;/p&gt;
&lt;p&gt;以我的经验，一旦习惯了所有权范式，你会很少想要使用 &lt;code&gt;Rc&lt;/code&gt; 指针。例如，整个 Cargo 代码库中没有使用引用计数指针的实例，
只使用了一次原子计数指针（用于在并行构建的代码的线程之间共享锁）。&lt;/p&gt;
&lt;p&gt;我认为这是由于所有权非常明确，并且切实地改善了本地推理。如果你检查任意使用正常 Rust 引用的函数，
则可以轻易地知道一旦函数返回哪些内存（和资源）仍将存活，而哪些不会。例如，如果你使用闭包，
则可以立即判断它是否存活于当前函数作用域外，如果它确实存活于当前函数作用域外，你还可以知道闭包拥有哪些对象。&lt;/p&gt;
&lt;p&gt;我也认为所有权和借出概念可以很好地映射到实际地编程模式。有一些事情你不可以做，但是大部分情况下，略微调整代码结构就可以通过编译。
作为交换，内存和资源泄漏都很少发生，并且代码清晰度得到了提高。&lt;/p&gt;
&lt;p&gt;如果不是这种情况，我怀疑即使是经验丰富地 Rust 开发人员也会更频繁地使用 &lt;code&gt;Rc&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;综上所述，在某些情况下，引用计数甚至垃圾回收也可以正常的在所有权系统下工作。 Rust 的 “智能指针” 系统允许 &lt;code&gt;Rc&lt;/code&gt; 指针在相同地所有权和借用系统内透明地运行，
并且当引用计数减小到 0 时运行析构函数（伴随明显地本地推理和运行时性能上的成本）。&lt;/p&gt;
&lt;h2 id=&#34;其他语言的机制-facilities-in-other-languages&#34;&gt;其他语言的机制（Facilities in Other Languages）&lt;/h2&gt;
&lt;p&gt;带有垃圾回收机制的语言通常会提供一些机器辅助程序员手动管理资源。在大部分现代编程语言中，你不用显式的调用 &lt;code&gt;close&lt;/code&gt; ，
但是你需要调整语言结构将资源与词法作用域联系在一起，然后在完成后进行释放。&lt;/p&gt;
&lt;p&gt;让我们观察一些例子，然后我会讨论这些方法的缺点。&lt;/p&gt;
&lt;p&gt;在 Ruby 中，你可以使用一个块标识你将在指定的作用域里使用资源。一旦块返回，资源将会被清理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/passwd&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# use the file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Python 中，一个特殊的语言关键字 &lt;code&gt;with&lt;/code&gt; 用来创建一个协议进行资源获取，然后在代码块结束后释放资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/passwd&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
  &lt;span style=&#34;color:#75715e&#34;&gt;# use the file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ruby 和 Python 都使用了通过调整语言结构和创建新协议的方法抽象了特定于资源关闭的机制。用户永远不知道关闭什么样子，
但是他们必须使用特殊的抽象来确保资源关闭被调用。&lt;/p&gt;
&lt;p&gt;在 Go 中， &lt;code&gt;defer&lt;/code&gt; 关键字允许程序员在原始创建逻辑之后提供清理逻辑来管理资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/passwd&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()

&lt;span style=&#34;color:#75715e&#34;&gt;// use the file
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方式比 &lt;code&gt;try/catch/finally&lt;/code&gt; 有好一些，因为它保持清理逻辑紧跟资源获取逻辑，但是没有抽象关闭逻辑。&lt;/p&gt;
&lt;p&gt;所有这些方法都有一系列的问题。再次，我建议你远离大脑中的很可能会告诉您这些问题“在实践中不会变得很重要”的“blub”中心。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向已经使用中的结构后面添加资源释放逻辑是不可能的，因为他们的使用者（clients）将会使用正常的对象创建 API。
这会导致在更高层对象中抽象资源更加困难，因为资源管理需要暴漏到公共 API。&lt;/li&gt;
&lt;li&gt;基于块的方法（Ruby 和 Python，不包含 Go）引入向右漂移。每次你想要使用一个资源，你都被强制创建一个新的作用域范围。
这在 Ruby（有很好的块）和 Python（使用语言层面的结构）中相当烦人，在 JavaScript 中还有一个严重地问题，即引入新的作用域会阻止你返回或者摆脱当前循环。&lt;/li&gt;
&lt;li&gt;这些方法（包含 Go 的 &lt;code&gt;defer&lt;/code&gt; ）需要你在给定的词法作用域内使用资源。当你想要将资源传递给多个函数时将会引发尴尬（或不可能的）编程风格。
实际上，它迫使语言使用一个不地道的基于作用域的所有权系统模型进行对象管理。
&lt;ul&gt;
&lt;li&gt;一旦你开始使用资源调用其他函数，则可能意外地创建“释放后使用” 的 bug，如函数绑定在资源上（如闭包中），并在调用者关闭资源后尝试使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust 中的自动资源管理可缓解所有这些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;资源管理对象可以定义一个析构器（destructor）抽象释放逻辑。通过正常创建一个对象就可以让析构器在正确的时间调用。
对象可以在被使用之后添加析构函数而无需修改客户端代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意 Rust 中的析构器不同于带 GC 的语言中的析构器。它们总是在对象不在被使用后执行，并且一定会被执行，除了运行析构器本身不附带任何运行时开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于资源管理和自动内存管理通过相同的方式工作，这将消除恼人的缩进并且不需要包围额外的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Rust 中，你可以像传递其他类型的对象一样传递资源。如果你将所有权转移到其他作用域，资源将会在新作用域完成时被关闭。
除此之外，借用系统将还会像保证内存一样保证资源不存在“释放后使用”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简而言之，使用同一系统进行内存和资源管理确实有好处。&lt;/p&gt;
&lt;p&gt;我不会说 Rust 所有权系统像垃圾回收一样不用耗费任何心力。 但是，Rust 已经做了很多非常聪明的事情来弥补，正如我们所看到的在某些情况下的易用性甚至超过了带垃圾回收机制的语言。&lt;/p&gt;
&lt;p&gt;作为交换，你将获得一种非常快速的语言，并且可以绝对安全地直接控制内存。&lt;/p&gt;
&lt;p&gt;因此，它开启了一个高级语言用户都可以编写低级代码的时代，这确实让我感到兴奋。同时在社区也可以找到很多人互相学习。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;当我说“无需”，我的意思是绝大部分都不需要。在带有垃圾回收的语言中，有时你最终还是会直接管理内存， 同样的在 Rust 中你最终还是会直接管理资源。重要的是在两种情况下，主要的编程模型是编程语言替你管理资源。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>Rust 并发</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180709-rust_%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 29 Jun 2020 18:07:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180709-rust_%E5%B9%B6%E5%8F%91/</guid>
      <description>并发 std::marker::Send 允许跨线程转移所有权 Send 标记特性用于标识实现该特性的类型的所有权可以在线程中间转移，几乎所有 Rust 类型都实现了 Send ，但是也有一些例外如：
 Rc&amp;lt;T&amp;gt; ，如果克隆后在多个线程中转移所有权可能会多个线程同时增加计数器，可以使用 Arc&amp;lt;T&amp;gt; 替代  如果一个新的类型组合的类型都实现了 Send 那么该类型也自动实现了 Send ，几乎所有原始类型都实现了 Send .
std::marker::Sync 允许多个线程同时访问 Sync 标记特性用于标识实现该特性的类型可以在多个线程中引用，任何类型 T 是 Sync 并且 T 的引用 &amp;amp;T 是 Send 则意味着引用可以安全的发送给其他线程。
同 Send 类似，几乎所有原始类型都实现了 Sync ，组合了所有类型都是 Sync 的类型自动实现 Sync 。
以下只能指针没有实现 Sync
 Rc&amp;lt;T&amp;gt; 同样没有实现 Sync RcCell&amp;lt;T&amp;gt; 和 Cell&amp;lt;T&amp;gt;  自己实现 Sync 和 Send 是不安全的 </description>
      <content>&lt;h2 id=&#34;并发&#34;&gt;并发&lt;/h2&gt;
&lt;h3 id=&#34;std-marker-send-允许跨线程转移所有权&#34;&gt;std::marker::Send 允许跨线程转移所有权&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Send&lt;/code&gt; 标记特性用于标识实现该特性的类型的所有权可以在线程中间转移，几乎所有 Rust 类型都实现了 &lt;code&gt;Send&lt;/code&gt; ，但是也有一些例外如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; ，如果克隆后在多个线程中转移所有权可能会多个线程同时增加计数器，可以使用 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 替代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个新的类型组合的类型都实现了 &lt;code&gt;Send&lt;/code&gt; 那么该类型也自动实现了 &lt;code&gt;Send&lt;/code&gt; ，几乎所有原始类型都实现了 &lt;code&gt;Send&lt;/code&gt; .&lt;/p&gt;
&lt;h3 id=&#34;std-marker-sync-允许多个线程同时访问&#34;&gt;std::marker::Sync 允许多个线程同时访问&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Sync&lt;/code&gt; 标记特性用于标识实现该特性的类型可以在多个线程中引用，任何类型 &lt;code&gt;T&lt;/code&gt; 是 &lt;code&gt;Sync&lt;/code&gt; 并且 T 的引用 &lt;code&gt;&amp;amp;T&lt;/code&gt; 是 &lt;code&gt;Send&lt;/code&gt; 则意味着引用可以安全的发送给其他线程。&lt;/p&gt;
&lt;p&gt;同 &lt;code&gt;Send&lt;/code&gt; 类似，几乎所有原始类型都实现了 &lt;code&gt;Sync&lt;/code&gt; ，组合了所有类型都是 &lt;code&gt;Sync&lt;/code&gt; 的类型自动实现 &lt;code&gt;Sync&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以下只能指针没有实现 &lt;code&gt;Sync&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 同样没有实现 &lt;code&gt;Sync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RcCell&amp;lt;T&amp;gt;&lt;/code&gt; 和 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自己实现-sync-和-send-是不安全的&#34;&gt;自己实现 &lt;code&gt;Sync&lt;/code&gt; 和 &lt;code&gt;Send&lt;/code&gt; 是不安全的&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>Rust 宏</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180623-rust_%E5%AE%8F/</link>
      <pubDate>Mon, 29 Jun 2020 18:06:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180623-rust_%E5%AE%8F/</guid>
      <description>三种宏  自定义 #[derive] 属性行为（attribute-like）宏，Rust 属性宏解析 函数行为（function-like）宏  宏 实现元编程，代码生成代码，必须带入当前命名空间内才能使用（不能使用 mod::sub::macro! 这种方式调用）。
#[macro_export] macro_rules! vec { ( $($x:expr), *) =&amp;gt; { // $() 用于捕捉值，$x:expr 匹配 Rust 表达式并绑定到 $x，逗号（,）表明一个逗号可能出现在表达式后面，* 表明表达式匹配一次或多次 	{ let mut temp_vec = Vec::new(); ${ temp_vec.push($x); }* temp_vec } }; } 调用宏用于从属性生成代码 有点像编译期的装饰器：
use proc_macro; #[some_attribute] pub fn some_name(input: TokenStream) -&amp;gt; TokenStream { // --snip-- } </description>
      <content>&lt;h2 id=&#34;三种宏&#34;&gt;三种宏&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自定义 &lt;code&gt;#[derive]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;属性行为（attribute-like）宏，&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210616141500-rust_%E5%B1%9E%E6%80%A7%E5%AE%8F%E8%A7%A3%E6%9E%90/&#34;&gt;Rust 属性宏解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;函数行为（function-like）宏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宏&#34;&gt;宏&lt;/h2&gt;
&lt;p&gt;实现元编程，代码生成代码，必须带入当前命名空间内才能使用（不能使用 &lt;code&gt;mod::sub::macro!&lt;/code&gt; 这种方式调用）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[macro_export]&lt;/span&gt;
macro_rules! vec {
  ( &lt;span style=&#34;color:#75715e&#34;&gt;$($x&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {           &lt;span style=&#34;color:#75715e&#34;&gt;// $() 用于捕捉值，$x:expr 匹配 Rust 表达式并绑定到 $x，逗号（,）表明一个逗号可能出现在表达式后面，* 表明表达式匹配一次或多次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	{
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; temp_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
	  &lt;span style=&#34;color:#75715e&#34;&gt;$&lt;/span&gt;{
		temp_vec.push(&lt;span style=&#34;color:#75715e&#34;&gt;$x&lt;/span&gt;);
	  }&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
	  temp_vec
	}
  };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;调用宏用于从属性生成代码&#34;&gt;调用宏用于从属性生成代码&lt;/h2&gt;
&lt;p&gt;有点像编译期的装饰器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; proc_macro;

&lt;span style=&#34;color:#75715e&#34;&gt;#[some_attribute]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;some_name&lt;/span&gt;(input: &lt;span style=&#34;color:#a6e22e&#34;&gt;TokenStream&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TokenStream&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>智能指针</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180545-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 29 Jun 2020 18:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180545-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>智能指针   表现的像一个指针，拥有数据并允许在对数据进行维护。
  通常通过 struct 实现并实现两个特性 Deref 和 Drop
 Deref 允许智能指针实例行为像一个引用，让代码可以同时处理引用和智能指针 Drop 允许自定义智能指针超出作用域的行为。    标准库常见的智能指针
 Box&amp;lt;T&amp;gt; 用于在堆分配值 Rc&amp;lt;T&amp;gt; 引用计数类型，允许多个拥有者 Ref&amp;lt;T&amp;gt; 和 RefMut&amp;lt;T&amp;gt; 和通过 RefCell&amp;lt;T&amp;gt; 访问，运行时取代编译期强制检查借用规则    Box 场景：
  编译期未知大小的类型（递归类型（自己包含自己类型的类型，如链表）编译期无法确定大小）
// 递归类型 enum List { Cons(i32, Box&amp;lt;List&amp;gt;), Nil, } fn main() { let b = Box::new(5); println!(&amp;#34;b = {}&amp;#34;, b); let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil)))))); }   避免大量数据转移所有权时发生拷贝</description>
      <content>&lt;h2 id=&#34;智能指针&#34;&gt;智能指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表现的像一个指针，拥有数据并允许在对数据进行维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常通过 &lt;code&gt;struct&lt;/code&gt; 实现并实现两个特性 &lt;code&gt;Deref&lt;/code&gt; 和 &lt;code&gt;Drop&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Deref&lt;/code&gt; 允许智能指针实例行为像一个引用，让代码可以同时处理引用和智能指针&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Drop&lt;/code&gt; 允许自定义智能指针超出作用域的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准库常见的智能指针&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 用于在堆分配值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 引用计数类型，允许多个拥有者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt; 和 &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; 和通过 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 访问，运行时取代编译期强制检查借用规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;box-t&#34;&gt;Box&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译期未知大小的类型（递归类型（自己包含自己类型的类型，如链表）编译期无法确定大小）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 递归类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt; {
  Cons(&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, Box&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;),
  Nil,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Box::new(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b = {}&amp;#34;&lt;/span&gt;, b);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	Box::new(Cons(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
	  Box::new(Cons(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
		Box::new(Nil))))));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免大量数据转移所有权时发生拷贝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥有一个实现特定特性的值（不关心具体类型）的所有权&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deref&#34;&gt;Deref&lt;/h3&gt;
&lt;p&gt;用于自定义解引用操作符（ &lt;code&gt;*&lt;/code&gt; ） 的行为，智能指针通过实现该特性来模拟普通引用的行为。&lt;/p&gt;
&lt;p&gt;对比&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x;

  assert_eq!(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, x);
  assert_eq!(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y);   &lt;span style=&#34;color:#75715e&#34;&gt;// must dereference
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Box::new(x);

  assert_eq!(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, x);
  assert_eq!(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 的实现大体如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::ops::Deref;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyBox&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(T);

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Deref &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; MyBox&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(x: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyBox&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	MyBox(x)
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deref&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; {
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;deref&lt;/code&gt; 让编译器知道如何通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 获取一个引用，然后就可以正确的解引用，实际展开的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(y.deref())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样做的原因是如果 &lt;code&gt;deref&lt;/code&gt; 不返回引用而是返回值，那么就会发生所有权转移，这是智能指针所不允许的。&lt;/p&gt;
&lt;p&gt;如果一个类型实现了 &lt;code&gt;Deref&lt;/code&gt; ，当传递给函数或方法的类型不满足时，编译器会自动进行隐式转换（可能时多次）以满足需求。
还有 &lt;code&gt;DerefMut&lt;/code&gt; 处理可变解引用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt; 时，从 &lt;code&gt;&amp;amp;T&lt;/code&gt; 变为 &lt;code&gt;&amp;amp;U&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;T: DerefMut&amp;lt;Target=U&amp;gt;&lt;/code&gt; 时，从 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 变为 &lt;code&gt;&amp;amp;mut U&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt; 时，从 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 变为 &lt;code&gt;&amp;amp;U&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>迭代器</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180506-%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Mon, 29 Jun 2020 18:05:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180506-%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>迭代器 所有的迭代器都实现了 Iterator 特性：
pub trait Iterator { type Item; // 关联类型  fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; // 返回 None 结束循环 } </description>
      <content>&lt;h2 id=&#34;迭代器&#34;&gt;迭代器&lt;/h2&gt;
&lt;p&gt;所有的迭代器都实现了 &lt;code&gt;Iterator&lt;/code&gt; 特性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; Iterator {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Item&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 关联类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self) -&amp;gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Item&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 None 结束循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>生命周期</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180413-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Mon, 29 Jun 2020 18:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180413-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>生命周期  Rust 中的每一个引用都有其生命周期：引用有效的作用域。 大部分情况下生命周期都是隐式和自举的，在无法完成的情况下就需要我们通过生命周期泛型参数帮助编译器进行注解。 生命周期的主要目标是避免悬空指针。 生命周期泛型参数定义各个引用之间（参数和参数、参数和返回值）的关系，并不改变（延长）变量原本的生命周期  &amp;amp;i32 // a reference &amp;amp;&amp;#39;a i32 // a reference with an explicit lifetime &amp;amp;&amp;#39;a mut i32 // a mutable reference with an explicit lifetime 参考以下代码
fn longest&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str { if x.len() &amp;gt; y.len() { x } else { y } } 以上代码
 标注生命周期 &#39;a 函数有两个引用参数，都使用生命周期 &#39;a 表示两个参数的生命周期必须一致（存活的周期一样长） 函数返回一个引用，并且存活的时间和生命周期 &#39;a 一致 以上指定不改变任何传入的引用的生命周期，我们只是要求借用检查器（borrow checker）检查这些约束。 也就是说借用检查器要检查传入的两个引用的生命周期必须一致，返回的引用的存活周期不能超过传入的引用的存活周期  思考 当函数返回一个引用时，返回值的生命周期注解要和参数的其中之一相匹配，否则那么引用就是指向里函数内创建的值（不能返回）。 也就是说返回引用时，引用的声明周期必须和参数（其一）相关。如果想要返回函数内创建的值最好返回一个有所有权的值类型。</description>
      <content>&lt;h2 id=&#34;生命周期&#34;&gt;生命周期&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rust 中的每一个引用都有其生命周期：引用有效的作用域。&lt;/li&gt;
&lt;li&gt;大部分情况下生命周期都是隐式和自举的，在无法完成的情况下就需要我们通过生命周期泛型参数帮助编译器进行注解。&lt;/li&gt;
&lt;li&gt;生命周期的主要目标是避免悬空指针。&lt;/li&gt;
&lt;li&gt;生命周期泛型参数定义各个引用之间（参数和参数、参数和返回值）的关系，并不改变（延长）变量原本的生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// a reference
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// a reference with an explicit lifetime
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// a mutable reference with an explicit lifetime
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考以下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x.len() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; y.len() {
		x
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		y
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标注生命周期 &lt;code&gt;&#39;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数有两个引用参数，都使用生命周期 &lt;code&gt;&#39;a&lt;/code&gt; 表示两个参数的生命周期必须一致（存活的周期一样长）&lt;/li&gt;
&lt;li&gt;函数返回一个引用，并且存活的时间和生命周期 &lt;code&gt;&#39;a&lt;/code&gt; 一致&lt;/li&gt;
&lt;li&gt;以上指定不改变任何传入的引用的生命周期，我们只是要求借用检查器（borrow checker）检查这些约束。&lt;/li&gt;
&lt;li&gt;也就是说借用检查器要检查传入的两个引用的生命周期必须一致，返回的引用的存活周期不能超过传入的引用的存活周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;思考&#34;&gt;思考&lt;/h3&gt;
&lt;p&gt;当函数返回一个引用时，返回值的生命周期注解要和参数的其中之一相匹配，否则那么引用就是指向里函数内创建的值（不能返回）。
也就是说返回引用时，引用的声明周期必须和参数（其一）相关。如果想要返回函数内创建的值最好返回一个有所有权的值类型。&lt;/p&gt;
&lt;h3 id=&#34;结构体生命周期&#34;&gt;结构体生命周期&lt;/h3&gt;
&lt;p&gt;如果结构体需要持有引用，需要在定义结构体时给每一个引用都加上生命周期注解。&lt;/p&gt;
&lt;p&gt;如果结构体声明了生命周期参数，那么 &lt;code&gt;impl&lt;/code&gt; 同样也要声明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ImportantExcerpt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	part: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ImportantExcerpt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;announce_and_return_part&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, announcement: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
		println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attention please: {}&amp;#34;&lt;/span&gt;, announcement);
		self.part
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;生命周期省略-elision-规则&#34;&gt;生命周期省略（elision）规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函数参数的生命周期为输入生命周期&lt;/li&gt;
&lt;li&gt;函数返回值的生命周期为输出生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3 个规则用于 &lt;code&gt;fn&lt;/code&gt; 和 &lt;code&gt;impl&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数的每个引用参数都有一个生命周期： &lt;code&gt;fn foo&amp;lt;&#39;a, &#39;b&amp;gt;(x: &amp;amp;&#39;a i32, y: &amp;amp;&#39;b i32)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果只有一个引用参数，那么将输入的生命周期注解将应用到所有输出上&lt;/li&gt;
&lt;li&gt;如果有多个参数，但包含一个 &lt;code&gt;&amp;amp;self&lt;/code&gt; 或 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 那么 &lt;code&gt;self&lt;/code&gt; 的生命周期将分配到所有输出参数上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;扩展文章&#34;&gt;扩展文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20200325182450_rust_borrow_and_lifetimes/&#34;&gt;Rust Borrow and Lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>闭包</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180436-%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 29 Jun 2020 18:04:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180436-%E9%97%AD%E5%8C%85/</guid>
      <description>let add_one = | num | { num + 1 }; 由于闭包和当前上下文相关联，所以 Rust 可以进行类型推导，类型注解也就不是必要的，但是依然可以自己添加：
let add_one = | num: i32 | { num + 1 }; fn add_one_v1 (x: u32) -&amp;gt; u32 { x + 1 } let add_one_v2 = |x: u32| -&amp;gt; u32 { x + 1 }; let add_one_v3 = |x| { x + 1 }; let add_one_v4 = |x| x + 1 ; 使用 Fn 存储闭包类型
struct Cacher&amp;lt;T&amp;gt; where T: Fn(u32) -&amp;gt; u32 { calculation: T, value: Option&amp;lt;u32&amp;gt;, } impl Cacher&amp;lt;T&amp;gt; where T: Fn(u32) -&amp;gt; u32 { fn new(calculation: T) -&amp;gt; Cacher&amp;lt;T&amp;gt; { Cacher { calculation, value: None, } } fn value(&amp;amp;mut self, arg: u32) -&amp;gt; u32 { if let Some(value) = self.</description>
      <content>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {
  num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于闭包和当前上下文相关联，所以 Rust 可以进行类型推导，类型注解也就不是必要的，但是依然可以自己添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; num: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {
  num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_one_v1&lt;/span&gt;   (x: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; { x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add_one_v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; { x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add_one_v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;             { x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add_one_v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;               x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;Fn&lt;/code&gt; 存储闭包类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cacher&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T: Fn(&lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;
{
  calculation: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;,
  value: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Cacher&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T: Fn(&lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(calculation: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cacher&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	Cacher {
	  calculation,
	  value: None,
	}
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self, arg: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(value) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.value {
		value
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (self.calculation)(arg);
		self.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(value);
		value
	}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;闭包和函数的区别：闭包会捕捉当前环境，但是函数不会。&lt;/p&gt;
&lt;p&gt;三种不同 &lt;code&gt;Fn&lt;/code&gt; trait&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FnOnce&lt;/code&gt; 定义时获取引用环境的变量的所有权，并只能调用一次（不能多次获得环境变量的所有权）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fn&lt;/code&gt; 立即从所在环境借用值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FnMut&lt;/code&gt; 可以改变引用环境的引用值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要强制取得使用的所在环境变量的所有权，可以使用 &lt;code&gt;move&lt;/code&gt; 关键字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; euqal_to_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x;

  &lt;span style=&#34;color:#75715e&#34;&gt;// x has move to closure, so can&amp;#39;t use it anymore.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Traits</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180345-traits/</link>
      <pubDate>Mon, 29 Jun 2020 18:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180345-traits/</guid>
      <description>Traits  定义行为在多个类型中共享。 可以定义默认行为在实现者中间共享。 可以用于定义参数的行为，同样可以定义返回值行为，当用 trait 限定返回值类型时，不能同时（if/else）返回多种实现了该 trait 的类型。  pub trait Summary { fn summarize(&amp;amp;self) -&amp;gt; String; } pub struct Article{ pub title: String, } impl Summary for Article { fn summarize(&amp;amp;self) -&amp;gt; String { format!(&amp;#34;{}&amp;#34;, self.title) } } pub fn notify(item: impl Summary) { println!(&amp;#34;{}&amp;#34;, item.summarize()); } // trait bound 语法糖版本 pub fn notify&amp;lt;T: Summary&amp;gt;(item: T) { println!(&amp;#34;{}&amp;#34;, item.summarize()); } 定义参数行为  通过 impl ： fn notify(item: impl TraitName) ，用于简单明了的场景，比如一个参数 通过 trait bound ： fn notify&amp;lt;T: TraitName&amp;gt; (item: T) ，用于更复杂的场景，比如多个参数用于减少代码   可以通过 + 连接： fn notify(T: TraitName + Display) (item: T)</description>
      <content>&lt;h2 id=&#34;traits&#34;&gt;Traits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义行为在多个类型中共享。&lt;/li&gt;
&lt;li&gt;可以定义默认行为在实现者中间共享。&lt;/li&gt;
&lt;li&gt;可以用于定义参数的行为，同样可以定义返回值行为，当用 &lt;code&gt;trait&lt;/code&gt; 限定返回值类型时，不能同时（if/else）返回多种实现了该 &lt;code&gt;trait&lt;/code&gt; 的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; Summary {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;summarize&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) -&amp;gt; String;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; title: String,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Summary &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Article {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;summarize&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) -&amp;gt; String {
	format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, self.title)
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;(item: &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Summary) {
  println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, item.summarize());
}

&lt;span style=&#34;color:#75715e&#34;&gt;// trait bound 语法糖版本
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: &lt;span style=&#34;color:#a6e22e&#34;&gt;Summary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(item: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
  println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, item.summarize());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;定义参数行为&#34;&gt;定义参数行为&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;impl&lt;/code&gt; ： &lt;code&gt;fn notify(item: impl TraitName)&lt;/code&gt; ，用于简单明了的场景，比如一个参数&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;trait bound&lt;/code&gt; ： &lt;code&gt;fn notify&amp;lt;T: TraitName&amp;gt; (item: T)&lt;/code&gt; ，用于更复杂的场景，比如多个参数用于减少代码
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以通过 &lt;code&gt;+&lt;/code&gt; 连接： &lt;code&gt;fn notify(T: TraitName + Display) (item: T)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过 &lt;code&gt;where&lt;/code&gt; 子句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;some_function&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: &lt;span style=&#34;color:#a6e22e&#34;&gt;Display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Clone, U: Clone &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Debug&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, u: &lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {

&lt;span style=&#34;color:#75715e&#34;&gt;// vs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;some_function&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, U&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, u: &lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt; T: &lt;span style=&#34;color:#a6e22e&#34;&gt;Display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Clone,
	  U: Clone &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Debug
{
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trait-objects&#34;&gt;Trait Objects&lt;/h3&gt;
&lt;p&gt;对比泛型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型会在编译期展开：将确定的类型替换泛型参数展开成非泛型的实现。方法调用在编译期就能确定。 &amp;ndash; 静态分配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Trait Object&lt;/code&gt; 在编译期确定方法调用。 &amp;ndash; 动态分配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只能使用 &lt;code&gt;对象安全（object-safe）&lt;/code&gt; 的特性作为 &lt;code&gt;Trait Object&lt;/code&gt; 。对象安全的特性定义的所以方法必须满足如下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有方法返回类型不能是 &lt;code&gt;Self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有方法不包含泛型形参&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;黄金规则：我们必须将一些动态大小的类型的值放在指针后面，通过指针引用。&lt;/p&gt;
&lt;p&gt;每一个 &lt;code&gt;trait&lt;/code&gt; 都是一个动态大小的类型，如果要将 &lt;code&gt;trait&lt;/code&gt; 当作对象使用必须通过指针引用，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;dyn Trait&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Box&amp;lt;dyn Trait&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rc&amp;lt;dyn Trait&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Sized&lt;/code&gt; 特性用于标志类型大小是否编译期可知，并且在编译期自动为所有内容都实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
 &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 等于
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: Sized&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过 &lt;code&gt;?Sized&lt;/code&gt; 来避免这种默认行为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;Sized&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>错误处理</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180301-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 29 Jun 2020 18:03:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180301-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } ? 操作符 对比
use std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; { let f = File::open(&amp;#34;hello.txt&amp;#34;); let mut f = match f { Ok(file) =&amp;gt; file, Err(e) =&amp;gt; return Err(e), }; let mut s = String::new(); match f.read_to_string(&amp;amp;mut s) { Ok(_) =&amp;gt; Ok(s), Err(e) =&amp;gt; Err(e), } } 和
use std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; { let mut f = File::open(&amp;#34;hello.</description>
      <content>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
  Ok(T),
  Err(E),
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;操作符&#34;&gt;? 操作符&lt;/h2&gt;
&lt;p&gt;对比&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io::Read;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::fs::File;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_username_from_file&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, io::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.txt&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; f {
		Ok(file) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; file,
		Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e),
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; f.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s) {
		Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok(s),
		Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Err(e),
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io::Read;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::fs::File;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_username_from_file&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, io::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
	f.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	Ok(s)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io::Read;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::fs::File;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_username_from_file&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, io::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
	File::open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
	Ok(s)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 操作符用于返回 &lt;code&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt; 的表达式后面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 操作符只能用于返回 &lt;code&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt; 的函数内部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 操作符执行如下操作
&lt;ul&gt;
&lt;li&gt;如果表达式返回 &lt;code&gt;Ok&lt;/code&gt; 则返回 &lt;code&gt;Ok&lt;/code&gt; 内的值，并且继续执行代码&lt;/li&gt;
&lt;li&gt;如果表达式返回 &lt;code&gt;Err&lt;/code&gt; 则直接返回整个函数，并调用 &lt;code&gt;From&lt;/code&gt; trait 定义的 &lt;code&gt;from&lt;/code&gt; 函数将错误转换为返回定义的错误类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>if let</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180202-if_let/</link>
      <pubDate>Mon, 29 Jun 2020 18:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180202-if_let/</guid>
      <description>let some_u8_value = Some(0u8); // Without `if let` match some_u8_value { Some(3) =&amp;gt; println!(&amp;#34;three&amp;#34;); - =&amp;gt; (), } // With `if let` if let Some(3) = some_u8_value { println!(&amp;#34;three&amp;#34;); } </description>
      <content>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_u8_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// Without `if let`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; some_u8_value {
  Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (),
}

&lt;span style=&#34;color:#75715e&#34;&gt;// With `if let`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; some_u8_value {
  println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>模块化</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180233-%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Mon, 29 Jun 2020 18:02:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180233-%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>包、crate 和模块   Cargo.toml 表示一个包
 包含 0 个或 1 个库 crate（ src/lib.rs ） 包含 0 个或多个可执行 crate （ src/main.rs src/bin/*.rs ） 可以同时包含以上两种    模块化系统
  模块，一种组织代码和控制路径隐私的方法
 所有的项（函数，方法，结构体，枚举，模块和常量）默认私有 不允许使用私有的子模块的代码 可以使用父模块和同级模块的代码    路径，一种命名项的方法
  use , 一个将路径带到当前作用域的关键字
  pub ，一个将项公开的关键字
  as ，一个将带到当前作用域项重命名的关键字
  super , 一个相当于文件系统里 .. 作用的关键字
  * ，通配符用于使用制定路径下的所有项
  pub use 用于重新暴露可以访问的模块
  模块可以放在一个文件，也可以按照一定规则拆分到不同文件下</description>
      <content>&lt;h2 id=&#34;包-crate-和模块&#34;&gt;包、crate 和模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cargo.toml 表示一个包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含 0 个或 1 个库 crate（ &lt;code&gt;src/lib.rs&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;包含 0 个或多个可执行 crate （ &lt;code&gt;src/main.rs&lt;/code&gt; &lt;code&gt;src/bin/*.rs&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;可以同时包含以上两种&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模块化系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块，一种组织代码和控制路径隐私的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的项（函数，方法，结构体，枚举，模块和常量）默认私有&lt;/li&gt;
&lt;li&gt;不允许使用私有的子模块的代码&lt;/li&gt;
&lt;li&gt;可以使用父模块和同级模块的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路径，一种命名项的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;use&lt;/code&gt; , 一个将路径带到当前作用域的关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pub&lt;/code&gt; ，一个将项公开的关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;as&lt;/code&gt; ，一个将带到当前作用域项重命名的关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;super&lt;/code&gt; , 一个相当于文件系统里 &lt;code&gt;..&lt;/code&gt; 作用的关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; ，通配符用于使用制定路径下的所有项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pub use&lt;/code&gt; 用于重新暴露可以访问的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模块可以放在一个文件，也可以按照一定规则拆分到不同文件下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用同一个 &lt;code&gt;use&lt;/code&gt; 清理嵌套的 &lt;code&gt;use&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::cmp::Ordering;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{cmp::Ordering, io};

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io::Write;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{self, Write};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; sound {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; instrument {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; woodwind {
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clarinet&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;::breathe_in();
	  }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;breathe_in&lt;/span&gt;() {

	}
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; voice {

  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

   &lt;span style=&#34;color:#75715e&#34;&gt;// 绝对路径以 crate 开始，crate 表示根
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;::sound::instrument::woodwind::clarinet();

   &lt;span style=&#34;color:#75715e&#34;&gt;// 相对路径
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   sound::instrument::woodwind::clarinet();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面例子 &lt;code&gt;sound&lt;/code&gt; 模块并非公开，但是由于 &lt;code&gt;main&lt;/code&gt; 和 &lt;code&gt;sound&lt;/code&gt; 定义在同一模块下，所以允许在 &lt;code&gt;main&lt;/code&gt; 中引用 &lt;code&gt;sound&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>模式匹配</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180131-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 29 Jun 2020 18:01:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180131-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>#[derive(Debug)] enum UsState { Alabama, Alaska, } enum Coin { Penny, Nickel, Dime, Quarter(UsState), } fn value_cents(coin: Coin) -&amp;gt; u8 { match coin { Coin::Peny =&amp;gt; { println!(&amp;#34;Lucy penny!&amp;#34;); 1 }, Coin::Nickel =&amp;gt; 5, Coin::Dime =&amp;gt; 10, Coin::Quarter(state) =&amp;gt; { println!(&amp;#34;State quarter from {:?}!&amp;#34;, state); 25 }, } } // Option fn plus_one(x: Option&amp;lt;i32&amp;gt;) -&amp;gt; Option&amp;lt;i32&amp;gt; { match x { None =&amp;gt; None, Some(i) =&amp;gt; Some(i + 1), } } let five = Some(5); let six = plus_one(five); let none = plus_one(None); 编译器会检查 match 覆盖所有情况， _ 可以用于所有未覆盖的情况。</description>
      <content>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UsState&lt;/span&gt; {
  Alabama,
  Alaska,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Coin&lt;/span&gt; {
  Penny,
  Nickel,
  Dime,
  Quarter(UsState),
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value_cents&lt;/span&gt;(coin: &lt;span style=&#34;color:#a6e22e&#34;&gt;Coin&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt; {

  &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; coin {
	Coin::Peny &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
	  println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lucy penny!&amp;#34;&lt;/span&gt;);
	  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	},
	Coin::Nickel &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
	Coin::Dime &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
	Coin::Quarter(state) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
	  println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State quarter from {:?}!&amp;#34;&lt;/span&gt;, state);
	  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
	},
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Option
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plus_one&lt;/span&gt;(x: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; x {
	None &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; None,
	Some(i) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Some(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; five &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; six &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plus_one(five);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; none &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plus_one(None);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译器会检查 &lt;code&gt;match&lt;/code&gt; 覆盖所有情况， &lt;code&gt;_&lt;/code&gt; 可以用于所有未覆盖的情况。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>枚举</title>
      <link>https://www.linuxzen.com/notes/notes/20200629180041-%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Mon, 29 Jun 2020 18:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629180041-%E6%9E%9A%E4%B8%BE/</guid>
      <description>多种类型的集合体，一个类型的变量可以存储多种类型的值，枚举的每一项都是该枚举类型的变体：
enum IpAddrKind { V4, V6, } fn main() { route(IpAddrKind::V4); route(IpAddrkind::V6); } fn route(kind: IpAddrKind) { // ... }   枚举的每一个变体都可以直接包含数据，并且每一个变体可以包含不同的数据类型和不同的数量，甚至可以直接放结构体（也可以是匿名的）。
struct Ipv4Addr { // --snip-- } enum IpAddr { V4(Ipv4Addr), V6(String), } let home = IpAddr::V4(127, 0, 0, 1); let loopback = IpAddr::V6(String::from(&amp;#34;::1&amp;#34;)); struct Message { Quit, Move{ x: i32, y: i32 }, // anonymous struct  Write(String), ChangeColor(i32, i32, i32), // three i32 values }   枚举也可以通过 impl 实现方法</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多种类型的集合体，一个类型的变量可以存储多种类型的值，枚举的每一项都是该枚举类型的变体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IpAddrKind&lt;/span&gt; {
  V4,
  V6,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  route(IpAddrKind::V4);
  route(IpAddrkind::V6);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;(kind: &lt;span style=&#34;color:#a6e22e&#34;&gt;IpAddrKind&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;枚举的每一个变体都可以直接包含数据，并且每一个变体可以包含不同的数据类型和不同的数量，甚至可以直接放结构体（也可以是匿名的）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ipv4Addr&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IpAddr&lt;/span&gt; {
  V4(Ipv4Addr),
  V6(String),
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; home &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IpAddr::V4(&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; loopback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IpAddr::V6(String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; {
  Quit,
  Move{ x: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; },       &lt;span style=&#34;color:#75715e&#34;&gt;// anonymous struct
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Write(String),
  ChangeColor(&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;),   &lt;span style=&#34;color:#75715e&#34;&gt;// three i32 values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;枚举也可以通过 &lt;code&gt;impl&lt;/code&gt; 实现方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Message {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) {
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; self {
		&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	  }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Message::Write(String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;));
m.call();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
  Some(T),
  None,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 &lt;code&gt;Option&lt;/code&gt; 很重要，所以已经在 &lt;code&gt;prelude&lt;/code&gt; 包含，也就是说无需使用 &lt;code&gt;Option::&lt;/code&gt; 前缀就可以直接使用 &lt;code&gt;Some&lt;/code&gt; 和 &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_number: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_number: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;::Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_number: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_number: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Option::None;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>结构体</title>
      <link>https://www.linuxzen.com/notes/notes/20200629175956-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 29 Jun 2020 17:59:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629175956-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>结构体 元组结构体（tuple struct） 用于命名元组并和其他元组进行区分：
struct Color(i32, i32, i32); struct Point(i32, i32, i32); let black = Color(0, 0, 0); let origin = Point(0, 0, 0); 由于定义了元组结构体所有 black 和 origin 是两个不同的类型。
没有字段的结构体：类单元（Unit-Like）结构体 没有任何字段的结构体和单元类型 () 类似，用于实现一些特性（trait）但是没有任何数据。
方法语法   self 占有所有权
  &amp;amp;self 不可变借用
  &amp;amp;mut self 可变借用
  自动引用和解引用
在 Rust 中进行方法调用，如 object.something ，Rust 会自动添加 &amp;amp; &amp;amp;mut 或者 * , 用以自动匹配方法签名。以下是等价的：
  p1.distance(&amp;amp;p2); (&amp;amp;p1).distance(&amp;amp;p2); 方法如果不声明 self 行参则是一个关联方法（静态方法），通过 :: 调用</description>
      <content>&lt;h2 id=&#34;结构体&#34;&gt;结构体&lt;/h2&gt;
&lt;h3 id=&#34;元组结构体-tuple-struct&#34;&gt;元组结构体（tuple struct）&lt;/h3&gt;
&lt;p&gt;用于命名元组并和其他元组进行区分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Color&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; black &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Color(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于定义了元组结构体所有 &lt;code&gt;black&lt;/code&gt; 和 &lt;code&gt;origin&lt;/code&gt; 是两个不同的类型。&lt;/p&gt;
&lt;h3 id=&#34;没有字段的结构体-类单元-unit-like-结构体&#34;&gt;没有字段的结构体：类单元（Unit-Like）结构体&lt;/h3&gt;
&lt;p&gt;没有任何字段的结构体和单元类型 &lt;code&gt;()&lt;/code&gt; 类似，用于实现一些特性（trait）但是没有任何数据。&lt;/p&gt;
&lt;h3 id=&#34;方法语法&#34;&gt;方法语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; 占有所有权&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;self&lt;/code&gt; 不可变借用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;mut self&lt;/code&gt; 可变借用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动引用和解引用&lt;/p&gt;
&lt;p&gt;在 Rust 中进行方法调用，如 &lt;code&gt;object.something&lt;/code&gt; ，Rust 会自动添加 &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;&amp;amp;mut&lt;/code&gt; 或者 &lt;code&gt;*&lt;/code&gt; , 用以自动匹配方法签名。以下是等价的：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;p1.distance(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p2);
(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p1).distance(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法如果不声明 &lt;code&gt;self&lt;/code&gt; 行参则是一个关联方法（静态方法），通过 &lt;code&gt;::&lt;/code&gt; 调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt; {
  width: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;,
  height: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Rectangle {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt;(size: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt; {
	Rectangle{ width: &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, height: &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Rectangle::square(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一个结构体可以有多个 &lt;code&gt;impl&lt;/code&gt; 块。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>引用和借用</title>
      <link>https://www.linuxzen.com/notes/notes/20200629174943-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/</link>
      <pubDate>Mon, 29 Jun 2020 17:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629174943-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/</guid>
      <description>类型前置 &amp;amp; 表示引用，引用允许变量指向一个值但是不发生所有权转移。 引用不占有所有权，所以变量超出作用域之后不会触发 drop 调用。 引用作为函数形参被成为借用（borrowing）  可变引用   针对特定作用域下的特定数据只能创建一个可变引用。如果要创建多个可变引用可以通过大括号创建新的作用域
let mut s = String::from(&amp;#34;hello&amp;#34;); { let s1 = mut &amp;amp;s; } let s2 = mut &amp;amp;s;   当已经存在不可变引用时，则无法再创建可变引用，下面代码无法编译通过
let mut s = String::from(&amp;#34;hello&amp;#34;); let s1 = &amp;amp;s; // OK let s2 = &amp;amp;s; // OK let s3 = mut &amp;amp;s; // BIG PROBLEM   悬空引用 以下代码是不允许的，无法编译通过
fn main() { let s = dangling_string(); } fn dangling_string() -&amp;gt; &amp;amp;String { let s = String::from(&amp;#34;hello&amp;#34;); &amp;amp;s } 上面代码 s 在函数内部分配，那么在函数执行完成后 s 将被释放，所以返回 s 的引用会造成悬空引用。</description>
      <content>&lt;ul&gt;
&lt;li&gt;类型前置 &amp;amp; 表示引用，引用允许变量指向一个值但是不发生所有权转移。&lt;/li&gt;
&lt;li&gt;引用不占有所有权，所以变量超出作用域之后不会触发 &lt;code&gt;drop&lt;/code&gt; 调用。&lt;/li&gt;
&lt;li&gt;引用作为函数形参被成为借用（borrowing）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可变引用&#34;&gt;可变引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;针对特定作用域下的特定数据只能创建一个可变引用。如果要创建多个可变引用可以通过大括号创建新的作用域&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当已经存在不可变引用时，则无法再创建可变引用，下面代码无法编译通过&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s;   &lt;span style=&#34;color:#75715e&#34;&gt;// OK
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s;   &lt;span style=&#34;color:#75715e&#34;&gt;// OK
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s; &lt;span style=&#34;color:#75715e&#34;&gt;// BIG PROBLEM
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;悬空引用&#34;&gt;悬空引用&lt;/h2&gt;
&lt;p&gt;以下代码是不允许的，无法编译通过&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dangling_string();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dangling_string&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;String {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码 &lt;code&gt;s&lt;/code&gt; 在函数内部分配，那么在函数执行完成后 s 将被释放，所以返回 s 的引用会造成悬空引用。&lt;/p&gt;
&lt;h2 id=&#34;引用的规则&#34;&gt;引用的规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任何时间针对一个变量，只能有多个不可变引用或者一个可变引用&lt;/li&gt;
&lt;li&gt;引用必须一直有效（生命周期）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分片&#34;&gt;分片&lt;/h2&gt;
&lt;p&gt;分片数据类型没有所有权。分片引用一片连续的序列的集合。&lt;/p&gt;
&lt;h2 id=&#34;字符串分片&#34;&gt;字符串分片&lt;/h2&gt;
&lt;p&gt;字符串分片是一个引用指向 &lt;code&gt;String&lt;/code&gt; 的一部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; hello &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; world &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字符串字面量（&amp;amp;str）是个指向二进制程序一块区域的字符串分片，所以函数声明字符串参数使用 &lt;code&gt;&amp;amp;str&lt;/code&gt; 会更通用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_word(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s[&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;]);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; w1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_word(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;sl[&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; w2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_word(sl);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first_word&lt;/span&gt;(s: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s[&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他分片&#34;&gt;其他分片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a[&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;相关博文&#34;&gt;相关博文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629181735-rust_means_never_having_to_close_a_socket/&#34;&gt;Rust Means Never Having to Close a Socket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>所有权</title>
      <link>https://www.linuxzen.com/notes/notes/20200629174911-%E6%89%80%E6%9C%89%E6%9D%83/</link>
      <pubDate>Mon, 29 Jun 2020 17:49:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629174911-%E6%89%80%E6%9C%89%E6%9D%83/</guid>
      <description>规则  每个值都有一个变量叫做所有者（owner） 同一时间只能有一个所有者 当所有者超出作用域则值被销毁  变量作用域  作用域是一个变量有效的范围 当变量超出作用域范围自动调用对象的 drop 方法进行内存归还操作  变量相互作用：所有权转移（Move） 对于所有在栈上分配的值（固定大小），在进行赋值操作时都对值进行拷贝：
let x = 5; ley y = x; // copy 5 to y 但是对于在堆上分配的，变量保存的是指向内存的指针，所以在赋值时拷贝的也是指向该内存的指针：
let s1 = String::from(&amp;#34;hello&amp;#34;); let s2 = s1; 为了保证内存安全，防止 s1 和 s2 超出作用域范围调用两次 drop 造成重复的内存回收，Rust 会让 s1 不再有效，来避免对 s1 进行回收。继续使用 s1 会导致编译错误。这种情况叫做所有权转移（move）。
变量相互作用：克隆（Clone） 克隆用于深度拷贝变量：
let s1 = String::from(&amp;#34;hello&amp;#34;); let s2 = s1.clone(); println!(s1); 变量项目作用：拷贝（Copy） 如果数据类型的大小在编译期能够确定都将存储在栈上，这种情况下能够进行快速的拷贝。
 Copy 特性（trait）注解用于将值存贮在栈栈上 Copy 特性注解不能和 Drop 特性注解混用 Copy 特性注解使用规则如下  所有的数字类型 所有的布尔型 所有的浮点型 字符类型 所有元素都实现了 Copy 特性注解的元祖    所有权和函数 函数传递实参的规则和变量类似，传递变量到一个函数将为发生所有权转移或者拷贝。</description>
      <content>&lt;h2 id=&#34;规则&#34;&gt;规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个值都有一个变量叫做所有者（owner）&lt;/li&gt;
&lt;li&gt;同一时间只能有一个所有者&lt;/li&gt;
&lt;li&gt;当所有者超出作用域则值被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量作用域&#34;&gt;变量作用域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作用域是一个变量有效的范围&lt;/li&gt;
&lt;li&gt;当变量超出作用域范围自动调用对象的 &lt;code&gt;drop&lt;/code&gt; 方法进行内存归还操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量相互作用-所有权转移-move&#34;&gt;变量相互作用：所有权转移（Move）&lt;/h2&gt;
&lt;p&gt;对于所有在栈上分配的值（固定大小），在进行赋值操作时都对值进行拷贝：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
ley y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;  &lt;span style=&#34;color:#75715e&#34;&gt;// copy 5 to y
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是对于在堆上分配的，变量保存的是指向内存的指针，所以在赋值时拷贝的也是指向该内存的指针：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了保证内存安全，防止 &lt;code&gt;s1&lt;/code&gt; 和 &lt;code&gt;s2&lt;/code&gt; 超出作用域范围调用两次 &lt;code&gt;drop&lt;/code&gt; 造成重复的内存回收，Rust 会让 &lt;code&gt;s1&lt;/code&gt; 不再有效，来避免对 &lt;code&gt;s1&lt;/code&gt; 进行回收。继续使用 &lt;code&gt;s1&lt;/code&gt; 会导致编译错误。这种情况叫做所有权转移（move）。&lt;/p&gt;
&lt;h2 id=&#34;变量相互作用-克隆-clone&#34;&gt;变量相互作用：克隆（Clone）&lt;/h2&gt;
&lt;p&gt;克隆用于深度拷贝变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1.clone();
println!(s1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;变量项目作用-拷贝-copy&#34;&gt;变量项目作用：拷贝（Copy）&lt;/h2&gt;
&lt;p&gt;如果数据类型的大小在编译期能够确定都将存储在栈上，这种情况下能够进行快速的拷贝。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Copy&lt;/code&gt; 特性（trait）注解用于将值存贮在栈栈上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Copy&lt;/code&gt; 特性注解不能和 &lt;code&gt;Drop&lt;/code&gt; 特性注解混用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Copy&lt;/code&gt; 特性注解使用规则如下
&lt;ul&gt;
&lt;li&gt;所有的数字类型&lt;/li&gt;
&lt;li&gt;所有的布尔型&lt;/li&gt;
&lt;li&gt;所有的浮点型&lt;/li&gt;
&lt;li&gt;字符类型&lt;/li&gt;
&lt;li&gt;所有元素都实现了 &lt;code&gt;Copy&lt;/code&gt; 特性注解的元祖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;所有权和函数&#34;&gt;所有权和函数&lt;/h2&gt;
&lt;p&gt;函数传递实参的规则和变量类似，传递变量到一个函数将为发生所有权转移或者拷贝。&lt;/p&gt;
&lt;h2 id=&#34;返回值和作用域&#34;&gt;返回值和作用域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;返回值可以转移所有权&lt;/li&gt;
&lt;li&gt;将一个值赋给其他变量会产生所有权转移&lt;/li&gt;
&lt;li&gt;一个包含堆分配的变量超出作用域将会被 &lt;code&gt;drop&lt;/code&gt; 清理，除非所有权被转移到其他变量。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>语句和表达式</title>
      <link>https://www.linuxzen.com/notes/notes/20200629174820-%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 29 Jun 2020 17:48:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200629174820-%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Rust 区分语句和表达式， Rust 是基于表达式的语言：
  语句：执行动作并且不返回值
 使用 let 声明变量是语句，所以 let 语句不返回值，也就不能像 Python 那样将 let 语句赋值给其他变量 函数声明也是语句    表达式：计算并返回值，不以分号（;）结尾
  5 + 6 是一个表达式，计算并返回值 11
  表达式可以作为语句的一部分
  函数调用是表达式
  宏调用是表达式
  用 {} 创建的块也是表达式
let x = { let y = 6; y + 5 }   if loop while for 是表达式
    在表达式后面增加分号（;）可以将一个表达式转为语句。</description>
      <content>&lt;p&gt;Rust 区分语句和表达式， Rust 是基于表达式的语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语句：执行动作并且不返回值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 let 声明变量是语句，所以 let 语句不返回值，也就不能像 Python 那样将 let 语句赋值给其他变量&lt;/li&gt;
&lt;li&gt;函数声明也是语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达式：计算并返回值，不以分号（;）结尾&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5 + 6&lt;/code&gt; 是一个表达式，计算并返回值  &lt;code&gt;11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达式可以作为语句的一部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数调用是表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宏调用是表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;code&gt;{}&lt;/code&gt; 创建的块也是表达式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
	y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; &lt;code&gt;loop&lt;/code&gt; &lt;code&gt;while&lt;/code&gt; &lt;code&gt;for&lt;/code&gt; 是表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表达式后面增加分号（;）可以将一个表达式转为语句。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Member initialize</title>
      <link>https://www.linuxzen.com/notes/notes/20200628183417-member_initialize/</link>
      <pubDate>Sun, 28 Jun 2020 18:34:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628183417-member_initialize/</guid>
      <description> tags: C/C++  如果类成员属性是值类型或者引用类型则需要改对象有无参数构造方法，否则类无法实例化， 这是因为这类成员属性在构造函数调用之前就需要进行初始化。
下面代码无法通过编译
class Foo { public: Foo(int n) : n {n} { }; ~Foo() { }; private: int n; }; class Bar { public: Bar(int n) { this-&amp;gt;foo = Foo(n); }; ~Bar(); private: Foo &amp;amp; foo; }; </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果类成员属性是值类型或者引用类型则需要改对象有无参数构造方法，否则类无法实例化，
这是因为这类成员属性在构造函数调用之前就需要进行初始化。&lt;/p&gt;
&lt;p&gt;下面代码无法通过编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  Foo(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; n {n}
  {
  };
  &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Foo() { };

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  Bar(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
  {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo(n);
  };
  &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Bar();
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  Foo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; foo;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Iterator class</title>
      <link>https://www.linuxzen.com/notes/notes/20200628183227-iterator_class/</link>
      <pubDate>Sun, 28 Jun 2020 18:32:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628183227-iterator_class/</guid>
      <description> tags: C/C++  容器类实现 begin 和 end 方法返回 Iterator class 的实例， Iterator class 通过实现友元类可以直接访问容器类的私有属性， Iterator class 通过重载 ++/==/* 等操作符实现对容器类的访问并通过自己的私有属性记录当前位置。
Iterator class 重载的操作符：
 ++ 移动容器元素位置 == 判断两个容器位置是否相等（容器是否一个，位置是否一个） * 解引用返回当前位置指向的容器的值  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器类实现 &lt;code&gt;begin&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 方法返回 &lt;code&gt;Iterator class&lt;/code&gt; 的实例， &lt;code&gt;Iterator class&lt;/code&gt; 通过实现友元类可以直接访问容器类的私有属性，
&lt;code&gt;Iterator class&lt;/code&gt; 通过重载 &lt;code&gt;++/==/*&lt;/code&gt; 等操作符实现对容器类的访问并通过自己的私有属性记录当前位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Iterator class&lt;/code&gt; 重载的操作符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt; 移动容器元素位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; 判断两个容器位置是否相等（容器是否一个，位置是否一个）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 解引用返回当前位置指向的容器的值&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>SSE/AVX/AVX2/AVX512</title>
      <link>https://www.linuxzen.com/notes/notes/20200628182211-avx512/</link>
      <pubDate>Sun, 28 Jun 2020 18:22:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628182211-avx512/</guid>
      <description> tags: Computer Systems,C/C++,优化,High Performance  部分 intel CPU 支持向量指令集同时进行多路整数和浮点数计算，以此来进行对相关算法进行优化，这里整理相关链接：
 编译器支持相关封装避免编写汇编代码，官方指南：Intrinsics Guide 基于 sse_mathfun 的 avx_mathfun 封装相关宏和函数 mp3 库 lame 中的 SSE 加速实现 libmp3lame/vector/xmm_quantize_sub.c  AVX512 VNNI  https://en.wikichip.org/wiki/x86/avx512%5Fvnni  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200628182150-%E4%BC%98%E5%8C%96/&#34;&gt;优化&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/projects/20220110112848-high_performance/&#34;&gt;High Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部分 intel CPU 支持向量指令集同时进行多路整数和浮点数计算，以此来进行对相关算法进行优化，这里整理相关链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器支持相关封装避免编写汇编代码，官方指南：&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/#&#34;&gt;Intrinsics Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于 sse_mathfun 的 &lt;a href=&#34;https://github.com/reyoung/avx%5Fmathfun&#34;&gt;avx_mathfun&lt;/a&gt; 封装相关宏和函数&lt;/li&gt;
&lt;li&gt;mp3 库 lame 中的 SSE 加速实现 &lt;a href=&#34;https://github.com/zlargon/lame/blob/master/libmp3lame/vector/xmm%5Fquantize%5Fsub.c&#34;&gt;libmp3lame/vector/xmm_quantize_sub.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;avx512-vnni&#34;&gt;AVX512 VNNI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikichip.org/wiki/x86/avx512%5Fvnni&#34;&gt;https://en.wikichip.org/wiki/x86/avx512%5Fvnni&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>优化</title>
      <link>https://www.linuxzen.com/notes/notes/20200628182150-%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 28 Jun 2020 18:21:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628182150-%E4%BC%98%E5%8C%96/</guid>
      <description> AVX512  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200628182211-avx512/&#34;&gt;AVX512&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Surgical Reading: How to Read 12 Books at Once</title>
      <link>https://www.linuxzen.com/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/</link>
      <pubDate>Sun, 28 Jun 2020 13:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/</guid>
      <description>tags: Translate,Incomplete  原文链接：https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books
手术阅读法：如何同时阅读 12 本书  译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。
 当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。
但是我这样阅读并不是为了炫耀 &amp;ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。
这是一个我开发一个叫做 手术阅读法（surgical reading） 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。 这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。
这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。 阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。
其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。 这使我对当前感兴趣的的任何主题都有更细微的了解。
最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。
当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。
我是谁（Who I Am） 我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。 我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人， 包括我于 2018 年出售的一家名为 Hickory 的公司。
我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。 这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。
手术阅读法就是设计用来帮助我这么做的。
所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。
让我们开始吧！
把书当作其自身的地图（Use the Book Itself as a Map） 以下是一份我如何阅读一本书的步骤分解：
 了解一本书 通过封面评判这本书 索引（index）包含了一切 把目录（TOC）当作骨架 通过前言（preface）进行预览  此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。
下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。
了解一本书（Approaching a Book ） 当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。 也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231172037-incomplete/&#34;&gt;Incomplete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books&#34;&gt;https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;手术阅读法-如何同时阅读-12-本书&#34;&gt;手术阅读法：如何同时阅读 12 本书&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。&lt;/p&gt;
&lt;p&gt;但是我这样阅读并不是为了炫耀 &amp;ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。&lt;/p&gt;
&lt;p&gt;这是一个我开发一个叫做 &lt;strong&gt;&lt;strong&gt;手术阅读法（surgical reading）&lt;/strong&gt;&lt;/strong&gt; 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。
这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。&lt;/p&gt;
&lt;p&gt;这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。
阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。&lt;/p&gt;
&lt;p&gt;其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。
这使我对当前感兴趣的的任何主题都有更细微的了解。&lt;/p&gt;
&lt;p&gt;最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。&lt;/p&gt;
&lt;p&gt;当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。&lt;/p&gt;
&lt;h3 id=&#34;我是谁-who-i-am&#34;&gt;我是谁（Who I Am）&lt;/h3&gt;
&lt;p&gt;我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。
我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人，
包括我于 2018 年出售的一家名为 Hickory 的公司。&lt;/p&gt;
&lt;p&gt;我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。
这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。&lt;/p&gt;
&lt;p&gt;手术阅读法就是设计用来帮助我这么做的。&lt;/p&gt;
&lt;p&gt;所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。&lt;/p&gt;
&lt;p&gt;让我们开始吧！&lt;/p&gt;
&lt;h3 id=&#34;把书当作其自身的地图-use-the-book-itself-as-a-map&#34;&gt;把书当作其自身的地图（Use the Book Itself as a Map）&lt;/h3&gt;
&lt;p&gt;以下是一份我如何阅读一本书的步骤分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解一本书&lt;/li&gt;
&lt;li&gt;通过封面评判这本书&lt;/li&gt;
&lt;li&gt;索引（index）包含了一切&lt;/li&gt;
&lt;li&gt;把目录（TOC）当作骨架&lt;/li&gt;
&lt;li&gt;通过前言（preface）进行预览&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。&lt;/p&gt;
&lt;p&gt;下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。&lt;/p&gt;
&lt;h4 id=&#34;了解一本书-approaching-a-book&#34;&gt;了解一本书（Approaching a Book ）&lt;/h4&gt;
&lt;p&gt;当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。
也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。&lt;/p&gt;
&lt;p&gt;同样，我通常对从头到尾阅读一本书籍不感兴趣，所以我需要删除我需要的信息，当然需要先找找它。我想要的是一本关于本书内容的地图（无论是思维上的还是书面上的）。
你可以使用大脑记忆、记事本、Google Doc 或某些精美的笔记记录系统作为记录机制 &amp;ndash; 根据你自己的喜好就行。&lt;/p&gt;
&lt;h4 id=&#34;通过书籍的封面进行品评-judge-a-book-by-its-cover&#34;&gt;通过书籍的封面进行品评（Judge a Book by its Cover）&lt;/h4&gt;
&lt;p&gt;首先，给标题和副标题一些想法。 我知道这听起来很平凡，但是作者花了很多时间思考这些问题，通常它们代表一种观点。&lt;/p&gt;
&lt;p&gt;比如《美国简史》和《美国人历史》，作者强调“人”而不是“简”是什么意思？再比如&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://www.linuxzen.com/notes/topics/20200628133616-python/</link>
      <pubDate>Sun, 28 Jun 2020 13:36:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200628133616-python/</guid>
      <description>Python vendor package 之前一直在找 Python 类似 go mod vendor 部署的解决方案，今天在看 PySpark 的时候找到了，主要现存两种解决方案：
 Conda 生态可以使用 conda-pack 原生 CPython 生态可以依托 venv-pack pex  对比
   时间 项目 活跃开发 贡献人数 提交数量     2021-08-28 venv-pack 否 2 30    conda-pack 是 15 246    pex 是 87 940    IPython EIN import numpy, math, matplotlib.pyplot as plt %matplotlib inline x = numpy.linspace(0, 2 * math.</description>
      <content>&lt;h2 id=&#34;python-vendor-package&#34;&gt;Python vendor package&lt;/h2&gt;
&lt;p&gt;之前一直在找 Python 类似 &lt;code&gt;go mod vendor&lt;/code&gt; 部署的解决方案，今天在看 PySpark 的时候找到了，主要现存两种解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conda 生态可以使用 &lt;a href=&#34;https://conda.github.io/conda-pack/spark.html&#34;&gt;conda-pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原生 CPython 生态可以依托 &lt;a href=&#34;https://jcristharif.com/venv-pack/index.html&#34;&gt;venv-pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pantsbuild/pex&#34;&gt;pex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;活跃开发&lt;/th&gt;
&lt;th&gt;贡献人数&lt;/th&gt;
&lt;th&gt;提交数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021-08-28&lt;/td&gt;
&lt;td&gt;venv-pack&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;conda-pack&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;246&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pex&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;87&lt;/td&gt;
&lt;td&gt;940&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ipython&#34;&gt;IPython&lt;/h2&gt;
&lt;h3 id=&#34;ein&#34;&gt;EIN&lt;/h3&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ein-python&#34; data-lang=&#34;ein-python&#34;&gt;import numpy, math, matplotlib.pyplot as plt
%matplotlib inline
x = numpy.linspace(0, 2 * math.pi)
plt.plot(x, numpy.sin(x))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;python-dark-magic&#34;&gt;Python Dark Magic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tonybaloney.github.io/posts/extending-python-with-assembly.html&#34;&gt;Writing Python Extensions in Assembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对应版本-manylinux2014-存在但是装不上&#34;&gt;对应版本 manylinux2014 存在但是装不上&lt;/h2&gt;
&lt;p&gt;参见：&lt;a href=&#34;https://www.python.org/dev/peps/pep-0599/&#34;&gt;PEP 599 &amp;ndash; The manylinux2014 Platform Tag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CentOS 需要满足 glibc 版本为 2.17，参见&lt;a href=&#34;https://www.python.org/dev/peps/pep-0599/#toc-entry-7&#34;&gt; Platform Detection for Installers&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://www.linuxzen.com/notes/notes/20200628123035-cmake/</link>
      <pubDate>Sun, 28 Jun 2020 12:30:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628123035-cmake/</guid>
      <description>  tags: C/C++,Programming Tools
  安装的头文件必须包含在目标的源代码中，否则构建如 iOS 的 Framework 时无法正确包含头文件
ADD_LIBRARY(test test.h)  CMake 生成 C++ LSP 配置文件
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320171108_c/&#34;&gt;C/C++&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20220102074329-programming_tools/&#34;&gt;Programming Tools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装的头文件必须包含在目标的源代码中，否则构建如 iOS 的 Framework 时无法正确包含头文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;ADD_LIBRARY(&lt;span style=&#34;color:#e6db74&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;test.h&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMake 生成 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210114175011-lsp/&#34;&gt;C++ LSP&lt;/a&gt; 配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Build System</title>
      <link>https://www.linuxzen.com/notes/notes/20200628122958-build_system/</link>
      <pubDate>Sun, 28 Jun 2020 12:29:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200628122958-build_system/</guid>
      <description> CMake  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200628123035-cmake/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Emacs Tmux 256 colors</title>
      <link>https://www.linuxzen.com/notes/notes/20200603103943_tmux_256_colors/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200603103943_tmux_256_colors/</guid>
      <description>tags: Emacs  生成 terminfo
$ cat &amp;lt;&amp;lt;EOF &amp;gt; terminfo-24bits.src # Use semicolon separators. xterm-24bits|xterm with 24-bit direct color mode, use=xterm-256color, Tc, setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&amp;amp;%d;%p1%{255}%&amp;amp;%dm, setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&amp;amp;%d;%p1%{255}%&amp;amp;%dm,]] EOF $ tic -x -o ~/.terminfo terminfo-24bits.src 通过 xterm-24bits 启动 Emacs
$ env TERM=xterm-24bits emacs Emacs 通过 list-color-display 查看效果。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成 terminfo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt; terminfo-24bits.src
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Use semicolon separators.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xterm-24bits|xterm with 24-bit direct color mode,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		use=xterm-256color,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		Tc,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&amp;amp;%d;%p1%{255}%&amp;amp;%dm,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;		setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&amp;amp;%d;%p1%{255}%&amp;amp;%dm,]]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

$ tic -x -o ~/.terminfo terminfo-24bits.src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;xterm-24bits&lt;/code&gt; 启动 Emacs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ env TERM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xterm-24bits emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Emacs  通过 &lt;code&gt;list-color-display&lt;/code&gt; 查看效果。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Rust Trait Object</title>
      <link>https://www.linuxzen.com/notes/notes/20200329204833_rust_trait_object/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200329204833_rust_trait_object/</guid>
      <description> tags: Rust  动态大小类型（DST）和 Sized 特性 str （非 &amp;amp;str ）就是一个 DST，我们不能在运行时得知 str 的大小。 &amp;amp;str 是一个指针类型，大小是已知的。
DST：拥有额外的元数据存储动态大小的信息。
每一个特性都是一个是个 DST，使用 Trait Object 必须是像 &amp;amp;dyn Trait 和 Box&amp;lt;dyn Trait&amp;gt; （或 Rc&amp;lt;dyn Trait&amp;gt; ）的指针类型。
dyn 关键字 dyn 关键字用于将 Trait Object 指针和普通的结构体指针区分开来。
Sized vs ?Sized Rust 有一个特定的特性叫做 Sized 去判断一个类型的大小是否是编译期可知的，并且自动在编译期为所有已知大小的类型实现， 同时 Rust 隐式的为泛型函数的类型参数加上 Sized 的限制（bound），下面这样的泛型函数：
fn generic&amp;lt;T&amp;gt;(t: T) { // --snip-- } 实际上相当于像下面这样硬编码：
fn generic&amp;lt;T: Sized&amp;gt;(t: T) { // --snip-- } 也可以通过下面特定的语法取消这个限制：
fn geneic&amp;lt;T: ?Sized&amp;gt;(t: &amp;amp;T) { // --snip-- } </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态大小类型-dst-和-sized-特性&#34;&gt;动态大小类型（DST）和 &lt;code&gt;Sized&lt;/code&gt; 特性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; （非 &lt;code&gt;&amp;amp;str&lt;/code&gt; ）就是一个 DST，我们不能在运行时得知 &lt;code&gt;str&lt;/code&gt; 的大小。 &lt;code&gt;&amp;amp;str&lt;/code&gt; 是一个指针类型，大小是已知的。&lt;/p&gt;
&lt;p&gt;DST：拥有额外的元数据存储动态大小的信息。&lt;/p&gt;
&lt;p&gt;每一个特性都是一个是个 DST，使用 Trait Object 必须是像 &lt;code&gt;&amp;amp;dyn Trait&lt;/code&gt; 和 &lt;code&gt;Box&amp;lt;dyn Trait&amp;gt;&lt;/code&gt; （或 &lt;code&gt;Rc&amp;lt;dyn Trait&amp;gt;&lt;/code&gt; ）的指针类型。&lt;/p&gt;
&lt;h2 id=&#34;dyn-关键字&#34;&gt;dyn 关键字&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dyn&lt;/code&gt; 关键字用于将 Trait Object 指针和普通的结构体指针区分开来。&lt;/p&gt;
&lt;h2 id=&#34;sized-vs-sized&#34;&gt;Sized vs ?Sized&lt;/h2&gt;
&lt;p&gt;Rust 有一个特定的特性叫做 &lt;code&gt;Sized&lt;/code&gt; 去判断一个类型的大小是否是编译期可知的，并且自动在编译期为所有已知大小的类型实现，
同时 Rust 隐式的为泛型函数的类型参数加上 &lt;code&gt;Sized&lt;/code&gt; 的限制（bound），下面这样的泛型函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
   &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上相当于像下面这样硬编码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: Sized&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以通过下面特定的语法取消这个限制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geneic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;Sized&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// --snip--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Rust Borrow and Lifetimes</title>
      <link>https://www.linuxzen.com/notes/articles/20200325182450_rust_borrow_and_lifetimes/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200325182450_rust_borrow_and_lifetimes/</guid>
      <description>tags: Rust,Translate,Rust Wrapper Types  原文链接：Rust Borrow and Lifetimes。
Rust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 1.42）。 我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow） 和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设 你基本了解 Rust，如果还没推荐你先阅读指南和指针指南。
资源所有权和借用 Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源 （栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。 你可以通过 &amp;amp; 或者 &amp;amp;mut 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保 所有的所有者（owners）和借用者（borrowers）行为正确。
拷贝和转移（Copy and move） 在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 StackOverflow 答案非常值得一读。 基本上，在赋值和函数调用上：
 如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。 其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。  简而言之，POD（Plan Old Data） =&amp;gt; 拷贝，Non-POD（线性类型（linear types））=&amp;gt; 转移。
以下是一些额外的注释供你参考：
 Rust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 memcpy 浅拷贝），而不是语义上的拷贝或克隆。 如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 NoCopy 标记，或者实现 Drop 特性（trait）。  转移之后，所有权就转移到了下一个所有者那。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200325165657_rust_wrapper_types/&#34;&gt;Rust Wrapper Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;http://arthurtw.github.io/2014/11/30/rust-borrow-lifetimes.html&#34;&gt;Rust Borrow and Lifetimes&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Rust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 &lt;a href=&#34;https://github.com/rust-lang/rust/releases/tag/1.42.0&#34;&gt;1.42&lt;/a&gt;）。
我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow）
和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设
你基本了解 Rust，如果还没推荐你先阅读&lt;a href=&#34;http://doc.rust-lang.org/guide.html&#34;&gt;指南&lt;/a&gt;和&lt;a href=&#34;http://doc.rust-lang.org/guide-pointers.html&#34;&gt;指针指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;资源所有权和借用&#34;&gt;资源所有权和借用&lt;/h2&gt;
&lt;p&gt;Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源
（栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。
你可以通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 或者 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保
所有的所有者（owners）和借用者（borrowers）行为正确。&lt;/p&gt;
&lt;h2 id=&#34;拷贝和转移-copy-and-move&#34;&gt;拷贝和转移（Copy and move）&lt;/h2&gt;
&lt;p&gt;在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 &lt;a href=&#34;https://stackoverflow.com/questions/24253344/is-it-possible-to-make-a-type-only-movable-and-not-copyable/24253573#24253573&#34;&gt;StackOverflow 答案&lt;/a&gt;非常值得一读。
基本上，在赋值和函数调用上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。&lt;/li&gt;
&lt;li&gt;其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简而言之，POD（Plan Old Data） =&amp;gt; 拷贝，Non-POD（线性类型（linear types））=&amp;gt; 转移。&lt;/p&gt;
&lt;p&gt;以下是一些额外的注释供你参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 &lt;code&gt;memcpy&lt;/code&gt; 浅拷贝），而不是语义上的拷贝或克隆。&lt;/li&gt;
&lt;li&gt;如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 &lt;a href=&#34;http://doc.rust-lang.org/std/kinds/marker/struct.NoCopy.html&#34;&gt;NoCopy&lt;/a&gt; 标记，或者实现 &lt;a href=&#34;http://doc.rust-lang.org/std/ops/trait.Drop.html&#34;&gt;Drop&lt;/a&gt; 特性（trait）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转移之后，所有权就转移到了下一个所有者那。&lt;/p&gt;
&lt;h2 id=&#34;资源回收&#34;&gt;资源回收&lt;/h2&gt;
&lt;p&gt;Rust 会在任何资源的所有权消失后立刻释放该资源，就这些，当：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有者超出作用域，或&lt;/li&gt;
&lt;li&gt;正在持有的所有者改变绑定（原始绑定变成 void）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;所有者和借用者的权限-privileges-和限制&#34;&gt;所有者和借用者的权限（privileges）和限制&lt;/h2&gt;
&lt;p&gt;这一节基于 &lt;a href=&#34;http://doc.rust-lang.org/guide.html&#34;&gt;Rust Guide&lt;/a&gt; 在权限（privileges）一部分提到拷贝和转移。&lt;/p&gt;
&lt;p&gt;所有者有一些权限。它可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;控制资源回收。&lt;/li&gt;
&lt;li&gt;借出资源，不可变的（可多次借用）或可变的（只能独占），和&lt;/li&gt;
&lt;li&gt;交出所有权（通过转移）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时所有者也存在一些限制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不可变借用期间，所有者不能&lt;/p&gt;
&lt;p&gt;a. 改变资源，或者&lt;/p&gt;
&lt;p&gt;b. 以可变的方式借出资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可变借用期间所有者不能&lt;/p&gt;
&lt;p&gt;a. 访问该资源，或者&lt;/p&gt;
&lt;p&gt;b. 再次借出该资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;借用者同时也有一些权限。除了访问或者更改借用的资源外，借用者也可以进一步借出（share the borrow）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不可变借用者可以借出（拷贝）不可变借用（译注：再次以不可变借用借出）&lt;/li&gt;
&lt;li&gt;可变借用者可以交出（转移）可变借用。（可变引用默认使用转移。）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;代码示例&#34;&gt;代码示例&lt;/h2&gt;
&lt;p&gt;关于借用我们已经聊的够多了，让我们一起来看一些代码吧（你可以通过 &lt;a href=&#34;https://play.rust-lang.org&#34;&gt;https://play.rust-lang.org&lt;/a&gt; 运行这些 Rust 代码。）
在下面所有的例子中，我们将使用不可拷贝的 &lt;code&gt;struct Foo&lt;/code&gt; ，因为它包含了一个装箱（boxed）（堆分配）值。
使用不可拷贝资源可以限制相关操作，让我们更好的学习。&lt;/p&gt;
&lt;p&gt;对于每一个代码示例，我们还提供了一个“作用域图表”（scope chart）来展示所有者和借用者的作用域。
图表第一行的大括号和代码中的大括号一一对应。&lt;/p&gt;
&lt;h3 id=&#34;所有者在可变借用期间不能访问资源&#34;&gt;所有者在可变借用期间不能访问资源&lt;/h3&gt;
&lt;p&gt;如果我们将代码中的 &lt;code&gt;println!&lt;/code&gt; 解除注释，代码将不能编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
	f: Box&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	&lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a;
	&lt;span style=&#34;color:#75715e&#34;&gt;// error: cannot borrow `a.f` as immutable because `a` is also borrowed as mutable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// println!(&amp;#34;{}&amp;#34;, a.f);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;		   { a x * }
   owner a   |_____|
borrower x     |___| x = &amp;amp;mut a
access a.f       |   error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这违反了所有者限制 #2(a)。如果我们将 &lt;code&gt;let x = &amp;amp;mut a;&lt;/code&gt; 在一个嵌套的代码块里：借用
在 &lt;code&gt;println!&lt;/code&gt; 之前结束，这段代码将能正常工作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a;
		&lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow ends here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, a.f);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;		   { a { x } * }
   owner a   |_________|
borrower x       |_|     x = &amp;amp;mut a
access a.f           |   OK
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;借用者可以转移可变借用到一个新的借用者&#34;&gt;借用者可以转移可变借用到一个新的借用者&lt;/h3&gt;
&lt;p&gt;这段代码展示借用者的权限 #2: 可变借用 &lt;code&gt;x&lt;/code&gt; 可以将所有权转移可变借用到一个新的借用者 &lt;code&gt;y&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	&lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a;
	&lt;span style=&#34;color:#75715e&#34;&gt;// move the mutable borrow to new borrower y
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
	&lt;span style=&#34;color:#75715e&#34;&gt;// error: use of moved value: `x.f`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// println!(&amp;#34;{}&amp;#34;, x.f);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;		   { a x y * }
   owner a   |_______|
borrower x     |_|     x = &amp;amp;mut a
borrower y       |___| y = x
access x.f         |   error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;转移之后，原始的借用者 &lt;code&gt;x&lt;/code&gt; 不再能访问借用的资源。&lt;/p&gt;
&lt;h2 id=&#34;借用作用域-borrow-scope&#34;&gt;借用作用域（Borrow scope）&lt;/h2&gt;
&lt;p&gt;如果我们开始传递引用（ &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;mut&lt;/code&gt;）事情就开始变得有趣，同时也是 Rust 新手们开始困惑的地方。&lt;/p&gt;
&lt;h3 id=&#34;生命周期-lifetime&#34;&gt;生命周期（Lifetime）&lt;/h3&gt;
&lt;p&gt;在整个借用过程中，知道借用者的借用什么时候开始和结束非常重要。在&lt;a href=&#34;http://doc.rust-lang.org/guide-lifetimes.html&#34;&gt;生命周期指南&lt;/a&gt;中是这样定义生命周期的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lifetime is a static approximation of the span of execution during which the pointer is valid: it always corresponds to some expression or block within the program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;生命周期是指针有效范围的静态近似值：它始终对应程序中的某些表达式或代码块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，我更喜欢使用 &lt;strong&gt;借用作用域（borrow scope）&lt;/strong&gt; 这个术语去描述借用生效的作用域。请注意它不同于上面生命周期的定义。
（我第一次见到这个术语是在一个 Rust &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/431&#34;&gt;RFC 讨论&lt;/a&gt; 中，尽管我的定义可能会有所不同。）我会在稍后给出我为什么避免使用生命周期的原因。
现在我们先把生命周期放在一边。&lt;/p&gt;
&lt;h3 id=&#34;and-borrow&#34;&gt;&amp;amp; = borrow&lt;/h3&gt;
&lt;p&gt;一些关于借用的事情：&lt;/p&gt;
&lt;p&gt;首先，只需要记住 &lt;code&gt;&amp;amp;&lt;/code&gt; = 借用， &lt;code&gt;&amp;amp;mut&lt;/code&gt; = 可变借用。任何地方你看到一个 &lt;code&gt;&amp;amp;&lt;/code&gt; ，那就是一个借用。&lt;/p&gt;
&lt;p&gt;其次，当一个 &lt;code&gt;&amp;amp;&lt;/code&gt; 出现在任何结构体中（在它的字段中）或者函数_闭包（返回值或者捕获的引用），结构体_函数/闭包就是一个借用者，
并且应用所有的借用规则。&lt;/p&gt;
&lt;p&gt;再次，对于每一个借用，都存在一个所有者和一个或多个借用者。&lt;/p&gt;
&lt;h3 id=&#34;扩展借用作用域&#34;&gt;扩展借用作用域&lt;/h3&gt;
&lt;p&gt;一些关于借用作用域的事情：&lt;/p&gt;
&lt;p&gt;首先，一个借用作用域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个借用生效的范围，并且&lt;/li&gt;
&lt;li&gt;不一定是借用者的词法作用域，因为借用者可以扩展借用作用域（参见下面）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次，借用者在赋值或者函数调用中可以通过拷贝（不可变借用）或者转移（可变借用）扩展借用作用域。
接收者（receiver）（可以是新的绑定、结构体、函数或者闭包）变成新的借用者。&lt;/p&gt;
&lt;p&gt;再次，借用作用域是所有借用者作用域的并集，并且被借用的资源必须在整个借用作用域里有效。&lt;/p&gt;
&lt;h3 id=&#34;借用公式&#34;&gt;借用公式&lt;/h3&gt;
&lt;p&gt;根据最后一点，我们得到一个借用公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源作用域 &amp;gt;= 借用作用域 = 所有借用者作用域的并集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码示例&#34;&gt;代码示例&lt;/h3&gt;
&lt;p&gt;让我们看一些扩展作用域的代码示例。结构体 &lt;code&gt;struct Foo&lt;/code&gt; 和前面的一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a;
		&lt;span style=&#34;color:#75715e&#34;&gt;// share the borrow with new borrower y, hence extend the borrow scope
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// error: cannot assign to `a.f` because it is borrowed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// a.f = box 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;			 { a { x y } * }
  resource a   |___________|
  borrower x       |___|     x = &amp;amp;a
  borrower y         |_____| y = x
borrow scope       |=======|
  mutate a.f             |   error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即使借用发生在 &lt;code&gt;if&lt;/code&gt; 代码块之内并且借用者 &lt;code&gt;x&lt;/code&gt; 在 &lt;code&gt;if&lt;/code&gt; 代码块之后超出作用域，它已经通过赋值 &lt;code&gt;y=x;&lt;/code&gt; 扩展了借用作用域，
所以存在两个借用者： &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 。根据借用公式：借用作用域是借用者 &lt;code&gt;x&lt;/code&gt; 和借用者 &lt;code&gt;y&lt;/code&gt; 作用域的并集：
范围开始第一次借用于 &lt;code&gt;let x = &amp;amp;a;&lt;/code&gt; 直到 &lt;code&gt;main&lt;/code&gt; 代码块的结尾。（注意绑定 &lt;code&gt;y&lt;/code&gt; 在 &lt;code&gt;y=x;&lt;/code&gt; 之前不是借用者。）&lt;/p&gt;
&lt;p&gt;你可能注意到了由于条件永远是 false &lt;code&gt;if&lt;/code&gt; 代码块永远不会执行，但是编译器始终拒绝资源所有者 &lt;code&gt;a&lt;/code&gt; 去访问
它的资源。这是因为所有的借用检查发生在编译期，这样程序运行时就不需要做任何事情。&lt;/p&gt;
&lt;h2 id=&#34;借用多个资源&#34;&gt;借用多个资源&lt;/h2&gt;
&lt;p&gt;目前为止我们只关注借用单个资源。借用者可以借用多个资源吗？当然！比如一个函数可以接受两个引用然后
基于一些情况返回其中一个，e.g. 其中字段值比较大的那一个。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt; 函数返回一个 &lt;code&gt;&amp;amp;&lt;/code&gt; 指针，因此它是一个借用者。返回的结果可以是输入参数的任意一个，所以它借用了
两鞥额资源。&lt;/p&gt;
&lt;h3 id=&#34;命名借用作用域-named-borrow-scope&#34;&gt;命名借用作用域（Named borrow scope）&lt;/h3&gt;
&lt;p&gt;当存在多个 &lt;code&gt;&amp;amp;&lt;/code&gt; 指针作为输入，我们需要使用 &lt;strong&gt;命名生命周期（named lifetimes）&lt;/strong&gt; 指定它们之间的关系，
参见 &lt;a href=&#34;http://doc.rust-lang.org/guide-lifetimes.html#named-lifetimes&#34;&gt;Lifetimes Guide&lt;/a&gt;。但现在，让我们叫它们 &lt;strong&gt;命名借用作用域（named borrow scopes）&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;上面的代码没有使用 &lt;strong&gt;命名生命周期&lt;/strong&gt; 指定它们之间的关系是不会通过编译器的，i.e. 哪些借用者 &lt;strong&gt;分组（grouped）&lt;/strong&gt;
到哪个借用作用域。下面的实现是合法的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x.f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; y.f { x } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { y }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(All resources and borrowers are grouped in borrow scope &#39;a.)
				  max( {   } )
	resource *x &amp;lt;--------------&amp;gt;
	resource *y &amp;lt;--------------&amp;gt;
borrow scope &#39;a &amp;lt;==============&amp;gt;
	 borrower x        |___|
	 borrower y        |___|
   return value          |___|   pass to the caller
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个函数中，我们有一个借用作用域 &lt;code&gt;&#39;a&lt;/code&gt; 和三个借用者：两个输入参数和函数返回结果。
前面提到的借用公式依然生效，但是现在每个被借用的资源必须满足公式。参见下面的例子：&lt;/p&gt;
&lt;h3 id=&#34;代码示例&#34;&gt;代码示例&lt;/h3&gt;
&lt;p&gt;在接下来的代码中，我们来使用上面的 &lt;code&gt;max&lt;/code&gt; 函数在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间选择一个更大 &lt;code&gt;Foo&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b);
		&lt;span style=&#34;color:#75715e&#34;&gt;// error: `b` does not live long enough
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// y = x;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;			  { a { b x (  ) y } }
   resource a   |________________| pass
   resource b       |__________|   fail
 borrow scope         |==========|
temp borrower            |_|       &amp;amp;a
temp borrower            |_|       &amp;amp;b
   borrower x         |________|   x = max(&amp;amp;a, &amp;amp;b)
   borrower y                |___| y = x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直到 &lt;code&gt;let x = max(&amp;amp;a, &amp;amp;b)&lt;/code&gt; 都一些正常，因为 &lt;code&gt;&amp;amp;a&lt;/code&gt; 和 &lt;code&gt;&amp;amp;b&lt;/code&gt; 都是尽在表达式中有效的临时引用，
并且第三个借用 &lt;code&gt;x&lt;/code&gt; 借用了两个资源（不管最终是 &lt;code&gt;a&lt;/code&gt; 或 &lt;code&gt;b&lt;/code&gt; ，对于借用检查器而言它都借用了）直到 &lt;code&gt;if&lt;/code&gt;
块结束，所以借用作用域是从 &lt;code&gt;let x = max(&amp;amp;a, &amp;amp;b);&lt;/code&gt; 到 &lt;code&gt;if&lt;/code&gt; 块结尾。两个资源 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 在整个借用作用域
都有效,因此满足借用公式。&lt;/p&gt;
&lt;p&gt;现在如果我们解除最后一个赋值 &lt;code&gt;y = x;&lt;/code&gt; 的注释， &lt;code&gt;y&lt;/code&gt; 变成第四个借用者，然后借用作用域被扩展到 &lt;code&gt;main&lt;/code&gt;
块的结尾，导致资源 &lt;code&gt;b&lt;/code&gt; 不能满足公式。&lt;/p&gt;
&lt;h2 id=&#34;结构体作为借用者&#34;&gt;结构体作为借用者&lt;/h2&gt;
&lt;p&gt;除了函数和闭包之外，一个结构体也可以通过其字段存储多个引用来借用多个资源。我们通过下面的一些例子
来看看借用公式如何生效的。我们来使用 &lt;code&gt;Link&lt;/code&gt; 结构体来保存一个引用（不可变借用）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Link&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
  link: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结构体借用多个资源&#34;&gt;结构体借用多个资源&lt;/h3&gt;
&lt;p&gt;即使只有一个字段，结构体 &lt;code&gt;Link&lt;/code&gt; 也可以借用多个资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Link { link: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
		&lt;span style=&#34;color:#75715e&#34;&gt;// error: `b` does not live long enough
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// x.link = &amp;amp;b;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;			 { a x { b * } }
  resource a   |___________| pass
  resource b         |___|   fail
borrow scope     |=========|
  borrower x     |_________| x.link = &amp;amp;a
  borrower x           |___| x.link = &amp;amp;b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上面例子中，借用者 &lt;code&gt;x&lt;/code&gt; 从所有者 &lt;code&gt;a&lt;/code&gt; 借用资源，借用作用域到 &lt;code&gt;main&lt;/code&gt; 块的结尾。So far so good。
如果我们解除最后一个赋值 &lt;code&gt;x.link = &amp;amp;b;&lt;/code&gt; 的注释， &lt;code&gt;x&lt;/code&gt; 也尝试从所有者 &lt;code&gt;b&lt;/code&gt; 借用资源，这会让资源 &lt;code&gt;b&lt;/code&gt;
不能满足借用公式。&lt;/p&gt;
&lt;h3 id=&#34;没有返回值的函数扩展借用作用域&#34;&gt;没有返回值的函数扩展借用作用域&lt;/h3&gt;
&lt;p&gt;一个没有返回值的函数同样也可以通过输出参数能扩展借用作用域。例如，这个函数 &lt;code&gt;store_foo&lt;/code&gt; 接受一个
&lt;code&gt;Link&lt;/code&gt; 的可变引用，然后存储一个引用（不可变借用）到 &lt;code&gt;Foo&lt;/code&gt; 里：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;store_foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;) {
  x.link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在接下来的代码中，被 &lt;code&gt;a&lt;/code&gt; 所有的资源是被借用资源； &lt;code&gt;Link&lt;/code&gt; 结构体被借用者 &lt;code&gt;x&lt;/code&gt; 可变的引用着（i.e. &lt;code&gt;*x&lt;/code&gt; 是借用者）；
借用作用域直到 &lt;code&gt;main&lt;/code&gt; 块的结尾。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Link { link: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
		&lt;span style=&#34;color:#75715e&#34;&gt;// store_foo(x, &amp;amp;b);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;			 { a x { b * } }
  resource a   |___________| pass
  resource b         |___|   fail
borrow scope     |=========|
 borrower *x     |_________| x.link = &amp;amp;a
 borrower *x           |___| x.link = &amp;amp;b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们解除最后一个函数调用 &lt;code&gt;store_foo(x, &amp;amp;b);&lt;/code&gt; ,这个函数将会尝试将 &lt;code&gt;&amp;amp;b&lt;/code&gt; 存储到 &lt;code&gt;x.link&lt;/code&gt; ，
将资源 &lt;code&gt;b&lt;/code&gt; 作为另外一个被借用的资源，由于 &lt;code&gt;b&lt;/code&gt; 的作用域没有覆盖整个借用作用域，导致不满足借用公式。&lt;/p&gt;
&lt;h3 id=&#34;多个借用作用域&#34;&gt;多个借用作用域&lt;/h3&gt;
&lt;p&gt;一个函数中可以存在多个借用作用域。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;superstore_foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;,
						  x2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, y2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;) {
	x.link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
	x2.link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个的函数（可能不是特别有用）中，涉及两个不同的借用作用域。每个借用作用域都有它们自己的作用域公式要满足。&lt;/p&gt;
&lt;h2 id=&#34;为什么生命周期会造成困惑&#34;&gt;为什么生命周期会造成困惑&lt;/h2&gt;
&lt;p&gt;最后，我想解释一下为什么我认为 Rust 借用系统使用 &lt;strong&gt;生命周期&lt;/strong&gt; 术语会造成困惑（同时避免在这片博文中使用它）。&lt;/p&gt;
&lt;p&gt;当我们讨论借用时会涉及到不同类型的“生命周期”：&lt;/p&gt;
&lt;p&gt;A. 资源所有者的生命周期（或者 被所有/被借用 资源
B. 被借用的生命周期，i.e. 从开始借用到最后返还
C. 每一个独立的借用者或被借用的指针的生命周期&lt;/p&gt;
&lt;p&gt;当有人说“生命周期”，它可以指上面的任何一个。如果涉及多个资源和借用者就会变的更加困惑。
比如，在函数或者结构体生命中一个“命名的生命周期”指哪个？是 A、B 或者 C？&lt;/p&gt;
&lt;p&gt;在我们的前一个 &lt;code&gt;max&lt;/code&gt; 函数中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x.f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; y.f { x } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { y }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生命周期 &lt;code&gt;&#39;a&lt;/code&gt; 的意义是什么？它不应该是 A，因为涉及两个资源并且他们有不同的生命周期。也不可能是 C，
因为有三个借用者： &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 和函数的返回值，并且他们也都有不同的生命周期。它是 B 吗？可能。
但是整个借用作用域并不是一个具体的对象，它怎么能有一个“生命周期”呢？称它为生命周期就会造成困惑。&lt;/p&gt;
&lt;p&gt;另一种说法是它意味着对被借用资源的最小生命周期要求。一定程度上是有道理的，
但是我们怎么称呼最小生命周期要求“生命周期”？&lt;/p&gt;
&lt;p&gt;所有权/借用概念自身已经够复杂了。我会说：对术语“生命周期”的困惑对学习这个概念造成了更多的莫名其妙。&lt;/p&gt;
&lt;p&gt;P.S. 使用上面定义的 A、B 和 C，借用公式变成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &amp;gt;= B = C_1,UC_2U&amp;hellip;UC_n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;学习-rust-是值得的&#34;&gt;学习 Rust 是值得的！&lt;/h2&gt;
&lt;p&gt;尽管借用和所有权可能让你花一些时间来掌握（to grok），但是是一个非常有趣的学习。Rust 尝试不用 GC
来实现内存安全，并且目前来看做的非常好。一些人说他们通过学习 Haskell 改变了他们编程的方式。
我认为Rust 同样也值得你学习。&lt;/p&gt;
&lt;p&gt;希望这篇博文能提供一些帮助。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Rust Wrapper Types</title>
      <link>https://www.linuxzen.com/notes/notes/20200325165657_rust_wrapper_types/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200325165657_rust_wrapper_types/</guid>
      <description> tags: Rust  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>https://www.linuxzen.com/notes/notes/20200323101418_solid/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200323101418_solid/</guid>
      <description>SRP: Single Responsibility Principle   浅显的解释是软件模块只提供单一功能
  更进一步任何一个软件模块都应该有且只有一个被修改的原因
  再更进一步这个原则是关于人（Actor）的
任何一个软件模块都应该只对一个用户或系统利益相关者负责。
  最终就是任何一个软件模块都应该只对某一类行为负责
  OCP：Open/Closed Principle 设计良好的软件应该易于扩展，同时抗拒修改。也就是说一个软件模块应该允许在不修改源码的情况下扩展它的行为。
可以通过组合 SRP（代码分组）和调整依赖关系实现（DIP）。如果 A 组件不想被 B 组件上发生的修改所影响，那么就应该让 B 组件依赖于 A 组件。
LSP：Liskov Substitution Principle 里氏替换原则：多态。
每个类型是 S 的对象 o1 都存在一个类型为 T 的对象 o2，能使操作 T 类型的程序 P 在用 o2 替换 o1 时行为保持不变，我们就可以将 S 称为 T 的子类型。
public class LiskovSub { public static main(String[] args) { T o1 = new S(); T o2 = new T(); P(o1); // ok 	P(o2); // ok  } public static P(T o) { o.</description>
      <content>&lt;h2 id=&#34;srp-single-responsibility-principle&#34;&gt;SRP: Single Responsibility Principle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;浅显的解释是软件模块只提供单一功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更进一步任何一个软件模块都应该有且只有一个被修改的原因&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再更进一步这个原则是关于人（Actor）的&lt;/p&gt;
&lt;p&gt;任何一个软件模块都应该只对一个用户或系统利益相关者负责。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终就是任何一个软件模块都应该只对某一类行为负责&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ocp-open-closed-principle&#34;&gt;OCP：Open/Closed Principle&lt;/h2&gt;
&lt;p&gt;设计良好的软件应该易于扩展，同时抗拒修改。也就是说一个软件模块应该允许在不修改源码的情况下扩展它的行为。&lt;/p&gt;
&lt;p&gt;可以通过组合 SRP（代码分组）和调整依赖关系实现（DIP）。如果 A 组件不想被 B 组件上发生的修改所影响，那么就应该让 B 组件依赖于 A 组件。&lt;/p&gt;
&lt;h2 id=&#34;lsp-liskov-substitution-principle&#34;&gt;LSP：Liskov Substitution Principle&lt;/h2&gt;
&lt;p&gt;里氏替换原则：多态。&lt;/p&gt;
&lt;p&gt;每个类型是 S 的对象 o1 都存在一个类型为 T 的对象 o2，能使操作 T 类型的程序 P 在用 o2 替换 o1 时行为保持不变，我们就可以将 S 称为 T 的子类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LiskovSub&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	T o1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; S&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	T o2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

	P&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;o1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// ok
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	P&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;o2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// ok
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	o&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doSomeThing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正长方形问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NonLiskovSub&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	Rectangle r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Sqaure&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setW&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 不成立
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reactangle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setW&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Square&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Rectangle &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setW&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	  setSide&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	  setSide&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setSide&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;isp-interface-segregation-principle&#34;&gt;ISP: Interface-Segregation Principle&lt;/h2&gt;
&lt;p&gt;用户应该不依赖它不是用的方法。臃肿的方法拆分成更小更具体的角色接口。&lt;/p&gt;
&lt;h2 id=&#34;dip-dependency-inversion-principle&#34;&gt;DIP: Dependency Inversion Principle&lt;/h2&gt;
&lt;p&gt;如果想要设计一个灵活的系统，在源代码层面的依赖关系中就应该多引用抽象类行，而非具体实现。&lt;/p&gt;
&lt;p&gt;这一原则不针对已经稳定不变的部分，而是针对那些经常 &lt;strong&gt;变动的(volatile)&lt;/strong&gt; 模块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类&lt;/strong&gt;&lt;/strong&gt; 。同时应使用抽象工厂严格限制对象的创建过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;不要再具体实现类上创建衍生类&lt;/strong&gt;&lt;/strong&gt; 。静态语言中继承依赖最强且最难被修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;不要覆盖（override）包含具体实现的函数&lt;/strong&gt;&lt;/strong&gt; 。通过创建一个抽象函数，然后再为该函数提供多种具体实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;应避免在代码中写入与任何具体实现相关的名字，或者是其他容易变动的事物的名字&lt;/strong&gt;&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工厂模式之于非常重要。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>《架构整洁之道》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200323104907_%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200323104907_%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</guid>
      <description> tags: 读书笔记,系统架构  第一遍粗读   三个编程范式：结构化编程、面向对象编程、函数式编程
每个编程范式都是增加限制：
 结构化编程限制了 goto 面向对象编程限制了函数指针 函数式编程限制可变变量（变量不可修改）    设计原则：SOLID
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200322143810_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/&#34;&gt;系统架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第一遍粗读&#34;&gt;第一遍粗读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三个编程范式：结构化编程、面向对象编程、函数式编程&lt;/p&gt;
&lt;p&gt;每个编程范式都是增加限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构化编程限制了 goto&lt;/li&gt;
&lt;li&gt;面向对象编程限制了函数指针&lt;/li&gt;
&lt;li&gt;函数式编程限制可变变量（变量不可修改）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计原则：&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200323101418_solid/&#34;&gt;SOLID&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>技术</title>
      <link>https://www.linuxzen.com/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>系统架构</title>
      <link>https://www.linuxzen.com/notes/notes/20200322143810_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200322143810_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid>
      <description> tags: 技术  设计原则 SOLID
好的架构 我认为好的架构  能够无心智障碍的编写运行单元测试  从一起作业看好的架构  应该能够让任何开发人员方便的随时上线和回滚 面对上线对基础设施没有心理压力 完备的监控  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;设计原则&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200323101418_solid/&#34;&gt;SOLID&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;好的架构&#34;&gt;好的架构&lt;/h2&gt;
&lt;h3 id=&#34;我认为好的架构&#34;&gt;我认为好的架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能够无心智障碍的编写运行单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;从一起作业看好的架构&#34;&gt;从一起作业看好的架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应该能够让任何开发人员方便的随时上线和回滚&lt;/li&gt;
&lt;li&gt;面对上线对基础设施没有心理压力&lt;/li&gt;
&lt;li&gt;完备的监控&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>C/C&#43;&#43;</title>
      <link>https://www.linuxzen.com/notes/topics/20200320171108_c/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200320171108_c/</guid>
      <description> tags: Programming Language  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Flink</title>
      <link>https://www.linuxzen.com/notes/projects/20200320100601_flink/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/projects/20200320100601_flink/</guid>
      <description> tags: Bigdata,Dataflow Model,Streaming  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105163640-dataflow_model/&#34;&gt;Dataflow Model&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220105165615-streaming/&#34;&gt;Streaming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172022_kafka/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172022_kafka/</guid>
      <description>tags: Bigdata  相关知识点 概念组成   Producer 消息产生者，往指定 Topic 的指定 Partition 发送消息
  Consumer Group 消费指定 Topic 的消息
 Consumer 消费指定 Topic 下某一分区的消息    Topic 区分不同消息主题
 Partition 保证同一分区的有序性    Connector
  消息可被不同的 Consumer Group 重复消费（广播或订阅）。同一 Consumer Group 下的不同 Consumer 分别消费不同的 Partition，Consumer 数量不能超过 Partition 数量。
数据被持久化并分片成功后发送 ACK 保证里数据不被丢失。
设计 持久化   基于文件系统
 基于队列是顺序的和磁盘的顺序访问要比内存的随机访问要快（参见 The Pathologies of Big Data）， Kafka 采用在磁盘文件系统上尾部写头部读的方式。 Kafka 没有采用 BTree 存储数据因为 BTree 的操作是 O(log N) ，而且对磁盘的 seek 操作要慢，且同时只能进行一次限制了并行，所以实际操作比 O(log N) 要慢 基于磁盘的顺序访问进行在尾部写和头部读，可以实现读写都是 O(1) 的时间复杂度，并且读写互不干扰 基于以上实现，Kafka 可以不必在消息一经消费就删除，而是可以保留消息一段相对较长的时间（比如一周）      高效</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/&#34;&gt;Bigdata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关知识点&#34;&gt;相关知识点&lt;/h2&gt;
&lt;h3 id=&#34;概念组成&#34;&gt;概念组成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Producer 消息产生者，往指定 Topic 的指定 Partition 发送消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer Group 消费指定 Topic 的消息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consumer 消费指定 Topic 下某一分区的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topic 区分不同消息主题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Partition  保证同一分区的有序性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connector&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息可被不同的 Consumer Group 重复消费（广播或订阅）。同一 Consumer Group 下的不同 Consumer 分别消费不同的 Partition，Consumer 数量不能超过 Partition 数量。&lt;/p&gt;
&lt;p&gt;数据被持久化并分片成功后发送 ACK 保证里数据不被丢失。&lt;/p&gt;
&lt;h3 id=&#34;设计&#34;&gt;设计&lt;/h3&gt;
&lt;h4 id=&#34;持久化&#34;&gt;持久化&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于队列是顺序的和磁盘的顺序访问要比内存的随机访问要快（参见 &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1563874&#34;&gt;The Pathologies of Big Data&lt;/a&gt;）， Kafka 采用在磁盘文件系统上尾部写头部读的方式。&lt;/li&gt;
&lt;li&gt;Kafka 没有采用 BTree 存储数据因为 BTree 的操作是  &lt;code&gt;O(log N)&lt;/code&gt; ，而且对磁盘的 seek 操作要慢，且同时只能进行一次限制了并行，所以实际操作比 &lt;code&gt;O(log N)&lt;/code&gt; 要慢&lt;/li&gt;
&lt;li&gt;基于磁盘的顺序访问进行在尾部写和头部读，可以实现读写都是 &lt;code&gt;O(1)&lt;/code&gt; 的时间复杂度，并且读写互不干扰&lt;/li&gt;
&lt;li&gt;基于以上实现，Kafka 可以不必在消息一经消费就删除，而是可以保留消息一段相对较长的时间（比如一周）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;高效&lt;/p&gt;
&lt;p&gt;并且采用统一的日志格式，可以方便的使用 &lt;a href=&#34;http://man7.org/linux/man-pages/man2/sendfile.2.html&#34;&gt;sendfile&lt;/a&gt; 避免字节拷贝以在各个组件之间高效的交换日志文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;links&#34;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://varnish-cache.org/docs/trunk/phk/notes.html&#34;&gt;page-cache-centric design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1563874&#34;&gt;The Pathologies of Big Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集群管理&#34;&gt;集群管理&lt;/h2&gt;
&lt;h3 id=&#34;查看消费状况&#34;&gt;查看消费状况&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --describe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重置消费&#34;&gt;重置消费&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看重置到最晚&lt;/span&gt;
kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-latest --dry-run

&lt;span style=&#34;color:#75715e&#34;&gt;# 执行重置到最晚&lt;/span&gt;
kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-latest --execute


&lt;span style=&#34;color:#75715e&#34;&gt;# 当前（最早）&lt;/span&gt;
kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-current --dry-run

kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-current --execute

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172132_leetcode/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172132_leetcode/</guid>
      <description> tags: Learning,Algorithm  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104182327-algorithm/&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: Trapping Tain Water</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172219_leetcode_trapping_tain_water/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172219_leetcode_trapping_tain_water/</guid>
      <description> tags: LeetCode  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Linux Virtual Memory Management</title>
      <link>https://www.linuxzen.com/notes/notes/20200320174700_linux_virtual_memory_management/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320174700_linux_virtual_memory_management/</guid>
      <description>tags: Linux 原文连接：Linux Virtual Memory Management  Chapter 2 Describing Physical Memory：描述物理内存   独立于平台架构的方式描述内存 — 更好的支持多平台
  本章包含描述存储器、内存页的结构体（structures）和一些影响 VM 行为的标识位（flags）
  VM 中普遍（prevlent）认为第一重要（principal）的概念是 NUMA。
  大型机器中内存访问速度取决于 CPU 到内存的距离。比如一组（bank）内存分配给每一个处理器或者一组内存非常适合靠近的 DMA 设备卡。
  这里的每组（bank）内存被称为节点（node）并且这个概念在 Linux 中通过 struct pglist_data（typedef pg_data_t) 表示，即使在 UMA 架构下也是如此。每一个节点是一个由 NULL 结尾的链表，通过 pg_data_t-&amp;gt;next_node 指向下一个节点。
  每一个节点都被分割成多个块（block）称为分区（zone）用于表示内存中的范围。分区使用 struct zone_struct(typedef zone_t) 结构体描述，每一个分区都是以下三种类型的一种
 ZONE_DMA 开始 16MB 内存，供 ISA 设备使用 ZONE_NORMAL 16MB - 896MB，由内核直接映射到线性地址空间的上部区域（将在第四章讨论） ZONE_HIGHMEM 896MB - END，剩余不由内核直接映射的系统可用内存， 大部分内核操作都只能使用这种类型的分区，所以这里也是这里也是最关键的性能区域（most performance critical zone）    每一个物理页帧（physical page frame）都使用结构体 struct page 表示，所有的结构体都保存在全局数组 mem_map 中，mem_map 通常存储在 ZONE_NORMAL 的开始处；</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104103936-linux/&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文连接：&lt;a href=&#34;https://tldp.org/LDP/tlk/tlk-toc.html&#34;&gt;Linux Virtual Memory Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-2-describing-physical-memory-描述物理内存&#34;&gt;Chapter 2 Describing Physical Memory：描述物理内存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;独立于平台架构的方式描述内存 — 更好的支持多平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本章包含描述存储器、内存页的结构体（structures）和一些影响 VM 行为的标识位（flags）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VM 中普遍（prevlent）认为第一重要（principal）的概念是 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%9D%87%E5%8C%80%E8%AE%BF%E5%AD%98%E6%A8%A1%E5%9E%8B&#34;&gt;NUMA&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大型机器中内存访问速度取决于 CPU 到内存的距离。比如一组（bank）内存分配给每一个处理器或者一组内存非常适合靠近的 &lt;a href=&#34;https://zh.wikipedia.org/zh/%E7%9B%B4%E6%8E%A5%E8%A8%98%E6%86%B6%E9%AB%94%E5%AD%98%E5%8F%96&#34;&gt;DMA&lt;/a&gt; 设备卡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里的每组（bank）内存被称为节点（node）并且这个概念在     Linux 中通过 &lt;strong&gt;&lt;strong&gt;struct pglist_data（typedef pg_data_t)&lt;/strong&gt;&lt;/strong&gt; 表示，即使在 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9D%87%E5%8C%80%E8%AE%BF%E5%AD%98%E6%A8%A1%E5%9E%8B&#34;&gt;UMA&lt;/a&gt; 架构下也是如此。每一个节点是一个由 NULL 结尾的链表，通过 &lt;strong&gt;&lt;strong&gt;pg_data_t-&amp;gt;next_node&lt;/strong&gt;&lt;/strong&gt; 指向下一个节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每一个节点都被分割成多个块（block）称为分区（zone）用于表示内存中的范围。分区使用 &lt;strong&gt;&lt;strong&gt;struct zone_struct(typedef zone_t)&lt;/strong&gt;&lt;/strong&gt; 结构体描述，每一个分区都是以下三种类型的一种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZONE_DMA 开始 16MB 内存，供 &lt;a href=&#34;https://zh.m.wikipedia.org/wiki/%E5%B7%A5%E4%B8%9A%E6%A0%87%E5%87%86%E7%BB%93%E6%9E%84&#34;&gt;ISA&lt;/a&gt; 设备使用&lt;/li&gt;
&lt;li&gt;ZONE_NORMAL 16MB - 896MB，由内核直接映射到线性地址空间的上部区域（将在第四章讨论）&lt;/li&gt;
&lt;li&gt;ZONE_HIGHMEM 896MB - END，剩余不由内核直接映射的系统可用内存， &lt;strong&gt;&lt;strong&gt;大部分内核操作都只能使用这种类型的分区，所以这里也是这里也是最关键的性能区域（most performance critical zone）&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每一个物理页帧（physical page frame）都使用结构体 &lt;strong&gt;&lt;strong&gt;struct page&lt;/strong&gt;&lt;/strong&gt; 表示，所有的结构体都保存在全局数组 &lt;strong&gt;&lt;strong&gt;mem_map&lt;/strong&gt;&lt;/strong&gt; 中，mem_map 通常存储在 &lt;strong&gt;&lt;strong&gt;ZONE_NORMAL&lt;/strong&gt;&lt;/strong&gt; 的开始处；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体之间的关系&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/linux-vm-2/1554100733254_3.jpeg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内存节点&#34;&gt;内存节点&lt;/h4&gt;
&lt;p&gt;Linux 在分配内存页的时候采用 &lt;strong&gt;本地节点分配策略（node-local allocation policy）&lt;/strong&gt; 通过最靠近当前运行 CPU 的节点去分配内存。同时进程也会趋向于采用同一 CPU 运行。&lt;/p&gt;
&lt;p&gt;节点的结构体定义在 &lt;code&gt;&amp;lt;linux/memzone.h&amp;gt;&lt;/code&gt; 下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pglist_data {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前节点包含的分区：ZONE_HIGHMEM,ZONE_NORMAL,ZONE_DMA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	zone_t node_zones[MAX_NR_ZONES];
	&lt;span style=&#34;color:#75715e&#34;&gt;// 定义的顺序决定分配优先采用的分区
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	zonelist_t node_zonelists[GFP_ZONEMASK&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];

	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前节点包含的分区数量，1 到 3 之间，不一定全有，比如一个 CPU Bank 可能没有 ZONE_DMA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nr_zones;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 节点上每一个物理的帧的页数组的第一个元素（第一页），会在某个地方被全局 mem_map 数组替换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node_mem_map;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 位图（bitmap）表示节点中没有内存的“洞（holes）”，仅用在 Sparc 和 Sparc64 架构
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;valid_addr_bitmap;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 第五章关于启动内存分配器
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; bootmem_data &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bdata;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前节点的起始物理地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; node_start_paddr;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 用于全局 mem_map 设置页偏移量，用于计算全局 mem_map 和当前节点（lmem_map）之间的页数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; node_start_mapnr;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前分区的总页数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; node_size;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 从 0 开始的节点 id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; node_id;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 指向下一个节点，NULL 表示结尾
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pglist_data &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node_next;
} pg_data_t;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;系统中的所有节点都维护在 &lt;strong&gt;&lt;strong&gt;pgdat_list&lt;/strong&gt;&lt;/strong&gt; 中。&lt;/p&gt;
&lt;h4 id=&#34;分区&#34;&gt;分区&lt;/h4&gt;
&lt;p&gt;用于跟踪信息，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页请用情况&lt;/li&gt;
&lt;li&gt;可用区域&lt;/li&gt;
&lt;li&gt;锁，等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义在 &lt;code&gt;&amp;lt;linux/memzone.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; zone_struct {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 自旋锁用于保护并发访问
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	spinlock_t lock;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 全部可用页数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; free_pages;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 分区水印（watermarks）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; pages_min, pages_low, pages_high;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 标识位用于告知换页（pageout）守护 kswapd 平衡当前分区（当获取任意水印后则需要进行平衡）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; need_balance;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 可用区域位图用于其他分配器（buddy allocator）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	free_area_t free_area[MAX_ORDER];

	&lt;span style=&#34;color:#75715e&#34;&gt;// 进程等待页被释放的 Hash table 实现的等待队列，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	wait_queue_head_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; wait_table;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Hash 表中等待队列的数量（2的次方）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; wait_table_size;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 用 long 定义上面大小减去二进制对数位的数量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; wait_table_shift;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 指向父
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pglist_data &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;zone_pgdat;

   &lt;span style=&#34;color:#75715e&#34;&gt;// 当前分区指向的全局 mem_map 的第一页
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;zone_mem_map;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 同 node_start_paddr
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; zone_start_paddr;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 同 node_start_mapnr
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; zone_start_mapnr;


	&lt;span style=&#34;color:#75715e&#34;&gt;// 字符串名字，如 “DMA”, “Norma” or “HighMem”
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;name;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前分区包含的页数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; size;
} zone_t;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;分区水印&#34;&gt;分区水印&lt;/h4&gt;
&lt;p&gt;当系统可用内存非常少时会唤醒换页守护 kswapd 释放内存页。如果压力过大 kswapd 会进行同步释放内存，有时被称为直接回收（direct-reclaim）路径。&lt;/p&gt;
&lt;p&gt;每个分区有三个水印&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pages_low，当阈值达到这个值则唤醒 kswapd 释放内存页&lt;/li&gt;
&lt;li&gt;pages_min，通过 &lt;strong&gt;&lt;strong&gt;free_area_init_core&lt;/strong&gt;&lt;/strong&gt; 根据分区大小页数比（ZoneSizeInPages / 128）初始化，最小 20 页（x86 80K），最大 255 页（x86 1MB ），阈值达到这个值触发 kswapd 同步方式（fashion）工作&lt;/li&gt;
&lt;li&gt;pages_high，不会触发 kswapd 平衡内存页，并使 kswapd 陷入休眠&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;计算分区大小&#34;&gt;计算分区大小&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;PFN(Page Frame Number)&lt;/strong&gt; 是一个包含物理内存映射的偏移量用于内存页计数，第一个 PFN被系统使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;min\_low\_pfn&lt;/strong&gt;&lt;/strong&gt; 用于定位第一页加载内核镜像的后的开始&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;max_fpn&lt;/strong&gt;&lt;/strong&gt; 指示系统中最后一个内存页帧&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;max_low_pfn&lt;/strong&gt;&lt;/strong&gt; 标记 ZONE_NORMAL 结尾，&lt;/li&gt;
&lt;li&gt;内存少的机器 &lt;strong&gt;&lt;strong&gt;max_pfn&lt;/strong&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;strong&gt;max_low_pfn&lt;/strong&gt;&lt;/strong&gt; 一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面三个值可以直接计算出高区内存的开始和结束。&lt;/p&gt;
&lt;h4 id=&#34;分区等待队列表&#34;&gt;分区等待队列表&lt;/h4&gt;
&lt;p&gt;当 IO 在一页内存上开始执行时（page-in or page-out）会进行锁定防止获取到不一致的数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程使用页时调用 &lt;strong&gt;&lt;strong&gt;wait_on_page&lt;/strong&gt;&lt;/strong&gt; 加入到一个等待队列&lt;/li&gt;
&lt;li&gt;IO 完成后调用 &lt;strong&gt;&lt;strong&gt;UnlockPage&lt;/strong&gt;&lt;/strong&gt; 解锁&lt;/li&gt;
&lt;li&gt;唤醒所有等待的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每次换页都会有一个等待队列，且代价非常昂贵，通过分离许多队列进行优化，等待队列存在 &lt;strong&gt;&lt;strong&gt;zone_t&lt;/strong&gt;&lt;/strong&gt; 中。&lt;/p&gt;
&lt;p&gt;如果一个分区仅有一个等待队列就会产生&lt;a href=&#34;https://zh.m.wikipedia.org/zh-cn/%E6%83%8A%E7%BE%A4%E9%97%AE%E9%A2%98&#34;&gt;惊群效应（thundering herd）&lt;/a&gt;。为了解决这个问题会有多个等待队列存储在哈希表 &lt;strong&gt;&lt;strong&gt;zone_t-&amp;gt;wait_table&lt;/strong&gt;&lt;/strong&gt; 中（极少的哈希碰撞依然会导致不必要的进程被唤醒）。&lt;/p&gt;
&lt;h4 id=&#34;分区初始化&#34;&gt;分区初始化&lt;/h4&gt;
&lt;p&gt;内核页完全初始化后（paging_init）后开始初始化分区，可以预见的是（perdictably）各个平台实现不一致，但是确定（determine）发送给 &lt;code&gt;free_area_init&lt;/code&gt; 的参数的逻辑是一致的，支持以下参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;nid&lt;/strong&gt;&lt;/strong&gt; 分区所属节点的逻辑 ID&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;pgdat&lt;/strong&gt;&lt;/strong&gt; 初始化的所属节点的 &lt;code&gt;pg_data_t&lt;/code&gt; ，UMA 下则为 &lt;code&gt;contig_page_data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;pmap&lt;/strong&gt;&lt;/strong&gt; 指向分配给节点的本地数组 &lt;code&gt;lmem_map&lt;/code&gt; 的开始，稍后由 &lt;code&gt;free_area_core&lt;/code&gt; 初始化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;zones_sizes&lt;/strong&gt;&lt;/strong&gt; 一个包含内存页中所有分区大小的数组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;zone_start_paddr&lt;/strong&gt;&lt;/strong&gt; 第一个分区的起始物理地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*zone_holes&lt;/strong&gt; 包含分区内内存段（memory holes）总大小的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;free_area_init_core&lt;/code&gt; 负责使用相应的信息填充 &lt;code&gt;zone_t&lt;/code&gt; 并为节点分配 &lt;code&gt;mem_map&lt;/code&gt; 数组。&lt;/p&gt;
&lt;h4 id=&#34;初始化-mem-map&#34;&gt;初始化 mem_map&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;me_map&lt;/strong&gt;&lt;/strong&gt; 会在系统启动中以两种方式（fashions）之一进行创建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NUMA：当作一个起始于 &lt;strong&gt;&lt;strong&gt;PAGE_OFFSET&lt;/strong&gt;&lt;/strong&gt; ，调用 &lt;code&gt;free_area_init_node&lt;/code&gt; 初始化这个数组中分配的系统中每一个活跃的节点&lt;/li&gt;
&lt;li&gt;UMA： &lt;code&gt;free_area_init&lt;/code&gt; 使用 &lt;code&gt;contig_page_data&lt;/code&gt; 作为当前节点，使用全局 &lt;code&gt;mem_map&lt;/code&gt; 作为当前节点的“本地” &lt;code&gt;mem_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个函数的调用关系如下图所示&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/linux-vm-2/1554100733194_2.jpeg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;h4 id=&#34;页&#34;&gt;页&lt;/h4&gt;
&lt;p&gt;每页物理页帧在系统中都通过 &lt;code&gt;struct page&lt;/code&gt; 关联，用于跟踪状态。&lt;/p&gt;
&lt;p&gt;声明在 &lt;code&gt;&amp;lt;linux/mm.h&amp;gt;&lt;/code&gt; 中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; page {

	&lt;span style=&#34;color:#75715e&#34;&gt;// 页可能归属于多个列表，此字段用于存放所属链表的表头（多个），也用于将多个（blocks）空闲的表连接在一起
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; list_head list;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 用于当文件或设备映射到内存后关联 inode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果页属于文件则指向当前地址空间（address space）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是匿名页但被设置则说明是 swap 地址空间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; address_space &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;mapping;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 意义取决于页的状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 1. 页是文件映射的一部分表示文件的偏移量（offset）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 页是 swap 缓存的一部分表示 address_space 对 swap 地址空间的偏移量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; index;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 作为文件映射一部分的页的 inode 和偏移量的哈希，将共享同一个哈希桶（hash_bucket）的页连接在一起
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next_hash;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前页的引用计数，变成 0 表示可能被释放，否则就被一个或多个进程使用或用于内核 IO 等待
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	atomic_t count;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 定义页的状态，见下表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; flags;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 用于页替换策略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; list_head lru;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 配合 next_hash 实现类似双端链表的操作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;pprev_hash;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 1. 块设备用于跟踪 buffer_head
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 由进程映射的匿名页如果支持交换文件可能关联一个 buffer_head，如果页必须以底层文件系统定义的大小的块和支持的存储同步则有必要
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; buffer_head &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; buffers;

	&lt;span style=&#34;color:#75715e&#34;&gt;#if defined(CONFIG_HIGHMEM) || defined(WANT_PAGE_VIRTUAL)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ZONE_HIGHMEM 的虚拟地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;virtual;
	&lt;span style=&#34;color:#75715e&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* CONFIG_HIGMEM || WANT_PAGE_VIRTUAL */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;} mem_map_t;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;映射页到分区&#34;&gt;映射页到分区&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page-&amp;gt;zone&lt;/code&gt; 内核版本 2.4.18 之前 &lt;code&gt;struct page&lt;/code&gt; 通过 &lt;code&gt;page-&amp;gt;zone&lt;/code&gt; 引用所属的分区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page-&amp;gt;flags&lt;/code&gt; 内核版本 2.4.18 之后通过顶部 &lt;code&gt;ZONE_SHIFT&lt;/code&gt; (8 in x86) 个位替代 &lt;code&gt;page-&amp;gt;zone&lt;/code&gt; 来计算页所属的分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;映射过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;mm/page_alloc.c&lt;/code&gt; 中初始化 &lt;code&gt;zone_table&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; zone_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;zone_table[MAX_NR_ZONES&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MAX_NR_NODES];
&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EXPORT_SYMBOL&lt;/span&gt;(zone_table);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAX_NR_ZONE&lt;/code&gt; 定义一个内存节点中的最大分区数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAX_NR_NODES&lt;/code&gt; 定义最大可存在的内存节点数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPORT_SYMBOL()&lt;/code&gt; 使 &lt;code&gt;zone_table&lt;/code&gt; 可被可加载模块（loadable modules）访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个表将被当作一个多维数组对待。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;free_area_init_core&lt;/code&gt; 中初始化内存节点中所有的页&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置分区表(zone table)的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;733&lt;/span&gt;           zone_table[nid &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MAX_NR_ZONES &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zone;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nid&lt;/code&gt; &amp;ndash; 当前内存节点 ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; &amp;ndash; 分区（ &lt;code&gt;struct zone_t&lt;/code&gt; ）索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;set_page_zone&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;788&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;set_page_zone&lt;/span&gt;(page, nid &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MAX_NR_ZONES &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page&lt;/code&gt; 分区内被初始的页，所以 &lt;code&gt;zone_table&lt;/code&gt; 的索引存储在页中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;high-memory&#34;&gt;High Memory&lt;/h4&gt;
&lt;p&gt;内核支持 High Memory 用于解决内核可使用的地址空间不足的情况（目前 64 位平台下基本上所有内存都可以映射到内核，所以基本不会存在这种情况）。&lt;/p&gt;
&lt;p&gt;32 位 x86 系统关于 High Memory 存在两个阈值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4GiB：32 位物理地址最大可寻址大小，内核 通过 &lt;code&gt;kmap()&lt;/code&gt; 临时将内存页从 High Memory 映射到 &lt;code&gt;ZONE_NORMAL&lt;/code&gt; 用于访问 1GiB 到 4GiB 的内存&lt;/li&gt;
&lt;li&gt;64GiB：Intel 发明的 PAE（Physical Address Extension）允许 32 位系统下使用更多内存，通过增加额外的 4 位用于内存寻址最大可以支持 2 的 36 次方个字节（64GiB)的内存寻址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺陷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理论上 PAE 允许处理器最大可寻址 64GiB，但是由于 Linux 的虚拟地址空间最大仅支持 4GiB，所以进程依然不能使用这么多内存。&lt;/li&gt;
&lt;li&gt;PAE 同时也不允许内核本身使用这么多内存：描述 1GiB 内存需要消耗 11MiB 内核内存（每个 &lt;code&gt;struct page&lt;/code&gt; 需要在内核虚拟地址空间中（&lt;code&gt;ZONE_NORMAL&lt;/code&gt;）消耗 44 字节），16GiB 需要 176MiB，这样会给 &lt;code&gt;ZONE_NORMAL&lt;/code&gt; 造成很大的压力&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-dot-6-中的变更&#34;&gt;2.6 中的变更&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;描述内存节点的 &lt;code&gt;pg_data_t&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;node_start_fpn&lt;/strong&gt;&lt;/strong&gt; 替换了 &lt;code&gt;node_start_paddr&lt;/code&gt;，用于适配 PAE 架构可以突破 32 位寻址解决通过旧字段无法访问 4GiB 之后的内存节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;kswapd_wait&lt;/strong&gt;&lt;/strong&gt; 用于 &lt;strong&gt;&lt;strong&gt;kswapd&lt;/strong&gt;&lt;/strong&gt; 的新的等待队列替换之前的全局等待队列。2.6 中每一个内存节点都有一个对应的 &lt;strong&gt;&lt;strong&gt;kswapdN&lt;/strong&gt;&lt;/strong&gt;（N 对应内存节点的 ID），同时每一个 &lt;strong&gt;&lt;strong&gt;kswapd&lt;/strong&gt;&lt;/strong&gt; 也通过此字段用于自己的等待队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;node_size&lt;/code&gt; 字段被以下两个字段替代，引入这一变化主要是认识到节点中可能有 “holes” 导致没有物理内存支持寻址这一事实。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;node_present_pages&lt;/strong&gt;&lt;/strong&gt; 内存节点中存在的总物理页数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;node_spanned_pages&lt;/strong&gt;&lt;/strong&gt; 被当前内存节点寻址的总区域，包括任意可能存在的 &amp;ldquo;holes&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;zone_t&lt;/code&gt; 改为 &lt;code&gt;struct zone&lt;/code&gt; ，同时 LRU 列表由全局改为存储再 &lt;code&gt;struct zone&lt;/code&gt; 中（LRU 用于确定内存页释放或切出的顺序）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;相关链接&#34;&gt;相关链接&lt;/h4&gt;
</content>
    </item>
    
    <item>
      <title>Programming Language</title>
      <link>https://www.linuxzen.com/notes/topics/20200320170914_programming_language/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200320170914_programming_language/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>《百箭穿杨》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200320180837_%E7%99%BE%E7%AE%AD%E7%A9%BF%E6%9D%A8/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320180837_%E7%99%BE%E7%AE%AD%E7%A9%BF%E6%9D%A8/</guid>
      <description>需要熟悉股市相关概念进行扫盲。
粗读要点  树立安全边际，跟随格雷厄姆 寻找好的困难股，降低触底难度，加大触底区间，预测底部区间，分 5 档抄底，最好在 1-3 档就能完成抄底 每次只买总资产的 1% 盈利后可以将本金提出，只留底仓等待顶峰信号后抛出赚取高额利润的前提下保障本金 总是留 25%-40% 的现金 做长线 分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底 看行业处于哪个周期：萌发、成长啥的 不做重仓  复读要点完善 安全边际 跟随格雷厄姆
 偏离：更保守或更激进 大赚小赔不如小赚不赔：不亏钱  困境好企   做有把握的事，不啃硬骨头，广撒网，多捞鱼，选取一批困境好企来实现从小盘大稳定增长股
  行业中的好企业标准
  行业很关键
  需求无限，供给有限
  关注行业周期
大周期：新生-&amp;gt;成长-&amp;gt;成熟-&amp;gt;衰落-&amp;gt;消亡 小周期：大周期各个过程中的景气与萧条（一两年、三五年甚至一二十年）
消亡之前会有死灰复燃，大周期中成长阶段会有萧条，注意区分。
  门槛高，竞争少
只有少数寡头，估值会高
  唯一或第一
成熟行业比较简单，成长行业比较困难。
通过企业原则、经营原则、财务原则和市场原则衡量。- P28 生活经验活常识也很重要。
    落难好企
 行业顺境，某些原因导致的猜疑导致股价下跌 行业遭遇整体困境：偶然事件，反转时间比好把握 个股困境，主打产品破灭：有无法度过的风险    财务数据衡量困境好企能否度过难关 - P32</description>
      <content>&lt;p&gt;需要熟悉&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/&#34;&gt;股市相关概念&lt;/a&gt;进行扫盲。&lt;/p&gt;
&lt;h2 id=&#34;粗读要点&#34;&gt;粗读要点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;树立安全边际，跟随格雷厄姆&lt;/li&gt;
&lt;li&gt;寻找好的困难股，降低触底难度，加大触底区间，预测底部区间，分 5 档抄底，最好在 1-3 档就能完成抄底&lt;/li&gt;
&lt;li&gt;每次只买总资产的 1%&lt;/li&gt;
&lt;li&gt;盈利后可以将本金提出，只留底仓等待顶峰信号后抛出赚取高额利润的前提下保障本金&lt;/li&gt;
&lt;li&gt;总是留 25%-40% 的现金&lt;/li&gt;
&lt;li&gt;做长线&lt;/li&gt;
&lt;li&gt;分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底&lt;/li&gt;
&lt;li&gt;看行业处于哪个周期：萌发、成长啥的&lt;/li&gt;
&lt;li&gt;不做重仓&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;复读要点完善&#34;&gt;复读要点完善&lt;/h2&gt;
&lt;h3 id=&#34;安全边际&#34;&gt;安全边际&lt;/h3&gt;
&lt;p&gt;跟随格雷厄姆&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偏离：更保守或更激进&lt;/li&gt;
&lt;li&gt;大赚小赔不如小赚不赔：不亏钱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;困境好企&#34;&gt;困境好企&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;做有把握的事，不啃硬骨头，广撒网，多捞鱼，选取一批困境好企来实现从小盘大稳定增长股&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行业中的好企业标准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;行业很关键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求无限，供给有限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关注行业周期&lt;/p&gt;
&lt;p&gt;大周期：新生-&amp;gt;成长-&amp;gt;成熟-&amp;gt;衰落-&amp;gt;消亡
小周期：大周期各个过程中的景气与萧条（一两年、三五年甚至一二十年）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;消亡之前会有死灰复燃，大周期中成长阶段会有萧条，注意区分。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;门槛高，竞争少&lt;/p&gt;
&lt;p&gt;只有少数寡头，估值会高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;唯一或第一&lt;/p&gt;
&lt;p&gt;成熟行业比较简单，成长行业比较困难。&lt;/p&gt;
&lt;p&gt;通过企业原则、经营原则、财务原则和市场原则衡量。- P28
生活经验活常识也很重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;落难好企&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行业顺境，某些原因导致的猜疑导致股价下跌&lt;/li&gt;
&lt;li&gt;行业遭遇整体困境：偶然事件，反转时间比好把握&lt;/li&gt;
&lt;li&gt;个股困境，主打产品破灭：有无法度过的风险&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;财务数据衡量困境好企能否度过难关 - P32&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负债率越低越好：不能超过 50%&lt;/li&gt;
&lt;li&gt;资产中的现金越多越好：高于股东权益的 1/3，刚上市的好过上市很久的老企业（把钱折腾光了）&lt;/li&gt;
&lt;li&gt;产品的毛利率越高越好：市场有需求&lt;/li&gt;
&lt;li&gt;应收账款越少越好：钱可能收不回来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过季报发现反转时机&lt;/p&gt;
&lt;p&gt;季报时间长，抗短期干扰，一季度定调、二季度（半年）纠偏或修正、三季度出结果（更好或更差）、四季度（年报）成果汇报和新的起点用于比较第一季度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;一季度和半年狠重要。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;strong&gt;&lt;strong&gt;营业收入&lt;/strong&gt;&lt;/strong&gt; 发现转机。困境表现为净利润增速下滑，之前是好企可能会市盈率过高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容错寻底&#34;&gt;容错寻底&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不亏钱的情况下寻找极限底部，保障安全、带来最大利润、带来良好心态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变种“不破买价”：买入的价格很难再跌回原来的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变成左侧交易者，不追涨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大盘底与个股底的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同步性：大盘筑底个股也在筑底，大盘达到最低位时，个股也先后到达最低位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差异性&lt;/p&gt;
&lt;p&gt;大盘下跌蓝筹股先跌到位，大盘下跌过程中小盘成长股与稳定增长股少许跟跌或逆市上扬。
市场反弹小盘成长股与稳定增长股开始杀跌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;耦合性：大盘底出现时次新股出现底部的概率大，老股形成底部可能需要好几年 &amp;ndash; P56&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容错寻底&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容错：底部是一个区间，20%～30%&lt;/p&gt;
&lt;p&gt;降低触底难度，加大触底区间，预测底部区间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;市场长期下跌导致困境好企出现底部&lt;/p&gt;
&lt;p&gt;反转财务标志出现也可能出现底部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;次新股同步大盘好预测底部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据市净率作为估值依据&lt;/p&gt;
&lt;p&gt;多种情况（P61）：&lt;/p&gt;
&lt;p&gt;次新股 1.5 ～ 2 形成极限底部。
老股 0.5 ～ 1.5。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五档买入&#34;&gt;五档买入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;价格宽度在 10%-20%，一档接底较好，二、三档接底完美，突破五档失败被套&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓解焦虑，平衡心态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一档很关键，应当尽量触底&lt;/li&gt;
&lt;li&gt;三档拉开区间（小盘和稳定2～1PB，困境反转和周期波动 1.5～0.5PB）&lt;/li&gt;
&lt;li&gt;五档提供精神支持，修正三档&lt;/li&gt;
&lt;li&gt;每档只买账户总值的 1%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学会避雷实践安全边际&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;分 5 档抄底，最好在 1-3 档就能完成抄底&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;每次只买总资产的 1%&lt;/li&gt;
&lt;li&gt;盈利后可以将本金提出，只留底仓等待顶峰信号后抛出专区高额利润的前提下保障本金&lt;/li&gt;
&lt;li&gt;总是留 25%-40% 的现金&lt;/li&gt;
&lt;li&gt;做长线&lt;/li&gt;
&lt;li&gt;分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底&lt;/li&gt;
&lt;li&gt;看行业处于哪个周期：萌发、成长啥的&lt;/li&gt;
&lt;li&gt;不做重仓&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>分布式</title>
      <link>https://www.linuxzen.com/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/</guid>
      <description> tags: 技术  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;tags: 技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>状态转移方程 无后效性  如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。
 一旦 \(f(n)\) 确定，“我们如何凑出 \(f(n)\) ”就再也用不着了：
 要求出 \(f(15)\)，只需要知道 \(f(14)\),\(f(10)\),\(f(4)\) 的值， 而 \(f(14)\),\(f(10)\),\(f(4)\) 是如何算出来的，对之后的问题没有影响。  “未来与过去无关”，这就是无后效性。
最优子结构  大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”：
 \(f(n)\) 的定义需要蕴含“最优”，利用 \(f(14)\),\(f(10)\),\(f(4)\) 的最优解，我们即可算出 \(f(15)\) 的最优解。
能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。 DP 思路 参见 LeetCode 讨论：
 先写出穷举的方法 找出不必要的重复计算 写出 DP  练习 0x00 硬币找零 描述 假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。
状态转移公式 公式 \(f(n)=min\{f(n-1),f(n-3),f(n-5)\} + 1\)
检查是否满足上面提到的两个特性：
 无后效性：对于 \(n\)，一旦 \(f(n)\) 确定，以后只关心 \(f(n)\) 的值，不关心怎么计算的； 最优子结构：对于 \(n\)，只要 \(n - 1\) \(n - 3\) \(n - 5\) 能是最优解，那么就能计算出 n;  推导过程  假设找零 15：</description>
      <content>&lt;h2 id=&#34;状态转移方程&#34;&gt;状态转移方程&lt;/h2&gt;
&lt;h3 id=&#34;无后效性&#34;&gt;无后效性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一旦 \(f(n)\) 确定，“我们如何凑出 \(f(n)\) ”就再也用不着了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求出 \(f(15)\)，只需要知道 \(f(14)\),\(f(10)\),\(f(4)\) 的值，&lt;/li&gt;
&lt;li&gt;而 \(f(14)\),\(f(10)\),\(f(4)\) 是如何算出来的，对之后的问题没有影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“未来与过去无关”，这就是无后效性。&lt;/p&gt;
&lt;h3 id=&#34;最优子结构&#34;&gt;最优子结构&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;\(f(n)\) 的定义需要蕴含“最优”，利用 \(f(14)\),\(f(10)\),\(f(4)\) 的最优解，我们即可算出 \(f(15)\) 的最优解。&lt;/p&gt;
&lt;h3 id=&#34;能将大问题拆成几个小问题-且满足无后效性-最优子结构性质&#34;&gt;能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。&lt;/h3&gt;
&lt;h2 id=&#34;dp-思路&#34;&gt;DP 思路&lt;/h2&gt;
&lt;p&gt;参见 &lt;a href=&#34;https://leetcode.com/problems/unique-binary-search-trees/discuss/1565543/C%2B%2BPython-5-Easy-Solutions-w-Explanation-or-Optimization-from-Brute-Force-to-DP-to-Catalan-O(N)&#34;&gt;LeetCode 讨论&lt;/a&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先写出穷举的方法&lt;/li&gt;
&lt;li&gt;找出不必要的重复计算&lt;/li&gt;
&lt;li&gt;写出 DP&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;练习&#34;&gt;练习&lt;/h2&gt;
&lt;h3 id=&#34;0x00-硬币找零&#34;&gt;0x00 硬币找零&lt;/h3&gt;
&lt;h4 id=&#34;描述&#34;&gt;描述&lt;/h4&gt;
&lt;p&gt;假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。&lt;/p&gt;
&lt;h4 id=&#34;状态转移公式&#34;&gt;状态转移公式&lt;/h4&gt;
&lt;p&gt;公式 \(f(n)=min\{f(n-1),f(n-3),f(n-5)\} + 1\)&lt;/p&gt;
&lt;p&gt;检查是否满足上面提到的两个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无后效性：对于 \(n\)，一旦 \(f(n)\) 确定，以后只关心 \(f(n)\) 的值，不关心怎么计算的；&lt;/li&gt;
&lt;li&gt;最优子结构：对于 \(n\)，只要 \(n - 1\) \(n - 3\)  \(n - 5\) 能是最优解，那么就能计算出 n;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;推导过程&#34;&gt;推导过程&lt;/h4&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/notes/ox-hugo/dp-coin.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;假设找零 15：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若优先使用 5 元硬币 \(cost = f(10) + 1 = 2 + 1 = 3\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 5 元： \(f(10)=f(5) + 1\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(f(5)=1\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 3 元： \(f(10)=f(7) + 1\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(f(7)=f(4) + 1 = 2 + 1 = 3\)
&lt;ul&gt;
&lt;li&gt;\(f(4)= 1 + 1\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若优先使用 3 元硬币 \(cost = f(12) + 1 = 4 + 1 = 5\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(f(12)=f(7) + 1\) &amp;ndash; 上面已经算出 \(f(7)=3\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若优先使用 1 元硬币 \(cost = f(14) + 1\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(f(14)=f(13)+1\)
&lt;ul&gt;
&lt;li&gt;\(f(13)=f(12) + 1 = 4 + 5\)     (上面已经算出 \(f(12)=4\)）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将上述过程反过来就可以一步步推出结果。&lt;/p&gt;
&lt;h4 id=&#34;实现&#34;&gt;实现&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;//　假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCoinNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面算法实现有一个问题，就是每次计算时只优先考虑采用最大面值（类似贪心算法），无法应对某些情况，对比下面代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//　假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCoinNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt; {
			panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;0x01单路取苹果&#34;&gt;0x01单路取苹果&lt;/h3&gt;
&lt;h4 id=&#34;描述&#34;&gt;描述&lt;/h4&gt;
&lt;p&gt;一个矩形区域被划分为 \(N*M\) 个小矩形格子，在格子(i,j)中有A[i][j]个苹果。现在从左上角的格子(1,1)出发，要求每次只能向右走一步或向下走一步，最后到达(N,M)，每经过一个格子就把其中的苹果全部拿走。请找出能拿到最多苹果数的路线。&lt;/p&gt;
&lt;h4 id=&#34;思路&#34;&gt;思路&lt;/h4&gt;
&lt;p&gt;这题是 0x00 的扩展，格子 A[N][M] 的苹果数量为 \(max\{A[N-1][M],A[N][M-1]\}+A[N][M]\)&lt;/p&gt;
&lt;h2 id=&#34;leetcode-真题&#34;&gt;LeetCode 真题&lt;/h2&gt;
&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/23995189&#34;&gt;https://www.zhihu.com/question/23995189&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>大数据</title>
      <link>https://www.linuxzen.com/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/</guid>
      <description> tags: 技术  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>Wikipedia: 归并排序</description>
      <content>&lt;p&gt;Wikipedia: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F&#34;&gt;归并排序&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>算法</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171501_%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171501_%E7%AE%97%E6%B3%95/</guid>
      <description> LeetCode 动态规划 归并排序 二叉树的遍历 回溯算法  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/&#34;&gt;动态规划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/&#34;&gt;归并排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210220203210-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/&#34;&gt;二叉树的遍历&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/&#34;&gt;回溯算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt</title>
      <link>https://www.linuxzen.com/notes/notes/20200319221212_let_s_encrypt/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319221212_let_s_encrypt/</guid>
      <description>tags: Over the Wall,HTTPs  这里以新增 vd.linuxzen.com 为例。
新增 DNS 解析  通过 DNSPOD 新增 DNS 解析 A 记录  调整 Nginx 新增 HTTP 站点 Nginx 参考配置
server { listen 80; server_name vd.linuxzen.com; include /etc/nginx/snippets/letsencrypt-acme-challenge.conf; } 新增签发证书 $ acme.sh --force --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d vd.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/ 安装证书
$ acme.sh --install-cert -d linuxzen.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/&#34;&gt;Over the Wall&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162448-https/&#34;&gt;HTTPs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里以新增 &lt;code&gt;vd.linuxzen.com&lt;/code&gt; 为例。&lt;/p&gt;
&lt;h2 id=&#34;新增-dns-解析&#34;&gt;新增 DNS 解析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过 DNSPOD 新增 DNS 解析 A 记录&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;调整-nginx-新增-http-站点&#34;&gt;调整 Nginx 新增 HTTP 站点&lt;/h2&gt;
&lt;p&gt;Nginx 参考配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
		&lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;vd.linuxzen.com&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/snippets/letsencrypt-acme-challenge.conf&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;新增签发证书&#34;&gt;新增签发证书&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ acme.sh --force --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d vd.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装证书&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ acme.sh --install-cert -d linuxzen.com --cert-file /etc/nginx/certs/linuxzen.com/cert.pem --key-file /etc/nginx/certs/linuxzen.com/privkey.pem --fullchain-file /etc/nginx/certs/linuxzen.com/fullchain.pem --reloadcmd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo service nginx reload &amp;amp;&amp;amp; docker restart ipsec-vpn-ssl &amp;amp;&amp;amp; docker restart v2ray &amp;amp;&amp;amp; docker restart v2ray2&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;调整-nginx-配置文件应用证书&#34;&gt;调整 Nginx 配置文件应用证书&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
		&lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;vd.linuxzen.com&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;return&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;https://&lt;/span&gt;$server_name$request_uri;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
		&lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ssl&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fastopen=3&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;reuseport&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;vd.linuxzen.com&lt;/span&gt;;

		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/certs/linuxzen.com/fullchain.pem&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/certs/linuxzen.com/privkey.pem&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_protocols&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1.1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1.2&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_dhparam&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/ssl/certs/dhparam.pem&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_ciphers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&amp;#39;&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_session_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1d&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_session_cache&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;shared:SSL:50m&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_stapling&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;ssl_stapling_verify&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;add_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Strict-Transport-Security&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;max-age=15768000&lt;/span&gt;;

		&lt;span style=&#34;color:#f92672&#34;&gt;access_log&lt;/span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/nginx/vd.linuxzen.com.log&lt;/span&gt;;

		&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
				&lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;/srv/www/vd.linuxzen.com&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;index&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.htm&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/passport&lt;/span&gt; {
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_redirect&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://v2ray&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.1&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_read_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;300s&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_send_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;300s&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Upgrade&lt;/span&gt; $http_upgrade;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Connection&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Upgrade&amp;#34;&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Host&lt;/span&gt; $http_host;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Real-IP&lt;/span&gt; $remote_addr;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Forwarded-For&lt;/span&gt; $proxy_add_x_forwarded_for;
		}
		&lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/snippets/letsencrypt-acme-challenge.conf&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Over the Wall</title>
      <link>https://www.linuxzen.com/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>V2Ray</title>
      <link>https://www.linuxzen.com/notes/notes/20200319215535_v2ray/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319215535_v2ray/</guid>
      <description>tags: Over the Wall,Tools  架构 Client -&amp;gt; DIDIYun(HAProxy) -&amp;gt; HK
滴滴云 HAPorxy 配置 117.51.146.119
frontend v_linuxzen_com bind *:6697 option tcplog mode tcp default_backend v_linuxzen_com_nodes backend v_linuxzen_com_nodes mode tcp balance roundrobin option ssl-hello-chk server webserver1 45.115.36.35:443 check 客户端改动 需要调整 hosts
$ echo &amp;#39;117.51.146.119 v.linuxzen.com&amp;#39; | sudo tee -a /etc/hosts HK V2Ray Docker 启动 $ docker run -d -p 127.0.0.1:25001:25001 --name v2ray --restart always -v /etc/v2ray:/etc/v2ray v2ray/official HK Let&amp;rsquo;s Encrypt 证书 $ acme.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/&#34;&gt;Over the Wall&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220104162549-tools/&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;p&gt;Client -&amp;gt; DIDIYun(HAProxy) -&amp;gt; HK&lt;/p&gt;
&lt;h2 id=&#34;滴滴云-haporxy-配置&#34;&gt;滴滴云 HAPorxy 配置&lt;/h2&gt;
&lt;p&gt;117.51.146.119&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-haproxy&#34; data-lang=&#34;haproxy&#34;&gt;frontend v_linuxzen_com
	bind *:6697
	option tcplog
	mode tcp
	default_backend v_linuxzen_com_nodes

backend v_linuxzen_com_nodes
	mode tcp
	balance roundrobin
	option ssl-hello-chk
	server webserver1 45.115.36.35:443 check
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;客户端改动&#34;&gt;客户端改动&lt;/h2&gt;
&lt;p&gt;需要调整 hosts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;117.51.146.119 v.linuxzen.com&amp;#39;&lt;/span&gt; | sudo tee -a /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hk-v2ray-docker-启动&#34;&gt;HK V2Ray Docker 启动&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker run -d -p 127.0.0.1:25001:25001 --name v2ray --restart always -v /etc/v2ray:/etc/v2ray v2ray/official
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hk-let-s-encrypt-证书&#34;&gt;HK Let&amp;rsquo;s Encrypt 证书&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ acme.sh --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/
$ acme.sh --install-cert -d linuxzen.com --cert-file /etc/nginx/certs/linuxzen.com/cert.pem --key-file /etc/nginx/certs/linuxzen.com/privkey.pem --fullchain-file /etc/nginx/certs/linuxzen.com/fullchain.pem --reloadcmd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo service nginx reload &amp;amp;&amp;amp; docker restart ipsec-vpn-ssl &amp;amp;&amp;amp; docker restart v2ray &amp;amp;&amp;amp; docker restart v2ray2&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hk-v2ray-配置&#34;&gt;HK V2Ray 配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;: {
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loglevel&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;access&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/log/v2ray/access.log&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/log/v2ray/error.log&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inbounds&amp;#34;&lt;/span&gt;: [
	{
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;25001&lt;/span&gt;,
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;listen&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;,
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vmess&amp;#34;&lt;/span&gt;,
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;clients&amp;#34;&lt;/span&gt;: [
		  {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1fde12b8-0cfd-11ea-a4b3-acde48001122&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;alterId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
		  }
		]
	  },
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;streamSettings&amp;#34;&lt;/span&gt;: {
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ws&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;wsSettings&amp;#34;&lt;/span&gt;: {
		  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/passport&amp;#34;&lt;/span&gt;
		}
	  }
	}
  ],
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;outbounds&amp;#34;&lt;/span&gt;: [
	{
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;freedom&amp;#34;&lt;/span&gt;,
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {}
	}
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hk-nginx-配置&#34;&gt;HK Nginx 配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
		&lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;v.linuxzen.com&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;return&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;https://&lt;/span&gt;$server_name$request_uri;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;v2ray&lt;/span&gt; {
		&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; 127.0.0.1:&lt;span style=&#34;color:#ae81ff&#34;&gt;25001&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; 127.0.0.1:&lt;span style=&#34;color:#ae81ff&#34;&gt;25002&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;server{&lt;/span&gt;
		&lt;span style=&#34;color:#e6db74&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ssl&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fastopen=3&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;reuseport&lt;/span&gt;;
		&lt;span style=&#34;color:#75715e&#34;&gt;# listen 80;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;server_name&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;v.linuxzen.com&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/certs/linuxzen.com/fullchain.pem&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/certs/linuxzen.com/privkey.pem&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_protocols&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1.1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1.2&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_dhparam&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/ssl/certs/dhparam.pem&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_ciphers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&amp;#39;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_session_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1d&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_session_cache&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;shared:SSL:50m&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_stapling&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_stapling_verify&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;add_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Strict-Transport-Security&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;max-age=15768000&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;access_log&lt;/span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/nginx/v.linuxzen.com.log&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
				&lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;/srv/www/v.linuxzen.com&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;index&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.htm&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/passport&lt;/span&gt; {
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_redirect&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://v2ray&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.1&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_read_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;300s&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_send_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;300s&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Upgrade&lt;/span&gt; $http_upgrade;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Connection&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Upgrade&amp;#34;&lt;/span&gt;;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Host&lt;/span&gt; $http_host;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Real-IP&lt;/span&gt; $remote_addr;
				&lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Forwarded-For&lt;/span&gt; $proxy_add_x_forwarded_for;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; /etc/nginx/snippets/letsencrypt-acme-challenge.conf;
&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;新增一个域名用于单独的滴滴云加速&#34;&gt;新增一个域名用于单独的滴滴云加速&lt;/h2&gt;
&lt;p&gt;使用一个单独的域名 &lt;code&gt;vd.linuxzen.com&lt;/code&gt; 用于滴滴云加速，参见&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200319221212_let_s_encrypt/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>xinetd</title>
      <link>https://www.linuxzen.com/notes/notes/20200319223026_xinetd/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200319223026_xinetd/</guid>
      <description>tags: Over the Wall,Network  xinetd 代理 SMTP 和 IMAP 通过 xinetd 代理 SMTP 和 IMAP 实现 gmail 翻墙。
  配置服务端
service imap { type = UNLISTED port = 993 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = imap.gmail.com 993 per_source = UNLIMITED cps = 100 2 } service smtp-465 { type = UNLISTED port = 465 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200319224041_%E7%BF%BB%E5%A2%99/&#34;&gt;Over the Wall&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200827180638-network/&#34;&gt;Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xinetd-代理-smtp-和-imap&#34;&gt;xinetd 代理 SMTP 和 IMAP&lt;/h2&gt;
&lt;p&gt;通过 xinetd 代理 SMTP 和 IMAP 实现 gmail 翻墙。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置服务端&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xinetd&#34; data-lang=&#34;xinetd&#34;&gt;service imap
{
	type = UNLISTED
	port = 993
	bind = 0.0.0.0
	socket_type = stream
	wait = no
	user = nobody
	redirect = imap.gmail.com 993
	per_source = UNLIMITED
	cps = 100 2
}
service smtp-465
{
	type = UNLISTED
	port = 465
	bind = 0.0.0.0
	socket_type = stream
	wait = no
	user = nobody
	redirect = smtp.gmail.com 465
	per_source = UNLIMITED
	cps = 100 2
}
service smtp-587
{
	type = UNLISTED
	port = 587
	bind = 0.0.0.0
	socket_type = stream
	wait = no
	user = nobody
	redirect = smtp.gmail.com 587
	per_source = UNLIMITED
	cps = 100 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本机修改 hosts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;45.115.36.35 smtp.gmail.com&amp;#39;&lt;/span&gt; | sudo tee -a /etc/hosts
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;45.115.36.35 imap.gmail.com&amp;#39;&lt;/span&gt; | sudo tee -a /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;通过滴滴云穿透和加速-gmail-代理&#34;&gt;通过滴滴云穿透和加速 gmail 代理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过在滴滴云上配置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xinetd&#34; data-lang=&#34;xinetd&#34;&gt;service imap
{
	type = UNLISTED
	port = 993
	bind = 0.0.0.0
	socket_type = stream
	wait = no
	user = nobody
	redirect = 45.115.36.35 993
	per_source = UNLIMITED
	cps = 100 2
}
service smtp-465
{
	type = UNLISTED
	port = 465
	bind = 0.0.0.0
	socket_type = stream
	wait = no
	user = nobody
	redirect = 45.115.36.35 465
	per_source = UNLIMITED
	cps = 100 2
}
service smtp-587
{
	type = UNLISTED
	port = 587
	bind = 0.0.0.0
	socket_type = stream
	wait = no
	user = nobody
	redirect = 45.115.36.35 587
	per_source = UNLIMITED
	cps = 100 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调整本地 hosts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;117.51.146.119 smtp.gmail.com&amp;#39;&lt;/span&gt; | sudo tee -a /etc/hosts
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;117.51.146.119 imap.gmail.com&amp;#39;&lt;/span&gt; | sudo tee -a /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>股市相关概念</title>
      <link>https://www.linuxzen.com/notes/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>股分类   个股：投资资金来自个人的股票（还有国家股、法人股）
  蓝筹股：明星股
  小盘
市值比较低的股票
 小盘价值股：格低于价值的股票，被低估的股票，长期看来值得投资的股票。 小盘成长股：成长潜力很大，公司发展处于较快阶段，但不确定性也比较高，业绩波动可能会很大。    稳定增长股：小盘具有一定品牌效应后的快销品，达到一定统治地位，最好在行业的繁荣周期顶峰卖出
  周期股
  相关指标   市盈率（P/E 或 PER）= 每股市值 / 每股盈余
每股市价处于每股盈余（EPS），评估股价是昂贵还是便宜。市盈率越低代表投资者能够以相对较低的价格购入股票。
Wikipedia: https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87
  市净率（PBR，P/B） = 总市值 / 净资产
评估高风险企业，企业资产大量为实物资产的企业时收到重视。
  市销率（PSR，P/S） = 总市值 / 营收
公司市值除以上一财年（或季度）的营业收入，或等价地，以公司股价除以每股营利收入，越小（小于 1）通常被认为投资价值越高。可以付出比单位营收更少的钱购买股票。 Wikipedia: https://zh.wikipedia.org/zh-hans/%E5%B8%82%E9%94%80%E7%8E%87
  相关链接
 简单直观的解释一下市盈率和市净率的意思  </description>
      <content>&lt;h2 id=&#34;股分类&#34;&gt;股分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;个股：投资资金来自个人的股票（还有国家股、法人股）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;蓝筹股：明星股&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小盘&lt;/p&gt;
&lt;p&gt;市值比较低的股票&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小盘价值股：格低于价值的股票，被低估的股票，长期看来值得投资的股票。&lt;/li&gt;
&lt;li&gt;小盘成长股：成长潜力很大，公司发展处于较快阶段，但不确定性也比较高，业绩波动可能会很大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;稳定增长股：小盘具有一定品牌效应后的快销品，达到一定统治地位，最好在行业的繁荣周期顶峰卖出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;周期股&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关指标&#34;&gt;相关指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;市盈率（P/E 或 PER）= 每股市值 / 每股盈余&lt;/p&gt;
&lt;p&gt;每股市价处于每股盈余（EPS），评估股价是昂贵还是便宜。市盈率越低代表投资者能够以相对较低的价格购入股票。&lt;/p&gt;
&lt;p&gt;Wikipedia: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87&#34;&gt;https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;市净率（PBR，P/B） = 总市值 / 净资产&lt;/p&gt;
&lt;p&gt;评估高风险企业，企业资产大量为实物资产的企业时收到重视。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;市销率（PSR，P/S） = 总市值 / 营收&lt;/p&gt;
&lt;p&gt;公司市值除以上一财年（或季度）的营业收入，或等价地，以公司股价除以每股营利收入，越小（小于 1）通常被认为投资价值越高。可以付出比单位营收更少的钱购买股票。
Wikipedia: &lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E5%B8%82%E9%94%80%E7%8E%87&#34;&gt;https://zh.wikipedia.org/zh-hans/%E5%B8%82%E9%94%80%E7%8E%87&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关链接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/30431884&#34;&gt;简单直观的解释一下市盈率和市净率的意思&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>基金定投</title>
      <link>https://www.linuxzen.com/notes/notes/20200311093314_%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200311093314_%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/</guid>
      <description>适合人群：穷人、笨人、忙人、好人
  为什么
 通胀太高，股票战胜通胀的重要工具 绝大多数人不具备择时能力 避免高点买入    核心逻辑：放弃择时，持续小额买入，降低成本
  缺点：在市场上涨、高位震荡过程中，虽然盈利大幅提高，但持仓成本也在快速提高。一旦市场转向熊市，整体会迅速亏本。
 单边上涨：定投盈利少于一次性投资 先震荡后上涨：定投盈利少于一次性投资 先上涨后下跌：定投亏损多于一次性投资 单边下跌：定投亏损少于一次性投资 震荡：定投与一次性投资持平 先下跌再震荡：定投亏损少于一次性投资 除了坚持，还在于止盈策略，牛市中成本不断提高，需要及时止盈，防止下跌时候的亏损    错误理念
 定投不是万能，需要防止“倒微笑曲线周期” 巴菲特说指数基金难以超越仅限于美股，A 股与之相反 定投组合包含债券基金：定投适合波动较大的权益类资产（股票、商品），债卷等固定收益类产品本身波动小，一次性买入和定投基本没区别 月定投不够还要周定投：基本没差别 定投是懒人投资，坚持即可：还需要主动管理，如定投的标的不再适合定投，该换要换。 一次性投资止损不止赢，定投止赢不止损。 定投只买开放式基金：还可以宽基指数基金、主题指数基金、行业指数基金、风格指数基金、策略指数基金、QDII 指数基金、商品指数基金。此外，还有折价的封闭式基金、定增基金，适当的配置会非常好玩。    策略
 定投买入，止盈不止损： 需要在可能出现的“倒微笑曲线周期”及时止盈。 制订量化估值标准   技术分析
通过MA、MACD、RSI等各种技术指标，判断目前市场从长期看，是相对低位还是高位
 趋势上涨原则：MA(30)&amp;gt;MA(60)&amp;gt;MA(120)； 趋势下跌原则：MA(30)&amp;lt;MA(60)&amp;lt;MA(120)。  均线偏离法：根据指数价格对均线偏离的程度决定投资额度的多少。
 P&amp;gt;MA(120)：正偏离，减少投资额度； P&amp;lt;MA(120)：负偏离，增加投资额度。    基本面分析
根据指数相关基本面指标，判断股市处于高估或者低估。如市盈率、市净率、整体ROI等地。在股市高估时，降低投资额度，在股市低估时，增加投资额度。
  定期不定额策略
在上述策略的基础上，如目前市场明显在历史地点，原来每个月投1000的，这时不妨投2000。如市场明显高估，每个月投1000的可以投500。如果涨的都害怕了，可以不投甚至卖出一部分。
  产品池管理</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;适合人群：穷人、笨人、忙人、好人&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通胀太高，股票战胜通胀的重要工具&lt;/li&gt;
&lt;li&gt;绝大多数人不具备择时能力&lt;/li&gt;
&lt;li&gt;避免高点买入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心逻辑：放弃择时，持续小额买入，降低成本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：在市场上涨、高位震荡过程中，虽然盈利大幅提高，但持仓成本也在快速提高。一旦市场转向熊市，整体会迅速亏本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单边上涨：定投盈利少于一次性投资&lt;/li&gt;
&lt;li&gt;先震荡后上涨：定投盈利少于一次性投资&lt;/li&gt;
&lt;li&gt;先上涨后下跌：定投亏损多于一次性投资&lt;/li&gt;
&lt;li&gt;单边下跌：定投亏损少于一次性投资&lt;/li&gt;
&lt;li&gt;震荡：定投与一次性投资持平&lt;/li&gt;
&lt;li&gt;先下跌再震荡：定投亏损少于一次性投资&lt;/li&gt;
&lt;li&gt;除了坚持，还在于止盈策略，牛市中成本不断提高，需要及时止盈，防止下跌时候的亏损&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误理念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定投不是万能，需要防止“倒微笑曲线周期”&lt;/li&gt;
&lt;li&gt;巴菲特说指数基金难以超越仅限于美股，A 股与之相反&lt;/li&gt;
&lt;li&gt;定投组合包含债券基金：定投适合波动较大的权益类资产（股票、商品），债卷等固定收益类产品本身波动小，一次性买入和定投基本没区别&lt;/li&gt;
&lt;li&gt;月定投不够还要周定投：基本没差别&lt;/li&gt;
&lt;li&gt;定投是懒人投资，坚持即可：还需要主动管理，如定投的标的不再适合定投，该换要换。 &lt;strong&gt;&lt;strong&gt;一次性投资止损不止赢，定投止赢不止损。&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;定投只买开放式基金：还可以宽基指数基金、主题指数基金、行业指数基金、风格指数基金、策略指数基金、QDII 指数基金、商品指数基金。此外，还有折价的封闭式基金、定增基金，适当的配置会非常好玩。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定投买入，止盈不止损： &lt;strong&gt;&lt;strong&gt;需要在可能出现的“倒微笑曲线周期”及时止盈。&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;制订量化估值标准
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;技术分析&lt;/p&gt;
&lt;p&gt;通过MA、MACD、RSI等各种技术指标，判断目前市场从长期看，是相对低位还是高位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;趋势上涨原则：MA(30)&amp;gt;MA(60)&amp;gt;MA(120)；&lt;/li&gt;
&lt;li&gt;趋势下跌原则：MA(30)&amp;lt;MA(60)&amp;lt;MA(120)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;均线偏离法：根据指数价格对均线偏离的程度决定投资额度的多少。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P&amp;gt;MA(120)：正偏离，减少投资额度；&lt;/li&gt;
&lt;li&gt;P&amp;lt;MA(120)：负偏离，增加投资额度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本面分析&lt;/p&gt;
&lt;p&gt;根据指数相关基本面指标，判断股市处于高估或者低估。如市盈率、市净率、整体ROI等地。在股市高估时，降低投资额度，在股市低估时，增加投资额度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定期不定额策略&lt;/p&gt;
&lt;p&gt;在上述策略的基础上，如目前市场明显在历史地点，原来每个月投1000的，这时不妨投2000。如市场明显高估，每个月投1000的可以投500。如果涨的都害怕了，可以不投甚至卖出一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产品池管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建“核心——卫星”组合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分基金可以场内购买（炒股账号购买），交易时间短手续费低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25560715&#34;&gt;基金定投，看这篇就够了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>https://www.linuxzen.com/notes/notes/20200310093014_deep_learning/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200310093014_deep_learning/</guid>
      <description> tags: AI What is the Difference Between CNN and RNN?  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200309112015_ai/&#34;&gt;AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lionbridge.ai/articles/difference-between-cnn-and-rnn/&#34;&gt;What is the Difference Between CNN and RNN?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>AI</title>
      <link>https://www.linuxzen.com/notes/notes/20200309112015_ai/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200309112015_ai/</guid>
      <description> Machine Learning Deep Learning 《机器学习实战》读书笔记 How to Train Really Large Models on Many GPUs?  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200903180214-machine_learning/&#34;&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200310093014_deep_learning/&#34;&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200905075701-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《机器学习实战》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lilianweng.github.io/lil-log/2021/09/24/train-large-neural-networks.html&#34;&gt;How to Train Really Large Models on Many GPUs?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Translate</title>
      <link>https://www.linuxzen.com/notes/topics/20200309112105_translate/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200309112105_translate/</guid>
      <description> tags: Learning,Learning English  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211231122121-learning/&#34;&gt;Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>译：深度学习算法：完整指南</title>
      <link>https://www.linuxzen.com/notes/articles/20200309112133_deep_learning_algorithms/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200309112133_deep_learning_algorithms/</guid>
      <description>tags: Translate,Deep Learning,AI,Incomplete  原文链接：Deep Learning Algorithms : The Complete Guide。
深度学习正在影响整个世界。
深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。
在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。
这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。
其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。
我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。
但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。
所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。
Contents   但是什么是深度学习?
  神经网络
  前馈神经网络（FNN）
  卷积神经网络（CNN）
  循环神经网络（RNN）
  递归神经网络（Recurisive Neural Network）
  自编码器（AutoEncoders）
  深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)
  生成对抗网络（GAN）
  Transformers
  图神经网络（GNN）</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200310093014_deep_learning/&#34;&gt;Deep Learning&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200309112015_ai/&#34;&gt;AI&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20211231172037-incomplete/&#34;&gt;Incomplete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;https://theaisummer.com/Deep-Learning-Algorithms/&#34;&gt;Deep Learning Algorithms : The Complete Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;深度学习正在影响整个世界。&lt;/p&gt;
&lt;p&gt;深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。&lt;/p&gt;
&lt;p&gt;在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。&lt;/p&gt;
&lt;p&gt;这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。&lt;/p&gt;
&lt;p&gt;其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。&lt;/strong&gt;&lt;/strong&gt; 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。&lt;/p&gt;
&lt;p&gt;但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。&lt;/p&gt;
&lt;p&gt;所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E4%BD%86%E6%98%AF%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;但是什么是深度学习?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&#34;&gt;神经网络&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-fnn&#34;&gt;前馈神经网络（FNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-cnn&#34;&gt;卷积神经网络（CNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-rnn&#34;&gt;循环神经网络（RNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&#34;&gt;递归神经网络&lt;/a&gt;（Recurisive Neural Network）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8-autoencoders&#34;&gt;自编码器（AutoEncoders）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C--deep-belief-network--%E5%92%8C%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA--restricted-boltzmann-machine&#34;&gt;深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C-gan&#34;&gt;生成对抗网络（GAN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#transformers&#34;&gt;Transformers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-gnn&#34;&gt;图神经网络（GNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;自然语言处理中的深度学习&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%AF%8D%E5%B5%8C%E5%85%A5--word-embedding&#34;&gt;词嵌入 (Word embedding)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BA%8F%E5%88%97%E5%BB%BA%E6%A8%A1-sequence-modeling&#34;&gt;序列建模（Sequence Modeling）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B8%AD%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&#34;&gt;计算机视觉中的机器学习&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%92%8C%E7%89%A9%E4%BD%93%E8%AF%86%E5%88%AB&#34;&gt;本地化和物体识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8D%95%E5%8F%91%E6%8E%A2%E6%B5%8B%E5%99%A8-single-shot-detectors&#34;&gt;单发探测器（Single shot detectors）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2-semantic-segmentation&#34;&gt;语义分割（Semantic Segmentation）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%A7%BF%E5%8A%BF%E4%BC%B0%E8%AE%A1-pose-estimation&#34;&gt;姿势估计（Pose Estimation）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;深度学习在科学和企业界取得了&lt;a href=&#34;https://theaisummer.com/Deep%5Flearning/&#34;&gt;疯狂的人气&lt;/a&gt;。从 2012，卷积神经网络（CNN）在图像识别竞赛（ ImageNet Large Scale Visual Recognition Challenge）中获得了惊人的准确性，&lt;a href=&#34;https://www.technologyreview.com/s/612768/we-analyzed-16625-papers-to-figure-out-where-ai-is-headed-next/&#34;&gt;每年都出现了越来越多的研究论文&lt;/a&gt;并且越来越多的企业将神经网络收录到他们的业务中。据估计，深度学习目前的市场规模为 25 亿，预计到 2023 年将达到 181.6 亿。&lt;/p&gt;
&lt;h2 id=&#34;但是什么是深度学习&#34;&gt;但是什么是深度学习?&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;维基百科&lt;/a&gt;：「深度学习（英語：deep learning）是机器学习的分支，是一種以人工神經網路為架構，對資料進行表徵學習的算法。」&lt;/p&gt;
&lt;p&gt;在我看来， &lt;strong&gt;&lt;strong&gt;深度学习是一系列启发于人脑在处理数据和创建用于决策的模式方面的工作的算法的集合，这是对成为人工神经网络（Artificial Neural Network）得单一模型架构的思想的扩展和改进。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;神经网络&#34;&gt;神经网络&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://karpathy.github.io/neuralnets/&#34;&gt;神经网络（Neural Networks）&lt;/a&gt;就像人脑一样由神经元组成。每一个神经元接收信号作为输入，用权重相乘，对它们求和并应用非线性函数。这些神经元彼此相邻堆叠并分层组织。&lt;/p&gt;
&lt;p&gt;但是通过这些我们能做些什么呢？&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/deep-learning-complete-guide/neuron.jpg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;事实证明，神经网络是出色的 &lt;strong&gt;&lt;strong&gt;函数逼近器（function approximators）&lt;/strong&gt;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;我们可以假设每一个行为和系统可以最终被表示为一个数学函数（可能会异常复杂）。如何我们设法找到该函数，那么我们就可以从本质上理解系统的所有内容。但是找到该函数可能非常困难。因此，我们需要对其进行估算。输入神经网络。&lt;/p&gt;
&lt;h3 id=&#34;反向传播-backpropagation&#34;&gt;反向传播（Backpropagation）&lt;/h3&gt;
&lt;p&gt;神经网络可以使用大量数据和被称为 &lt;a href=&#34;https://brilliant.org/wiki/backpropagation/&#34;&gt;backpropagation&lt;/a&gt; 的算法学习描述函数。我们将数据输入到网络，它生产输出，我们将该输出与所需的输出进行对比（使用损失函数（loss function）），然后我们根据差异再调整权重。&lt;/p&gt;
&lt;p&gt;然后一直重复。使用称为随机梯度下降（&lt;a href=&#34;https://ruder.io/optimizing-gradient-descent/&#34;&gt;stochastic gradient descent&lt;/a&gt;）的非线性优化技术执行权重的调整。&lt;/p&gt;
&lt;p&gt;一段时间之后，网络将在生产输出上变的足够好。因此，训练接结束了。因此，我们设法接近我们的函数。如果我们将输出未知的输入传递给网络，它会基于近似函数（approximated function）给我们一个答案。&lt;/p&gt;
&lt;p&gt;让我们通过一个例子让其更容易理解。比如基于一些原因我们想鉴别一张图片中是否有树。我们将任意类型的图片输入到网络然后网络产生输出。由于我们知道一张图片是否包含树，我们可以对比网络输出和事实并调整网络。&lt;/p&gt;
&lt;p&gt;通过越来越多的图片输入到网络，网络将会越来越精准。现在我们输入一张未知的图片，然后它就会告诉我们图片中是否包含树。很酷对吧？&lt;/p&gt;
&lt;p&gt;多年来，研究人员对原始想法进行了惊人的改进。每种新架构都针对特定问题实现了更高的准确性和速度。我们将所有这些新模型归为特定的类别：&lt;/p&gt;
&lt;h2 id=&#34;前馈神经网络-fnn&#34;&gt;前馈神经网络（FNN）&lt;/h2&gt;
&lt;p&gt;FNN 通常是全部连接的（&lt;a href=&#34;https://theaisummer.com/Neural%5FNetwork%5Ffrom%5Fscratch/&#34;&gt;fully connected&lt;/a&gt;），也就是说层中的每一个神经元都与下一层中其他神经元相连。所描述的结构被称为多层感知器 (Multilayer Perceptron)，起源于 1958。单层感知器只能学习线性可分离模式，但是一个多层感知器可以学习数据间的非线性关系。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/deep-learning-complete-guide/neural-network.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;它们在分类和回归等任务上表现的异常的好。与其他机器学习算法相反，它们并不那么容易收敛。它们拥有的数据越多，其准确性就越高。&lt;/p&gt;
&lt;h2 id=&#34;卷积神经网络-cnn&#34;&gt;卷积神经网络（CNN）&lt;/h2&gt;
&lt;p&gt;CNN 采用了一个叫做&lt;a href=&#34;https://theaisummer.com/Neural%5FNetwork%5Ffrom%5Fscratch%5Fpart2/&#34;&gt;卷积（convolution）&lt;/a&gt;的函数。&lt;/p&gt;
&lt;h2 id=&#34;循环神经网络-rnn&#34;&gt;循环神经网络（RNN）&lt;/h2&gt;
&lt;h2 id=&#34;递归神经网络&#34;&gt;递归神经网络&lt;/h2&gt;
&lt;h2 id=&#34;自编码器-autoencoders&#34;&gt;自编码器（AutoEncoders）&lt;/h2&gt;
&lt;h2 id=&#34;深度信念网络--deep-belief-network--和受限玻尔兹曼机--restricted-boltzmann-machine&#34;&gt;深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)&lt;/h2&gt;
&lt;h2 id=&#34;生成对抗网络-gan&#34;&gt;生成对抗网络（GAN）&lt;/h2&gt;
&lt;h2 id=&#34;transformers&#34;&gt;Transformers&lt;/h2&gt;
&lt;h2 id=&#34;图神经网络-gnn&#34;&gt;图神经网络（GNN）&lt;/h2&gt;
&lt;h2 id=&#34;自然语言处理中的深度学习&#34;&gt;自然语言处理中的深度学习&lt;/h2&gt;
&lt;h3 id=&#34;词嵌入--word-embedding&#34;&gt;词嵌入 (Word embedding)&lt;/h3&gt;
&lt;h3 id=&#34;序列建模-sequence-modeling&#34;&gt;序列建模（Sequence Modeling）&lt;/h3&gt;
&lt;h2 id=&#34;计算机视觉中的机器学习&#34;&gt;计算机视觉中的机器学习&lt;/h2&gt;
&lt;h3 id=&#34;本地化和物体识别&#34;&gt;本地化和物体识别&lt;/h3&gt;
&lt;h3 id=&#34;单发探测器-single-shot-detectors&#34;&gt;单发探测器（Single shot detectors）&lt;/h3&gt;
&lt;h3 id=&#34;语义分割-semantic-segmentation&#34;&gt;语义分割（Semantic Segmentation）&lt;/h3&gt;
&lt;h3 id=&#34;姿势估计-pose-estimation&#34;&gt;姿势估计（Pose Estimation）&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>CPI</title>
      <link>https://www.linuxzen.com/notes/notes/20200224133304_cpi/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224133304_cpi/</guid>
      <description>反映与居民生活有关的产品及劳务价格统计出来的物价变动指标，衡量通货膨胀的主要指标之一：
 超过 3% 为通货膨胀 超过 5% 就是比较严重的通货膨胀  Links  消费者物价指数  </description>
      <content>&lt;p&gt;反映与居民生活有关的产品及劳务价格统计出来的物价变动指标，衡量通货膨胀的主要指标之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超过 3% 为通货膨胀&lt;/li&gt;
&lt;li&gt;超过 5% 就是比较严重的通货膨胀&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B6%88%E8%B2%BB%E8%80%85%E7%89%A9%E5%83%B9%E6%8C%87%E6%95%B8&#34;&gt;消费者物价指数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>ELisp</title>
      <link>https://www.linuxzen.com/notes/notes/20200225192204_elisp/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200225192204_elisp/</guid>
      <description> tags: Emacs  &#39;foo vs #&#39;foo https://emacs.stackexchange.com/a/10943
 #&#39; on symbols will cause the byte-compiler to emit a warning if the function is not defined.
 </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;foo-vs-foo&#34;&gt;&lt;code&gt;&#39;foo&lt;/code&gt; vs &lt;code&gt;#&#39;foo&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://emacs.stackexchange.com/a/10943&#34;&gt;https://emacs.stackexchange.com/a/10943&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#&#39; on symbols will cause the byte-compiler to emit a warning if the function is not defined.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Emacs</title>
      <link>https://www.linuxzen.com/notes/topics/20200218120634/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200218120634/</guid>
      <description>Emacs 插入断页符^L C-q C-l 或 M-x quoted-insert RET C-l。
可以通过 page-break-lines 这个扩展包来显示一个分隔符。
部分 Orgmode 中 awesome-tray 不生效 部分 Orgmode 中 awesome-tray 设置的 0.1 height mode-line 不生效。</description>
      <content>&lt;h2 id=&#34;emacs-插入断页符-l&#34;&gt;Emacs 插入断页符^L&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;C-q C-l&lt;/code&gt; 或 &lt;code&gt;M-x quoted-insert RET C-l&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;a href=&#34;https://github.com/purcell/page-break-lines&#34;&gt;page-break-lines&lt;/a&gt; 这个扩展包来显示一个分隔符。&lt;/p&gt;
&lt;h2 id=&#34;部分-orgmode-中-awesome-tray-不生效&#34;&gt;部分 Orgmode 中 awesome-tray 不生效&lt;/h2&gt;
&lt;p&gt;部分 Orgmode 中 awesome-tray 设置的 0.1 height mode-line 不生效。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Financial Management</title>
      <link>https://www.linuxzen.com/notes/notes/20200224132507/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224132507/</guid>
      <description> 基金 基金定投 股市相关概念 相关书籍  《巴比伦富翁新解》读书笔记 《百箭穿杨》读书笔记    To Read  《布雷迪报告》  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224132645_/&#34;&gt;基金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200311093314_%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/&#34;&gt;基金定投&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/&#34;&gt;股市相关概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关书籍
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200307114151_%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%AF%8C%E7%BF%81%E6%96%B0%E8%A7%A3/&#34;&gt;《巴比伦富翁新解》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320180837_%E7%99%BE%E7%AE%AD%E7%A9%BF%E6%9D%A8/&#34;&gt;《百箭穿杨》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;to-read&#34;&gt;To Read&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《布雷迪报告》&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://www.linuxzen.com/notes/notes/20200218115725/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218115725/</guid>
      <description> tags: Programming Language  柯里化 func max(a, b int) int { if a &amp;gt; b { return a } return b } func currying(a int) func(int) int { return func(b int) int { return max(a, b) } } </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;柯里化&#34;&gt;柯里化&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; {
		 &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;currying&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>https://www.linuxzen.com/notes/notes/20200218115740_go_channel/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218115740_go_channel/</guid>
      <description> tags: Go  Channel Directions func demo(readOnlyStream &amp;lt;-chan bool, writeOnlyStream chan&amp;lt;- bool) { } </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200218115725/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;channel-directions&#34;&gt;Channel Directions&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;demo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;readOnlyStream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;writeOnlyStream&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Helm</title>
      <link>https://www.linuxzen.com/notes/notes/20200218122103_helm/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218122103_helm/</guid>
      <description>tags: Emacs  如何从历史跳到其他命令列表 Key binds C-o
See also: https://emacs.stackexchange.com/questions/18173/how-to-jump-from-emacs-command-history-to-emacs-commands-in-helm</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何从历史跳到其他命令列表&#34;&gt;如何从历史跳到其他命令列表&lt;/h2&gt;
&lt;p&gt;Key binds &lt;code&gt;C-o&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a href=&#34;https://emacs.stackexchange.com/questions/18173/how-to-jump-from-emacs-command-history-to-emacs-commands-in-helm&#34;&gt;https://emacs.stackexchange.com/questions/18173/how-to-jump-from-emacs-command-history-to-emacs-commands-in-helm&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Makefile</title>
      <link>https://www.linuxzen.com/notes/notes/20200218174830_makefile/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218174830_makefile/</guid>
      <description>Links  A Makefile for Emacs Packages  </description>
      <content>&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nullprogram.com/blog/2020/01/22/&#34;&gt;A Makefile for Emacs Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Org Mode</title>
      <link>https://www.linuxzen.com/notes/topics/20200218120643_org_mode/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200218120643_org_mode/</guid>
      <description>tags: Emacs  快捷键  C-c C-o 打开当前光标下的链接 C-c C-l 插入链接 C-c C-&#39; 插入代码块  Snippets [[http://www.gnu.org/software/emacs/][GNU Emacs]] 转义代码块 https://stackoverflow.com/a/7462884/2873718</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200218120634/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快捷键&#34;&gt;快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-c C-o&lt;/code&gt; 打开当前光标下的链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-l&lt;/code&gt; 插入链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-&#39;&lt;/code&gt; 插入代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;snippets&#34;&gt;Snippets&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;http://www.gnu.org/software/emacs/&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;GNU Emacs&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;转义代码块&#34;&gt;转义代码块&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/7462884/2873718&#34;&gt;https://stackoverflow.com/a/7462884/2873718&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Rust</title>
      <link>https://www.linuxzen.com/notes/topics/20200307191429_rust/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200307191429_rust/</guid>
      <description> tags: Programming Language  </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200320170914_programming_language/&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Unix</title>
      <link>https://www.linuxzen.com/notes/notes/20200218174814/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200218174814/</guid>
      <description> Makefile SSH macOS max open files macOS TimeMachine 日志 macOS 问题解决三板斧  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200218174830_makefile/&#34;&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200707214623-ssh/&#34;&gt;SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210125174343-macos_max_open_files/&#34;&gt;macOS max open files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210322145854-macos_timemachine_%E6%97%A5%E5%BF%97/&#34;&gt;macOS TimeMachine 日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210322145956-macos_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B8%89%E6%9D%BF%E6%96%A7/&#34;&gt;macOS 问题解决三板斧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>《巴比伦富翁新解》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200307114151_%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%AF%8C%E7%BF%81%E6%96%B0%E8%A7%A3/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307114151_%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%AF%8C%E7%BF%81%E6%96%B0%E8%A7%A3/</guid>
      <description>积累财富首先要改变思维，学习复利的力量。
粗读要点  实践 10/50 懒人储蓄投资自己，工资 10% 奖金 50% 存储单独的账户用户投资自己 开辟单独基金用于存放房租、孩子学费和自我投资 不懂不投，宁愿错过，不犯过错 画出自己的财富水池 为自己购买保险规避风险（大病和死亡），完成家庭保险配置 理清房贷还款计划，怎么将还款金额降低到收入到 1/3 （9000）以下，可以考虑先提前还房贷减轻房贷利息压力  </description>
      <content>&lt;p&gt;积累财富首先要改变思维，学习&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200307114233_%E5%A4%8D%E5%88%A9/&#34;&gt;复利&lt;/a&gt;的力量。&lt;/p&gt;
&lt;h2 id=&#34;粗读要点&#34;&gt;粗读要点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实践 10/50 懒人储蓄投资自己，工资 10% 奖金 50% 存储单独的账户用户投资自己&lt;/li&gt;
&lt;li&gt;开辟单独基金用于存放房租、孩子学费和自我投资&lt;/li&gt;
&lt;li&gt;不懂不投，宁愿错过，不犯过错&lt;/li&gt;
&lt;li&gt;画出自己的财富水池&lt;/li&gt;
&lt;li&gt;为自己购买保险规避风险（大病和死亡），完成家庭保险配置&lt;/li&gt;
&lt;li&gt;理清房贷还款计划，怎么将还款金额降低到收入到 1/3 （9000）以下，可以考虑先提前还房贷减轻房贷利息压力&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>基金</title>
      <link>https://www.linuxzen.com/notes/notes/20200224132645_/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224132645_/</guid>
      <description>将资金交给投资经理人进行投资盈利跑赢 CPI 或赚取更多利润。
分类 交易方式划分：
 开放式基金（活期） 封闭式基金（死期）  投资对象划分:
 货币基金：余额宝 股票型、债卷型：依靠基金经理管理基金的能力 指数型：被动型基金，依靠大盘指数，美股属于长牛短熊型能跑赢主动型，A 股属于短牛长熊跑赢主动型比较困难。  股票 VS 基金  股票：想一夜暴富（也可能一夜暴亏） 基金：财富增值，门槛低，风险低  如何选基 市场研判  股市走熊：债卷基金 牛市初中：股票基金和指数基金  自身情况  稳健型 激进型  技巧 基金评级 国外渠道
 晨星  国内渠道
 银河证劵 海通证劵 济安金信 招商证劵  历史业绩  将基金收益与股票大盘走势进行比较； 将基金收益与其他同类基金的收益进行比较； 将基金的当期收益与历史收益进行比较。  一些指标  夏普比率 &amp;gt; 0 基金报酬大于风险，&amp;lt; 0 风险大过报酬 标准差越小，投资风险越低  天天基金网等三方平台上都能看，晨星网上更全。天天基金网的特色数据一栏可以看，晨星网的基金工具里包括阿尔法系数等指标都有标识。
Links  〈如何买基金？基金入门，学会这几招就够了〉  </description>
      <content>&lt;p&gt;将资金交给投资经理人进行投资盈利跑赢 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224133304_cpi/&#34;&gt;CPI&lt;/a&gt; 或赚取更多利润。&lt;/p&gt;
&lt;h2 id=&#34;分类&#34;&gt;分类&lt;/h2&gt;
&lt;p&gt;交易方式划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放式基金（活期）&lt;/li&gt;
&lt;li&gt;封闭式基金（死期）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;投资对象划分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;货币基金：余额宝&lt;/li&gt;
&lt;li&gt;股票型、债卷型：依靠基金经理管理基金的能力&lt;/li&gt;
&lt;li&gt;指数型：被动型基金，依靠大盘指数，美股属于长牛短熊型能跑赢主动型，A 股属于短牛长熊跑赢主动型比较困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;股票-vs-基金&#34;&gt;股票 VS 基金&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;股票：想一夜暴富（也可能一夜暴亏）&lt;/li&gt;
&lt;li&gt;基金：财富增值，门槛低，风险低&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何选基&#34;&gt;如何选基&lt;/h2&gt;
&lt;h3 id=&#34;市场研判&#34;&gt;市场研判&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;股市走熊：债卷基金&lt;/li&gt;
&lt;li&gt;牛市初中：股票基金和指数基金&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自身情况&#34;&gt;自身情况&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;稳健型&lt;/li&gt;
&lt;li&gt;激进型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;技巧&#34;&gt;技巧&lt;/h3&gt;
&lt;h4 id=&#34;基金评级&#34;&gt;基金评级&lt;/h4&gt;
&lt;p&gt;国外渠道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;晨星&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;国内渠道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;银河证劵&lt;/li&gt;
&lt;li&gt;海通证劵&lt;/li&gt;
&lt;li&gt;济安金信&lt;/li&gt;
&lt;li&gt;招商证劵&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;历史业绩&#34;&gt;历史业绩&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;将基金收益与股票大盘走势进行比较；&lt;/li&gt;
&lt;li&gt;将基金收益与其他同类基金的收益进行比较；&lt;/li&gt;
&lt;li&gt;将基金的当期收益与历史收益进行比较。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;一些指标&#34;&gt;一些指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224140348_/&#34;&gt;夏普比率&lt;/a&gt; &amp;gt; 0 基金报酬大于风险，&amp;lt; 0 风险大过报酬&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224141925_/&#34;&gt;标准差&lt;/a&gt;越小，投资风险越低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;天天基金网等三方平台上都能看，晨星网上更全。天天基金网的特色数据一栏可以看，晨星网的基金工具里包括阿尔法系数等指标都有标识。&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26327299&#34;&gt;〈如何买基金？基金入门，学会这几招就够了〉&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>复利</title>
      <link>https://www.linuxzen.com/notes/notes/20200307114233_%E5%A4%8D%E5%88%A9/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200307114233_%E5%A4%8D%E5%88%A9/</guid>
      <description>Wikipedia: https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%88%A9</description>
      <content>&lt;p&gt;Wikipedia: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%88%A9&#34;&gt;https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%88%A9&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>夏普比率</title>
      <link>https://www.linuxzen.com/notes/notes/20200224140348_/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224140348_/</guid>
      <description>它是用来衡量金融资产绩效基金表现的一个指标，核心思想就是选择收益率相近的基金承担的风险越小越好，选择风险水平相同的基金则收益率越高越好。总之，夏普比率越大，说明这只基金的绩效越好。
   0 基金报酬大于风险
  &amp;lt; 0 基金风险大过报酬  </description>
      <content>&lt;p&gt;它是用来衡量金融资产绩效基金表现的一个指标，核心思想就是选择收益率相近的基金承担的风险越小越好，选择风险水平相同的基金则收益率越高越好。总之，夏普比率越大，说明这只基金的绩效越好。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;0 基金报酬大于风险&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt; 0 基金风险大过报酬&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>标准差（Standard Deviation）</title>
      <link>https://www.linuxzen.com/notes/notes/20200224141925_/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224141925_/</guid>
      <description>又称标准偏差、均方差，数学符号 sigma。概率统计中最常使用作为测量一组数值的离散程度。
定义：为方差开算数平方根，反应组内个体间的离散程度。
用在基金上反映了基金总回报率的波动幅度大小，数值越大，表明波动程度越厉害，稳定度越小，投资风险就越高。
 越小，投资风险越低 越大，投资风险越高  </description>
      <content>&lt;p&gt;又称标准偏差、均方差，数学符号 sigma。概率统计中最常使用作为测量一组数值的离散程度。&lt;/p&gt;
&lt;p&gt;定义：为方差开算数平方根，反应组内个体间的离散程度。&lt;/p&gt;
&lt;p&gt;用在基金上反映了基金总回报率的波动幅度大小，数值越大，表明波动程度越厉害，稳定度越小，投资风险就越高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越小，投资风险越低&lt;/li&gt;
&lt;li&gt;越大，投资风险越高&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>正在读的书</title>
      <link>https://www.linuxzen.com/notes/topics/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/topics/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>CPI</title>
      <link>https://www.linuxzen.com/notes/notes/20200224133214/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200224133214/</guid>
      <description>:Tags: Financial Management
 消费者物价指数  </description>
      <content>&lt;p&gt;:Tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224132507/&#34;&gt;Financial Management&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B6%88%E8%B2%BB%E8%80%85%E7%89%A9%E5%83%B9%E6%8C%87%E6%95%B8&#34;&gt;消费者物价指数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>《领域驱动设计》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200320171301_%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320171301_%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>tags: 正在读的书,读书笔记  前言和目录 好的软件需要控制复杂性，好的领域模型可以帮助控制复杂性。
什么样的项目需要 DDD？尝试型的小型项目应该不需要 DDD，但是一旦上了规模考虑后续迭代则需要 DDD。
本书组织方式：
领域建模 领域建模的过程就是消化知识的过程，这个过程应该贯穿整个开发过程，需要持续学习。
  模型用来描绘人们所关注的实现或想法的某个方面，比如地图就是模型。
  模型是一种简化，是对实现的解释：把与解决问题密切相关的方面抽象出来，而忽略无关的细节。
软件问题建模的区域就是软件的领域
 物质世界的领域：机票预订程序涉及的飞机乘客。 无形的领域：会计程序的金融领域。  领域涉及知识信息超载的问题，模型这种知识对知识进行了选择性的简化和有意的结构化。
  领域模型将领域专家头脑中的支持严格的组织且有选择的抽象，并不是尽可能建立一个符合“现实”的模型。
  模型表示 关联  规定一个遍历方向：存在双向联结时（地址 -&amp;gt; 人 或 人 -&amp;gt; 地址）尽量只用一种，并避免互相关联 添加一个限定符，以便有效减少多重关联 消除不必要的关联  表示方式 领域模式 实践 MODEL-DRIVEN DESIGN 隔离领域：引入应用层 应用 LAYERED ARCHITECTURE 把领域层划分出来，通过应用层类来处理应用程序功能。应用层类是协调者，负责提问，领域层负责回答。
将 ENTITY 和 VALUE OBJECT 区分开 依次考虑对象是必须跟踪的 ENTITY 还是表示一个 VALUE OBJECT。
AGGREGATE 边界 识别模型中的 AGGREGATE 根和对应的边界。
选择 REPOSITORY 为 AGGREGATE 根对象建立 REPOSITORY。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;正在读的书&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前言和目录&#34;&gt;前言和目录&lt;/h2&gt;
&lt;p&gt;好的软件需要控制复杂性，好的领域模型可以帮助控制复杂性。&lt;/p&gt;
&lt;p&gt;什么样的项目需要 DDD？尝试型的小型项目应该不需要 DDD，但是一旦上了规模考虑后续迭代则需要 DDD。&lt;/p&gt;
&lt;p&gt;本书组织方式：&lt;/p&gt;
&lt;h2 id=&#34;领域建模&#34;&gt;领域建模&lt;/h2&gt;
&lt;p&gt;领域建模的过程就是消化知识的过程，这个过程应该贯穿整个开发过程，需要持续学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模型用来描绘人们所关注的实现或想法的某个方面，比如地图就是模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型是一种简化，是对实现的解释：把与解决问题密切相关的方面抽象出来，而忽略无关的细节。&lt;/p&gt;
&lt;p&gt;软件问题建模的区域就是软件的领域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物质世界的领域：机票预订程序涉及的飞机乘客。&lt;/li&gt;
&lt;li&gt;无形的领域：会计程序的金融领域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;领域涉及知识信息超载的问题，模型这种知识对知识进行了选择性的简化和有意的结构化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域模型将领域专家头脑中的支持严格的组织且有选择的抽象，并不是尽可能建立一个符合“现实”的模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模型表示&#34;&gt;模型表示&lt;/h3&gt;
&lt;h4 id=&#34;关联&#34;&gt;关联&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;规定一个遍历方向：存在双向联结时（地址 -&amp;gt; 人 或 人 -&amp;gt; 地址）尽量只用一种，并避免互相关联&lt;/li&gt;
&lt;li&gt;添加一个限定符，以便有效减少多重关联&lt;/li&gt;
&lt;li&gt;消除不必要的关联&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;表示方式&#34;&gt;表示方式&lt;/h4&gt;
&lt;h2 id=&#34;领域模式--20210903080049-领域模式-dot-md&#34;&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/&#34;&gt;领域模式&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;实践-model-driven-design--20210903080049-领域模式-dot-md&#34;&gt;实践 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/#领域基础模式&#34;&gt;MODEL-DRIVEN DESIGN&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;隔离领域-引入应用层&#34;&gt;隔离领域：引入应用层&lt;/h3&gt;
&lt;p&gt;应用 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/#领域模式构造块&#34;&gt;LAYERED ARCHITECTURE&lt;/a&gt; 把领域层划分出来，通过应用层类来处理应用程序功能。应用层类是协调者，负责提问，领域层负责回答。&lt;/p&gt;
&lt;h3 id=&#34;将-entity-和-value-object-区分开&#34;&gt;将 ENTITY 和 VALUE OBJECT 区分开&lt;/h3&gt;
&lt;p&gt;依次考虑对象是必须跟踪的 ENTITY 还是表示一个 VALUE OBJECT。&lt;/p&gt;
&lt;h3 id=&#34;aggregate-边界&#34;&gt;AGGREGATE 边界&lt;/h3&gt;
&lt;p&gt;识别模型中的 AGGREGATE 根和对应的边界。&lt;/p&gt;
&lt;h3 id=&#34;选择-repository&#34;&gt;选择 REPOSITORY&lt;/h3&gt;
&lt;p&gt;为 AGGREGATE 根对象建立 REPOSITORY。&lt;/p&gt;
&lt;h3 id=&#34;场景走查&#34;&gt;场景走查&lt;/h3&gt;
&lt;p&gt;根据应用程序特性复核建模，进行场景走查，确保能够有效地解决应用问题。可以走查一些正常和异常业务场景进行复核。&lt;/p&gt;
&lt;h3 id=&#34;对象创建&#34;&gt;对象创建&lt;/h3&gt;
&lt;p&gt;如果对象复杂则创建单独的 FACTORY 类进行对象创建，简单对象可以直接在 AGGREGATE 根上通过 FACTORY METHOD 进行创建。&lt;/p&gt;
&lt;h3 id=&#34;停一下-重构&#34;&gt;停一下，重构&lt;/h3&gt;
&lt;p&gt;建模和设计需要经常进行重构：利用新知识来改进模型和设计。&lt;/p&gt;
&lt;h3 id=&#34;module-划分&#34;&gt;MODULE 划分&lt;/h3&gt;
&lt;p&gt;应该按照对象的意义来划分，其他任何划分方式都是错误的，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按模式划分&lt;/li&gt;
&lt;li&gt;按照对象生命周期划分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通过重构发现深层模型&#34;&gt;通过重构发现深层模型&lt;/h2&gt;
&lt;p&gt;重构不应该停留在代码细节层面，还应当在模型设计层面随着对知识吸收的加深对模型进行重构，发现深层模型。&lt;/p&gt;
&lt;p&gt;深层模型能够穿过领域表象，清楚地表达出领域专家们的主要关注点以及相关的知识。&lt;/p&gt;
&lt;h3 id=&#34;深层模型-柔性设计&#34;&gt;深层模型/柔性设计&lt;/h3&gt;
&lt;p&gt;在不断重构的过程中，设计本身也需要支持重构所带来变化。设计自身的某些特性就可以使其易于修改和使用。
每次对模型和代码所进行的修改能够反映出对领域的新理解，不断的重构能给系统最需要修改的地方增添灵活性，
并能找到简单快捷的方式来实现普通的功能。&lt;/p&gt;
&lt;p&gt;「戴久的手套在手指关节处变得柔软；而其他部分已然硬实，可起到保护的作用。」反复的修改能让我们越来越接近柔性设计。&lt;/p&gt;
&lt;p&gt;柔性设计除了便于修改，还有助于改进模型本身。&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/#领域基础模式&#34;&gt;MODEL-DRIVEN DESIGN&lt;/a&gt; 需要以下两个方面支持：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深层模型使设计更具表现力；&lt;/li&gt;
&lt;li&gt;同时，当设计的灵活性可以让开发人员进行实验，而设计又能清晰的表达出领域含义时，能够将开发人员的深层理解反馈到整个模型发现的过程中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这应该是构建系统的基础。&lt;/p&gt;
&lt;h3 id=&#34;发现过程&#34;&gt;发现过程&lt;/h3&gt;
&lt;p&gt;支持不断重构、借用别人已经建好的模式。&lt;/p&gt;
&lt;h3 id=&#34;突破&#34;&gt;突破&lt;/h3&gt;
&lt;h4 id=&#34;重构创造机遇&#34;&gt;重构创造机遇&lt;/h4&gt;
&lt;h4 id=&#34;关注根本-不要强行突破&#34;&gt;关注根本：不要强行突破&lt;/h4&gt;
&lt;h3 id=&#34;概念挖掘&#34;&gt;概念挖掘&lt;/h3&gt;
&lt;h4 id=&#34;倾听语言&#34;&gt;倾听语言&lt;/h4&gt;
&lt;p&gt;倾听领域专家的语言，思考并表达，观察领域专家的表情，判断自己是否找到了正确的概念（对象）。&lt;/p&gt;
&lt;h4 id=&#34;检查不足之处&#34;&gt;检查不足之处&lt;/h4&gt;
&lt;p&gt;积极与领域专家沟通，寻找丢失的概念。（注意领域专家的表情）&lt;/p&gt;
&lt;h4 id=&#34;思考矛盾之处&#34;&gt;思考矛盾之处&lt;/h4&gt;
&lt;p&gt;矛盾可以合理存在，但是一定要仔细思考两种对立的看法是如何同时应用于同一个外部实现的，这会给我们带来启示。&lt;/p&gt;
&lt;h4 id=&#34;查阅书记&#34;&gt;查阅书记&lt;/h4&gt;
&lt;p&gt;通过解释基本概念和传统思想的书籍来寻找概念。&lt;/p&gt;
&lt;h4 id=&#34;尝试-再尝试&#34;&gt;尝试，再尝试&lt;/h4&gt;
&lt;h3 id=&#34;为隐式概念建模&#34;&gt;为隐式概念建模&lt;/h3&gt;
&lt;h4 id=&#34;显式的约束&#34;&gt;显式的约束&lt;/h4&gt;
&lt;p&gt;约束通常式隐含的，将它们显式的表现出来可以极大地提高设计质量。约束有时自然的存在于对象或方法中。&lt;/p&gt;
&lt;h4 id=&#34;将过程建模为领域对象&#34;&gt;将过程建模为领域对象&lt;/h4&gt;
&lt;p&gt;建模方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/#领域模式构造块&#34;&gt;模式：SERVICE&lt;/a&gt; 显式表达。&lt;/li&gt;
&lt;li&gt;通过 STRATEGY 表达选择过程：选择变成选择不同的对象，不同对象表示不同的 STRATEGY。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>LeetCode: 316.Remove Duplicate Letters</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172625_leetcode_316_remove_duplicate_letters/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172625_leetcode_316_remove_duplicate_letters/</guid>
      <description>tags: LeetCode  移除小写字母中重复的字母，让所有字母都只出现一次，并且结果是所有结果中按照字典序排序最小的那个。
Example 1
 Input: &amp;ldquo;bcabc&amp;rdquo; Output: &amp;ldquo;abc&amp;rdquo;  Example 2
 Input: &amp;ldquo;cbacdcbc&amp;rdquo; Output: &amp;ldquo;acdb&amp;rdquo;   解法之一:
 通过一个数组对每一个出现的字母进行计数 遍历每一个字母放入栈，并将该字母的计数减 1 查看栈底的字母有没有比当前字母大且该字母的计数不为 0 的（有比当前更小的字典序），从栈底弹出该字母  func removeDuplicateLetters(s string) string { var countOfEachLetter [26]int var visited [26]bool stack := make([]byte, 0) stackBottom := 0 bytesArr := []byte(s) for _, c := range bytesArr { countOfEachLetter[getIndex(c)]++ } for _, c := range bytesArr { index := getIndex(c) countOfEachLetter[index]-- if visited[index] { continue } // countOfEachLetter[getIndex(stack[stackBottom])] &amp;gt; 0 后面还有该字符 	for len(stack[stackBottom:]) &amp;gt; 0 &amp;amp;&amp;amp; stack[stackBottom] &amp;gt; c &amp;amp;&amp;amp; countOfEachLetter[getIndex(stack[stackBottom])] &amp;gt; 0 { // 标记为未访问用于后面的字符加入结果 	visited[getIndex(stack[stackBottom])] = false // 移动栈底 	stackBottom++ } // 加入到结果栈 	stack = append(stack, c) visited[index] = true } return string(stack[stackBottom:]) } func getIndex(b byte) int { return int(b - &amp;#39;a&amp;#39;) } 通过上面解法遇到如下错误：</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移除小写字母中重复的字母，让所有字母都只出现一次，并且结果是所有结果中按照字典序排序最小的那个。&lt;/p&gt;
&lt;p&gt;Example 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/strong&gt;: &amp;ldquo;bcabc&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/strong&gt;: &amp;ldquo;abc&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/strong&gt;: &amp;ldquo;cbacdcbc&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/strong&gt;: &amp;ldquo;acdb&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;解法之一:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过一个数组对每一个出现的字母进行计数&lt;/li&gt;
&lt;li&gt;遍历每一个字母放入栈，并将该字母的计数减 1&lt;/li&gt;
&lt;li&gt;查看栈底的字母有没有比当前字母大且该字母的计数不为 0 的（有比当前更小的字典序），从栈底弹出该字母&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeDuplicateLetters&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytesArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytesArr&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytesArr&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// countOfEachLetter[getIndex(stack[stackBottom])] &amp;gt; 0 后面还有该字符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt;:]) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt;])] &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 标记为未访问用于后面的字符加入结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt;])] = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

			&lt;span style=&#34;color:#75715e&#34;&gt;// 移动栈底
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// 加入到结果栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;stackBottom&lt;/span&gt;:])

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过上面解法遇到如下错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;testcase: &amp;lsquo;&amp;ldquo;bbcaac&amp;rdquo;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;answer: &amp;ldquo;bca&amp;rdquo;&lt;/li&gt;
&lt;li&gt;expected_answer: &amp;ldquo;bac&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过一番排查不应该从栈底查找，应该从栈顶开始，通过的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeDuplicateLetters&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;{}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytesArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytesArr&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytesArr&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// countOfEachLetter[getIndex(st.topChar())] &amp;gt; 0 后面还有该字符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;topChar&lt;/span&gt;() &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countOfEachLetter&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;topChar&lt;/span&gt;())] &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 标记为未访问用于后面的字符加入结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;())] = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// 加入到结果栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;visited&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stackItem&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bottom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stackItem&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stackItem&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stackItem&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stackItem&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;topChar&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 从栈顶弹出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bottom&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bottom&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stackItem&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bottom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bottom&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;
	}
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bottom&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 153.Find Minimum in Rotated Sorted Array</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172433_leetcode_153_find_minimum_in_rotated_sorted_array/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172433_leetcode_153_find_minimum_in_rotated_sorted_array/</guid>
      <description>tags: LeetCode  解法 1 找到中间节点依次往左右扩散：
 向左边扩散，如果左边的大于当前元素，那么当前元素即为最小值 向右边扩散，如果右边的小于当前元素，那么右边元素即为最小值  如果以上不成立则第一个元素为最小元素（未旋转），以下是代码
func findMin(nums []int) int { length := len(nums) if length == 1 { return nums[0] } // 从中间开始确定方向 	mid := length / 2 - 1 left, right := mid, mid for left - 1 &amp;gt;= 0 || right + 1 &amp;lt; length { if left - 1 &amp;gt;= 0 { if nums[left - 1] &amp;gt; nums[left] { return nums[left]; } left-- } if right + 1 &amp;lt; length { if nums[right] &amp;gt; nums[right + 1] { return nums[right + 1] } right++ } } return nums[0] } 优化 参考答案后可通过二分查找做如下优化，首先判断是否被旋转：</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解法-1&#34;&gt;解法 1&lt;/h2&gt;
&lt;p&gt;找到中间节点依次往左右扩散：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向左边扩散，如果左边的大于当前元素，那么当前元素即为最小值&lt;/li&gt;
&lt;li&gt;向右边扩散，如果右边的小于当前元素，那么右边元素即为最小值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果以上不成立则第一个元素为最小元素（未旋转），以下是代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 从中间开始确定方向
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;];
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			}

			&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;p&gt;参考答案后可通过二分查找做如下优化，首先判断是否被旋转：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果数组尾部的元素大于首部的元素则表示数组未被旋转，可以直接返回第一个元素。&lt;/li&gt;
&lt;li&gt;由于是从一个有序数组旋转的，所以以上条件可以保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后再判断方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果所取中间元素大于数组的第一个元素则最小元素在右边&lt;/li&gt;
&lt;li&gt;否则最小元素在左边&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;func findMin(nums []int) int {
	length := len(nums)
	if nums[0] &amp;lt;= nums[length - 1]{
		return nums[0]
	}
	if length == 2 {
		return nums[1]
	}

	left, right := 0, length - 1
	for left &amp;lt; right {
		mid := left + ((right - left) / 2)
		if nums[mid] &amp;gt; nums[mid + 1] {
			return nums[mid + 1]
		}

		if nums[mid - 1] &amp;gt; nums[mid] {
			return nums[mid]
		}

		if nums[mid] &amp;gt; nums[0] {
			left = mid + 1
		} else {
			right = mid - 1
		}
	}
	return -1
}
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 154.Find Minimum in Rotated Sorted Array II</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172319_154_find_minimum_in_rotated_sorted_array_ii/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172319_154_find_minimum_in_rotated_sorted_array_ii/</guid>
      <description> tags: LeetCode  思路 这个是 LeetCode: 153.Find Minimum in Rotated Sorted Array 扩展，增加了以下几种边界情况：
 &amp;lsquo;[2, 2, 2, 2, 1]&amp;rsquo; &amp;lsquo;[3, 1, 3]&amp;rsquo; &amp;lsquo;[1, 1, 1]&amp;rsquo; &amp;lsquo;[10, 1, 10, 10, 10]&amp;rsquo;  但核心依然是判断最小值是在左边还是右边。假设如下数组：
  &amp;lsquo;[3, 3, 3, 1, 3]&amp;rsquo;
  left[0]=3, right[4]=3, mid[2]=3, 这时候不确定最小值在哪边但是 right&amp;ndash; 是安全的，所以执行 right&amp;ndash;
  left[0]=3, right[3]=1, mid[2]=3, 这时候 mid &amp;lt; right 说明最小值在 mid 的右边，所以调整 left = mid + 1
  左右两边索引一致终止循环
  实现 func findMin(nums []int) int { length := len(nums) left, right := 0, length - 1 for left &amp;lt; right { mid := (left + right) / 2 if nums[mid] &amp;gt; nums[right] { left = mid + 1 } else if nums[mid] &amp;lt; nums[right] { right = mid } else { right-- } } return nums[right] } </description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;这个是 &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172433_leetcode_153_find_minimum_in_rotated_sorted_array/&#34;&gt;LeetCode: 153.Find Minimum in Rotated Sorted Array&lt;/a&gt; 扩展，增加了以下几种边界情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;[2, 2, 2, 2, 1]&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;[3, 1, 3]&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;[1, 1, 1]&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;[10, 1, 10, 10, 10]&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但核心依然是判断最小值是在左边还是右边。假设如下数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lsquo;[3, 3, 3, 1, 3]&amp;rsquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;left[0]=3, right[4]=3, mid[2]=3, 这时候不确定最小值在哪边但是 right&amp;ndash; 是安全的，所以执行 right&amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;left[0]=3, right[3]=1, mid[2]=3, 这时候 mid &amp;lt; right 说明最小值在 mid 的右边，所以调整 left = mid + 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左右两边索引一致终止循环&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 3.Longest Substring Without Repeating Characters</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172810_leetcode_3_longest_substring_without_repeating_characters/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172810_leetcode_3_longest_substring_without_repeating_characters/</guid>
      <description>tags: LeetCode  准备 动态规划
实践 字符串 &amp;ldquo;abcabcbb&amp;rdquo;
根据索引有如下关系
   a b c a b c b b     0 1 2 3 4 5 6 7     \(f(0,1)=f(0,0) + 1\) \(f(0,2)=f(0,1) + 2\)  在所有字符都不重复的情况下有如下公式
\(f(s,e)=f(s,e-1) + e\)
若遇到重复的情况则，3 索引于当前字串 的 0 重复则表明当前字串已经到头，需要记录并偏移 s，s=1：
 \(f(1,3)=f(1,2)+3\)  假设：
 s - 开始字符索引 e - 结束字符索引  若遇到当前字符于前面 r 字符重复则： \[ f(r,e)=f(s,e - 1) + e; s=r \]</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/&#34;&gt;动态规划&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;
&lt;p&gt;字符串 &amp;ldquo;abcabcbb&amp;rdquo;&lt;/p&gt;
&lt;p&gt;根据索引有如下关系&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;\(f(0,1)=f(0,0) + 1\)&lt;/li&gt;
&lt;li&gt;\(f(0,2)=f(0,1) + 2\)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在所有字符都不重复的情况下有如下公式&lt;/p&gt;
&lt;p&gt;\(f(s,e)=f(s,e-1) + e\)&lt;/p&gt;
&lt;p&gt;若遇到重复的情况则，3 索引于当前字串 的 0 重复则表明当前字串已经到头，需要记录并偏移 s，s=1：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;\(f(1,3)=f(1,2)+3\)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s - 开始字符索引&lt;/li&gt;
&lt;li&gt;e - 结束字符索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若遇到当前字符于前面 r 字符重复则：
\[
f(r,e)=f(s,e - 1) + e;
s=r
\]&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLongestSubstring&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndexes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndexes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndexes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cIndex&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// 出现过需要截断
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 重置已出现的字符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndex&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndexes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;appearedIndexes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;cIndex&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 4.Median of Two Sorted Arrays</title>
      <link>https://www.linuxzen.com/notes/notes/20200320172945_leetcode_4_median_of_two_sorted_arrays/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320172945_leetcode_4_median_of_two_sorted_arrays/</guid>
      <description>tags: LeetCode  思路 归并排序
代码 func findMedianSortedArrays(nums1 []int, nums2 []int) float64 { nums := mergeSort(nums1, nums2) length := len(nums) if length % 2 != 0 { return float64(nums[(length - 1) / 2]) } i := length / 2 return (float64(nums[i]) + float64(nums[i - 1])) / 2 } func mergeSort(nums1 []int, nums2 []int) []int { l1 := len(nums1) l2 := len(nums2) result := make([]int, 0, l1 + l2) i, j := 0, 0 for i &amp;lt; l1 &amp;amp;&amp;amp; j &amp;lt; l2 { if nums1[i] &amp;lt; nums2[j] { result = append(result, nums1[i]) i++ } else { result = append(result, nums2[j]) j++ } } result = append(result, nums1[i:].</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/&#34;&gt;归并排序&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMedianSortedArrays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;l1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;l2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;l1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l2&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l2&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;:]&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;:]&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 5.Longest Palindromic Substring</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173438_leetcode_5_longest_palindromic_substring/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173438_leetcode_5_longest_palindromic_substring/</guid>
      <description>tags: LeetCode   https://leetcode.com/problems/longest-palindromic-substring/description/
 思路 直接暴力往两边搜索
func longestPalindrome(s string) string { buf := []byte(s) length := len(buf) if length == 0 { return s } start, end := 0, 0 for ci, _ := range buf { i, j := ci, ci // 无法处理 &amp;#34;aaaa&amp;#34; 和 &amp;#34;noon&amp;#34; 这种情况 	for i &amp;gt; 0 &amp;amp;&amp;amp; j &amp;lt; length - 1 &amp;amp;&amp;amp; buf[i - 1] == buf[j + 1] { i-- j++ } // 考虑 &amp;#34;bba&amp;#34; 这种情况 	if i == j &amp;amp;&amp;amp; ci &amp;gt; 0 &amp;amp;&amp;amp; buf[ci] == buf[ci - 1] { i, j = ci-1, ci } // 考虑 &amp;#34;abb&amp;#34; 这种情况 	if i == j &amp;amp;&amp;amp; ci &amp;lt; length - 1 &amp;amp;&amp;amp; buf[ci] == buf[ci + 1] { i, j = ci, ci + 1 } if i !</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-substring/description/&#34;&gt;https://leetcode.com/problems/longest-palindromic-substring/description/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;直接暴力往两边搜索&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longestPalindrome&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;

		&lt;span style=&#34;color:#75715e&#34;&gt;// 无法处理 &amp;#34;aaaa&amp;#34; 和 &amp;#34;noon&amp;#34; 这种情况
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// 考虑 &amp;#34;bba&amp;#34; 这种情况
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// 考虑 &amp;#34;abb&amp;#34; 这种情况
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码无法处理 &amp;ldquo;aaaa&amp;rdquo; 和 &amp;ldquo;noon&amp;rdquo; 这种情况，只要把下面处理 &amp;ldquo;bba&amp;rdquo; 和 &amp;ldquo;abb&amp;rdquo; 情况的代码放到上面即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longestPalindrome&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但上面又导致 &amp;ldquo;ccc&amp;rdquo; 无法处理，所以需要处理两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以当前字符为中心向两边扩散&lt;/li&gt;
&lt;li&gt;以当前字符和下一个字符为中心向两边扩散&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对比以上两个结果取大的那个，调整后如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longestPalindrome&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;
		}

		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
				&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>LeetCode: 6.ZigZag Conversion</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173548_leetcode_6_zigzag_conversion/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173548_leetcode_6_zigzag_conversion/</guid>
      <description>tags: LeetCode srouce: https://leetcode.com/problems/zigzag-conversion/description/  先根据行数计算列数：
\(column=length / (row + 2) + bool(length \mod (row + 2))\)
每一行必然有点的位置为：
\(i \mod (row - 1)\) 为 0</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200320172132_leetcode/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;srouce: &lt;a href=&#34;https://leetcode.com/problems/zigzag-conversion/description/&#34;&gt;https://leetcode.com/problems/zigzag-conversion/description/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先根据行数计算列数：&lt;/p&gt;
&lt;p&gt;\(column=length / (row + 2) + bool(length \mod (row + 2))\)&lt;/p&gt;
&lt;p&gt;每一行必然有点的位置为：&lt;/p&gt;
&lt;p&gt;\(i \mod (row - 1)\) 为 0&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://www.linuxzen.com/notes/notes/20200320173956_mysql/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200320173956_mysql/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>《The Rust Programming Language》读书笔记</title>
      <link>https://www.linuxzen.com/notes/notes/20200325165411_the_rust_programming_language/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200325165411_the_rust_programming_language/</guid>
      <description>  tags: 读书笔记,Rust
  语句和表达式
  所有权
  引用和借用
  结构体
  枚举
  模式匹配
  if let
  模块化
  错误处理
  Traits
  生命周期
  闭包
  迭代器
  智能指针
  Rust 宏
  Rust 并发
  函数指针 fn 区分闭包的 Fn 特性，函数指针都实现来三个闭包的特性。
fn do(f: fn(i32) -&amp;gt; i32, arg: i32) -&amp;gt; i32 { f(arg) + f(arg) } </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/&#34;&gt;读书笔记&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200307191429_rust/&#34;&gt;Rust&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629174820-%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/&#34;&gt;语句和表达式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629174911-%E6%89%80%E6%9C%89%E6%9D%83/&#34;&gt;所有权&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629174943-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/&#34;&gt;引用和借用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629175956-%E7%BB%93%E6%9E%84%E4%BD%93/&#34;&gt;结构体&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180041-%E6%9E%9A%E4%B8%BE/&#34;&gt;枚举&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180131-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/&#34;&gt;模式匹配&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180202-if_let/&#34;&gt;if let&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180233-%E6%A8%A1%E5%9D%97%E5%8C%96/&#34;&gt;模块化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180301-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/&#34;&gt;错误处理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180345-traits/&#34;&gt;Traits&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180413-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/&#34;&gt;生命周期&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180436-%E9%97%AD%E5%8C%85/&#34;&gt;闭包&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180506-%E8%BF%AD%E4%BB%A3%E5%99%A8/&#34;&gt;迭代器&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180545-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/&#34;&gt;智能指针&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180623-rust_%E5%AE%8F/&#34;&gt;Rust 宏&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629180709-rust_%E5%B9%B6%E5%8F%91/&#34;&gt;Rust 并发&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数指针&#34;&gt;函数指针&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; 区分闭包的 &lt;code&gt;Fn&lt;/code&gt; 特性，函数指针都实现来三个闭包的特性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do&lt;/span&gt;(f: &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, arg: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;)  -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
  f(arg) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f(arg)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
