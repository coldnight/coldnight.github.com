<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Taking Smart Notes With Org-mode</title>
    <link>https://www.linuxzen.com/notes/articles/</link>
    <description>Recent content in Articles on Taking Smart Notes With Org-mode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 Aug 2021 07:40:00 +0800</lastBuildDate><atom:link href="https://www.linuxzen.com/notes/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Airflow powers AI</title>
      <link>https://www.linuxzen.com/notes/articles/20210826074053-airflow_powers_ai/</link>
      <pubDate>Thu, 26 Aug 2021 07:40:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20210826074053-airflow_powers_ai/</guid>
      <description>最近接手了一个项目，经过需求调研决定尝试使用 Airflow 调度数据生产，过程涉及：
 从大数据 Hive 数据库整合数据宽表； 在 Spark 上运行 IRT 算法模型汇总 ADS 表。  从中学习了很多关于大数据的知识，同时也积累了如何通过 Airflow 提交 Spark 任务的经验，应当抽时间总结一下。
冰山之下 如「冰山理论」所描述，我们所做的只是冰山露在水面的一角，隐藏在冰山之下更大的一部份是：
 Airflow + Celery Docker 搭建好的 Hadoop 集群 搭建好的 Hive 数据库 搭建好的 Spark 集群  接下来我们将关注在「冰山水面上的一角」来阐述我们如何利用这些已有的技术连结了整个系统。
Make DAG great again 之前部门里有位算法大佬用 DAG（大佬念做「戴格」）实现了一套非常牛逼的文本和识别处理算法，然后每次讨论方案必谈 DAG， 所以 DAG 成了部门里都知道的一个梗，虽然大佬走了之后很少再有人提起 DAG，但是接下来我们会进行文艺复兴，让 DAG 再次出现在我们的日常技术讨论中。
Make DAG Great Again!
Airflow 介绍 架构 编程概念  DAG Operator Connection  Spark 介绍 架构 前菜 鸟瞰图 Spark SQL Hive Table 示例 Airflow + Spark 平台化 Celery Worker as a Spark Driver Celery Worker running on specific platform Windows Bigdata Hive client DAGs 分发 提交 DAG Python 依赖解决  Spark Airflow  外部依赖 未来  承接更多的报告需求 对内承接分析任务 可编程、平台化的分析  </description>
      <content>&lt;p&gt;最近接手了一个项目，经过需求调研决定尝试使用 Airflow 调度数据生产，过程涉及：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从大数据 Hive 数据库整合数据宽表；&lt;/li&gt;
&lt;li&gt;在 Spark 上运行 IRT 算法模型汇总 ADS 表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从中学习了很多关于大数据的知识，同时也积累了如何通过 Airflow 提交 Spark 任务的经验，应当抽时间总结一下。&lt;/p&gt;
&lt;h2 id=&#34;冰山之下&#34;&gt;冰山之下&lt;/h2&gt;
&lt;p&gt;如「冰山理论」所描述，我们所做的只是冰山露在水面的一角，隐藏在冰山之下更大的一部份是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Airflow + Celery&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;搭建好的 Hadoop 集群&lt;/li&gt;
&lt;li&gt;搭建好的 Hive 数据库&lt;/li&gt;
&lt;li&gt;搭建好的 Spark 集群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们将关注在「冰山水面上的一角」来阐述我们如何利用这些已有的技术连结了整个系统。&lt;/p&gt;
&lt;h2 id=&#34;make-dag-great-again&#34;&gt;Make DAG great again&lt;/h2&gt;
&lt;p&gt;之前部门里有位算法大佬用 DAG（大佬念做「戴格」）实现了一套非常牛逼的文本和识别处理算法，然后每次讨论方案必谈 DAG，
所以 DAG 成了部门里都知道的一个梗，虽然大佬走了之后很少再有人提起 DAG，但是接下来我们会进行文艺复兴，让 DAG 再次出现在我们的日常技术讨论中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make DAG Great Again&lt;/strong&gt;!&lt;/p&gt;
&lt;h2 id=&#34;airflow-介绍&#34;&gt;Airflow 介绍&lt;/h2&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;h3 id=&#34;编程概念&#34;&gt;编程概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DAG&lt;/li&gt;
&lt;li&gt;Operator&lt;/li&gt;
&lt;li&gt;Connection&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-介绍&#34;&gt;Spark 介绍&lt;/h2&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;h3 id=&#34;前菜&#34;&gt;前菜&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;鸟瞰图&#34;&gt;鸟瞰图&lt;/h3&gt;
&lt;h3 id=&#34;spark-sql-hive-table-示例&#34;&gt;Spark SQL Hive Table 示例&lt;/h3&gt;
&lt;h2 id=&#34;airflow-plus-spark-平台化&#34;&gt;Airflow + Spark 平台化&lt;/h2&gt;
&lt;h3 id=&#34;celery-worker-as-a-spark-driver&#34;&gt;Celery Worker as a Spark Driver&lt;/h3&gt;
&lt;h3 id=&#34;celery-worker-running-on-specific-platform&#34;&gt;Celery Worker running on specific platform&lt;/h3&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;h4 id=&#34;bigdata-hive-client&#34;&gt;Bigdata Hive client&lt;/h4&gt;
&lt;h3 id=&#34;dags-分发&#34;&gt;DAGs 分发&lt;/h3&gt;
&lt;h2 id=&#34;提交-dag&#34;&gt;提交 DAG&lt;/h2&gt;
&lt;h2 id=&#34;python-依赖解决&#34;&gt;Python 依赖解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spark&lt;/li&gt;
&lt;li&gt;Airflow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;外部依赖&#34;&gt;外部依赖&lt;/h2&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;承接更多的报告需求&lt;/li&gt;
&lt;li&gt;对内承接分析任务&lt;/li&gt;
&lt;li&gt;可编程、平台化的分析&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Understanding Rust futures by going way too deep</title>
      <link>https://www.linuxzen.com/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/</link>
      <pubDate>Mon, 26 Jul 2021 10:57:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/</guid>
      <description>原文链接：Understanding Rust futures by going way too deep。
译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。
深入理解 Rust future 用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。
起步  Choo choo here comes the easy part 🚂💨
 我们创建一个新的项目：
$ cargo new waytoodeep Created binary (application) `waytoodeep` package 我们需要安装 cargo-edit 如果之前没有安装过的话，接下来就可以直接 cargo add ：
$ cargo install cargo-edit Updating crates.io index Downloaded cargo-edit v0.7.0 Downloaded 1 crate (57.6 KB) in 0.47s Ignored package `cargo-edit v0.7.0` is already installed, use --force to override  因为 cargo-edit 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像 cargo new, cargo build, cargo test, cargo run 等子命令都内置在 cargo 中， 但是 cargo add 没有。</description>
      <content>&lt;p&gt;原文链接：&lt;a href=&#34;https://fasterthanli.me/articles/understanding-rust-futures-by-going-way-too-deep&#34;&gt;Understanding Rust futures by going way too deep&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。&lt;/p&gt;
&lt;h2 id=&#34;深入理解-rust-future&#34;&gt;深入理解 Rust future&lt;/h2&gt;
&lt;p&gt;用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。&lt;/p&gt;
&lt;h2 id=&#34;起步&#34;&gt;起步&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Choo choo here comes the easy part 🚂💨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们创建一个新的项目：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo new waytoodeep
     Created binary (application) `waytoodeep` package
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们需要安装 &lt;code&gt;cargo-edit&lt;/code&gt; 如果之前没有安装过的话，接下来就可以直接 &lt;code&gt;cargo add&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo install cargo-edit
    Updating crates.io index
  Downloaded cargo-edit v0.7.0
  Downloaded 1 crate (57.6 KB) in 0.47s
     Ignored package `cargo-edit v0.7.0` is already installed, use --force to override
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;因为 &lt;code&gt;cargo-edit&lt;/code&gt; 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像
&lt;code&gt;cargo new&lt;/code&gt;, &lt;code&gt;cargo build&lt;/code&gt;, &lt;code&gt;cargo test&lt;/code&gt;, &lt;code&gt;cargo run&lt;/code&gt; 等子命令都内置在 cargo 中，
但是 &lt;code&gt;cargo add&lt;/code&gt; 没有。&lt;/p&gt;
&lt;p&gt;实际上，有一大堆像这样的包，如 &lt;a href=&#34;https://lib.rs/crates/cargo-hack&#34;&gt;cargo-hack&lt;/a&gt;,&lt;a href=&#34;https://lib.rs/crates/cargo-udeps&#34;&gt;cargo-udeps&lt;/a&gt;,&lt;a href=&#34;https://lib.rs/crates/cargo-expand&#34;&gt;cargo-expand&lt;/a&gt;&amp;hellip;&lt;a href=&#34;https://lib.rs/keywords/cargo&#34;&gt;等等&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后我们需要选择一个「异步运行时」（async runtime），因为这些 future 对象不会轮询（poll）自己。。。
我们毫无理由的选择 tokio，唯一的原因是：过去几个月我一直在用它。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add tokio@1.9.0 --features full
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding tokio v1.9.0 to dependencies with features: [&amp;quot;full&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们修改 &lt;code&gt;main&lt;/code&gt; 函数使用 tokio 默认执行器（executor）（ &lt;code&gt;cargo new&lt;/code&gt; 为我们生成了一个 &lt;code&gt;main&lt;/code&gt; 函数，但是这里并不能满足我们的需求）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a (so far completely unnecessary) async runtime&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run                                                                                                                                                                                          3s 209ms
   Compiling waytoodeep v0.1.0 (/Users/wh/codes/rust/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 3.47s
     Running `target/debug/waytoodeep`
Hello from a (so far completely unnecessary) async runtime
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;酷！&lt;/p&gt;
&lt;p&gt;接下来让我们添加其他一些我喜欢在我的项目中使用的好东西。&lt;/p&gt;
&lt;p&gt;首先，对于错误处理 - 我们编写程序就需要处理一堆不同库里不同的错误类型，如果能通过一个类型统一它们就会非常整洁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lib.rs/crates/eyre&#34;&gt;eyre&lt;/a&gt; 可以赋予我们这些（就像 &lt;code&gt;anyhow&lt;/code&gt; ）！&lt;/p&gt;
&lt;p&gt;并且因为我喜欢漂亮的颜色我将使用 &lt;a href=&#34;https://lib.rs/crates/color-eyre&#34;&gt;color-eyre&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add color-eyre@0.5.11
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding color-eyre v0.5.11 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们需要安装 &lt;code&gt;color-eyre&lt;/code&gt; 作为默认的崩溃（panic）处理器，我悄悄修改了一些环境变量来默认输出调用堆栈（backtracks）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a (so far completely unnecessary) async runtime&amp;#34;&lt;/span&gt;);

    Ok(())
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    }
    color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/waytoodeep`
Hello from a (so far completely unnecessary) async runtime
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很好！现在如果我们某处出现了一个错误，我们将看到完整的堆栈跟踪，就像下面这样：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/color-eyre.78931d5fc80841f6.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后，因为我喜欢结构化日志，让我们添加 &lt;a href=&#34;https://lib.rs/crates/tracing&#34;&gt;tracing&lt;/a&gt; 然后通过漂亮的颜色打印它们，让我们添加 &lt;a href=&#34;https://lib.rs/crates/tracing-subscriber&#34;&gt;tracing-subscriber&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add tracing@0.1.26 tracing-subscriber@0.2.19
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding tracing v0.1.26 to dependencies
      Adding tracing-subscriber v0.2.19 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们已经有一个 &lt;code&gt;setup&lt;/code&gt; 函数，所以直接在那里安装 &lt;code&gt;tracing-subscriber&lt;/code&gt;.. 然后我们将 &lt;code&gt;println!&lt;/code&gt; 改成 &lt;code&gt;info!&lt;/code&gt; ！
然后，为了演示如何设置让我们再次修改一些环境变量：对所有包（crates）默认 &lt;code&gt;info&lt;/code&gt; 日志级别。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing_subscriber::EnvFilter;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a comfy nest we&amp;#39;ve made for ourselves&amp;#34;&lt;/span&gt;);

    Ok(())
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    }
    color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
    }
    tracing_subscriber::fmt::fmt()
        .with_env_filter(EnvFilter::from_default_env())
        .init();

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/waytoodeep`
Jul 25 17:03:46.993  INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，我们准备好做一些有用的事情了。&lt;/p&gt;
&lt;h3 id=&#34;做一些有用的事情&#34;&gt;做一些有用的事情&lt;/h3&gt;
&lt;p&gt;当决定在咖啡间隙阅读哪一篇文章的时候，人们通常同时打开几个网站，然后读最先加载出来的那一篇。&lt;/p&gt;
&lt;p&gt;事实如此。你可以引用我的话，谁会去验证呢？毕竟这听起来需要很多工作。&lt;/p&gt;
&lt;p&gt;所以让我们来编写一个程序做相同的事情。&lt;/p&gt;
&lt;p&gt;让我们引入 &lt;a href=&#34;https://lib.rs/crates/reqwest&#34;&gt;reqwest&lt;/a&gt; &amp;ndash; 尽管我不喜欢它的 API，但它会很好的完成接下来的工作。&lt;/p&gt;
&lt;p&gt;同时，因为 &lt;a href=&#34;https://www.openssl.org/news/vulnerabilities.html&#34;&gt;screw OpenSSL&lt;/a&gt; 我们将标记 reqwest 使用 &lt;a href=&#34;https://lib.rs/crates/rustls&#34;&gt;rustls&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add reqwest@0.11.4 --no-default-features --features rustls-tls
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding reqwest v0.11.4 to dependencies with features: [&amp;quot;rustls-tls&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们准备好发送一个请求了！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing_subscriber::EnvFilter;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; reqwest::Client;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a comfy nest we&amp;#39;ve made for ourselves&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// this will turn non-200 HTTP status codes into rust errors,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// so the first `?` propagates &amp;#34;we had a connection problem&amp;#34; and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the second `?` propagates &amp;#34;we had a chat with the server and they
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// were not pleased&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);


    Ok(())
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    }
    color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
    }
    tracing_subscriber::fmt::fmt()
        .with_env_filter(EnvFilter::from_default_env())
        .init();

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出发了！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;cargo run
   Compiling waytoodeep v0.1.0 (/Users/wh/codes/rust/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 7.16s
     Running `target/debug/waytoodeep`
Jul 26 16:50:57.778  INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves
Jul 26 16:50:59.090  INFO waytoodeep: Got a response! url=https://fasterthanli.me content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是我所说的「结构化日志」。嗯，其中的一部分。让我们看下这行代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们输出来一个消息： &lt;code&gt;Got a response!&lt;/code&gt; ，一个名为 &lt;code&gt;url&lt;/code&gt; 的标签：值为变量 &lt;code&gt;url&lt;/code&gt; 的 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/fmt/trait.Display.html&#34;&gt;Display&lt;/a&gt; 格式，
一个名为 &lt;code&gt;content_type&lt;/code&gt; 的标签：值为表达式的 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/fmt/trait.Debug.html&#34;&gt;Debug&lt;/a&gt; 格式。&lt;/p&gt;
&lt;p&gt;就是这么简单！ &lt;code&gt;name = %value&lt;/code&gt; 输出 &lt;code&gt;Display&lt;/code&gt; ， &lt;code&gt;name = ?value&lt;/code&gt; 输出 &lt;code&gt;Debug&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当然，还有非常棒的跨度（spans），重点是你可以将它们发送到 APM（Appliation Performance Monitoring），比如 Datadog 或者 Honeycomb 等，但是这不是一篇关于跟踪的文章。&lt;/p&gt;
&lt;p&gt;为了举例说明，如果我们安装一个 JSON 的 tracing subscriber，我们将获得如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 3.09s
     Running `target/debug/waytoodeep`
{&amp;quot;timestamp&amp;quot;:&amp;quot;Jul 25 17:17:21.531&amp;quot;,&amp;quot;level&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;fields&amp;quot;:{&amp;quot;message&amp;quot;:&amp;quot;Hello from a comfy nest we&#39;ve made for ourselves&amp;quot;},&amp;quot;target&amp;quot;:&amp;quot;waytoodeep&amp;quot;}
{&amp;quot;timestamp&amp;quot;:&amp;quot;Jul 25 17:17:21.709&amp;quot;,&amp;quot;level&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;fields&amp;quot;:{&amp;quot;message&amp;quot;:&amp;quot;Got a response!&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://fasterthanli.me&amp;quot;,&amp;quot;content_type&amp;quot;:&amp;quot;Some(\&amp;quot;text/html; charset=utf-8\&amp;quot;)&amp;quot;},&amp;quot;target&amp;quot;:&amp;quot;waytoodeep&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这应该足以激起你的兴趣。&lt;/p&gt;
&lt;h3 id=&#34;同时获取两个地址&#34;&gt;同时获取两个地址&lt;/h3&gt;
&lt;p&gt;现在让我们获取两个地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_1: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/articles/whats-in-the-box&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/series/advent-of-code-2020/part-13&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;。。。这是一个公平的比较。 这两篇文章都托管在我自己的网站上，绝对不是为了推广，而是为了使获取时间具有可比性，并且任一都有可能先加载完成（并且会随着时间的推移随机变化）。&lt;/p&gt;
&lt;p&gt;我们将创建一个函数来获取内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;, url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并使用它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a comfy nest we&amp;#39;ve made for ourselves&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
    fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行它:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$&lt;/span&gt; cargo run
   Compiling waytoodeep v0.&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;amos&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ftl&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;waytoodeep)
warning: &lt;span style=&#34;color:#a6e22e&#34;&gt;unused&lt;/span&gt; implementer of &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;Future&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; that must be used
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main.rs:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[warn(unused_must_use)]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; on by default
   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note: &lt;span style=&#34;color:#a6e22e&#34;&gt;futures&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; nothing unless you &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; or poll them

warning: &lt;span style=&#34;color:#a6e22e&#34;&gt;unused&lt;/span&gt; implementer of &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;Future&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; that must be used
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main.rs:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note: &lt;span style=&#34;color:#a6e22e&#34;&gt;futures&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; nothing unless you &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; or poll them

warning: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; warnings emitted

    Finished dev [unoptimized &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; debuginfo] target(s) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.01&lt;/span&gt;s
     Running &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;debug&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;waytoodeep&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31.571&lt;/span&gt;  INFO waytoodeep: &lt;span style=&#34;color:#a6e22e&#34;&gt;Hello&lt;/span&gt; from a comfy nest we&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;ve&lt;/span&gt; made &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ourselves
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;奇怪的是，没有任何事情发生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;黄色的波浪线和恼人的 Rust 警告已经给出了提示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们来修复它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 3.17s
     Running `target/debug/waytoodeep`
Jul 25 17:27:29.768  INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves
Jul 25 17:27:29.891  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 17:27:29.974  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，第零课：future 对象不做任何事情直到它们被轮询（polled）。&lt;/p&gt;
&lt;p&gt;这是因为 future 对象几乎就是状态。让我们来创建一个：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; dumb;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/dumb.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{
    future::Future,
    pin::Pin,
    task::{Context, Poll},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DumbFuture&lt;/span&gt; {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; DumbFuture {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, _cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from a dumb future!&amp;#34;&lt;/span&gt;);
        Poll::Ready(())
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// back in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dumb::DumbFuture {};

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上！我们几乎就完成了，除了我们没有进行 &lt;code&gt;.await&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;运行它除了打印警告不会有任何效果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
warning: unused variable: `fut`
  --&amp;gt; src/main.rs:14:9
   |
14 |     let fut = dumb::DumbFuture {};
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_fut`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 2.11s
     Running `target/debug/waytoodeep`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为怎么可能？我们字面上仅仅构建了一个结构体。一个零大小的结构体。&lt;/p&gt;
&lt;p&gt;如果我们调用它的 &lt;code&gt;.await&lt;/code&gt; 。。 然后当我们要求运行时运行它的事件循环直到 future 对象被轮询（polled）并且最终返回 &lt;code&gt;Poll::Ready&lt;/code&gt; （我们的代码立即返回）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that dumb future...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dumb::DumbFuture {};
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that dumb future...&amp;#34;&lt;/span&gt;);
    fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that dumb future&amp;#34;&lt;/span&gt;);

    Ok(())
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 2.34s
     Running `target/debug/waytoodeep`
Jul 25 17:37:09.261  INFO waytoodeep: Building that dumb future...
Jul 25 17:37:09.261  INFO waytoodeep: Awaiting that dumb future...
Jul 25 17:37:09.261  INFO waytoodeep::dumb: Hello from a dumb future!
Jul 25 17:37:09.262  INFO waytoodeep: Done awaiting that dumb future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里与 ECMAScript 的 &lt;code&gt;promise&lt;/code&gt; 有一些略微的区别：即使它们压根没有被 await 其中包含的工作依然会被执行。&lt;/p&gt;
&lt;p&gt;但是 Rust 的 future 对象仅仅是无聊的状态机，如果你故意制造麻烦就可以理解这个机制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/dumb.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; DumbFuture {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, _cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        panic&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh heck no&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_BACKTRACE=1 cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 2.28s
     Running `target/debug/waytoodeep`
Jul 25 17:41:18.956  INFO waytoodeep: Building that dumb future...
Jul 25 17:41:18.956  INFO waytoodeep: Awaiting that dumb future...
The application panicked (crashed).
Message:  Oh heck no
Location: src/dumb.rs:14

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ BACKTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                                ⋮ 6 frames hidden ⋮
   7: &amp;lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&amp;gt;::poll::h4a44780628f4c5f0
      at /home/amos/ftl/waytoodeep/src/dumb.rs:14
   8: waytoodeep::main::{{closure}}::h36de5a1f1f2a5c5b
      at /home/amos/ftl/waytoodeep/src/main.rs:17
   9: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll::h20a96e082c7a581e
      at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80
  10: tokio::park::thread::CachedParkThread::block_on::{{closure}}::hdf98cb3c7fdf3de4
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
  11: tokio::coop::with_budget::{{closure}}::h6a86a24a246e220f
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106
  12: std::thread::local::LocalKey&amp;lt;T&amp;gt;::try_with::h2ce0ac27c85965b6
      at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376
  13: std::thread::local::LocalKey&amp;lt;T&amp;gt;::with::hc449f38c9f65fb53
      at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352
  14: tokio::coop::with_budget::h5db157bd1e95e0e8
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99
  15: tokio::coop::budget::h7b57383f1255ac24
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76
  16: tokio::park::thread::CachedParkThread::block_on::hece399485213b91c
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
  17: tokio::runtime::enter::Enter::block_on::h89e9882e539e82d3
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151
  18: tokio::runtime::thread_pool::ThreadPool::block_on::h1a0186470c00ba70
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71
  19: tokio::runtime::Runtime::block_on::h7c21d6989b86d606
      at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452
  20: waytoodeep::main::hb4dd5ffd46a5c032
      at /home/amos/ftl/waytoodeep/src/main.rs:20
  21: core::ops::function::FnOnce::call_once::hc1fcc87431f77d25
      at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227
                                ⋮ 11 frames hidden ⋮

Run with COLORBT_SHOW_HIDDEN=1 environment variable to disable frame filtering.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面堆栈跟踪如果加上颜色效果会更好，所以我希望你在本地做了相同的尝试，即使如此我们依然可以看到我们真正的 main 函数在 20 帧，然后往上，我们可以看到 &lt;code&gt;Runtime::block_on&lt;/code&gt;  、一个线程池的东西、一些挂起（parked）的线程、thread-local（其他 TLS）、一个 &lt;strong&gt;&lt;strong&gt;生成的&lt;/strong&gt;&lt;/strong&gt; future（帧 9 和 8，也就是我们的 &lt;code&gt;async fn main&lt;/code&gt; 的最终结果），最后是我们的 &lt;code&gt;DumbFuture&lt;/code&gt; poll 方法（帧 7）。&lt;/p&gt;
&lt;p&gt;帧 6 到 1 就是 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/panic/index.html&#34;&gt;panic&lt;/a&gt; 机制，再次完全超出本文讨论的范围。&lt;/p&gt;
&lt;p&gt;但是请站起来，亲爱的观众，用你的手臂绕过这个装置，以确保没有障眼法，没有隐藏的线，没有。。。&lt;/p&gt;
&lt;p&gt;。。。我要说的是对于异步堆栈跟踪没有“特殊处理”（special handling）。当然，这里我们崩溃了，但是仅仅是 Rust，操作系统甚至不知道我几乎避免了一场灾难。&lt;/p&gt;
&lt;p&gt;但是我们可以制造更大的混乱，如果我们愿意使用 &lt;code&gt;unsafe&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; DumbFuture {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, _cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xF00D&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;;
        }
        unreachable&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// pinky promise
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就不会有一些列的崩溃处理来拯救我们：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_BACKTRACE=1 cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 2.18s
     Running `target/debug/waytoodeep`
Jul 25 17:46:53.926  INFO waytoodeep: Building that dumb future...
Jul 25 17:46:53.926  INFO waytoodeep: Awaiting that dumb future...
zsh: segmentation fault (core dumped)  RUST_BACKTRACE=1 cargo run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 GDB 可以：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build &amp;amp;&amp;amp; gdb --quiet --args ./target/debug/waytoodeep
    Finished dev [unoptimized + debuginfo] target(s) in 0.04s
Reading symbols from ./target/debug/waytoodeep...
warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
of file /home/amos/ftl/waytoodeep/target/debug/waytoodeep.
Use `info auto-load python-scripts [REGEXP]&#39; to list them.
(gdb) r
Starting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;quot;.
[New Thread 0x7ffff7c28700 (LWP 129418)]
[New Thread 0x7ffff7a27700 (LWP 129419)]
[New Thread 0x7ffff7826700 (LWP 129420)]
[New Thread 0x7ffff7625700 (LWP 129421)]
[New Thread 0x7ffff7424700 (LWP 129422)]
[New Thread 0x7ffff7223700 (LWP 129423)]
[New Thread 0x7ffff7022700 (LWP 129424)]
[New Thread 0x7ffff6e1e700 (LWP 129425)]
[New Thread 0x7ffff6c1a700 (LWP 129426)]
[New Thread 0x7ffff6a16700 (LWP 129427)]
[New Thread 0x7ffff6812700 (LWP 129428)]
[New Thread 0x7ffff660e700 (LWP 129429)]
[New Thread 0x7ffff640a700 (LWP 129430)]
[New Thread 0x7ffff6206700 (LWP 129431)]
[New Thread 0x7ffff6002700 (LWP 129432)]
Jul 25 17:47:13.278  INFO waytoodeep: Building that dumb future...
Jul 25 17:47:13.279  INFO waytoodeep: Awaiting that dumb future...

Thread 1 &amp;quot;waytoodeep&amp;quot; received signal SIGSEGV, Segmentation fault.
&amp;lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&amp;gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15
15                  *(0xF00D as *mut u64) = 0x0;
(gdb) bt
#0  &amp;lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&amp;gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15
#1  0x00005555555ab3a3 in waytoodeep::main::{{closure}} () at src/main.rs:17
#2  0x00005555555adb29 in &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll (self=..., cx=0x7fffffffd690)
    at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80
#3  0x00005555555adaa0 in tokio::park::thread::CachedParkThread::block_on::{{closure}} ()
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
#4  0x00005555555b1742 in tokio::coop::with_budget::{{closure}} (cell=0x7ffff7c2c412)
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106
#5  0x00005555555a9f58 in std::thread::local::LocalKey&amp;lt;T&amp;gt;::try_with (self=0x555555925fc0, f=...)
    at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376
#6  0x00005555555a9e3d in std::thread::local::LocalKey&amp;lt;T&amp;gt;::with (self=0x555555925fc0, f=...)
    at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352
#7  0x00005555555ad7c8 in tokio::coop::with_budget (budget=..., f=...)
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99
#8  tokio::coop::budget (f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76
#9  tokio::park::thread::CachedParkThread::block_on (self=0x7fffffffd7a0, f=...)
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263
#10 0x00005555555abcc9 in tokio::runtime::enter::Enter::block_on (self=0x7fffffffd7f0, f=...)
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151
#11 0x00005555555acf2e in tokio::runtime::thread_pool::ThreadPool::block_on (self=0x7fffffffd908, future=...)
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71
#12 0x00005555555b0dfd in tokio::runtime::Runtime::block_on (self=0x7fffffffd900, future=...)
    at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452
#13 0x00005555555aa807 in waytoodeep::main () at src/main.rs:20
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们再次丢失了高亮颜色，这里可以看一下：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/gdb-colors.b45af429c46a37d9.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译注：我在本地环境并没有通过 GDB 复现带高亮的堆栈跟踪，反而是通过 LLDB 可以看到高亮的堆栈跟踪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是不是很漂亮？&lt;/p&gt;
&lt;p&gt;现在让我们回到正常有用的代码，移除所有关于自己实现的 future 代码： &lt;code&gt;src/dumb.rs&lt;/code&gt; 和 &lt;code&gt;mod dumb&lt;/code&gt; 。并使用一个获取 future 替代：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that fetch future...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that fetch future...&amp;#34;&lt;/span&gt;);
    fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that fetch future&amp;#34;&lt;/span&gt;);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_BACKTRACE=1 cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 2.99s
     Running `target/debug/waytoodeep`
Jul 25 17:51:49.281  INFO waytoodeep: Building that fetch future...
Jul 25 17:51:49.282  INFO waytoodeep: Awaiting that fetch future...
Jul 25 17:51:49.437  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 17:51:49.438  INFO waytoodeep: Done awaiting that fetch future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有两种方式考虑我们的函数，一个是语法糖层：也就是 &lt;code&gt;async fn&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;, url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后是核心实现层：一个普通的 &lt;code&gt;fn&lt;/code&gt; 仅用来返回一个 future 对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::future::Future;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
    client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Client,
    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
        info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
        Ok(())
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于借用 &lt;code&gt;client&lt;/code&gt; 和 &lt;code&gt;url&lt;/code&gt; ，所以 &lt;code&gt;Future&lt;/code&gt; 对象的存活时间不能超过两者，这也是为什么我会将上面两个生命周期命名为 &lt;code&gt;&#39;a&lt;/code&gt; ，
并且返回的值也是任意实现了 &lt;code&gt;Future&lt;/code&gt; （通过 &lt;code&gt;Output&lt;/code&gt; ）同时生命周期也是 &lt;code&gt;&#39;a&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;整个 &lt;code&gt;async move {}&lt;/code&gt; 快也仅仅是“构建状态” &amp;ndash; 等于一个实现了 &lt;code&gt;Future&lt;/code&gt; 的类型。&lt;/p&gt;
&lt;p&gt;我们只是无法命名它。&lt;/p&gt;
&lt;p&gt;我们只能尽量获取它的描述：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type_name_of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(_: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
    std::any::type_name::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()
}

&lt;span style=&#34;color:#75715e&#34;&gt;// in main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that fetch future...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(
        type_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type_name_of(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;fut),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;That fetch future has a type..&amp;#34;&lt;/span&gt;
    );
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that fetch future...&amp;#34;&lt;/span&gt;);
    fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that fetch future&amp;#34;&lt;/span&gt;);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/waytoodeep`
Jul 25 18:00:39.774  INFO waytoodeep: Building that fetch future...
Jul 25 18:00:39.775  INFO waytoodeep: That fetch future has a type.. type_name=&amp;quot;core::future::from_generator::GenFuture&amp;lt;waytoodeep::fetch_thing::{{closure}}&amp;gt;&amp;quot;
Jul 25 18:00:39.775  INFO waytoodeep: Awaiting that fetch future...
Jul 25 18:00:39.882  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:00:39.882  INFO waytoodeep: Done awaiting that fetch future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。但是等等，由于我们使用了 &lt;code&gt;async&lt;/code&gt; 语法所以它是一个编译器生成的类型。某种意义上我们无法命名它也就意味这我们无法绑定这个对象，或者编写一个函数仅仅接受该类型。&lt;/p&gt;
&lt;p&gt;为了让我们自己相信 future 对象在我们真正轮询它之前它不会做任何工作，我们可以打开 &lt;code&gt;reqwest&lt;/code&gt; 的调试日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 3.07s
     Running `target/debug/waytoodeep`
Jul 25 18:05:07.384  INFO waytoodeep: Building that fetch future...
Jul 25 18:05:07.385  INFO waytoodeep: That fetch future has a type.. type_name=&amp;quot;core::future::from_generator::GenFuture&amp;lt;waytoodeep::fetch_thing::{{closure}}&amp;gt;&amp;quot;
Jul 25 18:05:07.385  INFO waytoodeep: Awaiting that fetch future...
Jul 25 18:05:07.385 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:05:07.503 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:05:07.503  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:05:07.503  INFO waytoodeep: Done awaiting that fetch future
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;甚至对于每一个包（crate），我们都可以通过监听 &lt;a href=&#34;https://lib.rs/crates/hyper&#34;&gt;hyper&lt;/a&gt; 和 &lt;a href=&#34;https://lib.rs/crates/h2&#34;&gt;h2&lt;/a&gt; 来观察：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=debug cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.04s
     Running `target/debug/waytoodeep`
Jul 25 18:05:59.973  INFO waytoodeep: Building that fetch future...
Jul 25 18:05:59.973  INFO waytoodeep: That fetch future has a type.. type_name=&amp;quot;core::future::from_generator::GenFuture&amp;lt;waytoodeep::fetch_thing::{{closure}}&amp;gt;&amp;quot;
Jul 25 18:05:59.973  INFO waytoodeep: Awaiting that fetch future...
Jul 25 18:05:59.974 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:05:59.974 DEBUG hyper::client::connect::dns: resolving host=&amp;quot;fasterthanli.me&amp;quot;
Jul 25 18:05:59.989 DEBUG hyper::client::connect::http: connecting to 172.67.196.144:443
Jul 25 18:06:00.000 DEBUG hyper::client::connect::http: connected to 172.67.196.144:443
Jul 25 18:06:00.000 DEBUG rustls::client::hs: No cached session for DNSNameRef(&amp;quot;fasterthanli.me&amp;quot;)
Jul 25 18:06:00.000 DEBUG rustls::client::hs: Not resuming any session
Jul 25 18:06:00.016 DEBUG rustls::client::hs: Using ciphersuite TLS13_CHACHA20_POLY1305_SHA256
Jul 25 18:06:00.016 DEBUG rustls::client::tls13: Not resuming
Jul 25 18:06:00.017 DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: [ServerNameAck, Protocols([PayloadU8([104, 50])])]
Jul 25 18:06:00.017 DEBUG rustls::client::hs: ALPN protocol is Some(b&amp;quot;h2&amp;quot;)
Jul 25 18:06:00.018 DEBUG h2::client: binding client connection
Jul 25 18:06:00.018 DEBUG h2::client: client connection bound
Jul 25 18:06:00.018 DEBUG h2::codec::framed_write: send frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 }
Jul 25 18:06:00.019 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 }
Jul 25 18:06:00.019 DEBUG hyper::client::pool: pooling idle connection for (&amp;quot;https&amp;quot;, fasterthanli.me)
Jul 25 18:06:00.020 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) }
Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: rustls::client::tls13: Ticket saved
Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: rustls::client::tls13: Ticket saved
Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Settings { flags: (0x0), max_concurrent_streams: 256, initial_window_size: 65536, max_frame_size: 16777215 }
Jul 25 18:06:00.030 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Settings { flags: (0x1: ACK) }
Jul 25 18:06:00.030 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 2147418112 }
Jul 25 18:06:00.041 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Settings { flags: (0x1: ACK) }
Jul 25 18:06:00.041 DEBUG Connection{peer=Client}: h2::proto::settings: received settings ACK; applying Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 }
Jul 25 18:06:00.120 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) }
Jul 25 18:06:00.120 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Data { stream_id: StreamId(1) }
Jul 25 18:06:00.121 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:06:00.121  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:06:00.121  INFO waytoodeep: Done awaiting that fetch future
Jul 25 18:06:00.121 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Data { stream_id: StreamId(1) }
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Reset { stream_id: StreamId(1), error_code: CANCEL }
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=GoAway { error_code: NO_ERROR, last_stream_id: StreamId(0) }
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::proto::connection: Connection::poll; connection error error=NO_ERROR
Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: rustls::session: Sending warning alert CloseNotify
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;上面出现了 rustls，并且使用了 TLS 1.3，作者做过&lt;a href=&#34;https://www.youtube.com/watch?v=YHIiVsFybLA&#34;&gt;一期视频&lt;/a&gt;介绍过 TLS 1.3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些应该足够说服你，除非你只相信内核所说的，所以让我们看看调用堆栈只为了更加确定。&lt;/p&gt;
&lt;p&gt;我们在 &lt;code&gt;await&lt;/code&gt; future 对象之前增加一秒钟的休眠：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::time::sleep;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::time::Duration;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building that fetch future...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sleeping for a bit...&amp;#34;&lt;/span&gt;);
    sleep(Duration::from_secs(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Awaiting that fetch future...&amp;#34;&lt;/span&gt;);
    fut.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done awaiting that fetch future&amp;#34;&lt;/span&gt;);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build &amp;amp;&amp;amp; strace -e &#39;connect&#39; ./target/debug/waytoodeep
   Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)
    Finished dev [unoptimized + debuginfo] target(s) in 3.13s
Jul 25 18:09:36.595  INFO waytoodeep: Building that fetch future...
Jul 25 18:09:36.596  INFO waytoodeep: Sleeping for a bit...
Jul 25 18:09:37.599  INFO waytoodeep: Awaiting that fetch future...
connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
Jul 25 18:09:37.720  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:09:37.721  INFO waytoodeep: Done awaiting that fetch future
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次强调，附上会让显著提高上面信息的可读性，如果不让我选择它们的话我是非常喜欢高亮的。我本地看起来是这样的：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/strace-colors.a4163f4bda179c2b.webp&#34; alt=&#34;&#34;&gt;
由于 &lt;code&gt;tracing-subscriber&lt;/code&gt; 默认格式会输出时间戳，可以看到程序休眠了1分钟（外加3毫秒），而且只有我们真正调用 &lt;code&gt;await&lt;/code&gt; 时我们的程序才会开始连接到托管文章的 CDN 节点。&lt;/p&gt;
&lt;p&gt;好了！让我们再次尝试拉取两篇文章：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);

    fut1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    fut2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次检查日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet
Jul 25 18:31:47.396 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:31:47.536 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:31:47.537  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:31:47.627 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13
Jul 25 18:31:47.627  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非常有趣。从这里可以看到， &lt;code&gt;reqwest&lt;/code&gt; 为两个请求复用了相同的连接。我会这么说是因我只看到了一行 &lt;code&gt;reqwest::connect&lt;/code&gt; 日志。&lt;/p&gt;
&lt;p&gt;让我们快速通过 &lt;code&gt;strace&lt;/code&gt; 检查一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet &amp;amp;&amp;amp; strace -e &#39;connect&#39; ./target/debug/waytoodeep &amp;gt; /dev/null
connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;172.67.196.144&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在可以确认了，只有一次连接。&lt;/p&gt;
&lt;p&gt;但是，第一个请求完成后才开始了第二个请求。第一个耗费了 &lt;code&gt;536-396 = 140&lt;/code&gt; 毫秒，但是第二个耗费了 &lt;code&gt;627-537 = 90&lt;/code&gt; 毫秒！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Emmm，现在我们运行构建的是 debug 版本不是吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是真的。我确信我们面临的是 IO 密集型，而不是 CPU 密集型。&lt;/p&gt;
&lt;p&gt;debug 版本的构建绝对有一些额外的开销，但是我怀疑这里它不会太影响延迟。无论如何，让我们检查一下：
（注意 &amp;ndash;release）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet --release
Jul 25 18:34:59.211 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:34:59.343 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:34:59.343  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:34:59.427 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13
Jul 25 18:34:59.427  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们计算一下延迟 &lt;code&gt;343-211 = 132ms&lt;/code&gt; ， &lt;code&gt;427-343 = 84ms&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;几毫秒的差异可能的解释是邻居打开了一个 YouTube 视频导致无线电波爆发，从而导致冲突（802.11 没有空中流量控制，全民自由（free-for-all））和重传。&lt;/p&gt;
&lt;p&gt;或者另外一百万个原因。这也是我们不继续分析的原因。&lt;/p&gt;
&lt;p&gt;让我们回到文章的主题。&lt;/p&gt;
&lt;h3 id=&#34;等待第一个完成&#34;&gt;等待第一个完成&lt;/h3&gt;
&lt;p&gt;是的！等待第一个完成。所以我们如何让程序同时请求两个？&lt;/p&gt;
&lt;p&gt;其实有一大堆方式！&lt;/p&gt;
&lt;p&gt;例如，我们可以在一个执行器上执行（ &lt;code&gt;spawn&lt;/code&gt; ）这些 future 对象，然后休眠一秒钟。1 秒钟足够了吧？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_1);
    tokio::spawn(fut1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;client, URL_2);
    tokio::spawn(fut2);

    tokio::time::sleep(Duration::from_secs(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet --release
error[E0597]: `client` does not live long enough
  --&amp;gt; src/main.rs:17:28
   |
17 |     let fut1 = fetch_thing(&amp;amp;client, URL_1);
   |                ------------^^^^^^^--------
   |                |           |
   |                |           borrowed value does not live long enough
   |                argument requires that `client` is borrowed for `&#39;static`
...
25 | }
   | - `client` dropped here while still borrowed

error: aborting due to previous error

For more information about this error, try `rustc --explain E0597`.
error: could not compile `waytoodeep`

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额，除非我们不可以。不可以是因为。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们将「future 对象交给执行器执行」并将 future 对象转交给执行器，对吧？我们转移了它和它的内容的所有权。&lt;/p&gt;
&lt;p&gt;然后即使我们不对其进行 &lt;code&gt;await&lt;/code&gt; ，future 对象因为是「执行器需要做」的一部分依然会被执行，所以即使我们从 &lt;code&gt;main&lt;/code&gt; 返回 future 对象也会被轮询（polled）。&lt;/p&gt;
&lt;p&gt;但是如果我们从 &lt;code&gt;main&lt;/code&gt; 返回，则整个程序都会退出。&lt;/p&gt;
&lt;p&gt;这里也可以是任何函数（这里是 &lt;code&gt;main&lt;/code&gt; ）。重要的是如果函数返回了但是 future 对象借用了部分数据将无法通过借用检查器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这让我很高兴，因为这意味着我们不会意外访问到一些被释放的资源：&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=use+after+free&#34;&gt;UAF&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里我们的例子没有完成。&lt;/p&gt;
&lt;p&gt;所以。。。我们需要解决这个问题。如果 &lt;code&gt;fetch_thing&lt;/code&gt; 返回的 future 对象是 &lt;code&gt;&#39;static&lt;/code&gt; 的呢？或者它不借用任何东西？&lt;/p&gt;
&lt;p&gt;程序现在看起来如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::future::Future;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
    client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Client,
    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
        info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
        Ok(())
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好吧，之前我们用了 &lt;code&gt;async fn&lt;/code&gt; ，但是为了更加深入的理解，我们不得不放弃漂亮的语法。&lt;/p&gt;
&lt;p&gt;但是幸运的是，这正是我们想要的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
    client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Client,
    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
&lt;span style=&#34;color:#75715e&#34;&gt;//                                                 👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &amp;#39;static {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是我们借用了 &lt;code&gt;client&lt;/code&gt; 和 &lt;code&gt;url&lt;/code&gt; 我们必须避免这个问题。&lt;/p&gt;
&lt;p&gt;因为 &lt;code&gt;url&lt;/code&gt; 本身就是常量，所以很容易解决：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_1: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/articles/whats-in-the-box&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; URL_2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fasterthanli.me/series/advent-of-code-2020/part-13&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它们本身就是 &lt;code&gt;&#39;static&lt;/code&gt; 。所以我们只需要调整需要 &lt;code&gt;&#39;static&lt;/code&gt; 就行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
    client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Client,
    &lt;span style=&#34;color:#75715e&#34;&gt;//       👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &amp;#39;static {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常好！解决了一个生命周期，还剩下一个。&lt;/p&gt;
&lt;p&gt;我们可以要求 &lt;code&gt;client&lt;/code&gt; 的生命周期为 &lt;code&gt;&#39;static&lt;/code&gt; 。由于它是一个  &lt;code&gt;Client&lt;/code&gt; 的引用，意味着 &lt;code&gt;Cleint&lt;/code&gt; 本身也需要是 &lt;code&gt;&#39;static&lt;/code&gt; 生命周期。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;//         👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    client: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static Client,
    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &amp;#39;static {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于它被 &lt;code&gt;main&lt;/code&gt; 所有，额，我们可以，可以。。。可以泄漏它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; leaked_client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Box::leak(Box::new(client));

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_2);

    tokio::spawn(fut1);
    tokio::spawn(fut2);

    tokio::time::sleep(Duration::from_secs(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完美！没有生命周期的问题了。&lt;/p&gt;
&lt;p&gt;仅仅将所有东西泄漏就行。看到没？你不需要 C！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info,reqwest=debug cargo run --quiet --release
Jul 25 18:54:53.614 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:54:53.614 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/
Jul 25 18:54:53.708 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/articles/whats-in-the-box
Jul 25 18:54:53.708  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:54:53.733 DEBUG reqwest::async_impl::client: response &#39;200 OK&#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13
Jul 25 18:54:53.733  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非～～常有趣！&lt;/p&gt;
&lt;p&gt;我们的两个请求肯定是并发的发出去了，我们之所以知道是因为从我的笔记本上请求我的网站大概耗时 80ms 到 140ms 之间，但是在日志中我们看到两个响应之间只有 ~25ms 的间隔。&lt;/p&gt;
&lt;p&gt;我们还可以看到 &lt;code&gt;reqwest&lt;/code&gt; 有连接池机制：同时创建了两个连接。可能是因为我们开始第二个连接的时候第一个请求的连接还没有建立完成。&lt;/p&gt;
&lt;p&gt;也就意味着我们通过 &lt;code&gt;strace&lt;/code&gt; 可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet --release &amp;amp;&amp;amp; strace -e &#39;connect&#39; ./target/release/waytoodeep
Jul 25 18:58:16.425  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 18:58:16.443  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。两个 &lt;code&gt;connect&lt;/code&gt; 调用！如我所料！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谬论：一个 &lt;code&gt;connect&lt;/code&gt; 调用都没看到？因为 Rust 构建 HTTP/2 请求的时候甚至都需要建立 TCP 连接。真是革命性的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这当然不是真的。可能在其他线程执行了？也许 &lt;code&gt;strace&lt;/code&gt; 默认仅跟踪了主线程？&lt;/p&gt;
&lt;p&gt;啊，对了， &lt;code&gt;-f&lt;/code&gt; 可以跟踪所有「子进程」，就像大家知道的那样 Linux 线程仅仅是披了件风衣的进程（或者其他方式）。所以，让我们看一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet --release &amp;amp;&amp;amp; strace -f -e &#39;connect&#39; ./target/release/waytoodeep
strace: Process 154612 attached
strace: Process 154613 attached
strace: Process 154614 attached
strace: Process 154615 attached
strace: Process 154616 attached
strace: Process 154617 attached
strace: Process 154618 attached
strace: Process 154619 attached
strace: Process 154620 attached
strace: Process 154621 attached
strace: Process 154622 attached
strace: Process 154623 attached
strace: Process 154624 attached
strace: Process 154625 attached
strace: Process 154626 attached
strace: Process 154627 attached
strace: Process 154628 attached
[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
[pid 154628] connect(10, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
[pid 154628] connect(9, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
[pid 154627] connect(10, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3034::6815:5ca9&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3031::ac43:c490&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154627] connect(9, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;172.67.196.144&amp;quot;)}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3034::6815:5ca9&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3031::ac43:c490&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
[pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=&amp;quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;quot;}, 16) = 0
[pid 154628] connect(10, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;172.67.196.144&amp;quot;)}, 16) = 0
[pid 154625] connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
[pid 154626] connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
Jul 25 19:00:53.862  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:00:53.880  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
[pid 154628] +++ exited with 0 +++
[pid 154627] +++ exited with 0 +++
[pid 154618] +++ exited with 0 +++
[pid 154614] +++ exited with 0 +++
[pid 154612] +++ exited with 0 +++
[pid 154619] +++ exited with 0 +++
[pid 154617] +++ exited with 0 +++
[pid 154613] +++ exited with 0 +++
[pid 154615] +++ exited with 0 +++
[pid 154623] +++ exited with 0 +++
[pid 154616] +++ exited with 0 +++
[pid 154624] +++ exited with 0 +++
[pid 154621] +++ exited with 0 +++
[pid 154622] +++ exited with 0 +++
[pid 154626] +++ exited with 0 +++
[pid 154620] +++ exited with 0 +++
[pid 154625] +++ exited with 0 +++
+++ exited with 0 +++shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哇哦，一大堆 &lt;code&gt;connect&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以程序首先尝试连接 &lt;a href=&#34;https://jameshfisher.com/2018/02/05/dont-use-nscd/&#34;&gt;nscd&lt;/a&gt; 因为显然我们依然生活在 90 年代：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=&amp;quot;/var/run/nscd/socket&amp;quot;}, 110) = -1 ENOENT (No such file or directory)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。幸好我的系统没有它，所以它继续通过 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 查询 DNS：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154628] connect(9, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后最终获得一些 &lt;a href=&#34;https://www.cloudflare.com/ips/&#34;&gt;Cloudflare 的 IP 地址&lt;/a&gt;，如 &lt;code&gt;172.67.196.144&lt;/code&gt; 和 &lt;code&gt;104.21.92.169&lt;/code&gt; 。还有一些 IPv6 相关的，由于我禁用了 IPv6 所以并没有工作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, &amp;quot;2606:4700:3034::6815:5ca9&amp;quot;, &amp;amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后终于程序决定使用 IPv4 的地址 &lt;code&gt;104.21.92.169&lt;/code&gt; 去构建请求，同时我们能看到这些都是非阻塞的（non-blocking）连接，因为 &lt;code&gt;connect&lt;/code&gt; 返回 &lt;code&gt;-1&lt;/code&gt; 而不是 &lt;code&gt;0&lt;/code&gt; 表示「正在连接、正在连接、稍后回来检查」。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[pid 154625] connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
[pid 154626] connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;104.21.92.169&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了！所以忽略 &lt;a href=&#34;https://isitdns.com/&#34;&gt;DNS&lt;/a&gt; 的话我们看到了两个连接。&lt;/p&gt;
&lt;p&gt;同时我们看到了一些线程。&lt;/p&gt;
&lt;p&gt;这就是 Rust 异步的工作方式？我们只是用了一些线程？这也就是它能在「后台运行」的原因？&lt;/p&gt;
&lt;p&gt;在我们回答这些问题前，让我们先调整我们的代码真正的去等待 future 完成，而不是随意的休眠 1 秒钟。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; leaked_client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Box::leak(Box::new(client));

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(leaked_client, URL_2);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

    handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等等，我们这不又回到原点吗？等待第一个请求完成，然后才开始第二个请求。&lt;/p&gt;
&lt;p&gt;当然不是！我们运行几次就可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:07.934  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:07.958  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:08.676  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:08.680  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:09.325  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:09.338  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:11:10.134  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:11:10.144  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。大部分情况下“whats-in-the-box”胜出了（它确实先开始），但是“advent-of-code-2020”也首先完成了几次。这也是我们希望看到的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谬论：也就是说因为有线程请求被并行（parallel）的执行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是的。但是不要相信我，让我们继续深入。&lt;/p&gt;
&lt;h3 id=&#34;不是因为线程&#34;&gt;不是因为线程&lt;/h3&gt;
&lt;p&gt;让我们通过 GDB 运行我们的小程序，大部分原因是我还没有对 LLDB 形成肌肉记忆，我相信这是水到渠成的事。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet &amp;amp;&amp;amp; gdb --quiet --args ./target/debug/waytoodeep
Reading symbols from ./target/debug/waytoodeep...
warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
of file /home/amos/ftl/waytoodeep/target/debug/waytoodeep.
Use `info auto-load python-scripts [REGEXP]&#39; to list them.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一切就绪！&lt;/p&gt;
&lt;p&gt;在我们开始之前先设置一下断点。我说了断点？应该是捕捉点（catchpoint）。我不知道参与构造 HTTP/2 请求的所有函数名，但是我知道 &lt;code&gt;connect&lt;/code&gt; 对应的系统调用（syscall），这也是我们需要打断点的地方，或者捕捉（catch）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(gdb) catch syscall connect
Catchpoint 1 (syscall &#39;connect&#39; [42])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们开始！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ Starting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;quot;.
[New Thread 0x7ffff7c28700 (LWP 158945)]
[New Thread 0x7ffff7a27700 (LWP 158946)]
[New Thread 0x7fffef826700 (LWP 158947)]
[New Thread 0x7ffff7826700 (LWP 158948)]
[New Thread 0x7ffff7625700 (LWP 158949)]
[New Thread 0x7ffff7424700 (LWP 158950)]
[New Thread 0x7ffff7223700 (LWP 158951)]
[New Thread 0x7ffff701f700 (LWP 158952)]
[New Thread 0x7ffff6e1e700 (LWP 158953)]
[New Thread 0x7ffff6c1a700 (LWP 158954)]
[New Thread 0x7ffff6a16700 (LWP 158955)]
[New Thread 0x7ffff680f700 (LWP 158956)]
[New Thread 0x7ffff660e700 (LWP 158957)]
[New Thread 0x7ffff640a700 (LWP 158958)]
[New Thread 0x7ffff6206700 (LWP 158959)]
[New Thread 0x7ffff5f4b700 (LWP 158960)]
[New Thread 0x7ffff5d4a700 (LWP 158961)]
[Switching to Thread 0x7ffff5f4b700 (LWP 158960)]

Thread 17 &amp;quot;tokio-runtime-w&amp;quot; hit Catchpoint 1 (call to syscall connect), 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=...,
    len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26
26      ../sysdeps/unix/sysv/linux/connect.c: No such file or directory.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不错不错，真快！我们停在了名为 &lt;code&gt;tokio-runtime-w&lt;/code&gt; 的 &lt;code&gt;Thread 17&lt;/code&gt; 中，因为我猜其他所有字母都被使用了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt; 意味这 &lt;code&gt;worker&lt;/code&gt; ，如果你不是第一天用 Unix 就会知道什么这么简写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的， &lt;code&gt;Thread 17&lt;/code&gt; ，那么其他线程在做什么呢？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(gdb) info threads
  Id   Target Id                                            Frame
  1    Thread 0x7ffff7c2c6c0 (LWP 158941) &amp;quot;waytoodeep&amp;quot;      syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  2    Thread 0x7ffff7c28700 (LWP 158945) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  3    Thread 0x7ffff7a27700 (LWP 158946) &amp;quot;tokio-runtime-w&amp;quot; 0x00007ffff7d4f5ce in epoll_wait (epfd=3, events=0x555556338b60, maxevents=1024, timeout=-1)
    at ../sysdeps/unix/sysv/linux/epoll_wait.c:30
  4    Thread 0x7fffef826700 (LWP 158947) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  5    Thread 0x7ffff7826700 (LWP 158948) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  6    Thread 0x7ffff7625700 (LWP 158949) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  7    Thread 0x7ffff7424700 (LWP 158950) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  8    Thread 0x7ffff7223700 (LWP 158951) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  9    Thread 0x7ffff701f700 (LWP 158952) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  10   Thread 0x7ffff6e1e700 (LWP 158953) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  11   Thread 0x7ffff6c1a700 (LWP 158954) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  12   Thread 0x7ffff6a16700 (LWP 158955) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  13   Thread 0x7ffff680f700 (LWP 158956) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  14   Thread 0x7ffff660e700 (LWP 158957) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  15   Thread 0x7ffff640a700 (LWP 158958) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
  16   Thread 0x7ffff6206700 (LWP 158959) &amp;quot;tokio-runtime-w&amp;quot; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
 *17   Thread 0x7ffff5f4b700 (LWP 158960) &amp;quot;tokio-runtime-w&amp;quot; 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110)
    at ../sysdeps/unix/sysv/linux/connect.c:26
  18   Thread 0x7ffff5d4a700 (LWP 158961) &amp;quot;tokio-runtime-w&amp;quot; 0x00007ffff7d48a46 in __GI___mmap64 (offset=0, fd=-1, flags=16418, prot=0, len=134217728, addr=0x0)
    at ../sysdeps/unix/sysv/linux/mmap64.c:59
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额。&lt;/p&gt;
&lt;p&gt;我们可以获得更多的栈帧？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(gdb) thread apply all backtrace 2

Thread 18 (Thread 0x7ffff5d4a700 (LWP 158961)):
#0  0x00007ffff7d48a46 in __GI___mmap64 (offset=0, fd=-1, flags=16418, prot=0, len=134217728, addr=0x0) at ../sysdeps/unix/sysv/linux/mmap64.c:59
#1  __GI___mmap64 (addr=addr@entry=0x0, len=len@entry=134217728, prot=prot@entry=0, flags=flags@entry=16418, fd=fd@entry=-1, offset=offset@entry=0) at ../sysdeps/unix/sysv/linux/mmap64.c:47
(More stack frames follow...)

Thread 17 (Thread 0x7ffff5f4b700 (LWP 158960)):
#0  0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26
#1  0x00007ffff7d8b713 in open_socket (type=type@entry=GETFDHST, key=key@entry=0x7ffff7de5ccb &amp;quot;hosts&amp;quot;, keylen=keylen@entry=6) at nscd_helper.c:185
(More stack frames follow...)

Thread 16 (Thread 0x7ffff6206700 (LWP 158959)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff6206498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)

Thread 15 (Thread 0x7ffff640a700 (LWP 158958)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff640a498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)

Thread 14 (Thread 0x7ffff660e700 (LWP 158957)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff660e498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)

Thread 13 (Thread 0x7ffff680f700 (LWP 158956)):
#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38
#1  0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff680f498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112
(More stack frames follow...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额。大部分都是挂起的。也就是空闲的。更准确的是它们在等待工作。&lt;/p&gt;
&lt;p&gt;我们也可以通过 htop 查看这些所有线程，我知道我们已经看到了，但是我仅仅是觉得 htop 很棒。感谢 &lt;a href=&#34;https://twitter.com/hisham%5Fhm&#34;&gt;Hisham&lt;/a&gt;！
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/htop-colors.571c5effbff8a0b3.webp&#34; alt=&#34;&#34;&gt;
所以，我们注意到一些线程，同时也有一些 CPU 核心。可能是一个 CPU 核心一个线程？
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/worker-threads.64dbe39e33ccfc4f.webp&#34; alt=&#34;&#34;&gt;
是的。然后还有一些阻塞的线程，正如我们从上面 &lt;code&gt;strace&lt;/code&gt; 输出看到的那样， 它会进行一些阻塞的 &lt;code&gt;connect&lt;/code&gt; 调用去查询 DNS（实际是 glibc 在执行），
所以它通过运行在工作线程之外避免阻塞其他任务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以多个线程，这就是为什么一次可以运行多个请求的原因？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上文档上表明这是一个单线程的执行器，我也不能确定，所以让我们试一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//                           👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// (same as before)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 19:50:15.977  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 19:50:15.994  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两个响应间隔 &lt;code&gt;17ms&lt;/code&gt; ，这个时间不够构造一个完整的请求，所以请求并行（parallel）的执行了。如果你依然坚持它内部使用了线程，让我们进一步确认我们只有一个线程：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/current-thread.cd7b619ed644899b.webp&#34; alt=&#34;&#34;&gt;
确实有多个线程，但是这些都是阻塞线程。仅仅是 DNS 查询。可以通过 htop 看到已经没有无数（15）的工作线程了：
&lt;img src=&#34;https://fasterthanli.me/content/articles/understanding-rust-futures-by-going-way-too-deep/assets/htop-current-thread.fe28174abc5d15fa.webp&#34; alt=&#34;&#34;&gt;
（顺便说一下 15 个工作线程的原因，这是因为我预留了一个 CPU 核心没有分配给虚拟机，这样即使虚拟机全速运行也不会导致宿主机停止响应）。&lt;/p&gt;
&lt;p&gt;如果我们将 DNS 查询排除在外，我们就可以看到实际上仅仅使用了一个线程，我们将继续下去，以防你依然存疑！&lt;/p&gt;
&lt;h3 id=&#34;插曲-让我们避免泄漏内存&#34;&gt;插曲：让我们避免泄漏内存&lt;/h3&gt;
&lt;p&gt;但是在那之前：正在泄漏 reqwest 的 &lt;code&gt;Client&lt;/code&gt; 让我很不爽。&lt;/p&gt;
&lt;p&gt;为了避免，我们可以创建一个原子引用计数（atomically-reference-counted），这样它就可以随着任务运行而存活。&lt;/p&gt;
&lt;p&gt;修改起来非常简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//             👇 Atomically Reference Counted = Arc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::sync::Arc;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;//           👇 there we go
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arc::new(Client::new());

    &lt;span style=&#34;color:#75715e&#34;&gt;//                              👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), URL_1);
    &lt;span style=&#34;color:#75715e&#34;&gt;// (cloning it only increases the reference count)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), URL_2);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

    handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    Ok(())
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[allow(clippy::manual_async_fn)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;//       👇 now taking this, we have shared ownership of it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    client: &lt;span style=&#34;color:#a6e22e&#34;&gt;Arc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &amp;#39;static {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// luckily this  👇 only requires `&amp;amp;self`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
        info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
        Ok(())
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，现在我感觉好多了。我们的程序不再泄漏一些字节即使它永远不会运行超过几秒钟。一切都还好。&lt;/p&gt;
&lt;p&gt;让我们看一下 &lt;code&gt;reqwest&lt;/code&gt; 的 &lt;code&gt;Client&lt;/code&gt; 定义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Clone)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; {
    inner: &lt;span style=&#34;color:#a6e22e&#34;&gt;Arc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ClientRef&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它已经是引用计数的了，所以我们可以直接接受一个 &lt;code&gt;Client&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;//             👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

    &lt;span style=&#34;color:#75715e&#34;&gt;//                              👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), URL_1);
    &lt;span style=&#34;color:#75715e&#34;&gt;// no need to clone a second time
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client, URL_2);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

    handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    Ok(())
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[allow(clippy::manual_async_fn)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;//        👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    client: &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;,
    url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;,
) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &amp;#39;static {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
        info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
        Ok(())
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了。&lt;/p&gt;
&lt;p&gt;对了，仅供参考，更简单的 &lt;code&gt;async fn&lt;/code&gt; 也可以工作了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(client: &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;, url: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url).send().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.error_for_status()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;url, content_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res.headers().get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got a response!&amp;#34;&lt;/span&gt;);
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们甚至不需要要求 &lt;code&gt;url&lt;/code&gt; 的借用生命周期是 &lt;code&gt;&#39;static&lt;/code&gt; 。如果 &lt;code&gt;url&lt;/code&gt; 是 &lt;code&gt;&#39;static&lt;/code&gt; 的则返回的 Future 也是，反之亦然。&lt;/p&gt;
&lt;p&gt;作为例子，下面代码无法通过编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

    &lt;span style=&#34;color:#75715e&#34;&gt;// this is a `String`, owned by main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(URL_1);

    &lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re borrowing from main           👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client.clone(), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;url1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fut2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_thing(client, URL_2);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::spawn(fut2);

    handle1.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    handle2.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;.unwrap()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo check
    Checking waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)

error[E0597]: `url1` does not live long enough
  --&amp;gt; src/main.rs:18:44
   |
18 |     let fut1 = fetch_thing(client.clone(), &amp;amp;url1);
   |                ----------------------------^^^^^-
   |                |                           |
   |                |                           borrowed value does not live long enough
   |                argument requires that `url1` is borrowed for `&#39;static`
...
28 | }
   | - `url1` dropped here while still borrowed
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;你面对的考验就是：修改了一些代码，然后突然间整个 &lt;code&gt;Future&lt;/code&gt; 不再实现 &lt;code&gt;Send&lt;/code&gt; ，但是你需要它实现 &lt;code&gt;Send&lt;/code&gt; 。参考&lt;a href=&#34;https://fasterthanli.me/articles/getting-in-and-out-of-trouble-with-rust-futures&#34;&gt;Getting in and out of trouble with Rust futures&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我们进一步深入之前，我们还想提一下，除了通过 &lt;code&gt;tokio::spawn&lt;/code&gt; 可以同时运行两个 future 并且立即等待两个 future 完成，还是使用 &lt;code&gt;FuturesUnordered&lt;/code&gt; 实现相同目的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add futures@0.3.16
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding futures v0.3.16 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; futures::{stream::FuturesUnordered, StreamExt};


&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[
        fetch_thing(client.clone(), URL_1),
        fetch_thing(client, URL_2),
    ]
    .into_iter()
    .collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FuturesUnordered&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(item) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group.next().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// propagate errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        item&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    }

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这个解决半啃啊，我们可以 await 任意数量的 future 对象，同时也是并发的被轮询（polled）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:12:37.208  INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
Jul 25 20:12:37.227  INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&amp;quot;text/html; charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仅仅。。。19 毫秒的间隔 &amp;ndash; 可以确定是并发的。&lt;/p&gt;
&lt;h3 id=&#34;彻底摆脱-dns&#34;&gt;彻底摆脱 DNS&lt;/h3&gt;
&lt;p&gt;现在让我们暂时忘掉 &lt;code&gt;reqwest&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;HTTP &lt;a href=&#34;https://fasterthanli.me/articles/aiming-for-correctness-with-types&#34;&gt;并不难&lt;/a&gt; ，我们可以自己构建。只要 TCP 就行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::net::SocketAddr;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::{
    io::{AsyncReadExt, AsyncWriteExt},
    net::TcpStream,
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// look mom, no DNS!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addr: &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketAddr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;).into();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TcpStream::connect(addr).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re writing straight to the socket, there&amp;#39;s no buffering
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// so no need to flush
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Host: 1.1.1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;User-Agent: cool-bear&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Connection: close&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::with_capacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
    socket.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response.lines().next().unwrap_or_default();
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;status, , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got response!&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;// dropping the socket will close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以正常运行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:24:05.158  INFO waytoodeep: Got response! status=HTTP/1.1 301 Moved Permanently name=second
Jul 25 20:24:05.159  INFO waytoodeep: Got response! status=HTTP/1.1 301 Moved Permanently name=first
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（看，第二个赢得了胜利）。&lt;/p&gt;
&lt;p&gt;同时再也没有 DNS 查询了。&lt;/p&gt;
&lt;p&gt;当然 &lt;code&gt;http://1.1.1.1&lt;/code&gt; 将我们重定向到 HTTPS 的页面，技术上实现 TLS 并不困难，但是我们的篇幅已经很长了，所以。。。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo add tokio-rustls@0.22.0
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding tokio-rustls v0.22.0 to dependencies
$ cargo add webpki@0.21.4
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding webpki v0.21.4 to dependencies
$ cargo add webpki-roots@0.21.1
    Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index
      Adding webpki-roots v0.21.1 to dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后。。。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo rm reqwest
    Removing reqwest from dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::sync::Arc;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; webpki::DNSNameRef;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio_rustls::{rustls::ClientConfig, TlsConnector};

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// look out it&amp;#39;s port 443 now
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addr: &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketAddr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;).into();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TcpStream::connect(addr).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// establish a TLS session...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; connector: &lt;span style=&#34;color:#a6e22e&#34;&gt;TlsConnector&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClientConfig::new();
        config
            .root_store
            .add_server_trust_anchors(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;webpki_roots::TLS_SERVER_ROOTS);
        Arc::new(config).into()
    };
    &lt;span style=&#34;color:#75715e&#34;&gt;// we have to use the proper DNS name now      👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; dnsname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DNSNameRef::try_from_ascii_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one.one.one.one&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connector.connect(dnsname, socket).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re writing straight to the socket, there&amp;#39;s no buffering
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// so no need to flush
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;//                        👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Host: one.one.one.one&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;User-Agent: cool-bear&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Connection: close&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::with_capacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
    socket.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response.lines().next().unwrap_or_default();
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;status, , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got response!&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;// dropping the socket will close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:31:32.627  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:31:32.658  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，现在返回状态码 200！&lt;/p&gt;
&lt;p&gt;我们的目标是了解 Rust 的 future，我们已经获得了不错的进展。&lt;/p&gt;
&lt;p&gt;但是让我们考虑以下场景：我们想并发的执行两个请求，一旦其中一个失败，另外一个也应该立即请求失败，或者两个一起成功。&lt;/p&gt;
&lt;h3 id=&#34;tokio-的-try-join-宏&#34;&gt;tokio 的 try_join 宏&lt;/h3&gt;
&lt;p&gt;实际上，又一个宏可以做这个！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokio::try_join&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;),)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是我们想要的！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:44:52.150  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:44:52.165  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:44:52.165  INFO waytoodeep: All done! res=((), ())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次快速检查以下：响应间隔在 15ms &amp;ndash; 也就是确定是并发的发送。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try_join!&lt;/code&gt; 帮我们进行了 &lt;code&gt;await&lt;/code&gt; ，同时帮我们处理了结果。如果一切正常，我们得到所有 future 对象的结果：内容为 &lt;code&gt;Ok&lt;/code&gt; 的空元组（有序的）。&lt;/p&gt;
&lt;p&gt;所以我们可以取到我们 future 返回的对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//                                          👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;, Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// (omitted)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//  👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Ok(name)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便我们自己，它们按照顺序返回，无论哪个先被执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:47:56.967  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:47:56.967  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:47:56.967  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:47:57.933  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:47:57.935  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:47:57.935  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 20:47:58.942  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:47:58.946  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:47:58.946  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，现在我们没有 DNS 查询，我们就可以消除“同时”请求是由于多线程实现的。&lt;/p&gt;
&lt;p&gt;因为，如果我们在 &lt;code&gt;strace&lt;/code&gt; 下运行程序，并通过 &lt;code&gt;-f&lt;/code&gt; 请求跟踪子线程（ BTW &lt;code&gt;f&lt;/code&gt; 意思是跟踪（ &lt;code&gt;follow&lt;/code&gt; ）子线程）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ cargo build --quiet --release &amp;amp;&amp;amp; strace -f -e &#39;connect&#39; ./target/release/waytoodeep
connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;1.1.1.1&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(&amp;quot;1.1.1.1&amp;quot;)}, 16) = -1 EINPROGRESS (Operation now in progress)
Jul 25 20:51:54.004  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 20:51:54.013  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 20:51:54.015  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。现在我们看到了预期的两次 &lt;code&gt;connect&lt;/code&gt; 调用，但是没有任何子线程。而且在这个运行中，响应之间的间隔时间是 9 毫秒！少于我直接 ping 1.1.1.1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ ping -c 1 1.1.1.1
PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data.
64 bytes from 1.1.1.1: icmp_seq=1 ttl=57 time=13.7 ms

--- 1.1.1.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 13.748/13.748/13.748/0.000 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为执行器通过 Event Loop 构建非阻塞的系统调用，然后订阅 Event Loop 管理的资源相关的事件，
然后就可以知道一个 socket 什么时间可以进行读写。&lt;/p&gt;
&lt;p&gt;所以，future 对象只是一些状态，接下来就可以进行 await，那么在哪订阅的事件呢？&lt;/p&gt;
&lt;p&gt;让我们尝试创建一个我们自己的 &lt;code&gt;try_join&lt;/code&gt; &amp;ndash; 一个函数，并且只接受两个 future。然后我们就能看到发生了什么。&lt;/p&gt;
&lt;p&gt;我们已经实现了自己的 future，实现一个 &lt;code&gt;try_join&lt;/code&gt; 函数会有多麻烦？&lt;/p&gt;
&lt;h3 id=&#34;事实证明很麻烦&#34;&gt;事实证明很麻烦&lt;/h3&gt;
&lt;p&gt;我们先从简单的开始！我们想实现一个函数接受两个 future 对象然后返回一个 future 对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; tj;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/tj.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::future::Future;

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;,
{
    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;implement me!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;额。函数不应该只返回一个空元组，它需要返回一个包含成功结果的元组。或者遇到的第一个错误。&lt;/p&gt;
&lt;p&gt;所以我们需要添加一些更多的范型参数：一个错误类型（我们假设两个 future 对象返回同样的错误类型），另一个是 future 对象返回的 &lt;code&gt;Ok&lt;/code&gt; 的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;implement me!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了！这非常绕口，但是我相信我们已经实现了需求。&lt;/p&gt;
&lt;p&gt;需要注意的是我们使用了 &lt;code&gt;impl Trait&lt;/code&gt; 语法，让我们不用暴露我们自己的 &lt;code&gt;try join future&lt;/code&gt; 。这不重要，但是可以让我们用更少的 &lt;code&gt;pub&lt;/code&gt; 关键字，同时我们的手指已经码累了。非常累。&lt;/p&gt;
&lt;p&gt;所以，让我们来创建这个类型！&lt;/p&gt;
&lt;p&gt;类型需要持续 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; ，并注意 &lt;code&gt;AR&lt;/code&gt; 、 &lt;code&gt;BR&lt;/code&gt; 和 &lt;code&gt;E&lt;/code&gt; 类型。所以，希望您对这些范型参数沙拉有个好胃口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;,
    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后可以在我们的 &lt;code&gt;try_join&lt;/code&gt; 函数中返回它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// so simple!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    TryJoin { a, b }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我认为这很好的说明一个事实：创建 future 对象仅仅是构建状态。不需要任何额外的工作。&lt;/p&gt;
&lt;p&gt;当然，这个不会通过编译，因为 &lt;code&gt;TryJoin&lt;/code&gt; 还没有实现 &lt;code&gt;Future&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是不要担心！ &lt;code&gt;rust-analyzer&lt;/code&gt; 可以帮助我们生成缺失的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{
    future::Future,
    pin::Pin,
    task::{Context, Poll},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TryJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们真正的实现了，我们将按照下面方式使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，现在只是会崩溃：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release

The application panicked (crashed).
Message:  not yet implemented
Location: src/tj.rs:32

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，我猜我们需要实现它！&lt;/p&gt;
&lt;p&gt;好吧，让我们先尝试至少轮询（polling）一个 future 对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.a.poll(cx);

    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
error[E0599]: no method named `poll` found for type parameter `A` in the current scope
   --&amp;gt; src/tj.rs:32:24
    |
32  |         let a = self.a.poll(cx);
    |                        ^^^^ method not found in `A`
    |
   ::: /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/future.rs:100:8
    |
100 |     fn poll(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context&amp;lt;&#39;_&amp;gt;) -&amp;gt; Poll&amp;lt;Self::Output&amp;gt;;
    |        ---- the method is available for `Pin&amp;lt;&amp;amp;mut A&amp;gt;` here
    |
help: consider wrapping the receiver expression with the appropriate type
    |
32  |         let a = Pin::new(&amp;amp;mut self.a).poll(cx);
    |                 ^^^^^^^^^^^^^       ^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;额！一个好的开始，好的开始。&lt;/p&gt;
&lt;p&gt;我已经在这里&lt;a href=&#34;https://fasterthanli.me/articles/pin-and-suffering&#34;&gt;详细的解释了&lt;/a&gt; Pin，所以这里我们就简单的介绍一下。&lt;/p&gt;
&lt;p&gt;方法通常通过如下方式定义接收者（receiver）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyType&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_thing&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) {
        println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my value is {}&amp;#34;&lt;/span&gt;, self.value)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是下面的简写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyType&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_thing&lt;/span&gt;(self: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;) {
        println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my value is {}&amp;#34;&lt;/span&gt;, self.value)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为我们在 &lt;code&gt;impl MyType&lt;/code&gt; 代码块中 &lt;code&gt;Self&lt;/code&gt; 就是 &lt;code&gt;MyType&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;很清晰吧？好了，还可以定义其他很多类型作为接收者， &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 就是其中之一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyType&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_thing&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {
        &lt;span style=&#34;color:#75715e&#34;&gt;// good luck!1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 &lt;code&gt;MyType&lt;/code&gt; 必须是固定的（pinned）是什么意思呢？比如，它保证不进行转移（move）。除非它实现了 &lt;code&gt;Unpin&lt;/code&gt; ，
然后它就可以是非固定的（unpinned），可移动，然后被再一次固定。&lt;/p&gt;
&lt;p&gt;对于剩下的文章，我们不会假设我们的 future &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 都是 &lt;code&gt;Unpin&lt;/code&gt; ，也就是说我们自己不会移动（move）它们（只销毁（drop）它们）。&lt;/p&gt;
&lt;p&gt;你可以说我们不需要 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 是 &lt;code&gt;Unpin&lt;/code&gt; 的，因为我们没有添加指定的 where clause 来标记需要它们是 &lt;code&gt;Unpin&lt;/code&gt; 。
因为如果我们需要，我们就要像下面这样添加额外的 &lt;code&gt;trait bound&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//                                    👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unpin,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unpin,
{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是我们没有，所以我们不能假设 &lt;code&gt;A&lt;/code&gt; 或 &lt;code&gt;B&lt;/code&gt; 是 &lt;code&gt;Unpin&lt;/code&gt; 的。&lt;/p&gt;
&lt;p&gt;所以！我们现在真的只是面临固定（pin）保护的问题。&lt;/p&gt;
&lt;p&gt;我们现在只持有一个 &lt;code&gt;Pin&amp;lt;&amp;amp;mut TryJoin&amp;lt;A, B, ...&amp;gt;&amp;gt;&lt;/code&gt; 但是我希望持续一个 &lt;code&gt;Pin&amp;lt;&amp;amp;mut A&amp;gt;&lt;/code&gt; （因为这就是我们因为需要轮询 &lt;code&gt;A&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;另外一个解决方法，我倾向于通过一些类似 &lt;a href=&#34;https://lib.rs/crates/pin-project&#34;&gt;pin-project&lt;/a&gt; 包，或者类似 &lt;a href=&#34;https://lib.rs/crates/pin-project-lite&#34;&gt;pin-project-lite&lt;/a&gt;，但是在我们前进的方向直接使用 &lt;code&gt;pin-project&lt;/code&gt; 真的很尴尬，
所以我们这里使用 &lt;code&gt;unsafe&lt;/code&gt; 作为替代：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.poll(cx);

    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过编译。但是我们在使用 &lt;code&gt;unsafe&lt;/code&gt; ，也就意味着编译器正式停止 &lt;del&gt;照顾&lt;/del&gt; 检查我们的代码。
我们自己必须强制执行一些不变量（invariants），并且非常非常小心，同时让其他人审查（review）我们的工作，
但是依然可能会出错，因为他们也会休息。&lt;/p&gt;
&lt;p&gt;现在，非常棒的是我们可以轮询 &lt;code&gt;a&lt;/code&gt; 。它如果完成会返回 &lt;code&gt;Poll::Ready(Result&amp;lt;AR, E&amp;gt;)&lt;/code&gt; ，
否则就是等会会完成则返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们可以观察到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
        Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
            info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is pending...&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
        }
        Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is ready!&amp;#34;&lt;/span&gt;),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
        },
    }

    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们通过打印日志“A is pending”知道准备完成。这可能需要几个回合：毕竟，我们正在做一些重要的事情。
我们建立一个 TCP 连接，接着在上面进行 TLS 会话，接着是一些分开的写，最后读到 EOF（end of file）。&lt;/p&gt;
&lt;p&gt;当然，如果我们运行它的话：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;aytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.495  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.513  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.514  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.522  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.523  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.523  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.530  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.530  INFO waytoodeep::tj: A is pending...
Jul 25 22:54:14.530  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 22:54:14.530  INFO waytoodeep::tj: A is ready!
The application panicked (crashed).
Message:  not yet implemented
Location: src/tj.rs:46

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以看到它确实花费了几个回合。&lt;/p&gt;
&lt;p&gt;注意如果 &lt;code&gt;A&lt;/code&gt; 返回错误我们的代码也会返回 &lt;code&gt;Poll:Ready&lt;/code&gt; ，因为我们想收集 A 和 B 的结果。&lt;/p&gt;
&lt;p&gt;所以我们对 B 做相同的事情：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
        Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
            info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is pending...&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
        }
        Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is ready!&amp;#34;&lt;/span&gt;),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
        },
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b.poll(cx) {
        Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
            info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is pending...&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
        }
        Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is ready!&amp;#34;&lt;/span&gt;),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
        },
    }

    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后。。whoops：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;RUST_LOG=info cargo run --quiet --release
error[E0382]: use of moved value: `self`
   --&amp;gt; src/tj.rs:46:26
    |
33  |     fn poll(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context&amp;lt;&#39;_&amp;gt;) -&amp;gt; Poll&amp;lt;Self::Output&amp;gt; {
    |             ---- move occurs because `self` has type `Pin&amp;lt;&amp;amp;mut TryJoin&amp;lt;A, B, AR, BR, E&amp;gt;&amp;gt;`, which does not implement the `Copy` trait
34  |         let a = unsafe { self.map_unchecked_mut(|this| &amp;amp;mut this.a) };
    |                               ------------------------------------- `self` moved due to this method call
...
46  |         let b = unsafe { self.map_unchecked_mut(|this| &amp;amp;mut this.a) };
    |                          ^^^^ value used here after move
    |
note: this function takes ownership of the receiver `self`, which moves `self`
   --&amp;gt; /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/pin.rs:776:43
    |
776 |     pub unsafe fn map_unchecked_mut&amp;lt;U, F&amp;gt;(self, func: F) -&amp;gt; Pin&amp;lt;&amp;amp;&#39;a mut U&amp;gt;
    |                                           ^^^^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是的。 &lt;code&gt;map_unchecked_mut&lt;/code&gt; 占有了 &lt;code&gt;self&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;不用担心，我们可以使用 &lt;code&gt;.as_mut()&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//       👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;//                      👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.as_mut().map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
        Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
            info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is pending...&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
        }
        Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A is ready!&amp;#34;&lt;/span&gt;),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
        },
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;//                      👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.as_mut().map_unchecked_mut(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;this&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b.poll(cx) {
        Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
            info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is pending...&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending;
        }
        Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B is ready!&amp;#34;&lt;/span&gt;),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
        },
    }

    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是依然无法通过编译：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
(cut)
Jul 25 22:57:07.913  INFO waytoodeep::tj: A is pending...
Jul 25 22:57:07.913  INFO waytoodeep::tj: A is pending...
Jul 25 22:57:07.913  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 22:57:07.913  INFO waytoodeep::tj: A is ready!
The application panicked (crashed).
Message:  `async fn` resumed after completion
Location: src/main.rs:24

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，一旦 &lt;code&gt;Future&lt;/code&gt; 返回 &lt;code&gt;Poll::Ready&lt;/code&gt; 我们就不能再次轮询它了。我们为什么会这样？因为 &lt;code&gt;Future&lt;/code&gt; 已经返回了结果。如果结果是非 &lt;code&gt;Copy&lt;/code&gt; 的，它可能只能返回一次。&lt;/p&gt;
&lt;p&gt;所以，我们需要 1）跟踪 &lt;code&gt;A&lt;/code&gt; 是否完成，然后 2）在某个地方存储它的返回结果。&lt;/p&gt;
&lt;p&gt;我们只需要在我们的结构体中添加一些字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;,
    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;,
    &lt;span style=&#34;color:#75715e&#34;&gt;// 👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    a_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    b_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不要忘记初始化它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    TryJoin {
        a,
        b,
        &lt;span style=&#34;color:#75715e&#34;&gt;// 👇
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        a_res: None,
        b_res: None,
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在计划是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;a_res&lt;/code&gt; 是 &lt;code&gt;Some&lt;/code&gt; ，然后我们就不需要轮询 &lt;code&gt;a&lt;/code&gt; ,因为它已经完成了&lt;/li&gt;
&lt;li&gt;同样的逻辑处理 &lt;code&gt;b_res&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们实现它。同时，因为我们已经在使用了 &lt;code&gt;unsafe&lt;/code&gt; ，所以我们已经负责维护不变量（invariants），
所以我决定同时固定 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; ，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; {
        (
            Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a),
            Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.b),
        )
    };

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.a_res.is_none() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
            Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending,
            Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
                Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
                Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
            },
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.b_res.is_none() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b.poll(cx) {
            Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending,
            Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
                Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.b_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
                Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
            },
        }
    }

    todo&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，这个应该能让 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 有机会在我们崩溃之前完成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:11:03.851  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:11:04.380  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
The application panicked (crashed).
Message:  not yet implemented
Location: src/tj.rs:69

Backtrace omitted.
Run with RUST_BACKTRACE=1 environment variable to display it.
Run with RUST_BACKTRACE=full to include source snippets.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很好！现在我们需要做的就是解出两个结果并返回它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// instead of the `todo!()`:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (Some(_), Some(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.a_res, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.b_res) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.a_res.take().unwrap();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.b_res.take().unwrap();
    Poll::Ready(Ok((a, b)))
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    Poll::Pending
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以工作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:13:32.497  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:13:32.829  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:13:32.829  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。但是这不是 &lt;code&gt;try_join&lt;/code&gt; 的实现。我们正在做的和这个完全一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// (pseudo-code, buncha things are missing)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.a.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.b.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    Ok((a, b))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是顺序的执行的。请记住，仅仅是因为 tokio 的执行器可能用了一堆线程并意味着同时运行是自动的。
前面我们不得不使用 &lt;code&gt;tokio::spwan&lt;/code&gt; 或 &lt;code&gt;UnorderedFutures&lt;/code&gt; 或 &lt;code&gt;try_join!&lt;/code&gt; 让其同时运行。&lt;/p&gt;
&lt;p&gt;所以让我们重新看一下。。。当我们轮询 &lt;code&gt;a&lt;/code&gt; 的是后发生了什么？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.a_res.is_none() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; a.poll(cx) {
        Poll::Pending &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Pending,
        Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Poll::Ready(Err(e)),
        },
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;额，当轮询 &lt;code&gt;a&lt;/code&gt; 的时候返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 时我们也会返回 &lt;code&gt;Poll::Pending&lt;/code&gt;  。所以这就是问题。
如果 &lt;code&gt;a&lt;/code&gt; 正在等待（pending）我们不应该返回。因为如果这时候 &lt;code&gt;b&lt;/code&gt; 已经准备好或者有错误呢？&lt;/p&gt;
&lt;p&gt;或者如果，我们像这样调用 &lt;code&gt;try_join&lt;/code&gt; 呢：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joining...&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
        sleep(Duration::from_millis(&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
        Ok(())
    },
    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
        sleep(Duration::from_millis(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
        Err::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(color_eyre::eyre::eyre&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uh oh&amp;#34;&lt;/span&gt;))
    },
)
.&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;。。。然后 &lt;code&gt;a&lt;/code&gt; 花费了 2 秒钟才准备好，同时 &lt;code&gt;b&lt;/code&gt; 会在 10毫秒之后返回一个错误，如果我们轮询它！&lt;/p&gt;
&lt;p&gt;嗐，我们并没有：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:19:26.972  INFO waytoodeep: Joining...
Jul 25 23:19:28.990  INFO waytoodeep: All done! res=Err(
   0: uh oh

Location:
   src/main.rs:28
(cut)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（注意时间戳）&lt;/p&gt;
&lt;p&gt;重点是 &lt;code&gt;try_join&lt;/code&gt; 会提前失败：一旦 Future 返回 &lt;code&gt;Result::Err~&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以我们必须同时轮询 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 。好吧。。。不是严格意义的同时。我们必须每次我们的 &lt;code&gt;TryJoin&lt;/code&gt; future 对象被轮询时并发（concurrently）的轮询它们，
直到它们返回结果。&lt;/p&gt;
&lt;p&gt;有一个简单解决办法 &amp;ndash; 在任一 future 对象返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 时不返回 &lt;code&gt;Poll::Pending&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;同时，我厌倦了输入 &lt;code&gt;Poll::Ready&lt;/code&gt; 并且 &lt;code&gt;Poll&amp;lt;T&amp;gt;&lt;/code&gt; 实现了 &lt;code&gt;From&amp;lt;T&amp;gt;&lt;/code&gt; ,所以我们可以使用 &lt;code&gt;.into()&lt;/code&gt; 了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; {
        (
            Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a),
            Pin::new_unchecked(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.b),
        )
    };

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.a_res.is_none() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.poll(cx) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
                Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
                Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e).into(),
            }
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this.b_res.is_none() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b.poll(cx) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
                Ok(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.b_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(x),
                Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e).into(),
            }
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (Some(_), Some(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.a_res, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.b_res) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.a_res.take().unwrap();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.b_res.take().unwrap();
        Ok((a, b)).into()
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        Poll::Pending
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们再次运行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:22:40.238  INFO waytoodeep: Joining...
Jul 25 23:22:40.253  INFO waytoodeep: All done! res=Err(
   0: uh oh

Location:
   src/main.rs:28

(cut)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。可以了！我是说它按照预期的失败了。预期的失败就是成功。&lt;/p&gt;
&lt;p&gt;然后我们将这个方法应用到调用 &lt;code&gt;try_join&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joining...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到竞争又回来了：有时 &lt;code&gt;first&lt;/code&gt; 先完成，有时则不是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:25.925  INFO waytoodeep: Joining...
Jul 25 23:25:26.224  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:26.236  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:26.236  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:26.937  INFO waytoodeep: Joining...
Jul 25 23:25:27.237  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:27.242  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:27.242  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:27.865  INFO waytoodeep: Joining...
Jul 25 23:25:28.164  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:28.818  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:28.818  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:25:30.153  INFO waytoodeep: Joining...
Jul 25 23:25:31.477  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:25:31.496  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:25:31.496  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。同时结果的顺序是正确的。&lt;/p&gt;
&lt;p&gt;非常好，我们实现了它！&lt;/p&gt;
&lt;p&gt;但是！&lt;/p&gt;
&lt;h3 id=&#34;我们可以做的更好&#34;&gt;我们可以做的更好&lt;/h3&gt;
&lt;p&gt;幸运的是，坏就是好。&lt;/p&gt;
&lt;p&gt;下面这个类型困扰着我：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;,
    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;,
    a_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    b_res: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我其实只有在 &lt;code&gt;a&lt;/code&gt; 完成后才需要 &lt;code&gt;a_res&lt;/code&gt; 。一旦 &lt;code&gt;a&lt;/code&gt; 完成然后将结果存储到 &lt;code&gt;a_res&lt;/code&gt; ，我们就不再需要 &lt;code&gt;a&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;实际上，甚至我们不应该再碰 &lt;code&gt;a&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;这听起来更像我们要么持有 &lt;code&gt;A&lt;/code&gt; 要么持有 &lt;code&gt;AR&lt;/code&gt; ，但是永远不会同时持有。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SUM TYPES&lt;/code&gt; : Rust 的枚举就是一个汇总类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以！汇总类型。Rust 枚举。这就是我们想要的。让我们创建一个叫做 &lt;code&gt;State&lt;/code&gt; 的类型，然后它有两个变体：
一个用于它还是 future 对象，一个用于它是一个结果。非常简单！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    Future(F),
    Ok(T),
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将会非常棒！&lt;/p&gt;
&lt;p&gt;让我们赋给我们的 &lt;code&gt;TryJoin&lt;/code&gt; 结构体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（是不是非常漂亮）&lt;/p&gt;
&lt;p&gt;然后初始化它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    TryJoin {
        a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(a),
        b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(b),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常酷。然后我们只需要稍微调整一下我们的 &lt;code&gt;poll&lt;/code&gt; 方法，我们需要将 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 转换为 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; 。。。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是可以的，因为我们承诺维护不变量，也就是说我们不会转移（move） &lt;code&gt;State::Future&lt;/code&gt; 内部。&lt;/p&gt;
&lt;p&gt;然后如果 &lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;State::Future&lt;/code&gt; 我们就轮询它，然后我们再传播错误或者保存它的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(a) };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a.poll(cx) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; res {
            Ok(t) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; this.a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(t),
            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Err(e).into(),
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后同样的修改 &lt;code&gt;b&lt;/code&gt; 。。。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// you can figure that one out, I believe in you
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们就完成了如果它们都是 &lt;code&gt;State::Ok&lt;/code&gt; ！否则我们就返回 &lt;code&gt;Poll::Pending&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (this.a, this.b) {
    (State::Ok(a), State::Ok(b)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok((a, b)).into(),
    _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非常好。&lt;/p&gt;
&lt;p&gt;除了它无法通过编译：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
error[E0507]: cannot move out of `this.a` which is behind a mutable reference
  --&amp;gt; src/tj.rs:65:16
   |
65 |         match (this.a, this.b) {
   |                ^^^^^^ move occurs because `this.a` has type `State&amp;lt;A, AR, E&amp;gt;`, which does not implement the `Copy` trait

error[E0507]: cannot move out of `this.b` which is behind a mutable reference
  --&amp;gt; src/tj.rs:65:24
   |
65 |         match (this.a, this.b) {
   |                        ^^^^^^ move occurs because `this.b` has type `State&amp;lt;B, BR, E&amp;gt;`, which does not implement the `Copy` trait

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0507`.
error: could not compile `waytoodeep`

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为。。。我们只有 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; 而不是 &lt;code&gt;Self&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们没有自己的所有权，仅仅是借用我们自己。&lt;/p&gt;
&lt;p&gt;所以，我们不能将将我们的成员转移（move）出去，因为我们不能阻止其他人再次轮询 &lt;code&gt;TryJoin&lt;/code&gt; 。
所以这种情况，我们需要崩溃（panic）。&lt;/p&gt;
&lt;p&gt;当然，如果我们像 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 那样有一个 &lt;code&gt;.take()&lt;/code&gt; 方法事情就会大大简化。
它返回 Option 拥有的任何内容，或者 &lt;code&gt;None&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是我们没有 &lt;code&gt;None&lt;/code&gt; 。我们只有 &lt;code&gt;State::Future&lt;/code&gt; 和 &lt;code&gt;State::OK&lt;/code&gt; ，没有“中立”（neutral）状态。&lt;/p&gt;
&lt;p&gt;让我们创建一个：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    Future(F),
    Ok(T),
    Gone,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我们可以将 &lt;code&gt;this.a&lt;/code&gt; 和 &lt;code&gt;this.b&lt;/code&gt; 替换为 &lt;code&gt;State::Gone&lt;/code&gt; 。。。或者它的返回结果（我们拥有所有权）。
然后我们就可以将它们转移（move）出去。&lt;/p&gt;
&lt;p&gt;但是同时。。。我们需要再次对其进行模式匹配（pattern match）。&lt;/p&gt;
&lt;p&gt;就像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;this.b) {
    (State::Ok(_), State::Ok(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.a, State::Gone) {
            State::Ok(t) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; t,
            _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(),
        };
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; this.b, State::Gone) {
            State::Ok(t) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; t,
            _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(),
        };
        Ok((a, b)).into()
    }
    _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实话说。。。我看过更糟的代码。它只是没那么&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t%5Frepeat%5Fyourself&#34;&gt;DRY&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;非常好的实现！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 25 23:52:24.097  INFO waytoodeep: Joining...
Jul 25 23:52:25.050  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 25 23:52:25.061  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 25 23:52:25.061  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看，只有 11ms 的间隔。&lt;/p&gt;
&lt;h3 id=&#34;更进一步&#34;&gt;更进一步？&lt;/h3&gt;
&lt;p&gt;这段代码再次困扰了我：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为现在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 是三态的（tri-state）： &lt;code&gt;Future&lt;/code&gt; 、 &lt;code&gt;Ok&lt;/code&gt; 或者 &lt;code&gt;Gone&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 都是 &lt;code&gt;Gone&lt;/code&gt; 呢？这个状态不合理！&lt;/p&gt;
&lt;p&gt;如果发生了这个状态，我们现在将会永远返回 &lt;code&gt;Poll::Pending&lt;/code&gt; &amp;ndash; 这不太好 &amp;ndash; 一个死锁。&lt;/p&gt;
&lt;p&gt;我们真正想要的是。。。两个枚举。实际上我们想要整个 &lt;code&gt;TryJoin&lt;/code&gt; 类型是一个 &lt;code&gt;enum&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    Polling {
        a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
        b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    },
    Done,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;像这样初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    TryJoin::Polling {
        a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(a),
        b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(b),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，surprice！ &lt;code&gt;Poll&amp;lt;T&amp;gt;&lt;/code&gt; 实现了 &lt;a href=&#34;https://doc.rust-lang.org/stable/std/ops/trait.Try.html&#34;&gt;Try&lt;/a&gt; trait。所以我们可以使用 &lt;code&gt;?&lt;/code&gt; 。
所以最终我们的代码实际上非常短小：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TryJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; this {
            Self::Polling { a, b } &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a, b),
            Self::Done &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TryJoin future polled after completion&amp;#34;&lt;/span&gt;),
        };

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (a, b) {
            (State::Ok(_), State::Ok(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(this, Self::Done) {
                Self::Polling {
                    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(a),
                    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(b),
                } &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok((a, b)).into(),
                _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(),
            },
            _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我知道你在想什么。 &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; 不是恰恰用来避免像 &lt;code&gt;std::mem::swap&lt;/code&gt; 和 &lt;code&gt;std::mem::replace&lt;/code&gt; 吗？
这些所有的转移（move）都是围绕着内存！这是被禁止的！是的，我们承诺了不去转移（move）它。
但是在这个情况下，我们只是在完成轮询两个 future 对象后转移了 &lt;code&gt;self&lt;/code&gt; / &lt;code&gt;this&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;然后我们就再也没有使用过两个 future 对象，无论固定还是非固定。同时我们从来也没保证过结果自身是否将要被固定（pinned）！&lt;/p&gt;
&lt;p&gt;我们只需要决定某些东西是“永远固定”还是“永不固定”，然后我们可能会编写结果正确的代码。&lt;/p&gt;
&lt;p&gt;在我们的场景下，只有 &lt;code&gt;TryJoin::Polling(State::Future(_))&lt;/code&gt; 就是“永远固定” 的，其他都不是。&lt;/p&gt;
&lt;p&gt;当然，我们快速的从 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 切换到 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; ，然后又回到 &lt;code&gt;Pin&amp;lt;&amp;amp;mut A&amp;gt;&lt;/code&gt; ，
但只要我们不要在中间移动就没有问题。&lt;/p&gt;
&lt;p&gt;如果我们在持有 future 对象的情况下使用 &lt;code&gt;std::mem:replace&lt;/code&gt; 或 &lt;code&gt;std::mem::swap&lt;/code&gt; 就会不妙。
所以，我们还好，我想，我不太确定。如果不是，有人应该会留言。&lt;/p&gt;
&lt;h3 id=&#34;就这样&#34;&gt;就这样&lt;/h3&gt;
&lt;p&gt;让我们回顾我们的工作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/tj.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{
    future::Future,
    pin::Pin,
    task::{Context, Poll},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(a: &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, b: &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    TryJoin::Polling {
        a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(a),
        b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Future(b),
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F, T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    F: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    Future(F),
    Ok(T),
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    Polling {
        a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
        b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;B, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
    },
    Done,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Future &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TryJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;A, B, AR, BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    A: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    B: &lt;span style=&#34;color:#a6e22e&#34;&gt;Future&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BR, E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(AR, BR), E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(self: &lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Self&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, cx: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Context&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { self.get_unchecked_mut() };
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; this {
            Self::Polling { a, b } &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a, b),
            Self::Done &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TryJoin future polled after completion&amp;#34;&lt;/span&gt;),
        };

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; State::Future(fut) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Poll::Ready(res) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsafe&lt;/span&gt; { Pin::new_unchecked(fut) }.poll(cx) {
                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; State::Ok(res&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (a, b) {
            (State::Ok(_), State::Ok(_)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; std::mem::replace(this, Self::Done) {
                Self::Polling {
                    a: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(a),
                    b: &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;::Ok(b),
                } &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Ok((a, b)).into(),
                _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; unreachable&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(),
            },
            _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Poll::Pending,
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有我们小小的 HTTPS 客户端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in `src/main.rs`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; color_eyre::Report;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::{net::SocketAddr, sync::Arc};
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::{
    io::{AsyncReadExt, AsyncWriteExt},
    net::TcpStream,
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio_rustls::{rustls::ClientConfig, TlsConnector};
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing::info;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tracing_subscriber::EnvFilter;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; webpki::DNSNameRef;

&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; tj;

&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main(flavor = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    setup()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joining...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tj::try_join(fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;), fetch_thing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All done!&amp;#34;&lt;/span&gt;);

    Ok(())
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[allow(dead_code)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_thing&lt;/span&gt;(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;, Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// look out it&amp;#39;s port 443 now
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addr: &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketAddr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;).into();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TcpStream::connect(addr).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// establish a TLS session...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; connector: &lt;span style=&#34;color:#a6e22e&#34;&gt;TlsConnector&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClientConfig::new();
        config
            .root_store
            .add_server_trust_anchors(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;webpki_roots::TLS_SERVER_ROOTS);
        Arc::new(config).into()
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; dnsname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DNSNameRef::try_from_ascii_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one.one.one.one&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connector.connect(dnsname, socket).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;re writing straight to the socket, there&amp;#39;s no buffering
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// so no need to flush
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Host: one.one.one.one&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;User-Agent: cool-bear&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;Connection: close&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
    socket.write_all(&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::with_capacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
    socket.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; response).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response.lines().next().unwrap_or_default();
    info&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;status, , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got response!&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;// dropping the socket will close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    Ok(name)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), Report&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LIB_BACKTRACE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    }
    color_eyre::install()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;).is_err() {
        std::env::set_var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUST_LOG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;)
    }
    tracing_subscriber::fmt::fmt()
        .with_env_filter(EnvFilter::from_default_env())
        .init();

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it works.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ RUST_LOG=info cargo run --quiet --release
Jul 26 00:08:13.399  INFO waytoodeep: Joining...
Jul 26 00:08:13.707  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first
Jul 26 00:08:13.709  INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second
Jul 26 00:08:13.710  INFO waytoodeep: All done! res=(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2ms 间隔！这是一个新的记录。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Surgical Reading: How to Read 12 Books at Once</title>
      <link>https://www.linuxzen.com/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/</link>
      <pubDate>Sun, 28 Jun 2020 13:46:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/</guid>
      <description>原文链接：https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books
手术阅读法：如何同时阅读 12 本书  译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。
 当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。
但是我这样阅读并不是为了炫耀 &amp;ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。
这是一个我开发一个叫做 手术阅读法（surgical reading） 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。 这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。
这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。 阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。
其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。 这使我对当前感兴趣的的任何主题都有更细微的了解。
最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。
当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。
我是谁（Who I Am） 我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。 我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人， 包括我于 2018 年出售的一家名为 Hickory 的公司。
我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。 这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。
手术阅读法就是设计用来帮助我这么做的。
所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。
让我们开始吧！
把书当作其自身的地图（Use the Book Itself as a Map） 以下是一份我如何阅读一本书的步骤分解：
 了解一本书 通过封面评判这本书 索引（index）包含了一切 把目录（TOC）当作骨架 通过前言（preface）进行预览  此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。
下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。
了解一本书（Approaching a Book ） 当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。 也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。</description>
      <content>&lt;p&gt;原文链接：&lt;a href=&#34;https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books&#34;&gt;https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;手术阅读法-如何同时阅读-12-本书&#34;&gt;手术阅读法：如何同时阅读 12 本书&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。&lt;/p&gt;
&lt;p&gt;但是我这样阅读并不是为了炫耀 &amp;ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。&lt;/p&gt;
&lt;p&gt;这是一个我开发一个叫做 &lt;strong&gt;&lt;strong&gt;手术阅读法（surgical reading）&lt;/strong&gt;&lt;/strong&gt; 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。
这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。&lt;/p&gt;
&lt;p&gt;这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。
阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。&lt;/p&gt;
&lt;p&gt;其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。
这使我对当前感兴趣的的任何主题都有更细微的了解。&lt;/p&gt;
&lt;p&gt;最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。&lt;/p&gt;
&lt;p&gt;当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。&lt;/p&gt;
&lt;h3 id=&#34;我是谁-who-i-am&#34;&gt;我是谁（Who I Am）&lt;/h3&gt;
&lt;p&gt;我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。
我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人，
包括我于 2018 年出售的一家名为 Hickory 的公司。&lt;/p&gt;
&lt;p&gt;我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。
这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。&lt;/p&gt;
&lt;p&gt;手术阅读法就是设计用来帮助我这么做的。&lt;/p&gt;
&lt;p&gt;所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。&lt;/p&gt;
&lt;p&gt;让我们开始吧！&lt;/p&gt;
&lt;h3 id=&#34;把书当作其自身的地图-use-the-book-itself-as-a-map&#34;&gt;把书当作其自身的地图（Use the Book Itself as a Map）&lt;/h3&gt;
&lt;p&gt;以下是一份我如何阅读一本书的步骤分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解一本书&lt;/li&gt;
&lt;li&gt;通过封面评判这本书&lt;/li&gt;
&lt;li&gt;索引（index）包含了一切&lt;/li&gt;
&lt;li&gt;把目录（TOC）当作骨架&lt;/li&gt;
&lt;li&gt;通过前言（preface）进行预览&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。&lt;/p&gt;
&lt;p&gt;下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。&lt;/p&gt;
&lt;h4 id=&#34;了解一本书-approaching-a-book&#34;&gt;了解一本书（Approaching a Book ）&lt;/h4&gt;
&lt;p&gt;当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。
也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。&lt;/p&gt;
&lt;p&gt;同样，我通常对从头到尾阅读一本书籍不感兴趣，所以我需要删除我需要的信息，当然需要先找找它。我想要的是一本关于本书内容的地图（无论是思维上的还是书面上的）。
你可以使用大脑记忆、记事本、Google Doc 或某些精美的笔记记录系统作为记录机制 &amp;ndash; 根据你自己的喜好就行。&lt;/p&gt;
&lt;h4 id=&#34;通过书籍的封面进行品评-judge-a-book-by-its-cover&#34;&gt;通过书籍的封面进行品评（Judge a Book by its Cover）&lt;/h4&gt;
&lt;p&gt;首先，给标题和副标题一些想法。 我知道这听起来很平凡，但是作者花了很多时间思考这些问题，通常它们代表一种观点。&lt;/p&gt;
&lt;p&gt;比如《美国简史》和《美国人历史》，作者强调“人”而不是“简”是什么意思？再比如&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Rust Borrow and Lifetimes</title>
      <link>https://www.linuxzen.com/notes/articles/20200325182450_rust_borrow_and_lifetimes/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200325182450_rust_borrow_and_lifetimes/</guid>
      <description>原文链接：Rust Borrow and Lifetimes。
Rust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 1.42）。 我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow） 和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设 你基本了解 Rust，如果还没推荐你先阅读指南和指针指南。
资源所有权和借用 Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源 （栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。 你可以通过 &amp;amp; 或者 &amp;amp;mut 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保 所有的所有者（owners）和借用者（borrowers）行为正确。
拷贝和转移（Copy and move） 在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 StackOverflow 答案非常值得一读。 基本上，在赋值和函数调用上：
 如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。 其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。  简而言之，POD（Plan Old Data） =&amp;gt; 拷贝，Non-POD（线性类型（linear types））=&amp;gt; 转移。
以下是一些额外的注释供你参考：
 Rust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 memcpy 浅拷贝），而不是语义上的拷贝或克隆。 如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 NoCopy 标记，或者实现 Drop 特性（trait）。  转移之后，所有权就转移到了下一个所有者那。
资源回收 Rust 会在任何资源的所有权消失后立刻释放该资源，就这些，当：
 所有者超出作用域，或 正在持有的所有者改变绑定（原始绑定变成 void）。  所有者和借用者的权限（privileges）和限制 这一节基于 Rust Guide 在权限（privileges）一部分提到拷贝和转移。</description>
      <content>&lt;p&gt;原文链接：&lt;a href=&#34;http://arthurtw.github.io/2014/11/30/rust-borrow-lifetimes.html&#34;&gt;Rust Borrow and Lifetimes&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Rust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 &lt;a href=&#34;https://github.com/rust-lang/rust/releases/tag/1.42.0&#34;&gt;1.42&lt;/a&gt;）。
我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow）
和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设
你基本了解 Rust，如果还没推荐你先阅读&lt;a href=&#34;http://doc.rust-lang.org/guide.html&#34;&gt;指南&lt;/a&gt;和&lt;a href=&#34;http://doc.rust-lang.org/guide-pointers.html&#34;&gt;指针指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;资源所有权和借用&#34;&gt;资源所有权和借用&lt;/h2&gt;
&lt;p&gt;Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源
（栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。
你可以通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 或者 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保
所有的所有者（owners）和借用者（borrowers）行为正确。&lt;/p&gt;
&lt;h2 id=&#34;拷贝和转移-copy-and-move&#34;&gt;拷贝和转移（Copy and move）&lt;/h2&gt;
&lt;p&gt;在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 &lt;a href=&#34;https://stackoverflow.com/questions/24253344/is-it-possible-to-make-a-type-only-movable-and-not-copyable/24253573#24253573&#34;&gt;StackOverflow 答案&lt;/a&gt;非常值得一读。
基本上，在赋值和函数调用上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。&lt;/li&gt;
&lt;li&gt;其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简而言之，POD（Plan Old Data） =&amp;gt; 拷贝，Non-POD（线性类型（linear types））=&amp;gt; 转移。&lt;/p&gt;
&lt;p&gt;以下是一些额外的注释供你参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 &lt;code&gt;memcpy&lt;/code&gt; 浅拷贝），而不是语义上的拷贝或克隆。&lt;/li&gt;
&lt;li&gt;如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 &lt;a href=&#34;http://doc.rust-lang.org/std/kinds/marker/struct.NoCopy.html&#34;&gt;NoCopy&lt;/a&gt; 标记，或者实现 &lt;a href=&#34;http://doc.rust-lang.org/std/ops/trait.Drop.html&#34;&gt;Drop&lt;/a&gt; 特性（trait）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转移之后，所有权就转移到了下一个所有者那。&lt;/p&gt;
&lt;h2 id=&#34;资源回收&#34;&gt;资源回收&lt;/h2&gt;
&lt;p&gt;Rust 会在任何资源的所有权消失后立刻释放该资源，就这些，当：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有者超出作用域，或&lt;/li&gt;
&lt;li&gt;正在持有的所有者改变绑定（原始绑定变成 void）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;所有者和借用者的权限-privileges-和限制&#34;&gt;所有者和借用者的权限（privileges）和限制&lt;/h2&gt;
&lt;p&gt;这一节基于 &lt;a href=&#34;http://doc.rust-lang.org/guide.html&#34;&gt;Rust Guide&lt;/a&gt; 在权限（privileges）一部分提到拷贝和转移。&lt;/p&gt;
&lt;p&gt;所有者有一些权限。它可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;控制资源回收。&lt;/li&gt;
&lt;li&gt;借出资源，不可变的（可多次借用）或可变的（只能独占），和&lt;/li&gt;
&lt;li&gt;交出所有权（通过转移）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时所有者也存在一些限制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不可变借用期间，所有者不能&lt;/p&gt;
&lt;p&gt;a. 改变资源，或者&lt;/p&gt;
&lt;p&gt;b. 以可变的方式借出资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可变借用期间所有者不能&lt;/p&gt;
&lt;p&gt;a. 访问该资源，或者&lt;/p&gt;
&lt;p&gt;b. 再次借出该资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;借用者同时也有一些权限。除了访问或者更改借用的资源外，借用者也可以进一步借出（share the borrow）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不可变借用者可以借出（拷贝）不可变借用（译注：再次以不可变借用借出）&lt;/li&gt;
&lt;li&gt;可变借用者可以交出（转移）可变借用。（可变引用默认使用转移。）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;代码示例&#34;&gt;代码示例&lt;/h2&gt;
&lt;p&gt;关于借用我们已经聊的够多了，让我们一起来看一些代码吧（你可以通过 &lt;a href=&#34;https://play.rust-lang.org&#34;&gt;https://play.rust-lang.org&lt;/a&gt; 运行这些 Rust 代码。）
在下面所有的例子中，我们将使用不可拷贝的 &lt;code&gt;struct Foo&lt;/code&gt; ，因为它包含了一个装箱（boxed）（堆分配）值。
使用不可拷贝资源可以限制相关操作，让我们更好的学习。&lt;/p&gt;
&lt;p&gt;对于每一个代码示例，我们还提供了一个“作用域图表”（scope chart）来展示所有者和借用者的作用域。
图表第一行的大括号和代码中的大括号一一对应。&lt;/p&gt;
&lt;h3 id=&#34;所有者在可变借用期间不能访问资源&#34;&gt;所有者在可变借用期间不能访问资源&lt;/h3&gt;
&lt;p&gt;如果我们将代码中的 &lt;code&gt;println!&lt;/code&gt; 解除注释，代码将不能编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
    f: Box&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a;
    &lt;span style=&#34;color:#75715e&#34;&gt;// error: cannot borrow `a.f` as immutable because `a` is also borrowed as mutable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// println!(&amp;#34;{}&amp;#34;, a.f);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;           { a x * }
   owner a   |_____|
borrower x     |___| x = &amp;amp;mut a
access a.f       |   error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这违反了所有者限制 #2(a)。如果我们将 &lt;code&gt;let x = &amp;amp;mut a;&lt;/code&gt; 在一个嵌套的代码块里：借用
在 &lt;code&gt;println!&lt;/code&gt; 之前结束，这段代码将能正常工作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a;
        &lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow ends here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, a.f);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;           { a { x } * }
   owner a   |_________|
borrower x       |_|     x = &amp;amp;mut a
access a.f           |   OK
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;借用者可以转移可变借用到一个新的借用者&#34;&gt;借用者可以转移可变借用到一个新的借用者&lt;/h3&gt;
&lt;p&gt;这段代码展示借用者的权限 #2: 可变借用 &lt;code&gt;x&lt;/code&gt; 可以将所有权转移可变借用到一个新的借用者 &lt;code&gt;y&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#75715e&#34;&gt;// mutable borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a;
    &lt;span style=&#34;color:#75715e&#34;&gt;// move the mutable borrow to new borrower y
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
    &lt;span style=&#34;color:#75715e&#34;&gt;// error: use of moved value: `x.f`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// println!(&amp;#34;{}&amp;#34;, x.f);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;           { a x y * }
   owner a   |_______|
borrower x     |_|     x = &amp;amp;mut a
borrower y       |___| y = x
access x.f         |   error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;转移之后，原始的借用者 &lt;code&gt;x&lt;/code&gt; 不再能访问借用的资源。&lt;/p&gt;
&lt;h2 id=&#34;借用作用域-borrow-scope&#34;&gt;借用作用域（Borrow scope）&lt;/h2&gt;
&lt;p&gt;如果我们开始传递引用（ &lt;code&gt;&amp;amp;&lt;/code&gt; 和 =&amp;amp;mut=）事情就开始变得有趣，同时也是 Rust 新手们开始困惑的地方。&lt;/p&gt;
&lt;h3 id=&#34;生命周期-lifetime&#34;&gt;生命周期（Lifetime）&lt;/h3&gt;
&lt;p&gt;在整个借用过程中，知道借用者的借用什么时候开始和结束非常重要。在&lt;a href=&#34;http://doc.rust-lang.org/guide-lifetimes.html&#34;&gt;生命周期指南&lt;/a&gt;中是这样定义生命周期的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lifetime is a static approximation of the span of execution during which the pointer is valid: it always corresponds to some expression or block within the program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;生命周期是指针有效范围的静态近似值：它始终对应程序中的某些表达式或代码块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，我更喜欢使用 &lt;strong&gt;借用作用域（borrow scope）&lt;/strong&gt; 这个术语去描述借用生效的作用域。请注意它不同于上面生命周期的定义。
（我第一次见到这个术语是在一个 Rust &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/431&#34;&gt;RFC 讨论&lt;/a&gt; 中，尽管我的定义可能会有所不同。）我会在稍后给出我为什么避免使用生命周期的原因。
现在我们先把生命周期放在一边。&lt;/p&gt;
&lt;h3 id=&#34;and-borrow&#34;&gt;&amp;amp; = borrow&lt;/h3&gt;
&lt;p&gt;一些关于借用的事情：&lt;/p&gt;
&lt;p&gt;首先，只需要记住 &lt;code&gt;&amp;amp;&lt;/code&gt; = 借用， &lt;code&gt;&amp;amp;mut&lt;/code&gt; = 可变借用。任何地方你看到一个 &lt;code&gt;&amp;amp;&lt;/code&gt; ，那就是一个借用。&lt;/p&gt;
&lt;p&gt;其次，当一个 &lt;code&gt;&amp;amp;&lt;/code&gt; 出现在任何结构体中（在它的字段中）或者函数/闭包（返回值或者捕获的引用），结构体/函数/闭包就是一个借用者，
并且应用所有的借用规则。&lt;/p&gt;
&lt;p&gt;再次，对于每一个借用，都存在一个所有者和一个或多个借用者。&lt;/p&gt;
&lt;h3 id=&#34;扩展借用作用域&#34;&gt;扩展借用作用域&lt;/h3&gt;
&lt;p&gt;一些关于借用作用域的事情：&lt;/p&gt;
&lt;p&gt;首先，一个借用作用域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个借用生效的范围，并且&lt;/li&gt;
&lt;li&gt;不一定是借用者的词法作用域，因为借用者可以扩展借用作用域（参见下面）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次，借用者在赋值或者函数调用中可以通过拷贝（不可变借用）或者转移（可变借用）扩展借用作用域。
接收者（receiver）（可以是新的绑定、结构体、函数或者闭包）变成新的借用者。&lt;/p&gt;
&lt;p&gt;再次，借用作用域是所有借用者作用域的并集，并且被借用的资源必须在整个借用作用域里有效。&lt;/p&gt;
&lt;h3 id=&#34;借用公式&#34;&gt;借用公式&lt;/h3&gt;
&lt;p&gt;根据最后一点，我们得到一个借用公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源作用域 &amp;gt;= 借用作用域 = 所有借用者作用域的并集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码示例&#34;&gt;代码示例&lt;/h3&gt;
&lt;p&gt;让我们看一些扩展作用域的代码示例。结构体 &lt;code&gt;struct Foo&lt;/code&gt; 和前面的一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// borrow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a;
        &lt;span style=&#34;color:#75715e&#34;&gt;// share the borrow with new borrower y, hence extend the borrow scope
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;// error: cannot assign to `a.f` because it is borrowed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// a.f = box 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;             { a { x y } * }
  resource a   |___________|
  borrower x       |___|     x = &amp;amp;a
  borrower y         |_____| y = x
borrow scope       |=======|
  mutate a.f             |   error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即使借用发生在 &lt;code&gt;if&lt;/code&gt; 代码块之内并且借用者 &lt;code&gt;x&lt;/code&gt; 在 &lt;code&gt;if&lt;/code&gt; 代码块之后超出作用域，它已经通过赋值 &lt;code&gt;y=x;&lt;/code&gt; 扩展了借用作用域，
所以存在两个借用者： &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 。根据借用公式：借用作用域是借用者 &lt;code&gt;x&lt;/code&gt; 和借用者 &lt;code&gt;y&lt;/code&gt; 作用域的并集：
范围开始第一次借用于 &lt;code&gt;let x = &amp;amp;a;&lt;/code&gt; 直到 &lt;code&gt;main&lt;/code&gt; 代码块的结尾。（注意绑定 &lt;code&gt;y&lt;/code&gt; 在 &lt;code&gt;y=x;&lt;/code&gt; 之前不是借用者。）&lt;/p&gt;
&lt;p&gt;你可能注意到了由于条件永远是 false &lt;code&gt;if&lt;/code&gt; 代码块永远不会执行，但是编译器始终拒绝资源所有者 &lt;code&gt;a&lt;/code&gt; 去访问
它的资源。这是因为所有的借用检查发生在编译期，这样程序运行时就不需要做任何事情。&lt;/p&gt;
&lt;h2 id=&#34;借用多个资源&#34;&gt;借用多个资源&lt;/h2&gt;
&lt;p&gt;目前为止我们只关注借用单个资源。借用者可以借用多个资源吗？当然！比如一个函数可以接受两个引用然后
基于一些情况返回其中一个，e.g. 其中字段值比较大的那一个。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt; 函数返回一个 &lt;code&gt;&amp;amp;&lt;/code&gt; 指针，因此它是一个借用者。返回的结果可以是输入参数的任意一个，所以它借用了
两鞥额资源。&lt;/p&gt;
&lt;h3 id=&#34;命名借用作用域-named-borrow-scope&#34;&gt;命名借用作用域（Named borrow scope）&lt;/h3&gt;
&lt;p&gt;当存在多个 &lt;code&gt;&amp;amp;&lt;/code&gt; 指针作为输入，我们需要使用 &lt;strong&gt;命名生命周期（named lifetimes）&lt;/strong&gt; 指定它们之间的关系，
参见 &lt;a href=&#34;http://doc.rust-lang.org/guide-lifetimes.html#named-lifetimes&#34;&gt;Lifetimes Guide&lt;/a&gt;。但现在，让我们叫它们 &lt;strong&gt;命名借用作用域（named borrow scopes）&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;上面的代码没有使用 &lt;strong&gt;命名生命周期&lt;/strong&gt; 指定它们之间的关系是不会通过编译器的，i.e. 哪些借用者 &lt;strong&gt;分组（grouped）&lt;/strong&gt;
到哪个借用作用域。下面的实现是合法的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x.f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; y.f { x } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { y }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;(All resources and borrowers are grouped in borrow scope &#39;a.)
                  max( {   } )
    resource *x &amp;lt;--------------&amp;gt;
    resource *y &amp;lt;--------------&amp;gt;
borrow scope &#39;a &amp;lt;==============&amp;gt;
     borrower x        |___|
     borrower y        |___|
   return value          |___|   pass to the caller
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个函数中，我们有一个借用作用域 &lt;code&gt;&#39;a&lt;/code&gt; 和三个借用者：两个输入参数和函数返回结果。
前面提到的借用公式依然生效，但是现在每个被借用的资源必须满足公式。参见下面的例子：&lt;/p&gt;
&lt;h3 id=&#34;代码示例&#34;&gt;代码示例&lt;/h3&gt;
&lt;p&gt;在接下来的代码中，我们来使用上面的 &lt;code&gt;max&lt;/code&gt; 函数在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间选择一个更大 &lt;code&gt;Foo&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b);
        &lt;span style=&#34;color:#75715e&#34;&gt;// error: `b` does not live long enough
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// y = x;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;              { a { b x (  ) y } }
   resource a   |________________| pass
   resource b       |__________|   fail
 borrow scope         |==========|
temp borrower            |_|       &amp;amp;a
temp borrower            |_|       &amp;amp;b
   borrower x         |________|   x = max(&amp;amp;a, &amp;amp;b)
   borrower y                |___| y = x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直到 &lt;code&gt;let x = max(&amp;amp;a, &amp;amp;b)&lt;/code&gt; 都一些正常，因为 &lt;code&gt;&amp;amp;a&lt;/code&gt; 和 &lt;code&gt;&amp;amp;b&lt;/code&gt; 都是尽在表达式中有效的临时引用，
并且第三个借用 &lt;code&gt;x&lt;/code&gt; 借用了两个资源（不管最终是 &lt;code&gt;a&lt;/code&gt; 或 &lt;code&gt;b&lt;/code&gt; ，对于借用检查器而言它都借用了）直到 &lt;code&gt;if&lt;/code&gt;
块结束，所以借用作用域是从 &lt;code&gt;let x = max(&amp;amp;a, &amp;amp;b);&lt;/code&gt; 到 &lt;code&gt;if&lt;/code&gt; 块结尾。两个资源 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 在整个借用作用域
都有效,因此满足借用公式。&lt;/p&gt;
&lt;p&gt;现在如果我们解除最后一个赋值 &lt;code&gt;y = x;&lt;/code&gt; 的注释， &lt;code&gt;y&lt;/code&gt; 变成第四个借用者，然后借用作用域被扩展到 &lt;code&gt;main&lt;/code&gt;
块的结尾，导致资源 &lt;code&gt;b&lt;/code&gt; 不能满足公式。&lt;/p&gt;
&lt;h2 id=&#34;结构体作为借用者&#34;&gt;结构体作为借用者&lt;/h2&gt;
&lt;p&gt;除了函数和闭包之外，一个结构体也可以通过其字段存储多个引用来借用多个资源。我们通过下面的一些例子
来看看借用公式如何生效的。我们来使用 &lt;code&gt;Link&lt;/code&gt; 结构体来保存一个引用（不可变借用）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Link&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
  link: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结构体借用多个资源&#34;&gt;结构体借用多个资源&lt;/h3&gt;
&lt;p&gt;即使只有一个字段，结构体 &lt;code&gt;Link&lt;/code&gt; 也可以借用多个资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Link { link: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
        &lt;span style=&#34;color:#75715e&#34;&gt;// error: `b` does not live long enough
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// x.link = &amp;amp;b;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;             { a x { b * } }
  resource a   |___________| pass
  resource b         |___|   fail
borrow scope     |=========|
  borrower x     |_________| x.link = &amp;amp;a
  borrower x           |___| x.link = &amp;amp;b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上面例子中，借用者 &lt;code&gt;x&lt;/code&gt; 从所有者 &lt;code&gt;a&lt;/code&gt; 借用资源，借用作用域到 &lt;code&gt;main&lt;/code&gt; 块的结尾。So far so good。
如果我们解除最后一个赋值 &lt;code&gt;x.link = &amp;amp;b;&lt;/code&gt; 的注释， &lt;code&gt;x&lt;/code&gt; 也尝试从所有者 &lt;code&gt;b&lt;/code&gt; 借用资源，这会让资源 &lt;code&gt;b&lt;/code&gt;
不能满足借用公式。&lt;/p&gt;
&lt;h3 id=&#34;没有返回值的函数扩展借用作用域&#34;&gt;没有返回值的函数扩展借用作用域&lt;/h3&gt;
&lt;p&gt;一个没有返回值的函数同样也可以通过输出参数能扩展借用作用域。例如，这个函数 &lt;code&gt;store_foo&lt;/code&gt; 接受一个
&lt;code&gt;Link&lt;/code&gt; 的可变引用，然后存储一个引用（不可变借用）到 &lt;code&gt;Foo&lt;/code&gt; 里：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;store_foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo) {
  x.link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在接下来的代码中，被 &lt;code&gt;a&lt;/code&gt; 所有的资源是被借用资源； &lt;code&gt;Link&lt;/code&gt; 结构体被借用者 &lt;code&gt;x&lt;/code&gt; 可变的引用着（i.e. &lt;code&gt;*x&lt;/code&gt; 是借用者）；
借用作用域直到 &lt;code&gt;main&lt;/code&gt; 块的结尾。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; Link { link: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo { f: &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
        &lt;span style=&#34;color:#75715e&#34;&gt;// store_foo(x, &amp;amp;b);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;             { a x { b * } }
  resource a   |___________| pass
  resource b         |___|   fail
borrow scope     |=========|
 borrower *x     |_________| x.link = &amp;amp;a
 borrower *x           |___| x.link = &amp;amp;b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们解除最后一个函数调用 &lt;code&gt;store_foo(x, &amp;amp;b);&lt;/code&gt; ,这个函数将会尝试将 &lt;code&gt;&amp;amp;b&lt;/code&gt; 存储到 &lt;code&gt;x.link&lt;/code&gt; ，
将资源 &lt;code&gt;b&lt;/code&gt; 作为另外一个被借用的资源，由于 &lt;code&gt;b&lt;/code&gt; 的作用域没有覆盖整个借用作用域，导致不满足借用公式。&lt;/p&gt;
&lt;h3 id=&#34;多个借用作用域&#34;&gt;多个借用作用域&lt;/h3&gt;
&lt;p&gt;一个函数中可以存在多个借用作用域。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;superstore_foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo,
                          x2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, y2: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;b&lt;/span&gt; Foo) {
    x.link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
    x2.link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个的函数（可能不是特别有用）中，涉及两个不同的借用作用域。每个借用作用域都有它们自己的作用域公式要满足。&lt;/p&gt;
&lt;h2 id=&#34;为什么生命周期会造成困惑&#34;&gt;为什么生命周期会造成困惑&lt;/h2&gt;
&lt;p&gt;最后，我想解释一下为什么我认为 Rust 借用系统使用 &lt;strong&gt;生命周期&lt;/strong&gt; 术语会造成困惑（同时避免在这片博文中使用它）。&lt;/p&gt;
&lt;p&gt;当我们讨论借用时会涉及到不同类型的“生命周期”：&lt;/p&gt;
&lt;p&gt;A. 资源所有者的生命周期（或者 被所有/被借用 资源
B. 被借用的生命周期，i.e. 从开始借用到最后返还
C. 每一个独立的借用者或被借用的指针的生命周期&lt;/p&gt;
&lt;p&gt;当有人说“生命周期”，它可以指上面的任何一个。如果涉及多个资源和借用者就会变的更加困惑。
比如，在函数或者结构体生命中一个“命名的生命周期”指哪个？是 A、B 或者 C？&lt;/p&gt;
&lt;p&gt;在我们的前一个 &lt;code&gt;max&lt;/code&gt; 函数中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; Foo {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x.f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; y.f { x } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { y }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生命周期 &lt;code&gt;&#39;a&lt;/code&gt; 的意义是什么？它不应该是 A，因为涉及两个资源并且他们有不同的生命周期。也不可能是 C，
因为有三个借用者： &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 和函数的返回值，并且他们也都有不同的生命周期。它是 B 吗？可能。
但是整个借用作用域并不是一个具体的对象，它怎么能有一个“生命周期”呢？称它为生命周期就会造成困惑。&lt;/p&gt;
&lt;p&gt;另一种说法是它意味着对被借用资源的最小生命周期要求。一定程度上是有道理的，
但是我们怎么称呼最小生命周期要求“生命周期”？&lt;/p&gt;
&lt;p&gt;所有权/借用概念自身已经够复杂了。我会说：对术语“生命周期”的困惑对学习这个概念造成了更多的莫名其妙。&lt;/p&gt;
&lt;p&gt;P.S. 使用上面定义的 A、B 和 C，借用公式变成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &amp;gt;= B = C_1,UC_2U&amp;hellip;UC_n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;学习-rust-是值得的&#34;&gt;学习 Rust 是值得的！&lt;/h2&gt;
&lt;p&gt;尽管借用和所有权可能让你花一些时间来掌握（to grok），但是是一个非常有趣的学习。Rust 尝试不用 GC
来实现内存安全，并且目前来看做的非常好。一些人说他们通过学习 Haskell 改变了他们编程的方式。
我认为Rust 同样也值得你学习。&lt;/p&gt;
&lt;p&gt;希望这篇博文能提供一些帮助。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Translate</title>
      <link>https://www.linuxzen.com/notes/articles/20200309112105_translate/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200309112105_translate/</guid>
      <description> Deep Learning Algorithms Rust Borrow and Lifetimes Rust Means Never Having to Close a Socket Surgical Reading: How to Read 12 Books at Once Python behind the scenes #1: how the CPython VM works Python behind the scenes #2: how the CPython compiler works Understanding Rust futures by going way too deep  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20200309112133_deep_learning_algorithms/&#34;&gt;Deep Learning Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20200325182450_rust_borrow_and_lifetimes/&#34;&gt;Rust Borrow and Lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200629181735-rust_means_never_having_to_close_a_socket/&#34;&gt;Rust Means Never Having to Close a Socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/&#34;&gt;Surgical Reading: How to Read 12 Books at Once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200908103647-python_behind_the_scenes_1_how_the_cpython_vm_works/&#34;&gt;Python behind the scenes #1: how the CPython VM works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20201015182827-python_behind_the_scenes_2_how_the_cpython_compiler_works/&#34;&gt;Python behind the scenes #2: how the CPython compiler works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/&#34;&gt;Understanding Rust futures by going way too deep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>译：深度学习算法：完整指南</title>
      <link>https://www.linuxzen.com/notes/articles/20200309112133_deep_learning_algorithms/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/20200309112133_deep_learning_algorithms/</guid>
      <description>原文链接：Deep Learning Algorithms : The Complete Guide。
深度学习正在影响整个世界。
深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。
在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。
这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。
其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。
我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。
但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。
所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。
Contents   但是什么是深度学习?
  神经网络
  前馈神经网络（FNN）
  卷积神经网络（CNN）
  循环神经网络（RNN）
  递归神经网络（Recurisive Neural Network）
  自编码器（AutoEncoders）
  深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)
  生成对抗网络（GAN）
  Transformers
  图神经网络（GNN）
  自然语言处理中的深度学习
 词嵌入 (Word embedding) 序列建模（Sequence Modeling）    计算机视觉中的机器学习</description>
      <content>&lt;p&gt;原文链接：&lt;a href=&#34;https://theaisummer.com/Deep-Learning-Algorithms/&#34;&gt;Deep Learning Algorithms : The Complete Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;深度学习正在影响整个世界。&lt;/p&gt;
&lt;p&gt;深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。&lt;/p&gt;
&lt;p&gt;在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。&lt;/p&gt;
&lt;p&gt;这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。&lt;/p&gt;
&lt;p&gt;其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。&lt;/strong&gt;&lt;/strong&gt; 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。&lt;/p&gt;
&lt;p&gt;但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。&lt;/p&gt;
&lt;p&gt;所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E4%BD%86%E6%98%AF%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;但是什么是深度学习?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&#34;&gt;神经网络&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-fnn&#34;&gt;前馈神经网络（FNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-cnn&#34;&gt;卷积神经网络（CNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-rnn&#34;&gt;循环神经网络（RNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&#34;&gt;递归神经网络&lt;/a&gt;（Recurisive Neural Network）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8-autoencoders&#34;&gt;自编码器（AutoEncoders）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C--deep-belief-network--%E5%92%8C%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA--restricted-boltzmann-machine&#34;&gt;深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C-gan&#34;&gt;生成对抗网络（GAN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#transformers&#34;&gt;Transformers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-gnn&#34;&gt;图神经网络（GNN）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;自然语言处理中的深度学习&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%AF%8D%E5%B5%8C%E5%85%A5--word-embedding&#34;&gt;词嵌入 (Word embedding)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BA%8F%E5%88%97%E5%BB%BA%E6%A8%A1-sequence-modeling&#34;&gt;序列建模（Sequence Modeling）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B8%AD%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&#34;&gt;计算机视觉中的机器学习&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%92%8C%E7%89%A9%E4%BD%93%E8%AF%86%E5%88%AB&#34;&gt;本地化和物体识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8D%95%E5%8F%91%E6%8E%A2%E6%B5%8B%E5%99%A8-single-shot-detectors&#34;&gt;单发探测器（Single shot detectors）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2-semantic-segmentation&#34;&gt;语义分割（Semantic Segmentation）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%A7%BF%E5%8A%BF%E4%BC%B0%E8%AE%A1-pose-estimation&#34;&gt;姿势估计（Pose Estimation）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;深度学习在科学和企业界取得了&lt;a href=&#34;https://theaisummer.com/Deep%5Flearning/&#34;&gt;疯狂的人气&lt;/a&gt;。从 2012，卷积神经网络（CNN）在图像识别竞赛（ ImageNet Large Scale Visual Recognition Challenge）中获得了惊人的准确性，&lt;a href=&#34;https://www.technologyreview.com/s/612768/we-analyzed-16625-papers-to-figure-out-where-ai-is-headed-next/&#34;&gt;每年都出现了越来越多的研究论文&lt;/a&gt;并且越来越多的企业将神经网络收录到他们的业务中。据估计，深度学习目前的市场规模为 25 亿，预计到 2023 年将达到 181.6 亿。&lt;/p&gt;
&lt;h2 id=&#34;但是什么是深度学习&#34;&gt;但是什么是深度学习?&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;维基百科&lt;/a&gt;：「深度学习（英語：deep learning）是机器学习的分支，是一種以人工神經網路為架構，對資料進行表徵學習的算法。」&lt;/p&gt;
&lt;p&gt;在我看来， &lt;strong&gt;&lt;strong&gt;深度学习是一系列启发于人脑在处理数据和创建用于决策的模式方面的工作的算法的集合，这是对成为人工神经网络（Artificial Neural Network）得单一模型架构的思想的扩展和改进。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;神经网络&#34;&gt;神经网络&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://karpathy.github.io/neuralnets/&#34;&gt;神经网络（Neural Networks）&lt;/a&gt;就像人脑一样由神经元组成。每一个神经元接收信号作为输入，用权重相乘，对它们求和并应用非线性函数。这些神经元彼此相邻堆叠并分层组织。&lt;/p&gt;
&lt;p&gt;但是通过这些我们能做些什么呢？&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/deep-learning-complete-guide/neuron.jpg&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;事实证明，神经网络是出色的 &lt;strong&gt;&lt;strong&gt;函数逼近器（function approximators）&lt;/strong&gt;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;我们可以假设每一个行为和系统可以最终被表示为一个数学函数（可能会异常复杂）。如何我们设法找到该函数，那么我们就可以从本质上理解系统的所有内容。但是找到该函数可能非常困难。因此，我们需要对其进行估算。输入神经网络。&lt;/p&gt;
&lt;h3 id=&#34;反向传播-backpropagation&#34;&gt;反向传播（Backpropagation）&lt;/h3&gt;
&lt;p&gt;神经网络可以使用大量数据和被称为 &lt;a href=&#34;https://brilliant.org/wiki/backpropagation/&#34;&gt;backpropagation&lt;/a&gt; 的算法学习描述函数。我们将数据输入到网络，它生产输出，我们将该输出与所需的输出进行对比（使用损失函数（loss function）），然后我们根据差异再调整权重。&lt;/p&gt;
&lt;p&gt;然后一直重复。使用称为随机梯度下降（&lt;a href=&#34;https://ruder.io/optimizing-gradient-descent/&#34;&gt;stochastic gradient descent&lt;/a&gt;）的非线性优化技术执行权重的调整。&lt;/p&gt;
&lt;p&gt;一段时间之后，网络将在生产输出上变的足够好。因此，训练接结束了。因此，我们设法接近我们的函数。如果我们将输出未知的输入传递给网络，它会基于近似函数（approximated function）给我们一个答案。&lt;/p&gt;
&lt;p&gt;让我们通过一个例子让其更容易理解。比如基于一些原因我们想鉴别一张图片中是否有树。我们将任意类型的图片输入到网络然后网络产生输出。由于我们知道一张图片是否包含树，我们可以对比网络输出和事实并调整网络。&lt;/p&gt;
&lt;p&gt;通过越来越多的图片输入到网络，网络将会越来越精准。现在我们输入一张未知的图片，然后它就会告诉我们图片中是否包含树。很酷对吧？&lt;/p&gt;
&lt;p&gt;多年来，研究人员对原始想法进行了惊人的改进。每种新架构都针对特定问题实现了更高的准确性和速度。我们将所有这些新模型归为特定的类别：&lt;/p&gt;
&lt;h2 id=&#34;前馈神经网络-fnn&#34;&gt;前馈神经网络（FNN）&lt;/h2&gt;
&lt;p&gt;FNN 通常是全部连接的（&lt;a href=&#34;https://theaisummer.com/Neural%5FNetwork%5Ffrom%5Fscratch/&#34;&gt;fully connected&lt;/a&gt;），也就是说层中的每一个神经元都与下一层中其他神经元相连。所描述的结构被称为多层感知器 (Multilayer Perceptron)，起源于 1958。单层感知器只能学习线性可分离模式，但是一个多层感知器可以学习数据间的非线性关系。&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;https://www.linuxzen.com/notes/images/deep-learning-complete-guide/neural-network.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;它们在分类和回归等任务上表现的异常的好。与其他机器学习算法相反，它们并不那么容易收敛。它们拥有的数据越多，其准确性就越高。&lt;/p&gt;
&lt;h2 id=&#34;卷积神经网络-cnn&#34;&gt;卷积神经网络（CNN）&lt;/h2&gt;
&lt;p&gt;CNN 采用了一个叫做&lt;a href=&#34;https://theaisummer.com/Neural%5FNetwork%5Ffrom%5Fscratch%5Fpart2/&#34;&gt;卷积（convolution）&lt;/a&gt;的函数。&lt;/p&gt;
&lt;h2 id=&#34;循环神经网络-rnn&#34;&gt;循环神经网络（RNN）&lt;/h2&gt;
&lt;h2 id=&#34;递归神经网络&#34;&gt;递归神经网络&lt;/h2&gt;
&lt;h2 id=&#34;自编码器-autoencoders&#34;&gt;自编码器（AutoEncoders）&lt;/h2&gt;
&lt;h2 id=&#34;深度信念网络--deep-belief-network--和受限玻尔兹曼机--restricted-boltzmann-machine&#34;&gt;深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)&lt;/h2&gt;
&lt;h2 id=&#34;生成对抗网络-gan&#34;&gt;生成对抗网络（GAN）&lt;/h2&gt;
&lt;h2 id=&#34;transformers&#34;&gt;Transformers&lt;/h2&gt;
&lt;h2 id=&#34;图神经网络-gnn&#34;&gt;图神经网络（GNN）&lt;/h2&gt;
&lt;h2 id=&#34;自然语言处理中的深度学习&#34;&gt;自然语言处理中的深度学习&lt;/h2&gt;
&lt;h3 id=&#34;词嵌入--word-embedding&#34;&gt;词嵌入 (Word embedding)&lt;/h3&gt;
&lt;h3 id=&#34;序列建模-sequence-modeling&#34;&gt;序列建模（Sequence Modeling）&lt;/h3&gt;
&lt;h2 id=&#34;计算机视觉中的机器学习&#34;&gt;计算机视觉中的机器学习&lt;/h2&gt;
&lt;h3 id=&#34;本地化和物体识别&#34;&gt;本地化和物体识别&lt;/h3&gt;
&lt;h3 id=&#34;单发探测器-single-shot-detectors&#34;&gt;单发探测器（Single shot detectors）&lt;/h3&gt;
&lt;h3 id=&#34;语义分割-semantic-segmentation&#34;&gt;语义分割（Semantic Segmentation）&lt;/h3&gt;
&lt;h3 id=&#34;姿势估计-pose-estimation&#34;&gt;姿势估计（Pose Estimation）&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>Taking Smart Notes With Org-mode</title>
      <link>https://www.linuxzen.com/notes/articles/notes/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/articles/notes/</guid>
      <description>See also:
 https://praxis.fortelabs.co/how-to-take-smart-notes/ https://www.nateliason.com/blog/roam  Topics  Financial Management 读书笔记 技术 Translate Learning English 认同的话 To Complete  Links Sprint 1:2019-02-03 ~ 2019-02-19   LD_PRELOAD: The Hero We Need and Deserve
通过 LD_PRELOAD 覆盖一些函数，比如 faketime
  Going Solo, Successfully
  变身成为独立开发者。
  Graceful Shutdown
  Why limiting work-in-progress works
  Practical Go: Real world advice for writing maintainable Go programs
译文：https://github.com/llitfkitfk/go-best-practice
  百万 Go TCP 连接的思考: epoll方式减少资源占用</description>
      <content>&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://praxis.fortelabs.co/how-to-take-smart-notes/&#34;&gt;https://praxis.fortelabs.co/how-to-take-smart-notes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nateliason.com/blog/roam&#34;&gt;https://www.nateliason.com/blog/roam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200224132507/&#34;&gt;Financial Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200323104645_%E6%8A%80%E6%9C%AF/&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/articles/20200309112105_translate/&#34;&gt;Translate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210317141621-learning_english/&#34;&gt;Learning English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210612092853-%E8%AE%A4%E5%90%8C%E7%9A%84%E8%AF%9D/&#34;&gt;认同的话&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20210728071540-to_complete/&#34;&gt;To Complete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;h3 id=&#34;sprint-1-2019-02-03-2019-02-19&#34;&gt;Sprint 1:2019-02-03 ~ 2019-02-19&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.jessfraz.com/post/ld%5Fpreload/&#34;&gt;LD_PRELOAD: The Hero We Need and Deserve&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 LD_PRELOAD 覆盖一些函数，比如 &lt;a href=&#34;https://github.com/wolfcw/libfaketime&#34;&gt;faketime&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://kev.inburke.com/kevin/going-solo-successfully/?hn&#34;&gt;Going Solo, Successfully&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变身成为独立开发者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://250bpm.com/blog:146&#34;&gt;Graceful Shutdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lethain.com/limiting-wip/&#34;&gt;Why limiting work-in-progress works&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/practical-go/presentations/qcon-china.html&#34;&gt;Practical Go: Real world advice for writing maintainable Go programs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译文：&lt;a href=&#34;https://github.com/llitfkitfk/go-best-practice&#34;&gt;https://github.com/llitfkitfk/go-best-practice&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://colobu.com/2019/02/23/1m-go-tcp-connection/&#34;&gt;百万 Go TCP 连接的思考: epoll方式减少资源占用&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/cceaaaf5d154&#34;&gt;天池中间件大赛Golang版Service Mesh思路分享&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zeroequalsfalse.press/posts/programming-books-you-wish-you-read-earlier/&#34;&gt;Programming Books You Wish You Read Earlier&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ai-machine-learning-books&#34;&gt;AI/Machine Learning Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cs229.stanford.edu/notes/cs229-notes1.pdf&#34;&gt;http://cs229.stanford.edu/notes/cs229-notes1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://courses.csail.mit.edu/6.042/spring17/mcs.pdf&#34;&gt;https://courses.csail.mit.edu/6.042/spring17/mcs.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bestofml.com/&#34;&gt;http://bestofml.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ascii-art&#34;&gt;ASCII Art&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/fca56d635091&#34;&gt;https://www.jianshu.com/p/fca56d635091&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sprint-2-2019-02-27-2019-03-12&#34;&gt;Sprint 2: 2019-02-27 ~ 2019-03-12&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blogtitle.github.io/some-useful-patterns/&#34;&gt;Some useful patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译文：&lt;a href=&#34;https://colobu.com/2019/02/25/some-useful-patterns-in-go/&#34;&gt;Go开发中一些有用的模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://immersivemath.com/ila/learnmore.html&#34;&gt;immersive linear algebra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;沉浸式线性代数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bofh.org.uk/2019/02/25/baking-with-emacs/&#34;&gt;Running a bakery on Emacs and PostgreSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 Emacs org-mode 记录面包配方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html&#34;&gt;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go 语言陷阱和坑（Gotcha）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go-traps.appspot.com/&#34;&gt;https://go-traps.appspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://programmerfriend.com/index.php/2019/03/01/git-best-practices/&#34;&gt;Git Best Practices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cs.lmu.edu/~ray/notes/nasmtutorial/&#34;&gt;NASM Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-gas-nasm.html&#34;&gt;Linux 汇编器：对比 GAS 和 NASM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://bestofml.com/&#34;&gt;Best of Machine Learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://quickchart.io/&#34;&gt;Generate a Chart Image from URL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nullprogram.com/blog/2019/03/10/&#34;&gt;An Async / Await Library for Emacs Lisp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sprint-3-2019-03-13-2019-03-26&#34;&gt;Sprint 3: 2019-03-13 ~ 2019-03-26&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.remove.bg/&#34;&gt;Remove Image Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leandromoreira.com.br/2019/01/25/how-to-build-a-distributed-throttling-system-with-nginx-lua-redis/&#34;&gt;How to build a distributed throttling system with Nginx + Lua + Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://architecture-database.blogspot.com/&#34;&gt;How Database works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rust-lang-nursery.github.io/rust-cookbook/&#34;&gt;Rust Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dwheeler.com/essays/fixing-unix-linux-filenames.html&#34;&gt;Fixing Unix/Linux/POSIX Filenames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;online-diagrams&#34;&gt;Online Diagrams&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chartmage.com/intro.html&#34;&gt;Generate sequence diagrams and flowcharts at lightning speed.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bramp.github.io/js-sequence-diagrams/&#34;&gt;js-sequence-diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://flowchart.js.org/&#34;&gt;flowchart.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zybuluo.com/cmd/&#34;&gt;Cmd Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/zh/running&#34;&gt;Plantuml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yuque.com/yuque/help/editor-puml&#34;&gt;语雀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.graphviz.org/&#34;&gt;Graphviz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://haha98k.com/&#34;&gt;PlantUML Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.websequencediagrams.com/&#34;&gt;https://www.websequencediagrams.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;animating-urls-with-javascript-and-emojis&#34;&gt;Animating URLs with Javascript and Emojis&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/&#34;&gt;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;x86&#34;&gt;x86&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fsl.cs.illinois.edu/index.php/A%5FComplete%5FFormal%5FSemantics%5Fof%5Fx86-64%5FUser-Level%5FInstruction%5FSet%5FArchitecture&#34;&gt;A Complete Formal Semantics of x86-64 User-Level Instruction Set Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;others&#34;&gt;Others&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.sparkfun.com/tutorials/how-to-read-a-schematic&#34;&gt;How to Read a Schematic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://castel.dev/post/lecture-notes-2/#&#34;&gt;How I draw figures for my mathematical lecture notes using Inkscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;布隆过滤器&#34;&gt;布隆过滤器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://llimllib.github.io/bloomfilter-tutorial/zh%5FCN/&#34;&gt;https://llimllib.github.io/bloomfilter-tutorial/zh%5FCN/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rust&#34;&gt;Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://way-cooler.org/blog/2019/04/29/rewriting-way-cooler-in-c.html&#34;&gt;Giving up on wlroots-rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memory-management&#34;&gt;Memory Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/kedia2017mem.pdf&#34;&gt;Simple, Fast and Safe Manual Memory Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://akkadia.org/drepper/cpumemory.pdf&#34;&gt;What Every Programmer Should Know About Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vldb.org/pvldb/vol8/p37-graefe.pdf&#34;&gt;In-Memory Performance for Big Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pie-pic-load-time-relocation-hardenedlinux&#34;&gt;PIE/PIC/Load-time relocation/Hardenedlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hardenedlinux.github.io/system-security/2016/07/01/PIC%5FPIE%5Fand%5FASLR%5Fanalysis.html&#34;&gt;https://hardenedlinux.github.io/system-security/2016/07/01/PIC%5FPIE%5Fand%5FASLR%5Fanalysis.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-seclnx3/index.html&#34;&gt;https://www.ibm.com/developerworks/cn/linux/l-seclnx3/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/security#Rebuilding%5Fpackages&#34;&gt;https://wiki.archlinux.org/index.php/security#Rebuilding%5Fpackages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ourway.keybase.pub/mathematics%5Fcheat%5Fsheet.pdf&#34;&gt;https://ourway.keybase.pub/mathematics%5Fcheat%5Fsheet.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ai&#34;&gt;AI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Jnunp-EymJQ&amp;amp;feature=youtu.be&#34;&gt;Flexible ML Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1801.01442.pdf&#34;&gt;https://arxiv.org/pdf/1801.01442.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;common-lisp&#34;&gt;Common Lisp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt; 包管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ultralisp.org/&#34;&gt;Ultralisp&lt;/a&gt; 包管理增强&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/takagi/lake&#34;&gt;Lake&lt;/a&gt; 类似 Makefile 的 Common Lisp 工具&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
